
Siddhartha_Altronic_DE-4000_POC_RS485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb0  08019de0  08019de0  00029de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cd90  0801cd90  0002cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801cd98  0801cd98  0002cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cda0  0801cda0  0002cda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000336c  20000000  0801cda4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003336c  2**0
                  CONTENTS
  8 .bss          0000f4c0  2000336c  2000336c  0003336c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2001282c  2001282c  0003336c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003336c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00093079  00000000  00000000  0003339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000d96f  00000000  00000000  000c6415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00027f8e  00000000  00000000  000d3d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002898  00000000  00000000  000fbd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d50  00000000  00000000  000fe5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d30b  00000000  00000000  00101300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005e3a0  00000000  00000000  0013e60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c685  00000000  00000000  0019c9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002b9030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b78  00000000  00000000  002b9084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000336c 	.word	0x2000336c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019dc8 	.word	0x08019dc8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20003370 	.word	0x20003370
 80001ec:	08019dc8 	.word	0x08019dc8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_InitTick+0x40>)
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	fbb3 f3f0 	udiv	r3, r3, r0
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <HAL_InitTick+0x44>)
 800103e:	6810      	ldr	r0, [r2, #0]
 8001040:	fbb0 f0f3 	udiv	r0, r0, r3
 8001044:	f000 fce4 	bl	8001a10 <HAL_SYSTICK_Config>
 8001048:	b968      	cbnz	r0, 8001066 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	2c0f      	cmp	r4, #15
 800104c:	d901      	bls.n	8001052 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
 8001050:	e00a      	b.n	8001068 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001052:	2200      	movs	r2, #0
 8001054:	4621      	mov	r1, r4
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	f000 fc97 	bl	800198c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_InitTick+0x40>)
 8001060:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2000      	movs	r0, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001066:	2001      	movs	r0, #1
}
 8001068:	bd10      	pop	{r4, pc}
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000
 8001070:	20002954 	.word	0x20002954

08001074 <HAL_Init>:
{
 8001074:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x30>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800107e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001086:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800108e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 fc69 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ffc8 	bl	800102c <HAL_InitTick>
  HAL_MspInit();
 800109c:	f010 faa2 	bl	80115e4 <HAL_MspInit>
}
 80010a0:	2000      	movs	r0, #0
 80010a2:	bd08      	pop	{r3, pc}
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_IncTick+0x10>)
 80010aa:	6811      	ldr	r1, [r2, #0]
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_IncTick+0x14>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	440b      	add	r3, r1
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200044b4 	.word	0x200044b4
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010c0:	4b01      	ldr	r3, [pc, #4]	; (80010c8 <HAL_GetTick+0x8>)
 80010c2:	6818      	ldr	r0, [r3, #0]
}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200044b4 	.word	0x200044b4

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff fff6 	bl	80010c0 <HAL_GetTick>
 80010d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80010da:	d002      	beq.n	80010e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_Delay+0x24>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	f7ff ffed 	bl	80010c0 <HAL_GetTick>
 80010e6:	1b40      	subs	r0, r0, r5
 80010e8:	42a0      	cmp	r0, r4
 80010ea:	d3fa      	bcc.n	80010e2 <HAL_Delay+0x16>
  {
  }
}
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop
 80010f0:	20000000 	.word	0x20000000

080010f4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <ADC_Init+0x12c>)
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80010fc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	6841      	ldr	r1, [r0, #4]
 8001102:	430a      	orrs	r2, r1
 8001104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001106:	6802      	ldr	r2, [r0, #0]
 8001108:	6853      	ldr	r3, [r2, #4]
 800110a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800110e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001110:	6802      	ldr	r2, [r0, #0]
 8001112:	6853      	ldr	r3, [r2, #4]
 8001114:	6901      	ldr	r1, [r0, #16]
 8001116:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800111a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800111c:	6802      	ldr	r2, [r0, #0]
 800111e:	6853      	ldr	r3, [r2, #4]
 8001120:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001124:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001126:	6802      	ldr	r2, [r0, #0]
 8001128:	6853      	ldr	r3, [r2, #4]
 800112a:	6881      	ldr	r1, [r0, #8]
 800112c:	430b      	orrs	r3, r1
 800112e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001130:	6802      	ldr	r2, [r0, #0]
 8001132:	6893      	ldr	r3, [r2, #8]
 8001134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001138:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800113a:	6802      	ldr	r2, [r0, #0]
 800113c:	6893      	ldr	r3, [r2, #8]
 800113e:	68c1      	ldr	r1, [r0, #12]
 8001140:	430b      	orrs	r3, r1
 8001142:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001144:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <ADC_Init+0x130>)
 8001148:	429a      	cmp	r2, r3
 800114a:	d057      	beq.n	80011fc <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800114c:	6802      	ldr	r2, [r0, #0]
 800114e:	6893      	ldr	r3, [r2, #8]
 8001150:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001154:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001156:	6802      	ldr	r2, [r0, #0]
 8001158:	6893      	ldr	r3, [r2, #8]
 800115a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800115c:	430b      	orrs	r3, r1
 800115e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	6893      	ldr	r3, [r2, #8]
 8001164:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001168:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	6893      	ldr	r3, [r2, #8]
 800116e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001170:	430b      	orrs	r3, r1
 8001172:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001174:	6802      	ldr	r2, [r0, #0]
 8001176:	6893      	ldr	r3, [r2, #8]
 8001178:	f023 0302 	bic.w	r3, r3, #2
 800117c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800117e:	6802      	ldr	r2, [r0, #0]
 8001180:	6893      	ldr	r3, [r2, #8]
 8001182:	7e01      	ldrb	r1, [r0, #24]
 8001184:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001188:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800118a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d03f      	beq.n	8001212 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001192:	6802      	ldr	r2, [r0, #0]
 8001194:	6853      	ldr	r3, [r2, #4]
 8001196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119a:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800119c:	6802      	ldr	r2, [r0, #0]
 800119e:	6853      	ldr	r3, [r2, #4]
 80011a0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011a4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011a6:	6801      	ldr	r1, [r0, #0]
 80011a8:	684b      	ldr	r3, [r1, #4]
 80011aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80011ac:	3a01      	subs	r2, #1
 80011ae:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80011b2:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011b4:	6802      	ldr	r2, [r0, #0]
 80011b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80011bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80011be:	6801      	ldr	r1, [r0, #0]
 80011c0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80011c2:	69c2      	ldr	r2, [r0, #28]
 80011c4:	3a01      	subs	r2, #1
 80011c6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80011ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	6893      	ldr	r3, [r2, #8]
 80011d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011d4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80011d6:	6802      	ldr	r2, [r0, #0]
 80011d8:	6893      	ldr	r3, [r2, #8]
 80011da:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80011de:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80011e2:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	6893      	ldr	r3, [r2, #8]
 80011e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011ec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80011ee:	6802      	ldr	r2, [r0, #0]
 80011f0:	6893      	ldr	r3, [r2, #8]
 80011f2:	6941      	ldr	r1, [r0, #20]
 80011f4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80011f8:	6093      	str	r3, [r2, #8]
}
 80011fa:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	6893      	ldr	r3, [r2, #8]
 8001200:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001204:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001206:	6802      	ldr	r2, [r0, #0]
 8001208:	6893      	ldr	r3, [r2, #8]
 800120a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800120e:	6093      	str	r3, [r2, #8]
 8001210:	e7b0      	b.n	8001174 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001212:	6802      	ldr	r2, [r0, #0]
 8001214:	6853      	ldr	r3, [r2, #4]
 8001216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800121a:	6053      	str	r3, [r2, #4]
 800121c:	e7ca      	b.n	80011b4 <ADC_Init+0xc0>
 800121e:	bf00      	nop
 8001220:	40012300 	.word	0x40012300
 8001224:	0f000001 	.word	0x0f000001

08001228 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001228:	b338      	cbz	r0, 800127a <HAL_ADC_Init+0x52>
{
 800122a:	b510      	push	{r4, lr}
 800122c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800122e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001230:	b143      	cbz	r3, 8001244 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001234:	f013 0f10 	tst.w	r3, #16
 8001238:	d00b      	beq.n	8001252 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800123a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800123c:	2300      	movs	r3, #0
 800123e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001242:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001244:	f00b fa8a 	bl	800c75c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	2300      	movs	r3, #0
 800124a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800124c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001250:	e7ef      	b.n	8001232 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001258:	f023 0302 	bic.w	r3, r3, #2
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff46 	bl	80010f4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001268:	2000      	movs	r0, #0
 800126a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800126c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6423      	str	r3, [r4, #64]	; 0x40
 8001278:	e7e0      	b.n	800123c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
}
 800127c:	4770      	bx	lr
	...

08001280 <HAL_ADC_Start_IT>:
{
 8001280:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001286:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	f000 8090 	beq.w	80013b0 <HAL_ADC_Start_IT+0x130>
 8001290:	2301      	movs	r3, #1
 8001292:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001296:	6803      	ldr	r3, [r0, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	f012 0f01 	tst.w	r2, #1
 800129e:	d113      	bne.n	80012c8 <HAL_ADC_Start_IT+0x48>
    __HAL_ADC_ENABLE(hadc);
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a8:	4b44      	ldr	r3, [pc, #272]	; (80013bc <HAL_ADC_Start_IT+0x13c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <HAL_ADC_Start_IT+0x140>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9b      	lsrs	r3, r3, #18
 80012b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012b8:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80012ba:	e002      	b.n	80012c2 <HAL_ADC_Start_IT+0x42>
      counter--;
 80012bc:	9b01      	ldr	r3, [sp, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80012c2:	9b01      	ldr	r3, [sp, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f9      	bne.n	80012bc <HAL_ADC_Start_IT+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	6893      	ldr	r3, [r2, #8]
 80012cc:	f013 0f01 	tst.w	r3, #1
 80012d0:	d063      	beq.n	800139a <HAL_ADC_Start_IT+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 80012d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e2:	6853      	ldr	r3, [r2, #4]
 80012e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80012e8:	d005      	beq.n	80012f6 <HAL_ADC_Start_IT+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f4:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012f8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80012fc:	d022      	beq.n	8001344 <HAL_ADC_Start_IT+0xc4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001300:	f023 0306 	bic.w	r3, r3, #6
 8001304:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001306:	2300      	movs	r3, #0
 8001308:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800130c:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8001310:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001312:	6802      	ldr	r2, [r0, #0]
 8001314:	6853      	ldr	r3, [r2, #4]
 8001316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_ADC_Start_IT+0x144>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f013 0f1f 	tst.w	r3, #31
 8001328:	d127      	bne.n	800137a <HAL_ADC_Start_IT+0xfa>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800132a:	6803      	ldr	r3, [r0, #0]
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <HAL_ADC_Start_IT+0x148>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d011      	beq.n	8001356 <HAL_ADC_Start_IT+0xd6>
 8001332:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_ADC_Start_IT+0xca>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_ADC_Start_IT+0x14c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d014      	beq.n	800136a <HAL_ADC_Start_IT+0xea>
  return HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	e033      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
      ADC_CLEAR_ERRORCODE(hadc);
 8001344:	2300      	movs	r3, #0
 8001346:	6443      	str	r3, [r0, #68]	; 0x44
 8001348:	e7dd      	b.n	8001306 <HAL_ADC_Start_IT+0x86>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800134a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800134e:	6852      	ldr	r2, [r2, #4]
 8001350:	f012 0f1f 	tst.w	r2, #31
 8001354:	d1f1      	bne.n	800133a <HAL_ADC_Start_IT+0xba>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800135c:	d12a      	bne.n	80013b4 <HAL_ADC_Start_IT+0x134>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001366:	2000      	movs	r0, #0
 8001368:	e020      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800136a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800136e:	6852      	ldr	r2, [r2, #4]
 8001370:	f012 0f10 	tst.w	r2, #16
 8001374:	d0ef      	beq.n	8001356 <HAL_ADC_Start_IT+0xd6>
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
 8001378:	e018      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800137a:	6803      	ldr	r3, [r0, #0]
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_ADC_Start_IT+0x148>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d001      	beq.n	8001386 <HAL_ADC_Start_IT+0x106>
  return HAL_OK;
 8001382:	2000      	movs	r0, #0
 8001384:	e012      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800138c:	d114      	bne.n	80013b8 <HAL_ADC_Start_IT+0x138>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001394:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001396:	2000      	movs	r0, #0
 8001398:	e008      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	6403      	str	r3, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6443      	str	r3, [r0, #68]	; 0x44
  return HAL_OK;
 80013aa:	2000      	movs	r0, #0
}
 80013ac:	b002      	add	sp, #8
 80013ae:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80013b0:	2002      	movs	r0, #2
 80013b2:	e7fb      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
  return HAL_OK;
 80013b4:	2000      	movs	r0, #0
 80013b6:	e7f9      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7f7      	b.n	80013ac <HAL_ADC_Start_IT+0x12c>
 80013bc:	20002954 	.word	0x20002954
 80013c0:	431bde83 	.word	0x431bde83
 80013c4:	40012300 	.word	0x40012300
 80013c8:	40012000 	.word	0x40012000
 80013cc:	40012200 	.word	0x40012200

080013d0 <HAL_ADC_Start_DMA>:
{
 80013d0:	b510      	push	{r4, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80013d6:	2200      	movs	r2, #0
 80013d8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80013da:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80013de:	2a01      	cmp	r2, #1
 80013e0:	f000 80ae 	beq.w	8001540 <HAL_ADC_Start_DMA+0x170>
 80013e4:	4604      	mov	r4, r0
 80013e6:	2201      	movs	r2, #1
 80013e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ec:	6802      	ldr	r2, [r0, #0]
 80013ee:	6890      	ldr	r0, [r2, #8]
 80013f0:	f010 0f01 	tst.w	r0, #1
 80013f4:	d113      	bne.n	800141e <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80013f6:	6890      	ldr	r0, [r2, #8]
 80013f8:	f040 0001 	orr.w	r0, r0, #1
 80013fc:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fe:	4a53      	ldr	r2, [pc, #332]	; (800154c <HAL_ADC_Start_DMA+0x17c>)
 8001400:	6810      	ldr	r0, [r2, #0]
 8001402:	4a53      	ldr	r2, [pc, #332]	; (8001550 <HAL_ADC_Start_DMA+0x180>)
 8001404:	fba2 2000 	umull	r2, r0, r2, r0
 8001408:	0c80      	lsrs	r0, r0, #18
 800140a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800140e:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8001412:	9801      	ldr	r0, [sp, #4]
 8001414:	3801      	subs	r0, #1
 8001416:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001418:	9801      	ldr	r0, [sp, #4]
 800141a:	2800      	cmp	r0, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800141e:	6822      	ldr	r2, [r4, #0]
 8001420:	6890      	ldr	r0, [r2, #8]
 8001422:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001426:	d003      	beq.n	8001430 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001428:	6890      	ldr	r0, [r2, #8]
 800142a:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800142e:	6090      	str	r0, [r2, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001430:	6822      	ldr	r2, [r4, #0]
 8001432:	6890      	ldr	r0, [r2, #8]
 8001434:	f010 0f01 	tst.w	r0, #1
 8001438:	d077      	beq.n	800152a <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 800143a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800143c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001440:	f020 0001 	bic.w	r0, r0, #1
 8001444:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001448:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800144a:	6852      	ldr	r2, [r2, #4]
 800144c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001450:	d005      	beq.n	800145e <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001452:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001454:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800145c:	6422      	str	r2, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800145e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001460:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001464:	d036      	beq.n	80014d4 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001466:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001468:	f022 0206 	bic.w	r2, r2, #6
 800146c:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800146e:	2200      	movs	r2, #0
 8001470:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001474:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001476:	4837      	ldr	r0, [pc, #220]	; (8001554 <HAL_ADC_Start_DMA+0x184>)
 8001478:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800147a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800147c:	4836      	ldr	r0, [pc, #216]	; (8001558 <HAL_ADC_Start_DMA+0x188>)
 800147e:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001480:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001482:	4836      	ldr	r0, [pc, #216]	; (800155c <HAL_ADC_Start_DMA+0x18c>)
 8001484:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800148c:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800148e:	6820      	ldr	r0, [r4, #0]
 8001490:	6842      	ldr	r2, [r0, #4]
 8001492:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001496:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001498:	6820      	ldr	r0, [r4, #0]
 800149a:	6882      	ldr	r2, [r0, #8]
 800149c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a0:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a2:	6820      	ldr	r0, [r4, #0]
 80014a4:	460a      	mov	r2, r1
 80014a6:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 80014aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80014ac:	f000 fbac 	bl	8001c08 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_ADC_Start_DMA+0x190>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f013 0f1f 	tst.w	r3, #31
 80014b8:	d127      	bne.n	800150a <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	4a29      	ldr	r2, [pc, #164]	; (8001564 <HAL_ADC_Start_DMA+0x194>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d011      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x116>
 80014c2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_ADC_Start_DMA+0x10a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014ca:	4a27      	ldr	r2, [pc, #156]	; (8001568 <HAL_ADC_Start_DMA+0x198>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d014      	beq.n	80014fa <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 80014d0:	2000      	movs	r0, #0
 80014d2:	e033      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6462      	str	r2, [r4, #68]	; 0x44
 80014d8:	e7c9      	b.n	800146e <HAL_ADC_Start_DMA+0x9e>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014da:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80014de:	6852      	ldr	r2, [r2, #4]
 80014e0:	f012 0f1f 	tst.w	r2, #31
 80014e4:	d1f1      	bne.n	80014ca <HAL_ADC_Start_DMA+0xfa>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80014ec:	d12a      	bne.n	8001544 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80014f6:	2000      	movs	r0, #0
 80014f8:	e020      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014fa:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80014fe:	6852      	ldr	r2, [r2, #4]
 8001500:	f012 0f10 	tst.w	r2, #16
 8001504:	d0ef      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 8001506:	2000      	movs	r0, #0
 8001508:	e018      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	4a15      	ldr	r2, [pc, #84]	; (8001564 <HAL_ADC_Start_DMA+0x194>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d001      	beq.n	8001516 <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 8001512:	2000      	movs	r0, #0
 8001514:	e012      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800151c:	d114      	bne.n	8001548 <HAL_ADC_Start_DMA+0x178>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001526:	2000      	movs	r0, #0
 8001528:	e008      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001532:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800153a:	2000      	movs	r0, #0
}
 800153c:	b002      	add	sp, #8
 800153e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001540:	2002      	movs	r0, #2
 8001542:	e7fb      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	e7f9      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
 8001548:	2000      	movs	r0, #0
 800154a:	e7f7      	b.n	800153c <HAL_ADC_Start_DMA+0x16c>
 800154c:	20002954 	.word	0x20002954
 8001550:	431bde83 	.word	0x431bde83
 8001554:	0800174d 	.word	0x0800174d
 8001558:	080015e7 	.word	0x080015e7
 800155c:	08001737 	.word	0x08001737
 8001560:	40012300 	.word	0x40012300
 8001564:	40012000 	.word	0x40012000
 8001568:	40012200 	.word	0x40012200

0800156c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800156c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001570:	2b01      	cmp	r3, #1
 8001572:	d035      	beq.n	80015e0 <HAL_ADC_Stop_DMA+0x74>
{
 8001574:	b510      	push	{r4, lr}
 8001576:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001578:	2301      	movs	r3, #1
 800157a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800157e:	6802      	ldr	r2, [r0, #0]
 8001580:	6893      	ldr	r3, [r2, #8]
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001588:	6803      	ldr	r3, [r0, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	f012 0f01 	tst.w	r2, #1
 8001590:	d124      	bne.n	80015dc <HAL_ADC_Stop_DMA+0x70>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001598:	609a      	str	r2, [r3, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800159a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800159c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d011      	beq.n	80015ca <HAL_ADC_Stop_DMA+0x5e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a6:	2000      	movs	r0, #0
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	6853      	ldr	r3, [r2, #4]
 80015ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80015b0:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80015b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80015c2:	2300      	movs	r3, #0
 80015c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80015c8:	bd10      	pop	{r4, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80015ca:	f000 fb52 	bl	8001c72 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d0ea      	beq.n	80015a8 <HAL_ADC_Stop_DMA+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d8:	6423      	str	r3, [r4, #64]	; 0x40
 80015da:	e7e5      	b.n	80015a8 <HAL_ADC_Stop_DMA+0x3c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015dc:	2000      	movs	r0, #0
 80015de:	e7f0      	b.n	80015c2 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 80015e0:	2002      	movs	r0, #2
}
 80015e2:	4770      	bx	lr

080015e4 <HAL_ADC_ConvHalfCpltCallback>:
}
 80015e4:	4770      	bx	lr

080015e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015e6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015ea:	f7ff fffb 	bl	80015e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ee:	bd08      	pop	{r3, pc}

080015f0 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80015f0:	4770      	bx	lr

080015f2 <HAL_ADC_ErrorCallback>:
}
 80015f2:	4770      	bx	lr

080015f4 <HAL_ADC_IRQHandler>:
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015fc:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 80015fe:	f016 0f02 	tst.w	r6, #2
 8001602:	d02f      	beq.n	8001664 <HAL_ADC_IRQHandler+0x70>
 8001604:	f005 0220 	and.w	r2, r5, #32
 8001608:	b362      	cbz	r2, 8001664 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800160a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800160c:	f012 0f10 	tst.w	r2, #16
 8001610:	d103      	bne.n	800161a <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001612:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001618:	6402      	str	r2, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001620:	d119      	bne.n	8001656 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001622:	7e22      	ldrb	r2, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001624:	b9ba      	cbnz	r2, 8001656 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001628:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800162c:	d003      	beq.n	8001636 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800162e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001630:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001634:	d10f      	bne.n	8001656 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	f022 0220 	bic.w	r2, r2, #32
 800163c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800163e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001644:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001648:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800164c:	d103      	bne.n	8001656 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800164e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001656:	4620      	mov	r0, r4
 8001658:	f010 fb5c 	bl	8011d14 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	f06f 0212 	mvn.w	r2, #18
 8001662:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001664:	f005 0380 	and.w	r3, r5, #128	; 0x80
  if(tmp1 && tmp2)
 8001668:	f016 0f04 	tst.w	r6, #4
 800166c:	d037      	beq.n	80016de <HAL_ADC_IRQHandler+0xea>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d035      	beq.n	80016de <HAL_ADC_IRQHandler+0xea>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001674:	f013 0f10 	tst.w	r3, #16
 8001678:	d103      	bne.n	8001682 <HAL_ADC_IRQHandler+0x8e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800167a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800167c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001680:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800168a:	d121      	bne.n	80016d0 <HAL_ADC_IRQHandler+0xdc>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800168c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800168e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001692:	d003      	beq.n	800169c <HAL_ADC_IRQHandler+0xa8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001694:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001696:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800169a:	d119      	bne.n	80016d0 <HAL_ADC_IRQHandler+0xdc>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800169c:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800169e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80016a2:	d115      	bne.n	80016d0 <HAL_ADC_IRQHandler+0xdc>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016a4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016a6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80016aa:	d111      	bne.n	80016d0 <HAL_ADC_IRQHandler+0xdc>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80016ac:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016ae:	b97a      	cbnz	r2, 80016d0 <HAL_ADC_IRQHandler+0xdc>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016be:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016c6:	d103      	bne.n	80016d0 <HAL_ADC_IRQHandler+0xdc>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016d0:	4620      	mov	r0, r4
 80016d2:	f000 f947 	bl	8001964 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f06f 020c 	mvn.w	r2, #12
 80016dc:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80016de:	f005 0340 	and.w	r3, r5, #64	; 0x40
  if(tmp1 && tmp2)
 80016e2:	f016 0f01 	tst.w	r6, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x100>
 80016e8:	b123      	cbz	r3, 80016f4 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f013 0f01 	tst.w	r3, #1
 80016f2:	d106      	bne.n	8001702 <HAL_ADC_IRQHandler+0x10e>
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80016f4:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 80016f8:	f016 0f20 	tst.w	r6, #32
 80016fc:	d000      	beq.n	8001700 <HAL_ADC_IRQHandler+0x10c>
 80016fe:	b965      	cbnz	r5, 800171a <HAL_ADC_IRQHandler+0x126>
}
 8001700:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff70 	bl	80015f0 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	f06f 0201 	mvn.w	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e7ec      	b.n	80016f4 <HAL_ADC_IRQHandler+0x100>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800171a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	f06f 0520 	mvn.w	r5, #32
 8001728:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff ff61 	bl	80015f2 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	601d      	str	r5, [r3, #0]
}
 8001734:	e7e4      	b.n	8001700 <HAL_ADC_IRQHandler+0x10c>

08001736 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001736:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001738:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800173a:	2340      	movs	r3, #64	; 0x40
 800173c:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800173e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001746:	f7ff ff54 	bl	80015f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800174a:	bd08      	pop	{r3, pc}

0800174c <ADC_DMAConvCplt>:
{
 800174c:	b508      	push	{r3, lr}
 800174e:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001750:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001752:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001754:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001758:	d125      	bne.n	80017a6 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800175a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800175c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001760:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001762:	6803      	ldr	r3, [r0, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800176a:	d119      	bne.n	80017a0 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800176c:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800176e:	b9ba      	cbnz	r2, 80017a0 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001772:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001776:	d003      	beq.n	8001780 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001778:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800177a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800177e:	d10f      	bne.n	80017a0 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	f022 0220 	bic.w	r2, r2, #32
 8001786:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001788:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800178a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800178e:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001790:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001792:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001796:	d103      	bne.n	80017a0 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001798:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80017a0:	f010 fab8 	bl	8011d14 <HAL_ADC_ConvCpltCallback>
}
 80017a4:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80017a8:	f012 0f10 	tst.w	r2, #16
 80017ac:	d104      	bne.n	80017b8 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80017b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017b2:	4618      	mov	r0, r3
 80017b4:	4790      	blx	r2
}
 80017b6:	e7f5      	b.n	80017a4 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80017b8:	f7ff ff1b 	bl	80015f2 <HAL_ADC_ErrorCallback>
 80017bc:	e7f2      	b.n	80017a4 <ADC_DMAConvCplt+0x58>
	...

080017c0 <HAL_ADC_ConfigChannel>:
{
 80017c0:	b430      	push	{r4, r5}
 80017c2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80017c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f000 80bd 	beq.w	800194c <HAL_ADC_ConfigChannel+0x18c>
 80017d2:	2301      	movs	r3, #1
 80017d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d8:	680b      	ldr	r3, [r1, #0]
 80017da:	2b09      	cmp	r3, #9
 80017dc:	d93e      	bls.n	800185c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017de:	6805      	ldr	r5, [r0, #0]
 80017e0:	68ea      	ldr	r2, [r5, #12]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017e8:	3b1e      	subs	r3, #30
 80017ea:	2407      	movs	r4, #7
 80017ec:	fa04 f303 	lsl.w	r3, r4, r3
 80017f0:	ea22 0303 	bic.w	r3, r2, r3
 80017f4:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017f6:	6805      	ldr	r5, [r0, #0]
 80017f8:	68ea      	ldr	r2, [r5, #12]
 80017fa:	688c      	ldr	r4, [r1, #8]
 80017fc:	880b      	ldrh	r3, [r1, #0]
 80017fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001802:	3b1e      	subs	r3, #30
 8001804:	fa04 f303 	lsl.w	r3, r4, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 800180c:	684b      	ldr	r3, [r1, #4]
 800180e:	2b06      	cmp	r3, #6
 8001810:	d83a      	bhi.n	8001888 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001812:	6805      	ldr	r5, [r0, #0]
 8001814:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001816:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800181a:	3b05      	subs	r3, #5
 800181c:	241f      	movs	r4, #31
 800181e:	fa04 f303 	lsl.w	r3, r4, r3
 8001822:	ea22 0303 	bic.w	r3, r2, r3
 8001826:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001828:	6805      	ldr	r5, [r0, #0]
 800182a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800182c:	684b      	ldr	r3, [r1, #4]
 800182e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001832:	3b05      	subs	r3, #5
 8001834:	880c      	ldrh	r4, [r1, #0]
 8001836:	fa04 f303 	lsl.w	r3, r4, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800183e:	6802      	ldr	r2, [r0, #0]
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_ADC_ConfigChannel+0x190>)
 8001842:	429a      	cmp	r2, r3
 8001844:	d050      	beq.n	80018e8 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001846:	6802      	ldr	r2, [r0, #0]
 8001848:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_ADC_ConfigChannel+0x190>)
 800184a:	429a      	cmp	r2, r3
 800184c:	d059      	beq.n	8001902 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 800184e:	2300      	movs	r3, #0
 8001850:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001854:	4618      	mov	r0, r3
}
 8001856:	b002      	add	sp, #8
 8001858:	bc30      	pop	{r4, r5}
 800185a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800185c:	6805      	ldr	r5, [r0, #0]
 800185e:	692a      	ldr	r2, [r5, #16]
 8001860:	b29b      	uxth	r3, r3
 8001862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001866:	2407      	movs	r4, #7
 8001868:	fa04 f303 	lsl.w	r3, r4, r3
 800186c:	ea22 0303 	bic.w	r3, r2, r3
 8001870:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001872:	6805      	ldr	r5, [r0, #0]
 8001874:	692a      	ldr	r2, [r5, #16]
 8001876:	688c      	ldr	r4, [r1, #8]
 8001878:	880b      	ldrh	r3, [r1, #0]
 800187a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800187e:	fa04 f303 	lsl.w	r3, r4, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	612b      	str	r3, [r5, #16]
 8001886:	e7c1      	b.n	800180c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001888:	2b0c      	cmp	r3, #12
 800188a:	d816      	bhi.n	80018ba <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800188c:	6805      	ldr	r5, [r0, #0]
 800188e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001894:	3b23      	subs	r3, #35	; 0x23
 8001896:	241f      	movs	r4, #31
 8001898:	fa04 f303 	lsl.w	r3, r4, r3
 800189c:	ea22 0303 	bic.w	r3, r2, r3
 80018a0:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018a2:	6805      	ldr	r5, [r0, #0]
 80018a4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018a6:	684b      	ldr	r3, [r1, #4]
 80018a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018ac:	3b23      	subs	r3, #35	; 0x23
 80018ae:	880c      	ldrh	r4, [r1, #0]
 80018b0:	fa04 f303 	lsl.w	r3, r4, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	632b      	str	r3, [r5, #48]	; 0x30
 80018b8:	e7c1      	b.n	800183e <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ba:	6805      	ldr	r5, [r0, #0]
 80018bc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80018be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018c2:	3b41      	subs	r3, #65	; 0x41
 80018c4:	241f      	movs	r4, #31
 80018c6:	fa04 f303 	lsl.w	r3, r4, r3
 80018ca:	ea22 0303 	bic.w	r3, r2, r3
 80018ce:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018d0:	6805      	ldr	r5, [r0, #0]
 80018d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80018d4:	684b      	ldr	r3, [r1, #4]
 80018d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018da:	3b41      	subs	r3, #65	; 0x41
 80018dc:	880c      	ldrh	r4, [r1, #0]
 80018de:	fa04 f303 	lsl.w	r3, r4, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80018e6:	e7aa      	b.n	800183e <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018e8:	680b      	ldr	r3, [r1, #0]
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d1ab      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_ADC_ConfigChannel+0x194>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80018f6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	e7a1      	b.n	8001846 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001902:	680b      	ldr	r3, [r1, #0]
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_ADC_ConfigChannel+0x198>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d001      	beq.n	800190e <HAL_ADC_ConfigChannel+0x14e>
 800190a:	2b11      	cmp	r3, #17
 800190c:	d19f      	bne.n	800184e <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_ADC_ConfigChannel+0x194>)
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001916:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800191e:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001920:	680a      	ldr	r2, [r1, #0]
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_ADC_ConfigChannel+0x198>)
 8001924:	429a      	cmp	r2, r3
 8001926:	d192      	bne.n	800184e <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_ADC_ConfigChannel+0x19c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_ADC_ConfigChannel+0x1a0>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800193c:	e002      	b.n	8001944 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 800193e:	9b01      	ldr	r3, [sp, #4]
 8001940:	3b01      	subs	r3, #1
 8001942:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001944:	9b01      	ldr	r3, [sp, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <HAL_ADC_ConfigChannel+0x17e>
 800194a:	e780      	b.n	800184e <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 800194c:	2002      	movs	r0, #2
 800194e:	e782      	b.n	8001856 <HAL_ADC_ConfigChannel+0x96>
 8001950:	40012000 	.word	0x40012000
 8001954:	40012300 	.word	0x40012300
 8001958:	10000012 	.word	0x10000012
 800195c:	20002954 	.word	0x20002954
 8001960:	431bde83 	.word	0x431bde83

08001964 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001964:	4770      	bx	lr
	...

08001968 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800196a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	0200      	lsls	r0, r0, #8
 8001976:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001984:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_NVIC_SetPriority+0x60>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001996:	f1c3 0407 	rsb	r4, r3, #7
 800199a:	2c04      	cmp	r4, #4
 800199c:	bf28      	it	cs
 800199e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a0:	1d1d      	adds	r5, r3, #4
 80019a2:	2d06      	cmp	r5, #6
 80019a4:	d918      	bls.n	80019d8 <HAL_NVIC_SetPriority+0x4c>
 80019a6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 35ff 	mov.w	r5, #4294967295
 80019ac:	fa05 f404 	lsl.w	r4, r5, r4
 80019b0:	ea21 0104 	bic.w	r1, r1, r4
 80019b4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b6:	fa05 f303 	lsl.w	r3, r5, r3
 80019ba:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019be:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80019c0:	2800      	cmp	r0, #0
 80019c2:	db0b      	blt.n	80019dc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	0109      	lsls	r1, r1, #4
 80019c6:	b2c9      	uxtb	r1, r1
 80019c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019d0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019d4:	bc30      	pop	{r4, r5}
 80019d6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d8:	2300      	movs	r3, #0
 80019da:	e7e5      	b.n	80019a8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	f000 000f 	and.w	r0, r0, #15
 80019e0:	0109      	lsls	r1, r1, #4
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <HAL_NVIC_SetPriority+0x64>)
 80019e6:	5419      	strb	r1, [r3, r0]
 80019e8:	e7f4      	b.n	80019d4 <HAL_NVIC_SetPriority+0x48>
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	e000ed14 	.word	0xe000ed14

080019f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019f4:	2800      	cmp	r0, #0
 80019f6:	db07      	blt.n	8001a08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f8:	f000 021f 	and.w	r2, r0, #31
 80019fc:	0940      	lsrs	r0, r0, #5
 80019fe:	2301      	movs	r3, #1
 8001a00:	4093      	lsls	r3, r2
 8001a02:	4a02      	ldr	r2, [pc, #8]	; (8001a0c <HAL_NVIC_EnableIRQ+0x18>)
 8001a04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	3801      	subs	r0, #1
 8001a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a16:	d20a      	bcs.n	8001a2e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_SYSTICK_Config+0x24>)
 8001a1a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <HAL_SYSTICK_Config+0x28>)
 8001a1e:	21f0      	movs	r1, #240	; 0xf0
 8001a20:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	2000      	movs	r0, #0
 8001a26:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a3c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a3e:	6805      	ldr	r5, [r0, #0]
 8001a40:	682c      	ldr	r4, [r5, #0]
 8001a42:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001a46:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a48:	6804      	ldr	r4, [r0, #0]
 8001a4a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a4c:	6883      	ldr	r3, [r0, #8]
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	d005      	beq.n	8001a5e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001a52:	6803      	ldr	r3, [r0, #0]
 8001a54:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001a56:	6803      	ldr	r3, [r0, #0]
 8001a58:	60da      	str	r2, [r3, #12]
  }
}
 8001a5a:	bc30      	pop	{r4, r5}
 8001a5c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001a5e:	6803      	ldr	r3, [r0, #0]
 8001a60:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001a62:	6803      	ldr	r3, [r0, #0]
 8001a64:	60d9      	str	r1, [r3, #12]
 8001a66:	e7f8      	b.n	8001a5a <DMA_SetConfig+0x1e>

08001a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a68:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a6a:	6803      	ldr	r3, [r0, #0]
 8001a6c:	b2d9      	uxtb	r1, r3
 8001a6e:	3910      	subs	r1, #16
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001a72:	fba2 4201 	umull	r4, r2, r2, r1
 8001a76:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a78:	4c0b      	ldr	r4, [pc, #44]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x40>)
 8001a7a:	5ca2      	ldrb	r2, [r4, r2]
 8001a7c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a7e:	295f      	cmp	r1, #95	; 0x5f
 8001a80:	d909      	bls.n	8001a96 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001a8e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a94:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	6583      	str	r3, [r0, #88]	; 0x58
 8001aa0:	e7f5      	b.n	8001a8e <DMA_CalcBaseAndBitshift+0x26>
 8001aa2:	bf00      	nop
 8001aa4:	aaaaaaab 	.word	0xaaaaaaab
 8001aa8:	08019de0 	.word	0x08019de0

08001aac <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aac:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aae:	6982      	ldr	r2, [r0, #24]
 8001ab0:	b992      	cbnz	r2, 8001ad8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d00a      	beq.n	8001acc <DMA_CheckFifoParam+0x20>
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d002      	beq.n	8001ac0 <DMA_CheckFifoParam+0x14>
 8001aba:	b10b      	cbz	r3, 8001ac0 <DMA_CheckFifoParam+0x14>
 8001abc:	2000      	movs	r0, #0
 8001abe:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ac2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001ac6:	d128      	bne.n	8001b1a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ac8:	2000      	movs	r0, #0
 8001aca:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001acc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ad2:	d024      	beq.n	8001b1e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ad8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001adc:	d009      	beq.n	8001af2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d925      	bls.n	8001b2e <DMA_CheckFifoParam+0x82>
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d125      	bne.n	8001b32 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ae8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001aec:	d123      	bne.n	8001b36 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	2000      	movs	r0, #0
 8001af0:	4770      	bx	lr
    switch (tmp)
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d803      	bhi.n	8001afe <DMA_CheckFifoParam+0x52>
 8001af6:	e8df f003 	tbb	[pc, r3]
 8001afa:	0414      	.short	0x0414
 8001afc:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001afe:	2000      	movs	r0, #0
 8001b00:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001b08:	d10d      	bne.n	8001b26 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b14:	d009      	beq.n	8001b2a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001b16:	2000      	movs	r0, #0
 8001b18:	4770      	bx	lr
        status = HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	4770      	bx	lr
        status = HAL_ERROR;
 8001b1e:	2001      	movs	r0, #1
 8001b20:	4770      	bx	lr
      status = HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
 8001b24:	4770      	bx	lr
        status = HAL_ERROR;
 8001b26:	2001      	movs	r0, #1
 8001b28:	4770      	bx	lr
        status = HAL_ERROR;
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	4770      	bx	lr
      status = HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	4770      	bx	lr
    switch (tmp)
 8001b32:	2000      	movs	r0, #0
 8001b34:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_DMA_Init>:
{
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fabe 	bl	80010c0 <HAL_GetTick>
  if(hdma == NULL)
 8001b44:	2c00      	cmp	r4, #0
 8001b46:	d05b      	beq.n	8001c00 <HAL_DMA_Init+0xc4>
 8001b48:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001b50:	2300      	movs	r3, #0
 8001b52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f012 0f01 	tst.w	r2, #1
 8001b68:	d00a      	beq.n	8001b80 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6a:	f7ff faa9 	bl	80010c0 <HAL_GetTick>
 8001b6e:	1b43      	subs	r3, r0, r5
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d9f5      	bls.n	8001b60 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b74:	2320      	movs	r3, #32
 8001b76:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001b80:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b82:	4820      	ldr	r0, [pc, #128]	; (8001c04 <HAL_DMA_Init+0xc8>)
 8001b84:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b86:	6861      	ldr	r1, [r4, #4]
 8001b88:	68a2      	ldr	r2, [r4, #8]
 8001b8a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b90:	6921      	ldr	r1, [r4, #16]
 8001b92:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b94:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b96:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b98:	69a1      	ldr	r1, [r4, #24]
 8001b9a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba0:	6a21      	ldr	r1, [r4, #32]
 8001ba2:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ba8:	2904      	cmp	r1, #4
 8001baa:	d01e      	beq.n	8001bea <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001bac:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001bae:	6826      	ldr	r6, [r4, #0]
 8001bb0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bb8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d107      	bne.n	8001bce <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001bbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bc0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bc4:	b11b      	cbz	r3, 8001bce <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff ff70 	bl	8001aac <DMA_CheckFifoParam>
 8001bcc:	b990      	cbnz	r0, 8001bf4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001bce:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff ff49 	bl	8001a68 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bd8:	233f      	movs	r3, #63	; 0x3f
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bde:	2000      	movs	r0, #0
 8001be0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001be8:	e7c9      	b.n	8001b7e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bee:	4301      	orrs	r1, r0
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	e7db      	b.n	8001bac <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf4:	2340      	movs	r3, #64	; 0x40
 8001bf6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001bfe:	e7be      	b.n	8001b7e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	e7bc      	b.n	8001b7e <HAL_DMA_Init+0x42>
 8001c04:	f010803f 	.word	0xf010803f

08001c08 <HAL_DMA_Start_IT>:
{
 8001c08:	b538      	push	{r3, r4, r5, lr}
 8001c0a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001c0e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001c12:	2801      	cmp	r0, #1
 8001c14:	d02b      	beq.n	8001c6e <HAL_DMA_Start_IT+0x66>
 8001c16:	2001      	movs	r0, #1
 8001c18:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c1c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001c20:	b2c0      	uxtb	r0, r0
 8001c22:	2801      	cmp	r0, #1
 8001c24:	d004      	beq.n	8001c30 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001c26:	2300      	movs	r3, #0
 8001c28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001c2c:	2002      	movs	r0, #2
}
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c30:	2002      	movs	r0, #2
 8001c32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c36:	2000      	movs	r0, #0
 8001c38:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff fefe 	bl	8001a3c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c42:	233f      	movs	r3, #63	; 0x3f
 8001c44:	4093      	lsls	r3, r2
 8001c46:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	f043 0316 	orr.w	r3, r3, #22
 8001c50:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c54:	b123      	cbz	r3, 8001c60 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c60:	6822      	ldr	r2, [r4, #0]
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	e7df      	b.n	8001c2e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001c6e:	2002      	movs	r0, #2
 8001c70:	e7dd      	b.n	8001c2e <HAL_DMA_Start_IT+0x26>

08001c72 <HAL_DMA_Abort>:
{
 8001c72:	b570      	push	{r4, r5, r6, lr}
 8001c74:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c76:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff fa22 	bl	80010c0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d006      	beq.n	8001c94 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001c90:	2001      	movs	r0, #1
}
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
 8001c94:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f023 0316 	bic.w	r3, r3, #22
 8001c9e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca0:	6822      	ldr	r2, [r4, #0]
 8001ca2:	6953      	ldr	r3, [r2, #20]
 8001ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001caa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cac:	b1e3      	cbz	r3, 8001ce8 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	6813      	ldr	r3, [r2, #0]
 8001cb2:	f023 0308 	bic.w	r3, r3, #8
 8001cb6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f013 0f01 	tst.w	r3, #1
 8001cca:	d011      	beq.n	8001cf0 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ccc:	f7ff f9f8 	bl	80010c0 <HAL_GetTick>
 8001cd0:	1b43      	subs	r3, r0, r5
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d9f5      	bls.n	8001cc2 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001ce6:	e7d4      	b.n	8001c92 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1df      	bne.n	8001cae <HAL_DMA_Abort+0x3c>
 8001cee:	e7e3      	b.n	8001cb8 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cf2:	233f      	movs	r3, #63	; 0x3f
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8001d04:	e7c5      	b.n	8001c92 <HAL_DMA_Abort+0x20>

08001d06 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d003      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
 8001d16:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d18:	2305      	movs	r3, #5
 8001d1a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	6802      	ldr	r2, [r0, #0]
 8001d20:	6813      	ldr	r3, [r2, #0]
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001d28:	2000      	movs	r0, #0
}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DMA_IRQHandler>:
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d36:	4b72      	ldr	r3, [pc, #456]	; (8001f00 <HAL_DMA_IRQHandler+0x1d4>)
 8001d38:	681d      	ldr	r5, [r3, #0]
 8001d3a:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HAL_DMA_IRQHandler+0x1d8>)
 8001d3c:	fba3 3505 	umull	r3, r5, r3, r5
 8001d40:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001d44:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d46:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d48:	2308      	movs	r3, #8
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	4233      	tst	r3, r6
 8001d4e:	d010      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d50:	6803      	ldr	r3, [r0, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f012 0f04 	tst.w	r2, #4
 8001d58:	d00b      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f022 0204 	bic.w	r2, r2, #4
 8001d60:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d62:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d64:	2308      	movs	r3, #8
 8001d66:	4093      	lsls	r3, r2
 8001d68:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d74:	2301      	movs	r3, #1
 8001d76:	4093      	lsls	r3, r2
 8001d78:	4233      	tst	r3, r6
 8001d7a:	d009      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	6952      	ldr	r2, [r2, #20]
 8001d80:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d84:	d004      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d86:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d92:	2304      	movs	r3, #4
 8001d94:	4093      	lsls	r3, r2
 8001d96:	4233      	tst	r3, r6
 8001d98:	d009      	beq.n	8001dae <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	f012 0f02 	tst.w	r2, #2
 8001da2:	d004      	beq.n	8001dae <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001db0:	2310      	movs	r3, #16
 8001db2:	4093      	lsls	r3, r2
 8001db4:	4233      	tst	r3, r6
 8001db6:	d024      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001db8:	6822      	ldr	r2, [r4, #0]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f012 0f08 	tst.w	r2, #8
 8001dc0:	d01f      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dc2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001dcc:	d00d      	beq.n	8001dea <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001dd4:	d104      	bne.n	8001de0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dd8:	b19b      	cbz	r3, 8001e02 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4798      	blx	r3
 8001dde:	e010      	b.n	8001e02 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001de0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001de2:	b173      	cbz	r3, 8001e02 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001de4:	4620      	mov	r0, r4
 8001de6:	4798      	blx	r3
 8001de8:	e00b      	b.n	8001e02 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001df0:	d103      	bne.n	8001dfa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f022 0208 	bic.w	r2, r2, #8
 8001df8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dfc:	b10b      	cbz	r3, 8001e02 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001dfe:	4620      	mov	r0, r4
 8001e00:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e04:	2320      	movs	r3, #32
 8001e06:	4093      	lsls	r3, r2
 8001e08:	4233      	tst	r3, r6
 8001e0a:	d055      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	f012 0f10 	tst.w	r2, #16
 8001e14:	d050      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e16:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e18:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d00e      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001e2a:	d033      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001e32:	d12a      	bne.n	8001e8a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001e34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03e      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4798      	blx	r3
 8001e3e:	e03b      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e40:	6822      	ldr	r2, [r4, #0]
 8001e42:	6813      	ldr	r3, [r2, #0]
 8001e44:	f023 0316 	bic.w	r3, r3, #22
 8001e48:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	6953      	ldr	r3, [r2, #20]
 8001e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e52:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e56:	b1a3      	cbz	r3, 8001e82 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	f023 0308 	bic.w	r3, r3, #8
 8001e60:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e64:	233f      	movs	r3, #63	; 0x3f
 8001e66:	4093      	lsls	r3, r2
 8001e68:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001e70:	2300      	movs	r3, #0
 8001e72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001e76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d03f      	beq.n	8001efc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4798      	blx	r3
        return;
 8001e80:	e03c      	b.n	8001efc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e7      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x12c>
 8001e88:	e7eb      	b.n	8001e62 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001e8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e8c:	b1a3      	cbz	r3, 8001eb8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4798      	blx	r3
 8001e92:	e011      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001e9a:	d109      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f022 0210 	bic.w	r2, r2, #16
 8001ea2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001eb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eb2:	b10b      	cbz	r3, 8001eb8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001eba:	b1fb      	cbz	r3, 8001efc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ebc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ebe:	f013 0f01 	tst.w	r3, #1
 8001ec2:	d017      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ec4:	2305      	movs	r3, #5
 8001ec6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	6813      	ldr	r3, [r2, #0]
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001ed4:	9b01      	ldr	r3, [sp, #4]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	42ab      	cmp	r3, r5
 8001edc:	d804      	bhi.n	8001ee8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f013 0f01 	tst.w	r3, #1
 8001ee6:	d1f5      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001ef4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ef6:	b10b      	cbz	r3, 8001efc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4798      	blx	r3
}
 8001efc:	b003      	add	sp, #12
 8001efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f00:	20002954 	.word	0x20002954
 8001f04:	1b4e81b5 	.word	0x1b4e81b5

08001f08 <HAL_DMA_GetState>:
  return hdma->State;
 8001f08:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001f0c:	4770      	bx	lr
	...

08001f10 <ETH_MACAddressConfig>:

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f10:	7950      	ldrb	r0, [r2, #5]
 8001f12:	7913      	ldrb	r3, [r2, #4]
 8001f14:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <ETH_MACAddressConfig+0x28>)
 8001f1a:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f1c:	78d0      	ldrb	r0, [r2, #3]
 8001f1e:	7893      	ldrb	r3, [r2, #2]
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001f26:	7850      	ldrb	r0, [r2, #1]
 8001f28:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f2c:	7812      	ldrb	r2, [r2, #0]
 8001f2e:	4313      	orrs	r3, r2

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f30:	4a02      	ldr	r2, [pc, #8]	; (8001f3c <ETH_MACAddressConfig+0x2c>)
 8001f32:	508b      	str	r3, [r1, r2]
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40028040 	.word	0x40028040
 8001f3c:	40028044 	.word	0x40028044

08001f40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f40:	b470      	push	{r4, r5, r6}
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f42:	2200      	movs	r2, #0
 8001f44:	e00b      	b.n	8001f5e <ETH_DMATxDescListInit+0x1e>
    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f46:	68c6      	ldr	r6, [r0, #12]
 8001f48:	1c55      	adds	r5, r2, #1
 8001f4a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001f4e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8001f52:	60dd      	str	r5, [r3, #12]
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f54:	590b      	ldr	r3, [r1, r4]
 8001f56:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8001f5a:	510b      	str	r3, [r1, r4]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f5c:	3201      	adds	r2, #1
 8001f5e:	2a03      	cmp	r2, #3
 8001f60:	d816      	bhi.n	8001f90 <ETH_DMATxDescListInit+0x50>
    dmatxdesc = heth->Init.TxDesc + i;
 8001f62:	68c1      	ldr	r1, [r0, #12]
 8001f64:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8001f68:	00dc      	lsls	r4, r3, #3
 8001f6a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f6e:	2500      	movs	r5, #0
 8001f70:	510d      	str	r5, [r1, r4]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f72:	605d      	str	r5, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f74:	609d      	str	r5, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f76:	60dd      	str	r5, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f78:	1d95      	adds	r5, r2, #6
 8001f7a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f7e:	590d      	ldr	r5, [r1, r4]
 8001f80:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8001f84:	510d      	str	r5, [r1, r4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f86:	2a02      	cmp	r2, #2
 8001f88:	d9dd      	bls.n	8001f46 <ETH_DMATxDescListInit+0x6>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f8a:	68c5      	ldr	r5, [r0, #12]
 8001f8c:	60dd      	str	r5, [r3, #12]
 8001f8e:	e7e1      	b.n	8001f54 <ETH_DMATxDescListInit+0x14>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f94:	68c1      	ldr	r1, [r0, #12]
 8001f96:	6802      	ldr	r2, [r0, #0]
 8001f98:	f241 0310 	movw	r3, #4112	; 0x1010
 8001f9c:	50d1      	str	r1, [r2, r3]
}
 8001f9e:	bc70      	pop	{r4, r5, r6}
 8001fa0:	4770      	bx	lr

08001fa2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fa2:	b430      	push	{r4, r5}
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	e007      	b.n	8001fb8 <ETH_DMARxDescListInit+0x16>
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001fa8:	6901      	ldr	r1, [r0, #16]
 8001faa:	1c6a      	adds	r2, r5, #1
 8001fac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fb0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001fb4:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fb6:	3501      	adds	r5, #1
 8001fb8:	2d03      	cmp	r5, #3
 8001fba:	d81f      	bhi.n	8001ffc <ETH_DMARxDescListInit+0x5a>
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fbc:	6901      	ldr	r1, [r0, #16]
 8001fbe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001fc2:	00dc      	lsls	r4, r3, #3
 8001fc4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	510a      	str	r2, [r1, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fcc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fd0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fd2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001fd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fda:	510a      	str	r2, [r1, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001fdc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001fe0:	605a      	str	r2, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fe8:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fea:	f105 0212 	add.w	r2, r5, #18
 8001fee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ff2:	2d02      	cmp	r5, #2
 8001ff4:	d9d8      	bls.n	8001fa8 <ETH_DMARxDescListInit+0x6>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ff6:	6902      	ldr	r2, [r0, #16]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	e7dc      	b.n	8001fb6 <ETH_DMARxDescListInit+0x14>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	65c3      	str	r3, [r0, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002000:	6603      	str	r3, [r0, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002002:	6683      	str	r3, [r0, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002004:	66c3      	str	r3, [r0, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002006:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002008:	6901      	ldr	r1, [r0, #16]
 800200a:	6802      	ldr	r2, [r0, #0]
 800200c:	f241 030c 	movw	r3, #4108	; 0x100c
 8002010:	50d1      	str	r1, [r2, r3]
}
 8002012:	bc30      	pop	{r4, r5}
 8002014:	4770      	bx	lr

08002016 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800201a:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800201c:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 8002020:	699b      	ldr	r3, [r3, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002022:	688d      	ldr	r5, [r1, #8]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002024:	681c      	ldr	r4, [r3, #0]
 8002026:	2c00      	cmp	r4, #0
 8002028:	f2c0 80b5 	blt.w	8002196 <ETH_Prepare_Tx_Descriptors+0x180>
 800202c:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800202e:	1d3c      	adds	r4, r7, #4
 8002030:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8002034:	69e4      	ldr	r4, [r4, #28]
 8002036:	2c00      	cmp	r4, #0
 8002038:	f040 80af 	bne.w	800219a <ETH_Prepare_Tx_Descriptors+0x184>


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800203c:	682c      	ldr	r4, [r5, #0]
 800203e:	609c      	str	r4, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002040:	685c      	ldr	r4, [r3, #4]
 8002042:	f424 54ff 	bic.w	r4, r4, #8160	; 0x1fe0
 8002046:	f024 041f 	bic.w	r4, r4, #31
 800204a:	686e      	ldr	r6, [r5, #4]
 800204c:	4334      	orrs	r4, r6
 800204e:	605c      	str	r4, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002050:	680c      	ldr	r4, [r1, #0]
 8002052:	f014 0f01 	tst.w	r4, #1
 8002056:	d005      	beq.n	8002064 <ETH_Prepare_Tx_Descriptors+0x4e>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002058:	681c      	ldr	r4, [r3, #0]
 800205a:	f424 0440 	bic.w	r4, r4, #12582912	; 0xc00000
 800205e:	694e      	ldr	r6, [r1, #20]
 8002060:	4334      	orrs	r4, r6
 8002062:	601c      	str	r4, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002064:	680c      	ldr	r4, [r1, #0]
 8002066:	f014 0f20 	tst.w	r4, #32
 800206a:	d005      	beq.n	8002078 <ETH_Prepare_Tx_Descriptors+0x62>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	f024 6440 	bic.w	r4, r4, #201326592	; 0xc000000
 8002072:	690e      	ldr	r6, [r1, #16]
 8002074:	4334      	orrs	r4, r6
 8002076:	601c      	str	r4, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002078:	6809      	ldr	r1, [r1, #0]
 800207a:	f011 0f04 	tst.w	r1, #4
 800207e:	d003      	beq.n	8002088 <ETH_Prepare_Tx_Descriptors+0x72>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002086:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800208e:	6019      	str	r1, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002090:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800209a:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800209c:	46be      	mov	lr, r7
  uint32_t           bd_count = 0;
 800209e:	f04f 0c00 	mov.w	ip, #0
  descnbr += 1U;
 80020a2:	2601      	movs	r6, #1

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80020a4:	e028      	b.n	80020f8 <ETH_Prepare_Tx_Descriptors+0xe2>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 80020ac:	6019      	str	r1, [r3, #0]
 80020ae:	e030      	b.n	8002112 <ETH_Prepare_Tx_Descriptors+0xfc>
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020b0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 80020b4:	699b      	ldr	r3, [r3, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80020bc:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	2900      	cmp	r1, #0
 80020c2:	db2d      	blt.n	8002120 <ETH_Prepare_Tx_Descriptors+0x10a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80020c4:	1d21      	adds	r1, r4, #4
 80020c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80020ca:	69c9      	ldr	r1, [r1, #28]
 80020cc:	bb41      	cbnz	r1, 8002120 <ETH_Prepare_Tx_Descriptors+0x10a>
      }

      return HAL_ETH_ERROR_BUSY;
    }

    descnbr += 1U;
 80020ce:	3601      	adds	r6, #1

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80020d0:	68ad      	ldr	r5, [r5, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80020d2:	6829      	ldr	r1, [r5, #0]
 80020d4:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 80020dc:	f021 011f 	bic.w	r1, r1, #31
 80020e0:	686a      	ldr	r2, [r5, #4]
 80020e2:	4311      	orrs	r1, r2
 80020e4:	6059      	str	r1, [r3, #4]

    bd_count += 1U;
 80020e6:	f10c 0c01 	add.w	ip, ip, #1
 80020ea:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80020f4:	6019      	str	r1, [r3, #0]
 80020f6:	46a6      	mov	lr, r4
  while (txbuffer->next != NULL)
 80020f8:	68a9      	ldr	r1, [r5, #8]
 80020fa:	b359      	cbz	r1, 8002154 <ETH_Prepare_Tx_Descriptors+0x13e>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 8002102:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002104:	f1b8 0f00 	cmp.w	r8, #0
 8002108:	d0cd      	beq.n	80020a6 <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002110:	6019      	str	r1, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002112:	f10e 0401 	add.w	r4, lr, #1
 8002116:	2c03      	cmp	r4, #3
 8002118:	d9ca      	bls.n	80020b0 <ETH_Prepare_Tx_Descriptors+0x9a>
 800211a:	f1ae 0403 	sub.w	r4, lr, #3
 800211e:	e7c7      	b.n	80020b0 <ETH_Prepare_Tx_Descriptors+0x9a>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002120:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 8002124:	6999      	ldr	r1, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002126:	2200      	movs	r2, #0
 8002128:	e004      	b.n	8002134 <ETH_Prepare_Tx_Descriptors+0x11e>
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800212a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800212e:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002130:	3201      	adds	r2, #1
 8002132:	461f      	mov	r7, r3
 8002134:	42b2      	cmp	r2, r6
 8002136:	d20a      	bcs.n	800214e <ETH_Prepare_Tx_Descriptors+0x138>
 8002138:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800213c:	680b      	ldr	r3, [r1, #0]
 800213e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002142:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002144:	1c7b      	adds	r3, r7, #1
 8002146:	2b03      	cmp	r3, #3
 8002148:	d9ef      	bls.n	800212a <ETH_Prepare_Tx_Descriptors+0x114>
 800214a:	1efb      	subs	r3, r7, #3
 800214c:	e7ed      	b.n	800212a <ETH_Prepare_Tx_Descriptors+0x114>
      return HAL_ETH_ERROR_BUSY;
 800214e:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8002150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ItMode != ((uint32_t)RESET))
 8002154:	f1b8 0f00 	cmp.w	r8, #0
 8002158:	d018      	beq.n	800218c <ETH_Prepare_Tx_Descriptors+0x176>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002160:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002168:	601a      	str	r2, [r3, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800216a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800216c:	f10e 0304 	add.w	r3, lr, #4
 8002170:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002174:	61da      	str	r2, [r3, #28]
  dmatxdesclist->CurTxDesc = descidx;
 8002176:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800217a:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800217c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800217e:	449c      	add	ip, r3
 8002180:	f10c 0301 	add.w	r3, ip, #1
 8002184:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002186:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8002188:	2000      	movs	r0, #0
 800218a:	e7e1      	b.n	8002150 <ETH_Prepare_Tx_Descriptors+0x13a>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e7e5      	b.n	8002162 <ETH_Prepare_Tx_Descriptors+0x14c>
    return HAL_ETH_ERROR_BUSY;
 8002196:	2002      	movs	r0, #2
 8002198:	e7da      	b.n	8002150 <ETH_Prepare_Tx_Descriptors+0x13a>
 800219a:	2002      	movs	r0, #2
 800219c:	e7d8      	b.n	8002150 <ETH_Prepare_Tx_Descriptors+0x13a>
	...

080021a0 <ETH_SetMACConfig>:
{
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	4605      	mov	r5, r0
 80021a4:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 80021a6:	6802      	ldr	r2, [r0, #0]
 80021a8:	6813      	ldr	r3, [r2, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021aa:	493b      	ldr	r1, [pc, #236]	; (8002298 <ETH_SetMACConfig+0xf8>)
 80021ac:	4019      	ands	r1, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ae:	7c23      	ldrb	r3, [r4, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d160      	bne.n	8002276 <ETH_SetMACConfig+0xd6>
 80021b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021b8:	7c60      	ldrb	r0, [r4, #17]
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d15d      	bne.n	800227a <ETH_SetMACConfig+0xda>
 80021be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021c2:	4303      	orrs	r3, r0
                        (uint32_t)macconf->InterPacketGapVal |
 80021c4:	68a0      	ldr	r0, [r4, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021c6:	4303      	orrs	r3, r0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021c8:	7fe0      	ldrb	r0, [r4, #31]
                        (uint32_t)macconf->InterPacketGapVal |
 80021ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                        macconf->Speed |
 80021ce:	6960      	ldr	r0, [r4, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021d0:	4303      	orrs	r3, r0
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021d2:	7fa0      	ldrb	r0, [r4, #30]
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d152      	bne.n	800227e <ETH_SetMACConfig+0xde>
 80021d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
                        macconf->Speed |
 80021dc:	4303      	orrs	r3, r0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021de:	7f20      	ldrb	r0, [r4, #28]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021e0:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                        macconf->DuplexMode |
 80021e4:	69a0      	ldr	r0, [r4, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021e6:	4303      	orrs	r3, r0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021e8:	7920      	ldrb	r0, [r4, #4]
                        macconf->DuplexMode |
 80021ea:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021ee:	f894 0020 	ldrb.w	r0, [r4, #32]
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d145      	bne.n	8002282 <ETH_SetMACConfig+0xe2>
 80021f6:	f44f 7000 	mov.w	r0, #512	; 0x200
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021fa:	4303      	orrs	r3, r0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021fc:	7be0      	ldrb	r0, [r4, #15]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021fe:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                        macconf->BackOffLimit |
 8002202:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002204:	4303      	orrs	r3, r0
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002206:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800220a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800220e:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002210:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002212:	682b      	ldr	r3, [r5, #0]
 8002214:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002216:	2001      	movs	r0, #1
 8002218:	f7fe ff58 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 8002220:	6829      	ldr	r1, [r5, #0]
 8002222:	698a      	ldr	r2, [r1, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002224:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8002228:	0412      	lsls	r2, r2, #16
 800222a:	0c12      	lsrs	r2, r2, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800222c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800222e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002230:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002234:	bb38      	cbnz	r0, 8002286 <ETH_SetMACConfig+0xe6>
 8002236:	2080      	movs	r0, #128	; 0x80
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002238:	4303      	orrs	r3, r0
                        macconf->PauseLowThreshold |
 800223a:	6d20      	ldr	r0, [r4, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800223c:	4303      	orrs	r3, r0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800223e:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
 8002242:	2801      	cmp	r0, #1
 8002244:	d021      	beq.n	800228a <ETH_SetMACConfig+0xea>
 8002246:	2000      	movs	r0, #0
                        macconf->PauseLowThreshold |
 8002248:	4303      	orrs	r3, r0
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800224a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800224e:	2801      	cmp	r0, #1
 8002250:	d01d      	beq.n	800228e <ETH_SetMACConfig+0xee>
 8002252:	2000      	movs	r0, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002254:	4303      	orrs	r3, r0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002256:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
 800225a:	2801      	cmp	r0, #1
 800225c:	d019      	beq.n	8002292 <ETH_SetMACConfig+0xf2>
 800225e:	2000      	movs	r0, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002260:	4303      	orrs	r3, r0
 8002262:	4313      	orrs	r3, r2
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002264:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8002266:	682b      	ldr	r3, [r5, #0]
 8002268:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe ff2e 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002270:	682b      	ldr	r3, [r5, #0]
 8002272:	619c      	str	r4, [r3, #24]
}
 8002274:	bd70      	pop	{r4, r5, r6, pc}
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002276:	2300      	movs	r3, #0
 8002278:	e79e      	b.n	80021b8 <ETH_SetMACConfig+0x18>
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800227a:	2000      	movs	r0, #0
 800227c:	e7a1      	b.n	80021c2 <ETH_SetMACConfig+0x22>
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800227e:	2000      	movs	r0, #0
 8002280:	e7ac      	b.n	80021dc <ETH_SetMACConfig+0x3c>
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002282:	2000      	movs	r0, #0
 8002284:	e7b9      	b.n	80021fa <ETH_SetMACConfig+0x5a>
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002286:	2000      	movs	r0, #0
 8002288:	e7d6      	b.n	8002238 <ETH_SetMACConfig+0x98>
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800228a:	2008      	movs	r0, #8
 800228c:	e7dc      	b.n	8002248 <ETH_SetMACConfig+0xa8>
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800228e:	2004      	movs	r0, #4
 8002290:	e7e0      	b.n	8002254 <ETH_SetMACConfig+0xb4>
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002292:	2002      	movs	r0, #2
 8002294:	e7e4      	b.n	8002260 <ETH_SetMACConfig+0xc0>
 8002296:	bf00      	nop
 8002298:	ff20810f 	.word	0xff20810f

0800229c <ETH_SetDMAConfig>:
{
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	4605      	mov	r5, r0
 80022a0:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022a2:	6802      	ldr	r2, [r0, #0]
 80022a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022a8:	58d3      	ldr	r3, [r2, r3]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022aa:	4929      	ldr	r1, [pc, #164]	; (8002350 <ETH_SetDMAConfig+0xb4>)
 80022ac:	4019      	ands	r1, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022ae:	7b23      	ldrb	r3, [r4, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d149      	bne.n	8002348 <ETH_SetDMAConfig+0xac>
 80022b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022b8:	7b60      	ldrb	r0, [r4, #13]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022ba:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022be:	7f60      	ldrb	r0, [r4, #29]
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d143      	bne.n	800234c <ETH_SetDMAConfig+0xb0>
 80022c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022c8:	4303      	orrs	r3, r0
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022ca:	7ba0      	ldrb	r0, [r4, #14]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022cc:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
                        dmaconf->TransmitThresholdControl |
 80022d0:	6960      	ldr	r0, [r4, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022d2:	4303      	orrs	r3, r0
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022d4:	7f20      	ldrb	r0, [r4, #28]
                        dmaconf->TransmitThresholdControl |
 80022d6:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022da:	7fa0      	ldrb	r0, [r4, #30]
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022dc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
                        dmaconf->ReceiveThresholdControl |
 80022e0:	6a20      	ldr	r0, [r4, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022e2:	4303      	orrs	r3, r0
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022e4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022e8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 80022ec:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022ee:	f241 0618 	movw	r6, #4120	; 0x1018
 80022f2:	5193      	str	r3, [r2, r6]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	599f      	ldr	r7, [r3, r6]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7fe fee7 	bl	80010cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022fe:	682b      	ldr	r3, [r5, #0]
 8002300:	519f      	str	r7, [r3, r6]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002302:	7922      	ldrb	r2, [r4, #4]
                                        dmaconf->BurstMode |
 8002304:	68a3      	ldr	r3, [r4, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002306:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800230a:	69a2      	ldr	r2, [r4, #24]
                                        dmaconf->BurstMode |
 800230c:	4313      	orrs	r3, r2
                                        dmaconf->TxDMABurstLength |
 800230e:	6922      	ldr	r2, [r4, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002310:	4313      	orrs	r3, r2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002312:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
                                        dmaconf->TxDMABurstLength |
 8002316:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800231a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800231c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                                        dmaconf->DMAArbitration |
 8002320:	6822      	ldr	r2, [r4, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002322:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002324:	682a      	ldr	r2, [r5, #0]
 8002326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800232a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800232e:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 8002330:	682b      	ldr	r3, [r5, #0]
 8002332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002336:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002338:	2001      	movs	r0, #1
 800233a:	f7fe fec7 	bl	80010cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800233e:	682b      	ldr	r3, [r5, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	601c      	str	r4, [r3, #0]
}
 8002346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002348:	2300      	movs	r3, #0
 800234a:	e7b5      	b.n	80022b8 <ETH_SetDMAConfig+0x1c>
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800234c:	2000      	movs	r0, #0
 800234e:	e7bb      	b.n	80022c8 <ETH_SetDMAConfig+0x2c>
 8002350:	f8de3f23 	.word	0xf8de3f23

08002354 <ETH_MACDMAConfig>:
{
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	b0a4      	sub	sp, #144	; 0x90
 8002358:	4606      	mov	r6, r0
  macDefaultConf.Watchdog = ENABLE;
 800235a:	2501      	movs	r5, #1
 800235c:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
  macDefaultConf.Jabber = ENABLE;
 8002360:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002364:	2400      	movs	r4, #0
 8002366:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002368:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.ReceiveOwn = ENABLE;
 800236c:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
  macDefaultConf.LoopbackMode = DISABLE;
 8002370:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.ChecksumOffload = ENABLE;
 8002374:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
  macDefaultConf.RetryTransmission = DISABLE;
 8002378:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800237c:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002380:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.DeferralCheck = DISABLE;
 8002382:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.PauseTime = 0x0U;
 8002386:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002388:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800238c:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800238e:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002392:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002396:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800239a:	9310      	str	r3, [sp, #64]	; 0x40
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800239c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a0:	9311      	str	r3, [sp, #68]	; 0x44
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023a2:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023a6:	a90b      	add	r1, sp, #44	; 0x2c
 80023a8:	f7ff fefa 	bl	80021a0 <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80023ac:	f88d 500c 	strb.w	r5, [sp, #12]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80023b0:	f88d 500d 	strb.w	r5, [sp, #13]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80023b4:	f88d 501d 	strb.w	r5, [sp, #29]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023b8:	f88d 500e 	strb.w	r5, [sp, #14]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023bc:	9405      	str	r4, [sp, #20]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023be:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023c2:	f88d 401e 	strb.w	r4, [sp, #30]
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023c6:	9408      	str	r4, [sp, #32]
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023c8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023cc:	f88d 5004 	strb.w	r5, [sp, #4]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d4:	9302      	str	r3, [sp, #8]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023da:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e0:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023e2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023e6:	940a      	str	r4, [sp, #40]	; 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023e8:	9400      	str	r4, [sp, #0]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023ea:	4669      	mov	r1, sp
 80023ec:	4630      	mov	r0, r6
 80023ee:	f7ff ff55 	bl	800229c <ETH_SetDMAConfig>
}
 80023f2:	b024      	add	sp, #144	; 0x90
 80023f4:	bd70      	pop	{r4, r5, r6, pc}

080023f6 <HAL_ETH_MspInit>:
}
 80023f6:	4770      	bx	lr

080023f8 <HAL_ETH_Init>:
  if (heth == NULL)
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d057      	beq.n	80024ac <HAL_ETH_Init+0xb4>
{
 80023fc:	b530      	push	{r4, r5, lr}
 80023fe:	b083      	sub	sp, #12
 8002400:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002402:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002406:	2b00      	cmp	r3, #0
 8002408:	d034      	beq.n	8002474 <HAL_ETH_Init+0x7c>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_ETH_Init+0xb8>)
 8002410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_ETH_Init+0xbc>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800242a:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	68a1      	ldr	r1, [r4, #8]
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8002434:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002444:	f7fe fe3c 	bl	80010c0 <HAL_GetTick>
 8002448:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f013 0f01 	tst.w	r3, #1
 8002456:	d013      	beq.n	8002480 <HAL_ETH_Init+0x88>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002458:	f7fe fe32 	bl	80010c0 <HAL_GetTick>
 800245c:	1b40      	subs	r0, r0, r5
 800245e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002462:	d9f2      	bls.n	800244a <HAL_ETH_Init+0x52>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002464:	2304      	movs	r3, #4
 8002466:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 800246a:	23e0      	movs	r3, #224	; 0xe0
 800246c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      return HAL_ERROR;
 8002470:	2001      	movs	r0, #1
 8002472:	e019      	b.n	80024a8 <HAL_ETH_Init+0xb0>
    heth->gState = HAL_ETH_STATE_BUSY;
 8002474:	2323      	movs	r3, #35	; 0x23
 8002476:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 800247a:	f7ff ffbc 	bl	80023f6 <HAL_ETH_MspInit>
 800247e:	e7c4      	b.n	800240a <HAL_ETH_Init+0x12>
  ETH_MACDMAConfig(heth);
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff ff67 	bl	8002354 <ETH_MACDMAConfig>
  ETH_DMATxDescListInit(heth);
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff fd5a 	bl	8001f40 <ETH_DMATxDescListInit>
  ETH_DMARxDescListInit(heth);
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff fd88 	bl	8001fa2 <ETH_DMARxDescListInit>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002492:	6862      	ldr	r2, [r4, #4]
 8002494:	2100      	movs	r1, #0
 8002496:	4620      	mov	r0, r4
 8002498:	f7ff fd3a 	bl	8001f10 <ETH_MACAddressConfig>
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800249c:	2000      	movs	r0, #0
 800249e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024a2:	2310      	movs	r3, #16
 80024a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80024a8:	b003      	add	sp, #12
 80024aa:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
}
 80024ae:	4770      	bx	lr
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40013800 	.word	0x40013800

080024b8 <HAL_ETH_Transmit>:
{
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80024bc:	b131      	cbz	r1, 80024cc <HAL_ETH_Transmit+0x14>
 80024be:	4615      	mov	r5, r2
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80024c4:	2b23      	cmp	r3, #35	; 0x23
 80024c6:	d009      	beq.n	80024dc <HAL_ETH_Transmit+0x24>
    return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
}
 80024ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024cc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e7f6      	b.n	80024ca <HAL_ETH_Transmit+0x12>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80024dc:	2200      	movs	r2, #0
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff fd99 	bl	8002016 <ETH_Prepare_Tx_Descriptors>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d135      	bne.n	8002554 <HAL_ETH_Transmit+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 80024e8:	f3bf 8f4f 	dsb	sy
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80024ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024ee:	1d9a      	adds	r2, r3, #6
 80024f0:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024f4:	3301      	adds	r3, #1
 80024f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d901      	bls.n	8002500 <HAL_ETH_Transmit+0x48>
 80024fc:	3b04      	subs	r3, #4
 80024fe:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002500:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	3306      	adds	r3, #6
 8002506:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800250a:	f241 0304 	movw	r3, #4100	; 0x1004
 800250e:	50d1      	str	r1, [r2, r3]
    tickstart = HAL_GetTick();
 8002510:	f7fe fdd6 	bl	80010c0 <HAL_GetTick>
 8002514:	4607      	mov	r7, r0
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002516:	6833      	ldr	r3, [r6, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da30      	bge.n	800257e <HAL_ETH_Transmit+0xc6>
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	f241 0214 	movw	r2, #4116	; 0x1014
 8002522:	589a      	ldr	r2, [r3, r2]
 8002524:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002528:	d11c      	bne.n	8002564 <HAL_ETH_Transmit+0xac>
      if (Timeout != HAL_MAX_DELAY)
 800252a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800252e:	d0f2      	beq.n	8002516 <HAL_ETH_Transmit+0x5e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002530:	f7fe fdc6 	bl	80010c0 <HAL_GetTick>
 8002534:	1bc0      	subs	r0, r0, r7
 8002536:	42a8      	cmp	r0, r5
 8002538:	d801      	bhi.n	800253e <HAL_ETH_Transmit+0x86>
 800253a:	2d00      	cmp	r5, #0
 800253c:	d1eb      	bne.n	8002516 <HAL_ETH_Transmit+0x5e>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800253e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800254a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800254e:	6033      	str	r3, [r6, #0]
          return HAL_ERROR;
 8002550:	2001      	movs	r0, #1
 8002552:	e7ba      	b.n	80024ca <HAL_ETH_Transmit+0x12>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002554:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8002560:	2001      	movs	r0, #1
 8002562:	e7b2      	b.n	80024ca <HAL_ETH_Transmit+0x12>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002564:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002568:	f042 0208 	orr.w	r2, r2, #8
 800256c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002570:	f241 0214 	movw	r2, #4116	; 0x1014
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 800257a:	2001      	movs	r0, #1
 800257c:	e7a5      	b.n	80024ca <HAL_ETH_Transmit+0x12>
    return HAL_OK;
 800257e:	2000      	movs	r0, #0
 8002580:	e7a3      	b.n	80024ca <HAL_ETH_Transmit+0x12>
	...

08002584 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002584:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002586:	490a      	ldr	r1, [pc, #40]	; (80025b0 <FLASH_Program_DoubleWord+0x2c>)
 8002588:	690c      	ldr	r4, [r1, #16]
 800258a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800258e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002590:	690c      	ldr	r4, [r1, #16]
 8002592:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8002596:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002598:	690c      	ldr	r4, [r1, #16]
 800259a:	f044 0401 	orr.w	r4, r4, #1
 800259e:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025a0:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80025a2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025a6:	6043      	str	r3, [r0, #4]
}
 80025a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00

080025b4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <FLASH_Program_Word+0x20>)
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025bc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80025ce:	6001      	str	r1, [r0, #0]
}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00

080025d8 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <FLASH_Program_HalfWord+0x20>)
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80025f2:	8001      	strh	r1, [r0, #0]
}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <FLASH_Program_Byte+0x1c>)
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002604:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8002612:	7001      	strb	r1, [r0, #0]
}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00

0800261c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f013 0f10 	tst.w	r3, #16
 8002624:	d007      	beq.n	8002636 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002626:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <FLASH_SetErrorCode+0xa4>)
 8002628:	69d3      	ldr	r3, [r2, #28]
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 8002632:	2210      	movs	r2, #16
 8002634:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f013 0f20 	tst.w	r3, #32
 800263e:	d007      	beq.n	8002650 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002640:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <FLASH_SetErrorCode+0xa4>)
 8002642:	69d3      	ldr	r3, [r2, #28]
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 800264c:	2220      	movs	r2, #32
 800264e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002658:	d007      	beq.n	800266a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800265a:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <FLASH_SetErrorCode+0xa4>)
 800265c:	69d3      	ldr	r3, [r2, #28]
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002672:	d007      	beq.n	8002684 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <FLASH_SetErrorCode+0xa4>)
 8002676:	69d3      	ldr	r3, [r2, #28]
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f413 7f80 	tst.w	r3, #256	; 0x100
 800268c:	d008      	beq.n	80026a0 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <FLASH_SetErrorCode+0xa4>)
 8002690:	69d3      	ldr	r3, [r2, #28]
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 800269a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f013 0f02 	tst.w	r3, #2
 80026a8:	d007      	beq.n	80026ba <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <FLASH_SetErrorCode+0xa4>)
 80026ac:	69d3      	ldr	r3, [r2, #28]
 80026ae:	f043 0320 	orr.w	r3, r3, #32
 80026b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80026b4:	4b01      	ldr	r3, [pc, #4]	; (80026bc <FLASH_SetErrorCode+0xa0>)
 80026b6:	2202      	movs	r2, #2
 80026b8:	60da      	str	r2, [r3, #12]
  }
}
 80026ba:	4770      	bx	lr
 80026bc:	40023c00 	.word	0x40023c00
 80026c0:	200044b8 	.word	0x200044b8

080026c4 <HAL_FLASH_EndOfOperationCallback>:
}
 80026c4:	4770      	bx	lr

080026c6 <HAL_FLASH_OperationErrorCallback>:
}
 80026c6:	4770      	bx	lr

080026c8 <HAL_FLASH_IRQHandler>:
{
 80026c8:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_FLASH_IRQHandler+0xf0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 80026d2:	d013      	beq.n	80026fc <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80026d4:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d03d      	beq.n	800275a <HAL_FLASH_IRQHandler+0x92>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d03e      	beq.n	8002766 <HAL_FLASH_IRQHandler+0x9e>
      addresstmp = pFlash.Address;
 80026e8:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 80026ea:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 80026ec:	f7ff ff96 	bl	800261c <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff ffe8 	bl	80026c6 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80026f6:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80026fc:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_FLASH_IRQHandler+0xf0>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f013 0f01 	tst.w	r3, #1
 8002704:	d013      	beq.n	800272e <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_FLASH_IRQHandler+0xf0>)
 8002708:	2201      	movs	r2, #1
 800270a:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	4293      	cmp	r3, r2
 8002714:	d02a      	beq.n	800276c <HAL_FLASH_IRQHandler+0xa4>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d043      	beq.n	80027a8 <HAL_FLASH_IRQHandler+0xe0>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 8002722:	6958      	ldr	r0, [r3, #20]
 8002724:	f7ff ffce 	bl	80026c4 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b98b      	cbnz	r3, 8002758 <HAL_FLASH_IRQHandler+0x90>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_FLASH_IRQHandler+0xf0>)
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002740:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002748:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002750:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 8002754:	2200      	movs	r2, #0
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 800275c:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800275e:	f04f 32ff 	mov.w	r2, #4294967295
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	e7c2      	b.n	80026ec <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 8002768:	691c      	ldr	r4, [r3, #16]
 800276a:	e7bf      	b.n	80026ec <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	3a01      	subs	r2, #1
 8002772:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	b15b      	cbz	r3, 8002790 <HAL_FLASH_IRQHandler+0xc8>
        addresstmp = pFlash.Sector;
 8002778:	4c10      	ldr	r4, [pc, #64]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 800277a:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800277c:	f7ff ffa2 	bl	80026c4 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8002780:	68e3      	ldr	r3, [r4, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8002786:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002788:	7a21      	ldrb	r1, [r4, #8]
 800278a:	f000 f8c5 	bl	8002918 <FLASH_Erase_Sector>
 800278e:	e7ce      	b.n	800272e <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 8002792:	f04f 34ff 	mov.w	r4, #4294967295
 8002796:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 800279c:	f000 f8ea 	bl	8002974 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff ff8f 	bl	80026c4 <HAL_FLASH_EndOfOperationCallback>
 80027a6:	e7c2      	b.n	800272e <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 80027a8:	f000 f8e4 	bl	8002974 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_FLASH_IRQHandler+0xf4>)
 80027ae:	6918      	ldr	r0, [r3, #16]
 80027b0:	f7ff ff88 	bl	80026c4 <HAL_FLASH_EndOfOperationCallback>
 80027b4:	e7b8      	b.n	8002728 <HAL_FLASH_IRQHandler+0x60>
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00
 80027bc:	200044b8 	.word	0x200044b8

080027c0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_FLASH_Unlock+0x28>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db01      	blt.n	80027cc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2000      	movs	r0, #0
 80027ca:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_FLASH_Unlock+0x28>)
 80027ce:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_FLASH_Unlock+0x2c>)
 80027d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027d2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80027d6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db01      	blt.n	80027e2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2000      	movs	r0, #0
 80027e0:	4770      	bx	lr
      status = HAL_ERROR;
 80027e2:	2001      	movs	r0, #1
}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00
 80027ec:	45670123 	.word	0x45670123

080027f0 <FLASH_WaitForLastOperation>:
{ 
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <FLASH_WaitForLastOperation+0x58>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80027fa:	f7fe fc61 	bl	80010c0 <HAL_GetTick>
 80027fe:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <FLASH_WaitForLastOperation+0x5c>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002808:	d00a      	beq.n	8002820 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 800280a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800280e:	d0f7      	beq.n	8002800 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002810:	b124      	cbz	r4, 800281c <FLASH_WaitForLastOperation+0x2c>
 8002812:	f7fe fc55 	bl	80010c0 <HAL_GetTick>
 8002816:	1b40      	subs	r0, r0, r5
 8002818:	42a0      	cmp	r0, r4
 800281a:	d9f1      	bls.n	8002800 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 800281c:	2003      	movs	r0, #3
 800281e:	e00d      	b.n	800283c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <FLASH_WaitForLastOperation+0x5c>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f013 0f01 	tst.w	r3, #1
 8002828:	d002      	beq.n	8002830 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <FLASH_WaitForLastOperation+0x5c>)
 800282c:	2201      	movs	r2, #1
 800282e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <FLASH_WaitForLastOperation+0x5c>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8002838:	d101      	bne.n	800283e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 800283a:	2000      	movs	r0, #0
}  
 800283c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800283e:	f7ff feed 	bl	800261c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002842:	2001      	movs	r0, #1
 8002844:	e7fa      	b.n	800283c <FLASH_WaitForLastOperation+0x4c>
 8002846:	bf00      	nop
 8002848:	200044b8 	.word	0x200044b8
 800284c:	40023c00 	.word	0x40023c00

08002850 <HAL_FLASH_Program>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_FLASH_Program+0x74>)
 8002856:	7e12      	ldrb	r2, [r2, #24]
 8002858:	2a01      	cmp	r2, #1
 800285a:	d030      	beq.n	80028be <HAL_FLASH_Program+0x6e>
 800285c:	4604      	mov	r4, r0
 800285e:	460d      	mov	r5, r1
 8002860:	461f      	mov	r7, r3
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_FLASH_Program+0x74>)
 8002864:	2201      	movs	r2, #1
 8002866:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002868:	f24c 3050 	movw	r0, #50000	; 0xc350
 800286c:	f7ff ffc0 	bl	80027f0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002870:	b990      	cbnz	r0, 8002898 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002872:	b1ac      	cbz	r4, 80028a0 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002874:	2c01      	cmp	r4, #1
 8002876:	d018      	beq.n	80028aa <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002878:	2c02      	cmp	r4, #2
 800287a:	d01b      	beq.n	80028b4 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 800287c:	4632      	mov	r2, r6
 800287e:	463b      	mov	r3, r7
 8002880:	4628      	mov	r0, r5
 8002882:	f7ff fe7f 	bl	8002584 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002886:	f24c 3050 	movw	r0, #50000	; 0xc350
 800288a:	f7ff ffb1 	bl	80027f0 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <HAL_FLASH_Program+0x78>)
 8002890:	6913      	ldr	r3, [r2, #16]
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_FLASH_Program+0x74>)
 800289a:	2200      	movs	r2, #0
 800289c:	761a      	strb	r2, [r3, #24]
}
 800289e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80028a0:	b2f1      	uxtb	r1, r6
 80028a2:	4628      	mov	r0, r5
 80028a4:	f7ff feaa 	bl	80025fc <FLASH_Program_Byte>
 80028a8:	e7ed      	b.n	8002886 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80028aa:	b2b1      	uxth	r1, r6
 80028ac:	4628      	mov	r0, r5
 80028ae:	f7ff fe93 	bl	80025d8 <FLASH_Program_HalfWord>
 80028b2:	e7e8      	b.n	8002886 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80028b4:	4631      	mov	r1, r6
 80028b6:	4628      	mov	r0, r5
 80028b8:	f7ff fe7c 	bl	80025b4 <FLASH_Program_Word>
 80028bc:	e7e3      	b.n	8002886 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80028be:	2002      	movs	r0, #2
 80028c0:	e7ed      	b.n	800289e <HAL_FLASH_Program+0x4e>
 80028c2:	bf00      	nop
 80028c4:	200044b8 	.word	0x200044b8
 80028c8:	40023c00 	.word	0x40023c00

080028cc <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <FLASH_MassErase+0x48>)
 80028ce:	6913      	ldr	r3, [r2, #16]
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80028d6:	2903      	cmp	r1, #3
 80028d8:	d00e      	beq.n	80028f8 <FLASH_MassErase+0x2c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
  }
  else if (Banks == FLASH_BANK_1)
 80028da:	2901      	cmp	r1, #1
 80028dc:	d013      	beq.n	8002906 <FLASH_MassErase+0x3a>
    FLASH->CR |= FLASH_CR_MER1;
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80028de:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <FLASH_MassErase+0x48>)
 80028e0:	6913      	ldr	r3, [r2, #16]
 80028e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <FLASH_MassErase+0x48>)
 80028ea:	6913      	ldr	r3, [r2, #16]
 80028ec:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80028f0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80028f4:	6110      	str	r0, [r2, #16]
}
 80028f6:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
 80028f8:	6913      	ldr	r3, [r2, #16]
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6113      	str	r3, [r2, #16]
 8002904:	e7f0      	b.n	80028e8 <FLASH_MassErase+0x1c>
    FLASH->CR |= FLASH_CR_MER1;
 8002906:	4a03      	ldr	r2, [pc, #12]	; (8002914 <FLASH_MassErase+0x48>)
 8002908:	6913      	ldr	r3, [r2, #16]
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6113      	str	r3, [r2, #16]
 8002910:	e7ea      	b.n	80028e8 <FLASH_MassErase+0x1c>
 8002912:	bf00      	nop
 8002914:	40023c00 	.word	0x40023c00

08002918 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002918:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800291a:	b149      	cbz	r1, 8002930 <FLASH_Erase_Sector+0x18>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800291c:	2901      	cmp	r1, #1
 800291e:	d024      	beq.n	800296a <FLASH_Erase_Sector+0x52>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002920:	2902      	cmp	r1, #2
 8002922:	d002      	beq.n	800292a <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002924:	f44f 7440 	mov.w	r4, #768	; 0x300
 8002928:	e003      	b.n	8002932 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 800292a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800292e:	e000      	b.n	8002932 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_BYTE;
 8002930:	2400      	movs	r4, #0
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002932:	280b      	cmp	r0, #11
 8002934:	d900      	bls.n	8002938 <FLASH_Erase_Sector+0x20>
  {
    Sector += 4U;
 8002936:	3004      	adds	r0, #4
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <FLASH_Erase_Sector+0x58>)
 800293a:	6919      	ldr	r1, [r3, #16]
 800293c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002940:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	4322      	orrs	r2, r4
 8002946:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800294e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8002956:	f040 0002 	orr.w	r0, r0, #2
 800295a:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002962:	611a      	str	r2, [r3, #16]
}
 8002964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002968:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800296a:	f44f 7480 	mov.w	r4, #256	; 0x100
 800296e:	e7e0      	b.n	8002932 <FLASH_Erase_Sector+0x1a>
 8002970:	40023c00 	.word	0x40023c00

08002974 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <FLASH_FlushCaches+0x5c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f413 7f00 	tst.w	r3, #512	; 0x200
 800297c:	d010      	beq.n	80029a0 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <FLASH_FlushCaches+0x5c>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002996:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <FLASH_FlushCaches+0x5c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80029a8:	d010      	beq.n	80029cc <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <FLASH_FlushCaches+0x5c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b2:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ca:	601a      	str	r2, [r3, #0]
  }
}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00

080029d4 <HAL_FLASHEx_Erase>:
{
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_FLASHEx_Erase+0x90>)
 80029d8:	7e1b      	ldrb	r3, [r3, #24]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d040      	beq.n	8002a60 <HAL_FLASHEx_Erase+0x8c>
 80029de:	4604      	mov	r4, r0
 80029e0:	460e      	mov	r6, r1
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_FLASHEx_Erase+0x90>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029ec:	f7ff ff00 	bl	80027f0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80029f0:	4607      	mov	r7, r0
 80029f2:	bb80      	cbnz	r0, 8002a56 <HAL_FLASHEx_Erase+0x82>
    *SectorError = 0xFFFFFFFFU;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d016      	beq.n	8002a2e <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a00:	68a5      	ldr	r5, [r4, #8]
 8002a02:	68e3      	ldr	r3, [r4, #12]
 8002a04:	68a2      	ldr	r2, [r4, #8]
 8002a06:	4413      	add	r3, r2
 8002a08:	42ab      	cmp	r3, r5
 8002a0a:	d922      	bls.n	8002a52 <HAL_FLASHEx_Erase+0x7e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a0c:	7c21      	ldrb	r1, [r4, #16]
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f7ff ff82 	bl	8002918 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a18:	f7ff feea 	bl	80027f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002a1c:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <HAL_FLASHEx_Erase+0x94>)
 8002a1e:	6913      	ldr	r3, [r2, #16]
 8002a20:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002a24:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 8002a26:	4607      	mov	r7, r0
 8002a28:	b990      	cbnz	r0, 8002a50 <HAL_FLASHEx_Erase+0x7c>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a2a:	3501      	adds	r5, #1
 8002a2c:	e7e9      	b.n	8002a02 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a2e:	6861      	ldr	r1, [r4, #4]
 8002a30:	7c20      	ldrb	r0, [r4, #16]
 8002a32:	f7ff ff4b 	bl	80028cc <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a3a:	f7ff fed9 	bl	80027f0 <FLASH_WaitForLastOperation>
 8002a3e:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8002a40:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <HAL_FLASHEx_Erase+0x94>)
 8002a42:	6913      	ldr	r3, [r2, #16]
 8002a44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6113      	str	r3, [r2, #16]
 8002a4e:	e000      	b.n	8002a52 <HAL_FLASHEx_Erase+0x7e>
          *SectorError = index;
 8002a50:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8002a52:	f7ff ff8f 	bl	8002974 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002a56:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_FLASHEx_Erase+0x90>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	761a      	strb	r2, [r3, #24]
}
 8002a5c:	4638      	mov	r0, r7
 8002a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8002a60:	2702      	movs	r7, #2
 8002a62:	e7fb      	b.n	8002a5c <HAL_FLASHEx_Erase+0x88>
 8002a64:	200044b8 	.word	0x200044b8
 8002a68:	40023c00 	.word	0x40023c00

08002a6c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	f200 80ea 	bhi.w	8002c48 <HAL_GPIO_Init+0x1dc>
{
 8002a74:	b4f0      	push	{r4, r5, r6, r7}
 8002a76:	b082      	sub	sp, #8
 8002a78:	e05e      	b.n	8002b38 <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a7c:	005f      	lsls	r7, r3, #1
 8002a7e:	2403      	movs	r4, #3
 8002a80:	40bc      	lsls	r4, r7
 8002a82:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a86:	68cc      	ldr	r4, [r1, #12]
 8002a88:	40bc      	lsls	r4, r7
 8002a8a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002a8c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a94:	684c      	ldr	r4, [r1, #4]
 8002a96:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002a9e:	6042      	str	r2, [r0, #4]
 8002aa0:	e058      	b.n	8002b54 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa2:	08dc      	lsrs	r4, r3, #3
 8002aa4:	3408      	adds	r4, #8
 8002aa6:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aaa:	f003 0207 	and.w	r2, r3, #7
 8002aae:	0096      	lsls	r6, r2, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	40b2      	lsls	r2, r6
 8002ab4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab8:	690a      	ldr	r2, [r1, #16]
 8002aba:	40b2      	lsls	r2, r6
 8002abc:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002abe:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002ac2:	e05b      	b.n	8002b7c <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac4:	2209      	movs	r2, #9
 8002ac6:	e000      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002ac8:	2200      	movs	r2, #0
 8002aca:	40b2      	lsls	r2, r6
 8002acc:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ace:	3402      	adds	r4, #2
 8002ad0:	4e5e      	ldr	r6, [pc, #376]	; (8002c4c <HAL_GPIO_Init+0x1e0>)
 8002ad2:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4a5e      	ldr	r2, [pc, #376]	; (8002c50 <HAL_GPIO_Init+0x1e4>)
 8002ad8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	43ea      	mvns	r2, r5
 8002adc:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae0:	684f      	ldr	r7, [r1, #4]
 8002ae2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002ae6:	d001      	beq.n	8002aec <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8002ae8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002aec:	4c58      	ldr	r4, [pc, #352]	; (8002c50 <HAL_GPIO_Init+0x1e4>)
 8002aee:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002af0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af6:	684f      	ldr	r7, [r1, #4]
 8002af8:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002afc:	d001      	beq.n	8002b02 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8002afe:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->FTSR = temp;
 8002b02:	4c53      	ldr	r4, [pc, #332]	; (8002c50 <HAL_GPIO_Init+0x1e4>)
 8002b04:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 8002b06:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002b08:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0c:	684f      	ldr	r7, [r1, #4]
 8002b0e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002b12:	d001      	beq.n	8002b18 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8002b14:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002b18:	4c4d      	ldr	r4, [pc, #308]	; (8002c50 <HAL_GPIO_Init+0x1e4>)
 8002b1a:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b1c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002b1e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b20:	684e      	ldr	r6, [r1, #4]
 8002b22:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002b26:	d001      	beq.n	8002b2c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8002b28:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->IMR = temp;
 8002b2c:	4c48      	ldr	r4, [pc, #288]	; (8002c50 <HAL_GPIO_Init+0x1e4>)
 8002b2e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b30:	3301      	adds	r3, #1
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f200 8085 	bhi.w	8002c42 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3c:	680c      	ldr	r4, [r1, #0]
 8002b3e:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002b42:	ea32 0404 	bics.w	r4, r2, r4
 8002b46:	d1f3      	bne.n	8002b30 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b48:	684c      	ldr	r4, [r1, #4]
 8002b4a:	f004 0403 	and.w	r4, r4, #3
 8002b4e:	3c01      	subs	r4, #1
 8002b50:	2c01      	cmp	r4, #1
 8002b52:	d992      	bls.n	8002a7a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b54:	684a      	ldr	r2, [r1, #4]
 8002b56:	f002 0203 	and.w	r2, r2, #3
 8002b5a:	2a03      	cmp	r2, #3
 8002b5c:	d009      	beq.n	8002b72 <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 8002b5e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b60:	005e      	lsls	r6, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	40b2      	lsls	r2, r6
 8002b66:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b6a:	688a      	ldr	r2, [r1, #8]
 8002b6c:	40b2      	lsls	r2, r6
 8002b6e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002b70:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	684a      	ldr	r2, [r1, #4]
 8002b74:	f002 0203 	and.w	r2, r2, #3
 8002b78:	2a02      	cmp	r2, #2
 8002b7a:	d092      	beq.n	8002aa2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8002b7c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	005e      	lsls	r6, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	40b2      	lsls	r2, r6
 8002b84:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b88:	684a      	ldr	r2, [r1, #4]
 8002b8a:	f002 0203 	and.w	r2, r2, #3
 8002b8e:	40b2      	lsls	r2, r6
 8002b90:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002b92:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	684a      	ldr	r2, [r1, #4]
 8002b96:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002b9a:	d0c9      	beq.n	8002b30 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <HAL_GPIO_Init+0x1e8>)
 8002ba2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002ba4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002ba8:	6454      	str	r4, [r2, #68]	; 0x44
 8002baa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002bb0:	9201      	str	r2, [sp, #4]
 8002bb2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb4:	089c      	lsrs	r4, r3, #2
 8002bb6:	1ca6      	adds	r6, r4, #2
 8002bb8:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <HAL_GPIO_Init+0x1e0>)
 8002bba:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bbe:	f003 0203 	and.w	r2, r3, #3
 8002bc2:	0096      	lsls	r6, r2, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	40b2      	lsls	r2, r6
 8002bc8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_GPIO_Init+0x1ec>)
 8002bce:	4290      	cmp	r0, r2
 8002bd0:	f43f af7a 	beq.w	8002ac8 <HAL_GPIO_Init+0x5c>
 8002bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bd8:	4290      	cmp	r0, r2
 8002bda:	d022      	beq.n	8002c22 <HAL_GPIO_Init+0x1b6>
 8002bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002be0:	4290      	cmp	r0, r2
 8002be2:	d020      	beq.n	8002c26 <HAL_GPIO_Init+0x1ba>
 8002be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002be8:	4290      	cmp	r0, r2
 8002bea:	d01e      	beq.n	8002c2a <HAL_GPIO_Init+0x1be>
 8002bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf0:	4290      	cmp	r0, r2
 8002bf2:	d01c      	beq.n	8002c2e <HAL_GPIO_Init+0x1c2>
 8002bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf8:	4290      	cmp	r0, r2
 8002bfa:	d01a      	beq.n	8002c32 <HAL_GPIO_Init+0x1c6>
 8002bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c00:	4290      	cmp	r0, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_GPIO_Init+0x1ca>
 8002c04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c08:	4290      	cmp	r0, r2
 8002c0a:	d016      	beq.n	8002c3a <HAL_GPIO_Init+0x1ce>
 8002c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c10:	4290      	cmp	r0, r2
 8002c12:	d014      	beq.n	8002c3e <HAL_GPIO_Init+0x1d2>
 8002c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c18:	4290      	cmp	r0, r2
 8002c1a:	f43f af53 	beq.w	8002ac4 <HAL_GPIO_Init+0x58>
 8002c1e:	220a      	movs	r2, #10
 8002c20:	e753      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c22:	2201      	movs	r2, #1
 8002c24:	e751      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c26:	2202      	movs	r2, #2
 8002c28:	e74f      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	e74d      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c2e:	2204      	movs	r2, #4
 8002c30:	e74b      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c32:	2205      	movs	r2, #5
 8002c34:	e749      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c36:	2206      	movs	r2, #6
 8002c38:	e747      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	e745      	b.n	8002aca <HAL_GPIO_Init+0x5e>
 8002c3e:	2208      	movs	r2, #8
 8002c40:	e743      	b.n	8002aca <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8002c42:	b002      	add	sp, #8
 8002c44:	bcf0      	pop	{r4, r5, r6, r7}
 8002c46:	4770      	bx	lr
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40013c00 	.word	0x40013c00
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40020000 	.word	0x40020000

08002c5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c5c:	b10a      	cbz	r2, 8002c62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5e:	6181      	str	r1, [r0, #24]
 8002c60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c62:	0409      	lsls	r1, r1, #16
 8002c64:	6181      	str	r1, [r0, #24]
  }
}
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c68:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c6a:	ea01 0203 	and.w	r2, r1, r3
 8002c6e:	ea21 0103 	bic.w	r1, r1, r3
 8002c72:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002c76:	6181      	str	r1, [r0, #24]
}
 8002c78:	4770      	bx	lr

08002c7a <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c7a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d010      	beq.n	8002ca6 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c84:	6903      	ldr	r3, [r0, #16]
 8002c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c8a:	d01b      	beq.n	8002cc4 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8002c8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d139      	bne.n	8002d06 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002c92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002c94:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002c98:	6802      	ldr	r2, [r0, #0]
 8002c9a:	f003 0306 	and.w	r3, r3, #6
 8002c9e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002ca2:	6113      	str	r3, [r2, #16]
 8002ca4:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8002ca6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ca8:	b92b      	cbnz	r3, 8002cb6 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002caa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cac:	6802      	ldr	r2, [r0, #0]
 8002cae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002cb2:	6113      	str	r3, [r2, #16]
 8002cb4:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cb6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cb8:	6802      	ldr	r2, [r0, #0]
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	6113      	str	r3, [r2, #16]
 8002cc2:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b21      	cmp	r3, #33	; 0x21
 8002ccc:	d00f      	beq.n	8002cee <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cd0:	6802      	ldr	r2, [r0, #0]
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cdc:	b16b      	cbz	r3, 8002cfa <I2C_Master_SB+0x80>
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	b15b      	cbz	r3, 8002cfa <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ce2:	6802      	ldr	r2, [r0, #0]
 8002ce4:	6853      	ldr	r3, [r2, #4]
 8002ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cea:	6053      	str	r3, [r2, #4]
 8002cec:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002cf0:	6802      	ldr	r2, [r0, #0]
 8002cf2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002cf6:	6113      	str	r3, [r2, #16]
 8002cf8:	e7ef      	b.n	8002cda <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002cfa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002cfc:	b133      	cbz	r3, 8002d0c <I2C_Master_SB+0x92>
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <I2C_Master_SB+0x68>
 8002d04:	e002      	b.n	8002d0c <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8002d06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d000      	beq.n	8002d0e <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 8002d0c:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002d10:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002d14:	6802      	ldr	r2, [r0, #0]
 8002d16:	f003 0306 	and.w	r3, r3, #6
 8002d1a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8002d1e:	6113      	str	r3, [r2, #16]
}
 8002d20:	e7f4      	b.n	8002d0c <I2C_Master_SB+0x92>

08002d22 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002d24:	6802      	ldr	r2, [r0, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d2c:	b13b      	cbz	r3, 8002d3e <I2C_Master_ADD10+0x1c>
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	b12b      	cbz	r3, 8002d3e <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d32:	6802      	ldr	r2, [r0, #0]
 8002d34:	6853      	ldr	r3, [r2, #4]
 8002d36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d3a:	6053      	str	r3, [r2, #4]
  }
}
 8002d3c:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0fb      	beq.n	8002d3c <I2C_Master_ADD10+0x1a>
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f3      	bne.n	8002d32 <I2C_Master_ADD10+0x10>
 8002d4a:	e7f7      	b.n	8002d3c <I2C_Master_ADD10+0x1a>

08002d4c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b410      	push	{r4}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d50:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002d54:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d56:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d58:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b22      	cmp	r3, #34	; 0x22
 8002d62:	d00b      	beq.n	8002d7c <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d64:	2300      	movs	r3, #0
 8002d66:	9309      	str	r3, [sp, #36]	; 0x24
 8002d68:	6803      	ldr	r3, [r0, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	9309      	str	r3, [sp, #36]	; 0x24
 8002d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8002d74:	b00b      	add	sp, #44	; 0x2c
 8002d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d7a:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002d7e:	b90b      	cbnz	r3, 8002d84 <I2C_Master_ADDR+0x38>
 8002d80:	2a40      	cmp	r2, #64	; 0x40
 8002d82:	d017      	beq.n	8002db4 <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002d86:	b91b      	cbnz	r3, 8002d90 <I2C_Master_ADDR+0x44>
 8002d88:	6903      	ldr	r3, [r0, #16]
 8002d8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d8e:	d019      	beq.n	8002dc4 <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8002d90:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d125      	bne.n	8002de4 <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	9202      	str	r2, [sp, #8]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	9202      	str	r2, [sp, #8]
 8002da4:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	6503      	str	r3, [r0, #80]	; 0x50
 8002db2:	e7df      	b.n	8002d74 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	6803      	ldr	r3, [r0, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	9200      	str	r2, [sp, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	9b00      	ldr	r3, [sp, #0]
 8002dc2:	e7d7      	b.n	8002d74 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	6803      	ldr	r3, [r0, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	9201      	str	r2, [sp, #4]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	9201      	str	r2, [sp, #4]
 8002dd2:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dda:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ddc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002dde:	3301      	adds	r3, #1
 8002de0:	6503      	str	r3, [r0, #80]	; 0x50
 8002de2:	e7c7      	b.n	8002d74 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8002de4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d025      	beq.n	8002e38 <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 8002dec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d07b      	beq.n	8002eec <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	6802      	ldr	r2, [r0, #0]
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfc:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002dfe:	6803      	ldr	r3, [r0, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002e06:	d00e      	beq.n	8002e26 <I2C_Master_ADDR+0xda>
 8002e08:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002e0c:	d007      	beq.n	8002e1e <I2C_Master_ADDR+0xd2>
 8002e0e:	2901      	cmp	r1, #1
 8002e10:	d005      	beq.n	8002e1e <I2C_Master_ADDR+0xd2>
 8002e12:	2908      	cmp	r1, #8
 8002e14:	d003      	beq.n	8002e1e <I2C_Master_ADDR+0xd2>
 8002e16:	2910      	cmp	r1, #16
 8002e18:	d001      	beq.n	8002e1e <I2C_Master_ADDR+0xd2>
 8002e1a:	2920      	cmp	r1, #32
 8002e1c:	d103      	bne.n	8002e26 <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e24:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	9308      	str	r3, [sp, #32]
 8002e2a:	6803      	ldr	r3, [r0, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	9208      	str	r2, [sp, #32]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	9308      	str	r3, [sp, #32]
 8002e34:	9b08      	ldr	r3, [sp, #32]
 8002e36:	e7ba      	b.n	8002dae <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e38:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002e3c:	d011      	beq.n	8002e62 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002e3e:	2908      	cmp	r1, #8
 8002e40:	d034      	beq.n	8002eac <I2C_Master_ADDR+0x160>
 8002e42:	2920      	cmp	r1, #32
 8002e44:	d032      	beq.n	8002eac <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002e46:	2c12      	cmp	r4, #18
 8002e48:	d02e      	beq.n	8002ea8 <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e4a:	2904      	cmp	r1, #4
 8002e4c:	d040      	beq.n	8002ed0 <I2C_Master_ADDR+0x184>
 8002e4e:	2902      	cmp	r1, #2
 8002e50:	d03e      	beq.n	8002ed0 <I2C_Master_ADDR+0x184>
 8002e52:	2910      	cmp	r1, #16
 8002e54:	d03c      	beq.n	8002ed0 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e56:	6802      	ldr	r2, [r0, #0]
 8002e58:	6813      	ldr	r3, [r2, #0]
 8002e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e03b      	b.n	8002eda <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e62:	6802      	ldr	r2, [r0, #0]
 8002e64:	6813      	ldr	r3, [r2, #0]
 8002e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e6a:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e6c:	6803      	ldr	r3, [r0, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002e74:	d00c      	beq.n	8002e90 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7c:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	9203      	str	r2, [sp, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	9303      	str	r3, [sp, #12]
 8002e8c:	9b03      	ldr	r3, [sp, #12]
 8002e8e:	e78e      	b.n	8002dae <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e90:	2200      	movs	r2, #0
 8002e92:	9204      	str	r2, [sp, #16]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	9204      	str	r2, [sp, #16]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	9204      	str	r2, [sp, #16]
 8002e9c:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e782      	b.n	8002dae <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ea8:	2901      	cmp	r1, #1
 8002eaa:	d0ce      	beq.n	8002e4a <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	6802      	ldr	r2, [r0, #0]
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb4:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9306      	str	r3, [sp, #24]
 8002eba:	6803      	ldr	r3, [r0, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	9206      	str	r2, [sp, #24]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	9206      	str	r2, [sp, #24]
 8002ec4:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e76e      	b.n	8002dae <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed0:	6802      	ldr	r2, [r0, #0]
 8002ed2:	6813      	ldr	r3, [r2, #0]
 8002ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed8:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	9305      	str	r3, [sp, #20]
 8002ede:	6803      	ldr	r3, [r0, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	9205      	str	r2, [sp, #20]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	9305      	str	r3, [sp, #20]
 8002ee8:	9b05      	ldr	r3, [sp, #20]
 8002eea:	e760      	b.n	8002dae <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002eec:	2904      	cmp	r1, #4
 8002eee:	d00e      	beq.n	8002f0e <I2C_Master_ADDR+0x1c2>
 8002ef0:	2902      	cmp	r1, #2
 8002ef2:	d00c      	beq.n	8002f0e <I2C_Master_ADDR+0x1c2>
 8002ef4:	2910      	cmp	r1, #16
 8002ef6:	d00a      	beq.n	8002f0e <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef8:	6802      	ldr	r2, [r0, #0]
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f00:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f02:	6802      	ldr	r2, [r0, #0]
 8002f04:	6813      	ldr	r3, [r2, #0]
 8002f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e004      	b.n	8002f18 <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	6802      	ldr	r2, [r0, #0]
 8002f10:	6813      	ldr	r3, [r2, #0]
 8002f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f16:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f18:	6803      	ldr	r3, [r0, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002f20:	d00e      	beq.n	8002f40 <I2C_Master_ADDR+0x1f4>
 8002f22:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002f26:	d007      	beq.n	8002f38 <I2C_Master_ADDR+0x1ec>
 8002f28:	2901      	cmp	r1, #1
 8002f2a:	d005      	beq.n	8002f38 <I2C_Master_ADDR+0x1ec>
 8002f2c:	2908      	cmp	r1, #8
 8002f2e:	d003      	beq.n	8002f38 <I2C_Master_ADDR+0x1ec>
 8002f30:	2910      	cmp	r1, #16
 8002f32:	d001      	beq.n	8002f38 <I2C_Master_ADDR+0x1ec>
 8002f34:	2920      	cmp	r1, #32
 8002f36:	d103      	bne.n	8002f40 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f3e:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f40:	2300      	movs	r3, #0
 8002f42:	9307      	str	r3, [sp, #28]
 8002f44:	6803      	ldr	r3, [r0, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	9207      	str	r2, [sp, #28]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	9307      	str	r3, [sp, #28]
 8002f4e:	9b07      	ldr	r3, [sp, #28]
 8002f50:	e72d      	b.n	8002dae <I2C_Master_ADDR+0x62>

08002f52 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002f52:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b15b      	cbz	r3, 8002f70 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f58:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f62:	3301      	adds	r3, #1
 8002f64:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f66:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002f70:	4770      	bx	lr

08002f72 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002f72:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b15b      	cbz	r3, 8002f90 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f78:	6803      	ldr	r3, [r0, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f82:	3301      	adds	r3, #1
 8002f84:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f86:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002f90:	4770      	bx	lr
	...

08002f94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	08db      	lsrs	r3, r3, #3
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fac:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8002fae:	9b01      	ldr	r3, [sp, #4]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002fb4:	9b01      	ldr	r3, [sp, #4]
 8002fb6:	b133      	cbz	r3, 8002fc6 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fb8:	6803      	ldr	r3, [r0, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002fc0:	d1f5      	bne.n	8002fae <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	e004      	b.n	8002fd0 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	4770      	bx	lr
 8002fd4:	20002954 	.word	0x20002954
 8002fd8:	14f8b589 	.word	0x14f8b589

08002fdc <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002fdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002fe2:	d004      	beq.n	8002fee <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002fe4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002fe6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002fea:	d003      	beq.n	8002ff4 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002fec:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002ff2:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002ff8:	e7f8      	b.n	8002fec <I2C_ConvertOtherXferOptions+0x10>
	...

08002ffc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	f000 80cc 	beq.w	800319a <HAL_I2C_Init+0x19e>
{
 8003002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003004:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003006:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800300a:	2b00      	cmp	r3, #0
 800300c:	d077      	beq.n	80030fe <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800300e:	2324      	movs	r3, #36	; 0x24
 8003010:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003014:	6822      	ldr	r2, [r4, #0]
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	6813      	ldr	r3, [r2, #0]
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003028:	6822      	ldr	r2, [r4, #0]
 800302a:	6813      	ldr	r3, [r2, #0]
 800302c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003030:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003032:	f001 fb7b 	bl	800472c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003036:	6862      	ldr	r2, [r4, #4]
 8003038:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <HAL_I2C_Init+0x1a8>)
 800303a:	429a      	cmp	r2, r3
 800303c:	d864      	bhi.n	8003108 <HAL_I2C_Init+0x10c>
 800303e:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_I2C_Init+0x1ac>)
 8003040:	4298      	cmp	r0, r3
 8003042:	bf8c      	ite	hi
 8003044:	2300      	movhi	r3, #0
 8003046:	2301      	movls	r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 80a8 	bne.w	800319e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800304e:	4d57      	ldr	r5, [pc, #348]	; (80031ac <HAL_I2C_Init+0x1b0>)
 8003050:	fba5 3500 	umull	r3, r5, r5, r0
 8003054:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	6826      	ldr	r6, [r4, #0]
 8003058:	6871      	ldr	r1, [r6, #4]
 800305a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800305e:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8003062:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003064:	6821      	ldr	r1, [r4, #0]
 8003066:	6a0b      	ldr	r3, [r1, #32]
 8003068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800306c:	6865      	ldr	r5, [r4, #4]
 800306e:	4a4d      	ldr	r2, [pc, #308]	; (80031a4 <HAL_I2C_Init+0x1a8>)
 8003070:	4295      	cmp	r5, r2
 8003072:	d84f      	bhi.n	8003114 <HAL_I2C_Init+0x118>
 8003074:	1c7a      	adds	r2, r7, #1
 8003076:	4313      	orrs	r3, r2
 8003078:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800307a:	6825      	ldr	r5, [r4, #0]
 800307c:	69e9      	ldr	r1, [r5, #28]
 800307e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003082:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003086:	6863      	ldr	r3, [r4, #4]
 8003088:	4a46      	ldr	r2, [pc, #280]	; (80031a4 <HAL_I2C_Init+0x1a8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d84c      	bhi.n	8003128 <HAL_I2C_Init+0x12c>
 800308e:	3801      	subs	r0, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fbb0 f0f3 	udiv	r0, r0, r3
 8003096:	3001      	adds	r0, #1
 8003098:	f640 73fc 	movw	r3, #4092	; 0xffc
 800309c:	4218      	tst	r0, r3
 800309e:	d078      	beq.n	8003192 <HAL_I2C_Init+0x196>
 80030a0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80030a4:	430b      	orrs	r3, r1
 80030a6:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	680b      	ldr	r3, [r1, #0]
 80030ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030b0:	69e2      	ldr	r2, [r4, #28]
 80030b2:	6a20      	ldr	r0, [r4, #32]
 80030b4:	4302      	orrs	r2, r0
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ba:	6821      	ldr	r1, [r4, #0]
 80030bc:	688b      	ldr	r3, [r1, #8]
 80030be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030c6:	6922      	ldr	r2, [r4, #16]
 80030c8:	68e0      	ldr	r0, [r4, #12]
 80030ca:	4302      	orrs	r2, r0
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d0:	6821      	ldr	r1, [r4, #0]
 80030d2:	68cb      	ldr	r3, [r1, #12]
 80030d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030d8:	6962      	ldr	r2, [r4, #20]
 80030da:	69a0      	ldr	r0, [r4, #24]
 80030dc:	4302      	orrs	r2, r0
 80030de:	4313      	orrs	r3, r2
 80030e0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	6813      	ldr	r3, [r2, #0]
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	2000      	movs	r0, #0
 80030ee:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	2320      	movs	r3, #32
 80030f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80030fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80030fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003102:	f00a ff6d 	bl	800dfe0 <HAL_I2C_MspInit>
 8003106:	e782      	b.n	800300e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_I2C_Init+0x1b4>)
 800310a:	4298      	cmp	r0, r3
 800310c:	bf8c      	ite	hi
 800310e:	2300      	movhi	r3, #0
 8003110:	2301      	movls	r3, #1
 8003112:	e799      	b.n	8003048 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003114:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003118:	fb02 f207 	mul.w	r2, r2, r7
 800311c:	4d25      	ldr	r5, [pc, #148]	; (80031b4 <HAL_I2C_Init+0x1b8>)
 800311e:	fba5 5202 	umull	r5, r2, r5, r2
 8003122:	0992      	lsrs	r2, r2, #6
 8003124:	3201      	adds	r2, #1
 8003126:	e7a6      	b.n	8003076 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003128:	68a2      	ldr	r2, [r4, #8]
 800312a:	b9ba      	cbnz	r2, 800315c <HAL_I2C_Init+0x160>
 800312c:	1e46      	subs	r6, r0, #1
 800312e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003132:	fbb6 f6f7 	udiv	r6, r6, r7
 8003136:	3601      	adds	r6, #1
 8003138:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800313c:	fab6 f686 	clz	r6, r6
 8003140:	0976      	lsrs	r6, r6, #5
 8003142:	bb46      	cbnz	r6, 8003196 <HAL_I2C_Init+0x19a>
 8003144:	b9c2      	cbnz	r2, 8003178 <HAL_I2C_Init+0x17c>
 8003146:	1e42      	subs	r2, r0, #1
 8003148:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800314c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003150:	3201      	adds	r2, #1
 8003152:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003156:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800315a:	e7a3      	b.n	80030a4 <HAL_I2C_Init+0xa8>
 800315c:	1e46      	subs	r6, r0, #1
 800315e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003162:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003166:	fbb6 f6f7 	udiv	r6, r6, r7
 800316a:	3601      	adds	r6, #1
 800316c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003170:	fab6 f686 	clz	r6, r6
 8003174:	0976      	lsrs	r6, r6, #5
 8003176:	e7e4      	b.n	8003142 <HAL_I2C_Init+0x146>
 8003178:	1e42      	subs	r2, r0, #1
 800317a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800317e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003182:	fbb2 f2f3 	udiv	r2, r2, r3
 8003186:	3201      	adds	r2, #1
 8003188:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800318c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003190:	e788      	b.n	80030a4 <HAL_I2C_Init+0xa8>
 8003192:	2304      	movs	r3, #4
 8003194:	e786      	b.n	80030a4 <HAL_I2C_Init+0xa8>
 8003196:	2301      	movs	r3, #1
 8003198:	e784      	b.n	80030a4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800319a:	2001      	movs	r0, #1
}
 800319c:	4770      	bx	lr
    return HAL_ERROR;
 800319e:	2001      	movs	r0, #1
 80031a0:	e7ac      	b.n	80030fc <HAL_I2C_Init+0x100>
 80031a2:	bf00      	nop
 80031a4:	000186a0 	.word	0x000186a0
 80031a8:	001e847f 	.word	0x001e847f
 80031ac:	431bde83 	.word	0x431bde83
 80031b0:	003d08ff 	.word	0x003d08ff
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_I2C_Mem_Write_IT>:
{
 80031b8:	b430      	push	{r4, r5}
 80031ba:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80031bc:	2400      	movs	r4, #0
 80031be:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c0:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80031c4:	b2e4      	uxtb	r4, r4
 80031c6:	2c20      	cmp	r4, #32
 80031c8:	d15c      	bne.n	8003284 <HAL_I2C_Mem_Write_IT+0xcc>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ca:	4c31      	ldr	r4, [pc, #196]	; (8003290 <HAL_I2C_Mem_Write_IT+0xd8>)
 80031cc:	6824      	ldr	r4, [r4, #0]
 80031ce:	08e4      	lsrs	r4, r4, #3
 80031d0:	4d30      	ldr	r5, [pc, #192]	; (8003294 <HAL_I2C_Mem_Write_IT+0xdc>)
 80031d2:	fba5 5404 	umull	r5, r4, r5, r4
 80031d6:	0a24      	lsrs	r4, r4, #8
 80031d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80031dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80031e0:	9401      	str	r4, [sp, #4]
      count--;
 80031e2:	9c01      	ldr	r4, [sp, #4]
 80031e4:	3c01      	subs	r4, #1
 80031e6:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80031e8:	9c01      	ldr	r4, [sp, #4]
 80031ea:	2c00      	cmp	r4, #0
 80031ec:	d03b      	beq.n	8003266 <HAL_I2C_Mem_Write_IT+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80031ee:	6804      	ldr	r4, [r0, #0]
 80031f0:	69a5      	ldr	r5, [r4, #24]
 80031f2:	f015 0f02 	tst.w	r5, #2
 80031f6:	d1f4      	bne.n	80031e2 <HAL_I2C_Mem_Write_IT+0x2a>
    __HAL_LOCK(hi2c);
 80031f8:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80031fc:	2d01      	cmp	r5, #1
 80031fe:	d045      	beq.n	800328c <HAL_I2C_Mem_Write_IT+0xd4>
 8003200:	2501      	movs	r5, #1
 8003202:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003206:	6825      	ldr	r5, [r4, #0]
 8003208:	f015 0f01 	tst.w	r5, #1
 800320c:	d103      	bne.n	8003216 <HAL_I2C_Mem_Write_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800320e:	6825      	ldr	r5, [r4, #0]
 8003210:	f045 0501 	orr.w	r5, r5, #1
 8003214:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003216:	6805      	ldr	r5, [r0, #0]
 8003218:	682c      	ldr	r4, [r5, #0]
 800321a:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800321e:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003220:	2421      	movs	r4, #33	; 0x21
 8003222:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003226:	2440      	movs	r4, #64	; 0x40
 8003228:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	2400      	movs	r4, #0
 800322e:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003230:	9d04      	ldr	r5, [sp, #16]
 8003232:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003234:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8003238:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800323a:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 800323c:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323e:	4d16      	ldr	r5, [pc, #88]	; (8003298 <HAL_I2C_Mem_Write_IT+0xe0>)
 8003240:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003242:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003244:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003246:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003248:	6504      	str	r4, [r0, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	6802      	ldr	r2, [r0, #0]
 800324c:	6813      	ldr	r3, [r2, #0]
 800324e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003252:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003254:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003258:	6802      	ldr	r2, [r0, #0]
 800325a:	6853      	ldr	r3, [r2, #4]
 800325c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003260:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8003262:	4620      	mov	r0, r4
 8003264:	e00f      	b.n	8003286 <HAL_I2C_Mem_Write_IT+0xce>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800326a:	2220      	movs	r2, #32
 800326c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800327c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8003280:	2001      	movs	r0, #1
 8003282:	e000      	b.n	8003286 <HAL_I2C_Mem_Write_IT+0xce>
    return HAL_BUSY;
 8003284:	2002      	movs	r0, #2
}
 8003286:	b002      	add	sp, #8
 8003288:	bc30      	pop	{r4, r5}
 800328a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800328c:	2002      	movs	r0, #2
 800328e:	e7fa      	b.n	8003286 <HAL_I2C_Mem_Write_IT+0xce>
 8003290:	20002954 	.word	0x20002954
 8003294:	14f8b589 	.word	0x14f8b589
 8003298:	ffff0000 	.word	0xffff0000

0800329c <HAL_I2C_Mem_Read_IT>:
{
 800329c:	b430      	push	{r4, r5}
 800329e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80032a0:	2400      	movs	r4, #0
 80032a2:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80032a8:	b2e4      	uxtb	r4, r4
 80032aa:	2c20      	cmp	r4, #32
 80032ac:	d163      	bne.n	8003376 <HAL_I2C_Mem_Read_IT+0xda>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80032ae:	4c35      	ldr	r4, [pc, #212]	; (8003384 <HAL_I2C_Mem_Read_IT+0xe8>)
 80032b0:	6824      	ldr	r4, [r4, #0]
 80032b2:	08e4      	lsrs	r4, r4, #3
 80032b4:	4d34      	ldr	r5, [pc, #208]	; (8003388 <HAL_I2C_Mem_Read_IT+0xec>)
 80032b6:	fba5 5404 	umull	r5, r4, r5, r4
 80032ba:	0a24      	lsrs	r4, r4, #8
 80032bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80032c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80032c4:	9401      	str	r4, [sp, #4]
      count--;
 80032c6:	9c01      	ldr	r4, [sp, #4]
 80032c8:	3c01      	subs	r4, #1
 80032ca:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80032cc:	9c01      	ldr	r4, [sp, #4]
 80032ce:	2c00      	cmp	r4, #0
 80032d0:	d042      	beq.n	8003358 <HAL_I2C_Mem_Read_IT+0xbc>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80032d2:	6804      	ldr	r4, [r0, #0]
 80032d4:	69a5      	ldr	r5, [r4, #24]
 80032d6:	f015 0f02 	tst.w	r5, #2
 80032da:	d1f4      	bne.n	80032c6 <HAL_I2C_Mem_Read_IT+0x2a>
    __HAL_LOCK(hi2c);
 80032dc:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80032e0:	2d01      	cmp	r5, #1
 80032e2:	d04c      	beq.n	800337e <HAL_I2C_Mem_Read_IT+0xe2>
 80032e4:	2501      	movs	r5, #1
 80032e6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ea:	6825      	ldr	r5, [r4, #0]
 80032ec:	f015 0f01 	tst.w	r5, #1
 80032f0:	d103      	bne.n	80032fa <HAL_I2C_Mem_Read_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80032f2:	6825      	ldr	r5, [r4, #0]
 80032f4:	f045 0501 	orr.w	r5, r5, #1
 80032f8:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fa:	6805      	ldr	r5, [r0, #0]
 80032fc:	682c      	ldr	r4, [r5, #0]
 80032fe:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003302:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003304:	2422      	movs	r4, #34	; 0x22
 8003306:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800330a:	2440      	movs	r4, #64	; 0x40
 800330c:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	2400      	movs	r4, #0
 8003312:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003314:	9d04      	ldr	r5, [sp, #16]
 8003316:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003318:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 800331c:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800331e:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 8003320:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003322:	4d1a      	ldr	r5, [pc, #104]	; (800338c <HAL_I2C_Mem_Read_IT+0xf0>)
 8003324:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003326:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003328:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800332a:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800332c:	6504      	str	r4, [r0, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332e:	6802      	ldr	r2, [r0, #0]
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003336:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003338:	6802      	ldr	r2, [r0, #0]
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003342:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if (hi2c->XferSize > 0U)
 8003346:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003348:	b123      	cbz	r3, 8003354 <HAL_I2C_Mem_Read_IT+0xb8>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800334a:	6802      	ldr	r2, [r0, #0]
 800334c:	6853      	ldr	r3, [r2, #4]
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8003354:	2000      	movs	r0, #0
 8003356:	e00f      	b.n	8003378 <HAL_I2C_Mem_Read_IT+0xdc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003358:	2300      	movs	r3, #0
 800335a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335c:	2220      	movs	r2, #32
 800335e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003362:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003368:	f042 0220 	orr.w	r2, r2, #32
 800336c:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800336e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8003372:	2001      	movs	r0, #1
 8003374:	e000      	b.n	8003378 <HAL_I2C_Mem_Read_IT+0xdc>
    return HAL_BUSY;
 8003376:	2002      	movs	r0, #2
}
 8003378:	b002      	add	sp, #8
 800337a:	bc30      	pop	{r4, r5}
 800337c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800337e:	2002      	movs	r0, #2
 8003380:	e7fa      	b.n	8003378 <HAL_I2C_Mem_Read_IT+0xdc>
 8003382:	bf00      	nop
 8003384:	20002954 	.word	0x20002954
 8003388:	14f8b589 	.word	0x14f8b589
 800338c:	ffff0000 	.word	0xffff0000

08003390 <HAL_I2C_MasterTxCpltCallback>:
}
 8003390:	4770      	bx	lr

08003392 <HAL_I2C_MasterRxCpltCallback>:
}
 8003392:	4770      	bx	lr

08003394 <HAL_I2C_SlaveTxCpltCallback>:
}
 8003394:	4770      	bx	lr

08003396 <I2C_SlaveTransmit_TXE>:
{
 8003396:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003398:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800339c:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800339e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b183      	cbz	r3, 80033c6 <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80033a6:	6803      	ldr	r3, [r0, #0]
 80033a8:	7809      	ldrb	r1, [r1, #0]
 80033aa:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80033ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033ae:	3301      	adds	r3, #1
 80033b0:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80033b2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	b90b      	cbnz	r3, 80033c6 <I2C_SlaveTransmit_TXE+0x30>
 80033c2:	2a29      	cmp	r2, #41	; 0x29
 80033c4:	d000      	beq.n	80033c8 <I2C_SlaveTransmit_TXE+0x32>
}
 80033c6:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033c8:	6802      	ldr	r2, [r0, #0]
 80033ca:	6853      	ldr	r3, [r2, #4]
 80033cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033d0:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033d2:	2321      	movs	r3, #33	; 0x21
 80033d4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033d6:	2328      	movs	r3, #40	; 0x28
 80033d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033dc:	f7ff ffda 	bl	8003394 <HAL_I2C_SlaveTxCpltCallback>
}
 80033e0:	e7f1      	b.n	80033c6 <I2C_SlaveTransmit_TXE+0x30>

080033e2 <HAL_I2C_SlaveRxCpltCallback>:
}
 80033e2:	4770      	bx	lr

080033e4 <I2C_SlaveReceive_RXNE>:
{
 80033e4:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033ea:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80033ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	b183      	cbz	r3, 8003414 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f2:	6803      	ldr	r3, [r0, #0]
 80033f4:	6919      	ldr	r1, [r3, #16]
 80033f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033f8:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80033fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033fc:	3301      	adds	r3, #1
 80033fe:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003400:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29b      	uxth	r3, r3
 8003408:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800340a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	b90b      	cbnz	r3, 8003414 <I2C_SlaveReceive_RXNE+0x30>
 8003410:	2a2a      	cmp	r2, #42	; 0x2a
 8003412:	d000      	beq.n	8003416 <I2C_SlaveReceive_RXNE+0x32>
}
 8003414:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003416:	6802      	ldr	r2, [r0, #0]
 8003418:	6853      	ldr	r3, [r2, #4]
 800341a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003420:	2322      	movs	r3, #34	; 0x22
 8003422:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003424:	2328      	movs	r3, #40	; 0x28
 8003426:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800342a:	f7ff ffda 	bl	80033e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800342e:	e7f1      	b.n	8003414 <I2C_SlaveReceive_RXNE+0x30>

08003430 <HAL_I2C_AddrCallback>:
}
 8003430:	4770      	bx	lr

08003432 <I2C_Slave_ADDR>:
{
 8003432:	b500      	push	{lr}
 8003434:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003436:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800343a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800343e:	2b28      	cmp	r3, #40	; 0x28
 8003440:	d00c      	beq.n	800345c <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	6802      	ldr	r2, [r0, #0]
 8003448:	6951      	ldr	r1, [r2, #20]
 800344a:	9101      	str	r1, [sp, #4]
 800344c:	6992      	ldr	r2, [r2, #24]
 800344e:	9201      	str	r2, [sp, #4]
 8003450:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8003452:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003456:	b003      	add	sp, #12
 8003458:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800345c:	6802      	ldr	r2, [r0, #0]
 800345e:	6853      	ldr	r3, [r2, #4]
 8003460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003464:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003466:	f011 0f04 	tst.w	r1, #4
 800346a:	d00b      	beq.n	8003484 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800346c:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800346e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003472:	d109      	bne.n	8003488 <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003474:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8003476:	2100      	movs	r1, #0
 8003478:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800347c:	4619      	mov	r1, r3
 800347e:	f7ff ffd7 	bl	8003430 <HAL_I2C_AddrCallback>
 8003482:	e7e8      	b.n	8003456 <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003484:	2301      	movs	r3, #1
 8003486:	e7f2      	b.n	800346e <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003488:	8b02      	ldrh	r2, [r0, #24]
 800348a:	e7f4      	b.n	8003476 <I2C_Slave_ADDR+0x44>

0800348c <HAL_I2C_ListenCpltCallback>:
}
 800348c:	4770      	bx	lr
	...

08003490 <I2C_Slave_AF>:
{
 8003490:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003492:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003496:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003498:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800349a:	2a08      	cmp	r2, #8
 800349c:	d001      	beq.n	80034a2 <I2C_Slave_AF+0x12>
 800349e:	2a20      	cmp	r2, #32
 80034a0:	d101      	bne.n	80034a6 <I2C_Slave_AF+0x16>
 80034a2:	2b28      	cmp	r3, #40	; 0x28
 80034a4:	d006      	beq.n	80034b4 <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034a6:	2b21      	cmp	r3, #33	; 0x21
 80034a8:	d01e      	beq.n	80034e8 <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034aa:	6803      	ldr	r3, [r0, #0]
 80034ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b0:	615a      	str	r2, [r3, #20]
}
 80034b2:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <I2C_Slave_AF+0x90>)
 80034b6:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b8:	6802      	ldr	r2, [r0, #0]
 80034ba:	6853      	ldr	r3, [r2, #4]
 80034bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034c0:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c2:	6803      	ldr	r3, [r0, #0]
 80034c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	6802      	ldr	r2, [r0, #0]
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d2:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034d8:	2220      	movs	r2, #32
 80034da:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80034e2:	f7ff ffd3 	bl	800348c <HAL_I2C_ListenCpltCallback>
 80034e6:	e7e4      	b.n	80034b2 <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <I2C_Slave_AF+0x90>)
 80034ea:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034ec:	2321      	movs	r3, #33	; 0x21
 80034ee:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034f0:	2320      	movs	r3, #32
 80034f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034fc:	6802      	ldr	r2, [r0, #0]
 80034fe:	6853      	ldr	r3, [r2, #4]
 8003500:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003504:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003506:	6803      	ldr	r3, [r0, #0]
 8003508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800350c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	6802      	ldr	r2, [r0, #0]
 8003510:	6813      	ldr	r3, [r2, #0]
 8003512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003516:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003518:	f7ff ff3c 	bl	8003394 <HAL_I2C_SlaveTxCpltCallback>
 800351c:	e7c9      	b.n	80034b2 <I2C_Slave_AF+0x22>
 800351e:	bf00      	nop
 8003520:	ffff0000 	.word	0xffff0000

08003524 <I2C_MasterTransmit_BTF>:
{
 8003524:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003526:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003528:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b21      	cmp	r3, #33	; 0x21
 8003530:	d000      	beq.n	8003534 <I2C_MasterTransmit_BTF+0x10>
}
 8003532:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8003534:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	b163      	cbz	r3, 8003554 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800353a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800353c:	6803      	ldr	r3, [r0, #0]
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003544:	3301      	adds	r3, #1
 8003546:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003548:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003552:	e7ee      	b.n	8003532 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003554:	2a08      	cmp	r2, #8
 8003556:	d004      	beq.n	8003562 <I2C_MasterTransmit_BTF+0x3e>
 8003558:	2a20      	cmp	r2, #32
 800355a:	d002      	beq.n	8003562 <I2C_MasterTransmit_BTF+0x3e>
 800355c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003560:	d119      	bne.n	8003596 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003562:	6802      	ldr	r2, [r0, #0]
 8003564:	6853      	ldr	r3, [r2, #4]
 8003566:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800356a:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	6802      	ldr	r2, [r0, #0]
 800356e:	6813      	ldr	r3, [r2, #0]
 8003570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003574:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	2300      	movs	r3, #0
 8003578:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800357a:	2320      	movs	r3, #32
 800357c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003580:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d015      	beq.n	80035b6 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003590:	f7ff fefe 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
}
 8003594:	e7cd      	b.n	8003532 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003596:	6802      	ldr	r2, [r0, #0]
 8003598:	6853      	ldr	r3, [r2, #4]
 800359a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800359e:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035a0:	2311      	movs	r3, #17
 80035a2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	2320      	movs	r3, #32
 80035ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035b0:	f7ff feee 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
 80035b4:	e7bd      	b.n	8003532 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035bc:	f00e fc94 	bl	8011ee8 <HAL_I2C_MemTxCpltCallback>
 80035c0:	e7b7      	b.n	8003532 <I2C_MasterTransmit_BTF+0xe>

080035c2 <I2C_MemoryTransmit_TXE_BTF>:
{
 80035c2:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80035c8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80035ca:	b99a      	cbnz	r2, 80035f4 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d008      	beq.n	80035e4 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80035d2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80035d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80035d8:	6802      	ldr	r2, [r0, #0]
 80035da:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 80035dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80035de:	3301      	adds	r3, #1
 80035e0:	6503      	str	r3, [r0, #80]	; 0x50
}
 80035e2:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80035e6:	6802      	ldr	r2, [r0, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 80035ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80035ee:	3302      	adds	r3, #2
 80035f0:	6503      	str	r3, [r0, #80]	; 0x50
 80035f2:	e7f6      	b.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80035f4:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 80035f6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80035f8:	2a01      	cmp	r2, #1
 80035fa:	d023      	beq.n	8003644 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 80035fc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80035fe:	2a02      	cmp	r2, #2
 8003600:	d1ef      	bne.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003602:	2b22      	cmp	r3, #34	; 0x22
 8003604:	d026      	beq.n	8003654 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003606:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003608:	b292      	uxth	r2, r2
 800360a:	b10a      	cbz	r2, 8003610 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 800360c:	2b21      	cmp	r3, #33	; 0x21
 800360e:	d02a      	beq.n	8003666 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003610:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003612:	b292      	uxth	r2, r2
 8003614:	2a00      	cmp	r2, #0
 8003616:	d1e4      	bne.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003618:	2b21      	cmp	r3, #33	; 0x21
 800361a:	d1e2      	bne.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800361c:	6802      	ldr	r2, [r0, #0]
 800361e:	6853      	ldr	r3, [r2, #4]
 8003620:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003624:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	6802      	ldr	r2, [r0, #0]
 8003628:	6813      	ldr	r3, [r2, #0]
 800362a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800362e:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	2300      	movs	r3, #0
 8003632:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003634:	2220      	movs	r2, #32
 8003636:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800363e:	f00e fc53 	bl	8011ee8 <HAL_I2C_MemTxCpltCallback>
}
 8003642:	e7ce      	b.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003644:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003646:	6802      	ldr	r2, [r0, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 800364c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800364e:	3301      	adds	r3, #1
 8003650:	6503      	str	r3, [r0, #80]	; 0x50
 8003652:	e7c6      	b.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003654:	6802      	ldr	r2, [r0, #0]
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365c:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 800365e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003660:	3301      	adds	r3, #1
 8003662:	6503      	str	r3, [r0, #80]	; 0x50
 8003664:	e7bd      	b.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003666:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003668:	6803      	ldr	r3, [r0, #0]
 800366a:	7812      	ldrb	r2, [r2, #0]
 800366c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800366e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003670:	3301      	adds	r3, #1
 8003672:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003674:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800367e:	e7b0      	b.n	80035e2 <I2C_MemoryTransmit_TXE_BTF+0x20>

08003680 <I2C_MasterTransmit_TXE>:
{
 8003680:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003682:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003688:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800368c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800368e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003690:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003692:	b909      	cbnz	r1, 8003698 <I2C_MasterTransmit_TXE+0x18>
 8003694:	2b21      	cmp	r3, #33	; 0x21
 8003696:	d004      	beq.n	80036a2 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003698:	2b21      	cmp	r3, #33	; 0x21
 800369a:	d03b      	beq.n	8003714 <I2C_MasterTransmit_TXE+0x94>
 800369c:	2a40      	cmp	r2, #64	; 0x40
 800369e:	d037      	beq.n	8003710 <I2C_MasterTransmit_TXE+0x90>
}
 80036a0:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036a2:	2c08      	cmp	r4, #8
 80036a4:	d004      	beq.n	80036b0 <I2C_MasterTransmit_TXE+0x30>
 80036a6:	2c20      	cmp	r4, #32
 80036a8:	d002      	beq.n	80036b0 <I2C_MasterTransmit_TXE+0x30>
 80036aa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80036ae:	d119      	bne.n	80036e4 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036b0:	6802      	ldr	r2, [r0, #0]
 80036b2:	6853      	ldr	r3, [r2, #4]
 80036b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036b8:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ba:	6802      	ldr	r2, [r0, #0]
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036c2:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	2320      	movs	r3, #32
 80036ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ce:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d015      	beq.n	8003704 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	2300      	movs	r3, #0
 80036da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036de:	f7ff fe57 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
 80036e2:	e7dd      	b.n	80036a0 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e4:	6802      	ldr	r2, [r0, #0]
 80036e6:	6853      	ldr	r3, [r2, #4]
 80036e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036ec:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036ee:	2311      	movs	r3, #17
 80036f0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	2320      	movs	r3, #32
 80036fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036fe:	f7ff fe47 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
 8003702:	e7cd      	b.n	80036a0 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	2300      	movs	r3, #0
 8003706:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800370a:	f00e fbed 	bl	8011ee8 <HAL_I2C_MemTxCpltCallback>
 800370e:	e7c7      	b.n	80036a0 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003710:	2b22      	cmp	r3, #34	; 0x22
 8003712:	d1c5      	bne.n	80036a0 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8003714:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	b92b      	cbnz	r3, 8003726 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800371a:	6802      	ldr	r2, [r0, #0]
 800371c:	6853      	ldr	r3, [r2, #4]
 800371e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003722:	6053      	str	r3, [r2, #4]
 8003724:	e7bc      	b.n	80036a0 <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003726:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d00c      	beq.n	800374a <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003730:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003732:	6803      	ldr	r3, [r0, #0]
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800373a:	3301      	adds	r3, #1
 800373c:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 800373e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003748:	e7aa      	b.n	80036a0 <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800374a:	f7ff ff3a 	bl	80035c2 <I2C_MemoryTransmit_TXE_BTF>
 800374e:	e7a7      	b.n	80036a0 <I2C_MasterTransmit_TXE+0x20>

08003750 <I2C_MasterReceive_BTF>:
{
 8003750:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003752:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003754:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b04      	cmp	r3, #4
 800375a:	d014      	beq.n	8003786 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 800375c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b03      	cmp	r3, #3
 8003762:	d022      	beq.n	80037aa <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8003764:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d039      	beq.n	80037e0 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	6803      	ldr	r3, [r0, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003772:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003776:	3301      	adds	r3, #1
 8003778:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800377a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003784:	e010      	b.n	80037a8 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003786:	6802      	ldr	r2, [r0, #0]
 8003788:	6853      	ldr	r3, [r2, #4]
 800378a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378e:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003796:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003798:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800379a:	3301      	adds	r3, #1
 800379c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800379e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80037a8:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037aa:	6801      	ldr	r1, [r0, #0]
 80037ac:	684b      	ldr	r3, [r1, #4]
 80037ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b2:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037b4:	2a04      	cmp	r2, #4
 80037b6:	d006      	beq.n	80037c6 <I2C_MasterReceive_BTF+0x76>
 80037b8:	2a02      	cmp	r2, #2
 80037ba:	d004      	beq.n	80037c6 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037bc:	6802      	ldr	r2, [r0, #0]
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c4:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	6803      	ldr	r3, [r0, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037d0:	3301      	adds	r3, #1
 80037d2:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80037d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8543      	strh	r3, [r0, #42]	; 0x2a
 80037de:	e7e3      	b.n	80037a8 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80037e0:	2a01      	cmp	r2, #1
 80037e2:	d00b      	beq.n	80037fc <I2C_MasterReceive_BTF+0xac>
 80037e4:	2a10      	cmp	r2, #16
 80037e6:	d009      	beq.n	80037fc <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037e8:	2a04      	cmp	r2, #4
 80037ea:	d038      	beq.n	800385e <I2C_MasterReceive_BTF+0x10e>
 80037ec:	2a02      	cmp	r2, #2
 80037ee:	d036      	beq.n	800385e <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	6802      	ldr	r2, [r0, #0]
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e004      	b.n	8003806 <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fc:	6802      	ldr	r2, [r0, #0]
 80037fe:	6813      	ldr	r3, [r2, #0]
 8003800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003804:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	6803      	ldr	r3, [r0, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800380c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800380e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003810:	1c53      	adds	r3, r2, #1
 8003812:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003814:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29b      	uxth	r3, r3
 800381c:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8003824:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003826:	3301      	adds	r3, #1
 8003828:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800382a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003834:	6802      	ldr	r2, [r0, #0]
 8003836:	6853      	ldr	r3, [r2, #4]
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	2320      	movs	r3, #32
 8003840:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003844:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d00d      	beq.n	800386a <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800384e:	2300      	movs	r3, #0
 8003850:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003854:	2312      	movs	r3, #18
 8003856:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003858:	f7ff fd9b 	bl	8003392 <HAL_I2C_MasterRxCpltCallback>
 800385c:	e7a4      	b.n	80037a8 <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385e:	6802      	ldr	r2, [r0, #0]
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e7cd      	b.n	8003806 <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	2300      	movs	r3, #0
 800386c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003870:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003872:	f00e faef 	bl	8011e54 <HAL_I2C_MemRxCpltCallback>
 8003876:	e797      	b.n	80037a8 <I2C_MasterReceive_BTF+0x58>

08003878 <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003878:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b22      	cmp	r3, #34	; 0x22
 8003880:	d000      	beq.n	8003884 <I2C_MasterReceive_RXNE+0xc>
 8003882:	4770      	bx	lr
{
 8003884:	b510      	push	{r4, lr}
 8003886:	4604      	mov	r4, r0
    tmp = hi2c->XferCount;
 8003888:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 800388c:	2b03      	cmp	r3, #3
 800388e:	d915      	bls.n	80038bc <I2C_MasterReceive_RXNE+0x44>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003890:	6803      	ldr	r3, [r0, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003896:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800389a:	3301      	adds	r3, #1
 800389c:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800389e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80038a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d10f      	bne.n	80038d0 <I2C_MasterReceive_RXNE+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038b0:	6802      	ldr	r2, [r0, #0]
 80038b2:	6853      	ldr	r3, [r2, #4]
 80038b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b8:	6053      	str	r3, [r2, #4]
 80038ba:	e009      	b.n	80038d0 <I2C_MasterReceive_RXNE+0x58>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80038be:	2a02      	cmp	r2, #2
 80038c0:	d001      	beq.n	80038c6 <I2C_MasterReceive_RXNE+0x4e>
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d905      	bls.n	80038d2 <I2C_MasterReceive_RXNE+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	6853      	ldr	r3, [r2, #4]
 80038ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ce:	6053      	str	r3, [r2, #4]
}
 80038d0:	bd10      	pop	{r4, pc}
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038d2:	f7ff fb5f 	bl	8002f94 <I2C_WaitOnSTOPRequestThroughIT>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d12e      	bne.n	8003938 <I2C_MasterReceive_RXNE+0xc0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e2:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	6853      	ldr	r3, [r2, #4]
 80038e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038ec:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038f8:	3301      	adds	r3, #1
 80038fa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80038fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003906:	2320      	movs	r3, #32
 8003908:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800390c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d008      	beq.n	8003928 <I2C_MasterReceive_RXNE+0xb0>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	2300      	movs	r3, #0
 8003918:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800391c:	2312      	movs	r3, #18
 800391e:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003920:	4620      	mov	r0, r4
 8003922:	f7ff fd36 	bl	8003392 <HAL_I2C_MasterRxCpltCallback>
 8003926:	e7d3      	b.n	80038d0 <I2C_MasterReceive_RXNE+0x58>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	2300      	movs	r3, #0
 800392a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800392e:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003930:	4620      	mov	r0, r4
 8003932:	f00e fa8f 	bl	8011e54 <HAL_I2C_MemRxCpltCallback>
 8003936:	e7cb      	b.n	80038d0 <I2C_MasterReceive_RXNE+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	6853      	ldr	r3, [r2, #4]
 800393c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003940:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003948:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800394a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800394c:	3301      	adds	r3, #1
 800394e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003950:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29b      	uxth	r3, r3
 8003958:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800395a:	2320      	movs	r3, #32
 800395c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	2300      	movs	r3, #0
 8003962:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003966:	4620      	mov	r0, r4
 8003968:	f00e f9f2 	bl	8011d50 <HAL_I2C_ErrorCallback>
 800396c:	e7b0      	b.n	80038d0 <I2C_MasterReceive_RXNE+0x58>

0800396e <HAL_I2C_AbortCpltCallback>:
}
 800396e:	4770      	bx	lr

08003970 <I2C_DMAAbort>:
{
 8003970:	b500      	push	{lr}
 8003972:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003978:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800397a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800397e:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003980:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <I2C_DMAAbort+0xdc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	08db      	lsrs	r3, r3, #3
 8003986:	4932      	ldr	r1, [pc, #200]	; (8003a50 <I2C_DMAAbort+0xe0>)
 8003988:	fba1 1303 	umull	r1, r3, r1, r3
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003992:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003996:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003998:	9b01      	ldr	r3, [sp, #4]
 800399a:	b143      	cbz	r3, 80039ae <I2C_DMAAbort+0x3e>
    count--;
 800399c:	9b01      	ldr	r3, [sp, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039a2:	6803      	ldr	r3, [r0, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80039aa:	d1f5      	bne.n	8003998 <I2C_DMAAbort+0x28>
 80039ac:	e003      	b.n	80039b6 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039b0:	f043 0320 	orr.w	r3, r3, #32
 80039b4:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 80039b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039b8:	b10b      	cbz	r3, 80039be <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039ba:	2100      	movs	r1, #0
 80039bc:	63d9      	str	r1, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 80039be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039c0:	b10b      	cbz	r3, 80039c6 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039c2:	2100      	movs	r1, #0
 80039c4:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c6:	6801      	ldr	r1, [r0, #0]
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ce:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80039d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039d6:	b10b      	cbz	r3, 80039dc <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039d8:	2100      	movs	r1, #0
 80039da:	6519      	str	r1, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80039dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039de:	b10b      	cbz	r3, 80039e4 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039e0:	2100      	movs	r1, #0
 80039e2:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80039e4:	6801      	ldr	r1, [r0, #0]
 80039e6:	680b      	ldr	r3, [r1, #0]
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b60      	cmp	r3, #96	; 0x60
 80039f6:	d00e      	beq.n	8003a16 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039f8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80039fc:	2a28      	cmp	r2, #40	; 0x28
 80039fe:	d014      	beq.n	8003a2a <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	2320      	movs	r3, #32
 8003a02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a0c:	f00e f9a0 	bl	8011d50 <HAL_I2C_ErrorCallback>
}
 8003a10:	b003      	add	sp, #12
 8003a12:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a16:	2320      	movs	r3, #32
 8003a18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a22:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a24:	f7ff ffa3 	bl	800396e <HAL_I2C_AbortCpltCallback>
 8003a28:	e7f2      	b.n	8003a10 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8003a2a:	6802      	ldr	r2, [r0, #0]
 8003a2c:	6813      	ldr	r3, [r2, #0]
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a34:	6802      	ldr	r2, [r0, #0]
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a3c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a42:	2328      	movs	r3, #40	; 0x28
 8003a44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003a48:	e7e0      	b.n	8003a0c <I2C_DMAAbort+0x9c>
 8003a4a:	bf00      	nop
 8003a4c:	20002954 	.word	0x20002954
 8003a50:	14f8b589 	.word	0x14f8b589

08003a54 <I2C_ITError>:
{
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a5e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003a62:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a64:	2a10      	cmp	r2, #16
 8003a66:	d036      	beq.n	8003ad6 <I2C_ITError+0x82>
 8003a68:	2a40      	cmp	r2, #64	; 0x40
 8003a6a:	d034      	beq.n	8003ad6 <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a6c:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8003a70:	2a28      	cmp	r2, #40	; 0x28
 8003a72:	d038      	beq.n	8003ae6 <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	6852      	ldr	r2, [r2, #4]
 8003a78:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003a7c:	d107      	bne.n	8003a8e <I2C_ITError+0x3a>
 8003a7e:	2b60      	cmp	r3, #96	; 0x60
 8003a80:	d005      	beq.n	8003a8e <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a82:	2320      	movs	r3, #32
 8003a84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003a9a:	d048      	beq.n	8003b2e <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa2:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003aa4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003aa6:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d020      	beq.n	8003af2 <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ab0:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <I2C_ITError+0x170>)
 8003ab2:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ab4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003ab6:	f7fe f926 	bl	8001d06 <HAL_DMA_Abort_IT>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d049      	beq.n	8003b52 <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 8003abe:	6822      	ldr	r2, [r4, #0]
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ace:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003ad0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003ad2:	4798      	blx	r3
 8003ad4:	e03d      	b.n	8003b52 <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ad6:	2b22      	cmp	r3, #34	; 0x22
 8003ad8:	d1c8      	bne.n	8003a6c <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ada:	6821      	ldr	r1, [r4, #0]
 8003adc:	680a      	ldr	r2, [r1, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae2:	600a      	str	r2, [r1, #0]
 8003ae4:	e7c2      	b.n	8003a6c <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aea:	2328      	movs	r3, #40	; 0x28
 8003aec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003af0:	e7cf      	b.n	8003a92 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <I2C_ITError+0x170>)
 8003af6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003af8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003afa:	f7fe f904 	bl	8001d06 <HAL_DMA_Abort_IT>
 8003afe:	b340      	cbz	r0, 8003b52 <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b08:	d005      	beq.n	8003b16 <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b0e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b12:	3301      	adds	r3, #1
 8003b14:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	6813      	ldr	r3, [r2, #0]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	2320      	movs	r3, #32
 8003b22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b2a:	4798      	blx	r3
 8003b2c:	e011      	b.n	8003b52 <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b2e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	2a60      	cmp	r2, #96	; 0x60
 8003b36:	d01f      	beq.n	8003b78 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b3e:	d005      	beq.n	8003b4c <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b44:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b48:	3301      	adds	r3, #1
 8003b4a:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f00e f8ff 	bl	8011d50 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b54:	f013 0f0f 	tst.w	r3, #15
 8003b58:	d004      	beq.n	8003b64 <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6853      	ldr	r3, [r2, #4]
 8003b5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b62:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003b64:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b6c:	f012 0f04 	tst.w	r2, #4
 8003b70:	d001      	beq.n	8003b76 <I2C_ITError+0x122>
 8003b72:	2b28      	cmp	r3, #40	; 0x28
 8003b74:	d018      	beq.n	8003ba8 <I2C_ITError+0x154>
}
 8003b76:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7e:	2200      	movs	r2, #0
 8003b80:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b88:	d005      	beq.n	8003b96 <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b8e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b92:	3301      	adds	r3, #1
 8003b94:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	6813      	ldr	r3, [r2, #0]
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff fee4 	bl	800396e <HAL_I2C_AbortCpltCallback>
 8003ba6:	e7d4      	b.n	8003b52 <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <I2C_ITError+0x174>)
 8003baa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7ff fc66 	bl	800348c <HAL_I2C_ListenCpltCallback>
}
 8003bc0:	e7d9      	b.n	8003b76 <I2C_ITError+0x122>
 8003bc2:	bf00      	nop
 8003bc4:	08003971 	.word	0x08003971
 8003bc8:	ffff0000 	.word	0xffff0000

08003bcc <I2C_Slave_STOPF>:
{
 8003bcc:	b530      	push	{r4, r5, lr}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd2:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8003bd6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	6853      	ldr	r3, [r2, #4]
 8003bdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003be0:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	6803      	ldr	r3, [r0, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	9201      	str	r2, [sp, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	6802      	ldr	r2, [r0, #0]
 8003bf8:	6813      	ldr	r3, [r2, #0]
 8003bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bfe:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c00:	6803      	ldr	r3, [r0, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003c08:	d038      	beq.n	8003c7c <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c0a:	2d22      	cmp	r5, #34	; 0x22
 8003c0c:	d021      	beq.n	8003c52 <I2C_Slave_STOPF+0x86>
 8003c0e:	2d2a      	cmp	r5, #42	; 0x2a
 8003c10:	d01f      	beq.n	8003c52 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c12:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	6852      	ldr	r2, [r2, #4]
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003c1c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003c1e:	b292      	uxth	r2, r2
 8003c20:	b11a      	cbz	r2, 8003c2a <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c22:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c24:	f042 0204 	orr.w	r2, r2, #4
 8003c28:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c30:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c34:	f7fe f968 	bl	8001f08 <HAL_DMA_GetState>
 8003c38:	2801      	cmp	r0, #1
 8003c3a:	d01f      	beq.n	8003c7c <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c3e:	4a44      	ldr	r2, [pc, #272]	; (8003d50 <I2C_Slave_STOPF+0x184>)
 8003c40:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c42:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c44:	f7fe f85f 	bl	8001d06 <HAL_DMA_Abort_IT>
 8003c48:	b1c0      	cbz	r0, 8003c7c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003c4e:	4798      	blx	r3
 8003c50:	e014      	b.n	8003c7c <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	6852      	ldr	r2, [r2, #4]
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003c5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	b11a      	cbz	r2, 8003c6a <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c64:	f042 0204 	orr.w	r2, r2, #4
 8003c68:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c70:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c74:	f7fe f948 	bl	8001f08 <HAL_DMA_GetState>
 8003c78:	2801      	cmp	r0, #1
 8003c7a:	d142      	bne.n	8003d02 <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8003c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b333      	cbz	r3, 8003cd0 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	f012 0f04 	tst.w	r2, #4
 8003c8a:	d00a      	beq.n	8003ca2 <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c90:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c94:	3301      	adds	r3, #1
 8003c96:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003c98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003caa:	d00a      	beq.n	8003cc2 <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003cb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8003cc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b11b      	cbz	r3, 8003cd0 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cd2:	bb13      	cbnz	r3, 8003d1a <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cd4:	2d2a      	cmp	r5, #42	; 0x2a
 8003cd6:	d025      	beq.n	8003d24 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cd8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b28      	cmp	r3, #40	; 0x28
 8003ce0:	d029      	beq.n	8003d36 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ce4:	2b22      	cmp	r3, #34	; 0x22
 8003ce6:	d001      	beq.n	8003cec <I2C_Slave_STOPF+0x120>
 8003ce8:	2d22      	cmp	r5, #34	; 0x22
 8003cea:	d119      	bne.n	8003d20 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff fb71 	bl	80033e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d00:	e00e      	b.n	8003d20 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <I2C_Slave_STOPF+0x184>)
 8003d06:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d0a:	f7fd fffc 	bl	8001d06 <HAL_DMA_Abort_IT>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d0b4      	beq.n	8003c7c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003d16:	4798      	blx	r3
 8003d18:	e7b0      	b.n	8003c7c <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7ff fe9a 	bl	8003a54 <I2C_ITError>
}
 8003d20:	b003      	add	sp, #12
 8003d22:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d28:	2328      	movs	r3, #40	; 0x28
 8003d2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff fb57 	bl	80033e2 <HAL_I2C_SlaveRxCpltCallback>
 8003d34:	e7d0      	b.n	8003cd8 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <I2C_Slave_STOPF+0x188>)
 8003d38:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f7ff fb9f 	bl	800348c <HAL_I2C_ListenCpltCallback>
 8003d4e:	e7e7      	b.n	8003d20 <I2C_Slave_STOPF+0x154>
 8003d50:	08003971 	.word	0x08003971
 8003d54:	ffff0000 	.word	0xffff0000

08003d58 <HAL_I2C_EV_IRQHandler>:
{
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d5c:	6802      	ldr	r2, [r0, #0]
 8003d5e:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d60:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d62:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003d66:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d68:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8003d6c:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d013      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x42>
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d011      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d07a      	beq.n	8003e72 <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d7c:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8003d7e:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d80:	f013 0f02 	tst.w	r3, #2
 8003d84:	d078      	beq.n	8003e78 <HAL_I2C_EV_IRQHandler+0x120>
 8003d86:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003d8a:	d075      	beq.n	8003e78 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d8e:	b103      	cbz	r3, 8003d92 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d90:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d92:	4620      	mov	r0, r4
 8003d94:	f7ff fb4d 	bl	8003432 <I2C_Slave_ADDR>
}
 8003d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d9a:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d9e:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003da0:	f011 0701 	ands.w	r7, r1, #1
 8003da4:	d105      	bne.n	8003db2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003da6:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003daa:	d0f5      	beq.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
 8003dac:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003db0:	d0f2      	beq.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db2:	b117      	cbz	r7, 8003dba <HAL_I2C_EV_IRQHandler+0x62>
 8003db4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003db8:	d129      	bne.n	8003e0e <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dba:	f011 0f08 	tst.w	r1, #8
 8003dbe:	d002      	beq.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003dc0:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003dc4:	d12a      	bne.n	8003e1c <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc6:	f011 0f02 	tst.w	r1, #2
 8003dca:	d002      	beq.n	8003dd2 <HAL_I2C_EV_IRQHandler+0x7a>
 8003dcc:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003dd0:	d128      	bne.n	8003e24 <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003dd2:	f01c 0f04 	tst.w	ip, #4
 8003dd6:	d031      	beq.n	8003e3c <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dd8:	6852      	ldr	r2, [r2, #4]
 8003dda:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003dde:	d1db      	bne.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003de0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003de4:	d005      	beq.n	8003df2 <HAL_I2C_EV_IRQHandler+0x9a>
 8003de6:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003dea:	d002      	beq.n	8003df2 <HAL_I2C_EV_IRQHandler+0x9a>
 8003dec:	f011 0f04 	tst.w	r1, #4
 8003df0:	d01c      	beq.n	8003e2c <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df2:	f011 0f04 	tst.w	r1, #4
 8003df6:	d0cf      	beq.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
 8003df8:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003dfc:	d0cc      	beq.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dfe:	2821      	cmp	r0, #33	; 0x21
 8003e00:	d018      	beq.n	8003e34 <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d1c8      	bne.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff fbdb 	bl	80035c2 <I2C_MemoryTransmit_TXE_BTF>
 8003e0c:	e7c4      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff f8e4 	bl	8002fdc <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8003e14:	4620      	mov	r0, r4
 8003e16:	f7fe ff30 	bl	8002c7a <I2C_Master_SB>
 8003e1a:	e7bd      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7fe ff80 	bl	8002d22 <I2C_Master_ADD10>
 8003e22:	e7b9      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7fe ff91 	bl	8002d4c <I2C_Master_ADDR>
 8003e2a:	e7b5      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff fc27 	bl	8003680 <I2C_MasterTransmit_TXE>
 8003e32:	e7b1      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8003e34:	4620      	mov	r0, r4
 8003e36:	f7ff fb75 	bl	8003524 <I2C_MasterTransmit_BTF>
 8003e3a:	e7ad      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e3c:	6853      	ldr	r3, [r2, #4]
 8003e3e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003e42:	d1a9      	bne.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e44:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003e48:	d005      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0xfe>
 8003e4a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003e4e:	d002      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0xfe>
 8003e50:	f011 0f04 	tst.w	r1, #4
 8003e54:	d009      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e56:	f011 0f04 	tst.w	r1, #4
 8003e5a:	d09d      	beq.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
 8003e5c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003e60:	d09a      	beq.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff fc74 	bl	8003750 <I2C_MasterReceive_BTF>
 8003e68:	e796      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f7ff fd04 	bl	8003878 <I2C_MasterReceive_RXNE>
 8003e70:	e792      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e72:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e74:	6953      	ldr	r3, [r2, #20]
 8003e76:	e783      	b.n	8003d80 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e78:	f013 0f10 	tst.w	r3, #16
 8003e7c:	d002      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x12c>
 8003e7e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003e82:	d118      	bne.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e84:	2821      	cmp	r0, #33	; 0x21
 8003e86:	d01a      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x166>
 8003e88:	2829      	cmp	r0, #41	; 0x29
 8003e8a:	d018      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e90:	d005      	beq.n	8003e9e <HAL_I2C_EV_IRQHandler+0x146>
 8003e92:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003e96:	d002      	beq.n	8003e9e <HAL_I2C_EV_IRQHandler+0x146>
 8003e98:	f013 0f04 	tst.w	r3, #4
 8003e9c:	d028      	beq.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9e:	f013 0f04 	tst.w	r3, #4
 8003ea2:	f43f af79 	beq.w	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
 8003ea6:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003eaa:	f43f af75 	beq.w	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7ff f85f 	bl	8002f72 <I2C_SlaveReceive_BTF>
      }
 8003eb4:	e770      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff fe88 	bl	8003bcc <I2C_Slave_STOPF>
 8003ebc:	e76c      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ebe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ec2:	d005      	beq.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x178>
 8003ec4:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003ec8:	d002      	beq.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x178>
 8003eca:	f013 0f04 	tst.w	r3, #4
 8003ece:	d00b      	beq.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed0:	f013 0f04 	tst.w	r3, #4
 8003ed4:	f43f af60 	beq.w	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
 8003ed8:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003edc:	f43f af5c 	beq.w	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff f836 	bl	8002f52 <I2C_SlaveTransmit_BTF>
 8003ee6:	e757      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff fa54 	bl	8003396 <I2C_SlaveTransmit_TXE>
 8003eee:	e753      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7ff fa77 	bl	80033e4 <I2C_SlaveReceive_RXNE>
 8003ef6:	e74f      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x40>

08003ef8 <HAL_I2C_ER_IRQHandler>:
{
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003efc:	6803      	ldr	r3, [r0, #0]
 8003efe:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f00:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f02:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003f06:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f08:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003f0c:	d007      	beq.n	8003f1e <HAL_I2C_ER_IRQHandler+0x26>
 8003f0e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f12:	d03c      	beq.n	8003f8e <HAL_I2C_ER_IRQHandler+0x96>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f14:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8003f18:	6159      	str	r1, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8003f1a:	2601      	movs	r6, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_I2C_ER_IRQHandler+0x28>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f1e:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f20:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003f24:	d008      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x40>
 8003f26:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f2a:	d005      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x40>
    error |= HAL_I2C_ERROR_ARLO;
 8003f2c:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8003f36:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f38:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003f3c:	d019      	beq.n	8003f72 <HAL_I2C_ER_IRQHandler+0x7a>
 8003f3e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f42:	d016      	beq.n	8003f72 <HAL_I2C_ER_IRQHandler+0x7a>
    tmp2 = hi2c->XferCount;
 8003f44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f46:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8003f48:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 8003f4e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f50:	2a20      	cmp	r2, #32
 8003f52:	d01e      	beq.n	8003f92 <HAL_I2C_ER_IRQHandler+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003f5a:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8003f5c:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f60:	2a10      	cmp	r2, #16
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_ER_IRQHandler+0x70>
 8003f64:	2a40      	cmp	r2, #64	; 0x40
 8003f66:	d104      	bne.n	8003f72 <HAL_I2C_ER_IRQHandler+0x7a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	6822      	ldr	r2, [r4, #0]
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f70:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f72:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8003f76:	d008      	beq.n	8003f8a <HAL_I2C_ER_IRQHandler+0x92>
 8003f78:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f7c:	d005      	beq.n	8003f8a <HAL_I2C_ER_IRQHandler+0x92>
    error |= HAL_I2C_ERROR_OVR;
 8003f7e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f88:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8003f8a:	b986      	cbnz	r6, 8003fae <HAL_I2C_ER_IRQHandler+0xb6>
}
 8003f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f8e:	2600      	movs	r6, #0
 8003f90:	e7c6      	b.n	8003f20 <HAL_I2C_ER_IRQHandler+0x28>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f92:	2900      	cmp	r1, #0
 8003f94:	d1de      	bne.n	8003f54 <HAL_I2C_ER_IRQHandler+0x5c>
 8003f96:	2b21      	cmp	r3, #33	; 0x21
 8003f98:	d005      	beq.n	8003fa6 <HAL_I2C_ER_IRQHandler+0xae>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f9a:	2b29      	cmp	r3, #41	; 0x29
 8003f9c:	d003      	beq.n	8003fa6 <HAL_I2C_ER_IRQHandler+0xae>
 8003f9e:	2b28      	cmp	r3, #40	; 0x28
 8003fa0:	d1d8      	bne.n	8003f54 <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fa2:	2821      	cmp	r0, #33	; 0x21
 8003fa4:	d1d6      	bne.n	8003f54 <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7ff fa72 	bl	8003490 <I2C_Slave_AF>
 8003fac:	e7e1      	b.n	8003f72 <HAL_I2C_ER_IRQHandler+0x7a>
    hi2c->ErrorCode |= error;
 8003fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fb0:	431e      	orrs	r6, r3
 8003fb2:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f7ff fd4d 	bl	8003a54 <I2C_ITError>
}
 8003fba:	e7e7      	b.n	8003f8c <HAL_I2C_ER_IRQHandler+0x94>

08003fbc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d001      	beq.n	8003fca <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2002      	movs	r0, #2
  }
}
 8003fc8:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fca:	2324      	movs	r3, #36	; 0x24
 8003fcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8003fd0:	6802      	ldr	r2, [r0, #0]
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003fda:	6802      	ldr	r2, [r0, #0]
 8003fdc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8003fe4:	6802      	ldr	r2, [r0, #0]
 8003fe6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003fe8:	4319      	orrs	r1, r3
 8003fea:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8003fec:	6802      	ldr	r2, [r0, #0]
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4770      	bx	lr

08004000 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004000:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b20      	cmp	r3, #32
 8004008:	d001      	beq.n	800400e <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800400a:	2002      	movs	r0, #2
  }
}
 800400c:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 800400e:	2324      	movs	r3, #36	; 0x24
 8004010:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 800401e:	6802      	ldr	r2, [r0, #0]
 8004020:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004022:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8004024:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8004028:	4319      	orrs	r1, r3
 800402a:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 800402c:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 800402e:	6802      	ldr	r2, [r0, #0]
 8004030:	6813      	ldr	r3, [r2, #0]
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	2320      	movs	r3, #32
 800403a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 800403e:	2000      	movs	r0, #0
 8004040:	4770      	bx	lr

08004042 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004042:	b340      	cbz	r0, 8004096 <HAL_IWDG_Init+0x54>
{
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004048:	6803      	ldr	r3, [r0, #0]
 800404a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800404e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004050:	6803      	ldr	r3, [r0, #0]
 8004052:	f245 5255 	movw	r2, #21845	; 0x5555
 8004056:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004058:	6803      	ldr	r3, [r0, #0]
 800405a:	6842      	ldr	r2, [r0, #4]
 800405c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800405e:	6803      	ldr	r3, [r0, #0]
 8004060:	6882      	ldr	r2, [r0, #8]
 8004062:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004064:	f7fd f82c 	bl	80010c0 <HAL_GetTick>
 8004068:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	f012 0f03 	tst.w	r2, #3
 8004072:	d00b      	beq.n	800408c <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004074:	f7fd f824 	bl	80010c0 <HAL_GetTick>
 8004078:	1b40      	subs	r0, r0, r5
 800407a:	2831      	cmp	r0, #49	; 0x31
 800407c:	d9f5      	bls.n	800406a <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f013 0f03 	tst.w	r3, #3
 8004086:	d0f0      	beq.n	800406a <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8004088:	2003      	movs	r0, #3
 800408a:	e003      	b.n	8004094 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800408c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004092:	2000      	movs	r0, #0
}
 8004094:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004096:	2001      	movs	r0, #1
}
 8004098:	4770      	bx	lr

0800409a <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800409a:	6803      	ldr	r3, [r0, #0]
 800409c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80040a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80040a2:	2000      	movs	r0, #0
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040a8:	b510      	push	{r4, lr}
 80040aa:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_PWREx_EnableOverDrive+0x70>)
 80040b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_PWREx_EnableOverDrive+0x74>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ca:	f7fc fff9 	bl	80010c0 <HAL_GetTick>
 80040ce:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_PWREx_EnableOverDrive+0x78>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80040d8:	d108      	bne.n	80040ec <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040da:	f7fc fff1 	bl	80010c0 <HAL_GetTick>
 80040de:	1b00      	subs	r0, r0, r4
 80040e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80040e4:	d9f4      	bls.n	80040d0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80040e6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80040e8:	b002      	add	sp, #8
 80040ea:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_PWREx_EnableOverDrive+0x7c>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80040f2:	f7fc ffe5 	bl	80010c0 <HAL_GetTick>
 80040f6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_PWREx_EnableOverDrive+0x78>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004100:	d107      	bne.n	8004112 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004102:	f7fc ffdd 	bl	80010c0 <HAL_GetTick>
 8004106:	1b00      	subs	r0, r0, r4
 8004108:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800410c:	d9f4      	bls.n	80040f8 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800410e:	2003      	movs	r0, #3
 8004110:	e7ea      	b.n	80040e8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8004112:	2000      	movs	r0, #0
 8004114:	e7e8      	b.n	80040e8 <HAL_PWREx_EnableOverDrive+0x40>
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	420e0040 	.word	0x420e0040
 8004120:	40007000 	.word	0x40007000
 8004124:	420e0044 	.word	0x420e0044

08004128 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004128:	2800      	cmp	r0, #0
 800412a:	f000 81df 	beq.w	80044ec <HAL_RCC_OscConfig+0x3c4>
{
 800412e:	b570      	push	{r4, r5, r6, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004134:	6803      	ldr	r3, [r0, #0]
 8004136:	f013 0f01 	tst.w	r3, #1
 800413a:	d03b      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800413c:	4ba6      	ldr	r3, [pc, #664]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b04      	cmp	r3, #4
 8004146:	d02c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004148:	4ba3      	ldr	r3, [pc, #652]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004150:	2b08      	cmp	r3, #8
 8004152:	d021      	beq.n	8004198 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d04f      	beq.n	80041fc <HAL_RCC_OscConfig+0xd4>
 800415c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004160:	d052      	beq.n	8004208 <HAL_RCC_OscConfig+0xe0>
 8004162:	4b9d      	ldr	r3, [pc, #628]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004172:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d050      	beq.n	800421c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fc ffa1 	bl	80010c0 <HAL_GetTick>
 800417e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004180:	4b95      	ldr	r3, [pc, #596]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004188:	d114      	bne.n	80041b4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418a:	f7fc ff99 	bl	80010c0 <HAL_GetTick>
 800418e:	1b40      	subs	r0, r0, r5
 8004190:	2864      	cmp	r0, #100	; 0x64
 8004192:	d9f5      	bls.n	8004180 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004194:	2003      	movs	r0, #3
 8004196:	e1b0      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004198:	4b8f      	ldr	r3, [pc, #572]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80041a0:	d0d8      	beq.n	8004154 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a2:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041aa:	d003      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8c>
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 819e 	beq.w	80044f0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	f013 0f02 	tst.w	r3, #2
 80041ba:	d054      	beq.n	8004266 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041bc:	4b86      	ldr	r3, [pc, #536]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f013 0f0c 	tst.w	r3, #12
 80041c4:	d03e      	beq.n	8004244 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b84      	ldr	r3, [pc, #528]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d033      	beq.n	800423a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d067      	beq.n	80042a8 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b80      	ldr	r3, [pc, #512]	; (80043dc <HAL_RCC_OscConfig+0x2b4>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fc ff6f 	bl	80010c0 <HAL_GetTick>
 80041e2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	4b7c      	ldr	r3, [pc, #496]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f013 0f02 	tst.w	r3, #2
 80041ec:	d153      	bne.n	8004296 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fc ff67 	bl	80010c0 <HAL_GetTick>
 80041f2:	1b40      	subs	r0, r0, r5
 80041f4:	2802      	cmp	r0, #2
 80041f6:	d9f5      	bls.n	80041e4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80041f8:	2003      	movs	r0, #3
 80041fa:	e17e      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fc:	4a76      	ldr	r2, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e7b5      	b.n	8004174 <HAL_RCC_OscConfig+0x4c>
 8004208:	4b73      	ldr	r3, [pc, #460]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e7ab      	b.n	8004174 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800421c:	f7fc ff50 	bl	80010c0 <HAL_GetTick>
 8004220:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	4b6d      	ldr	r3, [pc, #436]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800422a:	d0c3      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7fc ff48 	bl	80010c0 <HAL_GetTick>
 8004230:	1b40      	subs	r0, r0, r5
 8004232:	2864      	cmp	r0, #100	; 0x64
 8004234:	d9f5      	bls.n	8004222 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8004236:	2003      	movs	r0, #3
 8004238:	e15f      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004242:	d1c6      	bne.n	80041d2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004244:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f013 0f02 	tst.w	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_OscConfig+0x12e>
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	f040 814f 	bne.w	80044f4 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	4a60      	ldr	r2, [pc, #384]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800425e:	6921      	ldr	r1, [r4, #16]
 8004260:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004264:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	f013 0f08 	tst.w	r3, #8
 800426c:	d040      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426e:	6963      	ldr	r3, [r4, #20]
 8004270:	b363      	cbz	r3, 80042cc <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <HAL_RCC_OscConfig+0x2b8>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc ff22 	bl	80010c0 <HAL_GetTick>
 800427c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004282:	f013 0f02 	tst.w	r3, #2
 8004286:	d133      	bne.n	80042f0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004288:	f7fc ff1a 	bl	80010c0 <HAL_GetTick>
 800428c:	1b40      	subs	r0, r0, r5
 800428e:	2802      	cmp	r0, #2
 8004290:	d9f5      	bls.n	800427e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8004292:	2003      	movs	r0, #3
 8004294:	e131      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004296:	4a50      	ldr	r2, [pc, #320]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004298:	6813      	ldr	r3, [r2, #0]
 800429a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800429e:	6921      	ldr	r1, [r4, #16]
 80042a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e7de      	b.n	8004266 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <HAL_RCC_OscConfig+0x2b4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042ae:	f7fc ff07 	bl	80010c0 <HAL_GetTick>
 80042b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b4:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f013 0f02 	tst.w	r3, #2
 80042bc:	d0d3      	beq.n	8004266 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042be:	f7fc feff 	bl	80010c0 <HAL_GetTick>
 80042c2:	1b40      	subs	r0, r0, r5
 80042c4:	2802      	cmp	r0, #2
 80042c6:	d9f5      	bls.n	80042b4 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80042c8:	2003      	movs	r0, #3
 80042ca:	e116      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042cc:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <HAL_RCC_OscConfig+0x2b8>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7fc fef5 	bl	80010c0 <HAL_GetTick>
 80042d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042dc:	f013 0f02 	tst.w	r3, #2
 80042e0:	d006      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e2:	f7fc feed 	bl	80010c0 <HAL_GetTick>
 80042e6:	1b40      	subs	r0, r0, r5
 80042e8:	2802      	cmp	r0, #2
 80042ea:	d9f5      	bls.n	80042d8 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80042ec:	2003      	movs	r0, #3
 80042ee:	e104      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f013 0f04 	tst.w	r3, #4
 80042f6:	d078      	beq.n	80043ea <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004300:	d10d      	bne.n	800431e <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800431a:	2501      	movs	r5, #1
 800431c:	e000      	b.n	8004320 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800431e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_RCC_OscConfig+0x2bc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004328:	d021      	beq.n	800436e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d032      	beq.n	8004396 <HAL_RCC_OscConfig+0x26e>
 8004330:	2b05      	cmp	r3, #5
 8004332:	d036      	beq.n	80043a2 <HAL_RCC_OscConfig+0x27a>
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	671a      	str	r2, [r3, #112]	; 0x70
 800433e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004340:	f022 0204 	bic.w	r2, r2, #4
 8004344:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004346:	68a3      	ldr	r3, [r4, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d034      	beq.n	80043b6 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fc feb8 	bl	80010c0 <HAL_GetTick>
 8004350:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f013 0f02 	tst.w	r3, #2
 800435a:	d145      	bne.n	80043e8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	f7fc feb0 	bl	80010c0 <HAL_GetTick>
 8004360:	1b80      	subs	r0, r0, r6
 8004362:	f241 3388 	movw	r3, #5000	; 0x1388
 8004366:	4298      	cmp	r0, r3
 8004368:	d9f3      	bls.n	8004352 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800436a:	2003      	movs	r0, #3
 800436c:	e0c5      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_RCC_OscConfig+0x2bc>)
 8004370:	6813      	ldr	r3, [r2, #0]
 8004372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004376:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004378:	f7fc fea2 	bl	80010c0 <HAL_GetTick>
 800437c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_OscConfig+0x2bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004386:	d1d0      	bne.n	800432a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fc fe9a 	bl	80010c0 <HAL_GetTick>
 800438c:	1b80      	subs	r0, r0, r6
 800438e:	2802      	cmp	r0, #2
 8004390:	d9f5      	bls.n	800437e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004392:	2003      	movs	r0, #3
 8004394:	e0b1      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004396:	4a10      	ldr	r2, [pc, #64]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004398:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
 80043a0:	e7d1      	b.n	8004346 <HAL_RCC_OscConfig+0x21e>
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80043a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a6:	f042 0204 	orr.w	r2, r2, #4
 80043aa:	671a      	str	r2, [r3, #112]	; 0x70
 80043ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	671a      	str	r2, [r3, #112]	; 0x70
 80043b4:	e7c7      	b.n	8004346 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7fc fe83 	bl	80010c0 <HAL_GetTick>
 80043ba:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f013 0f02 	tst.w	r3, #2
 80043c4:	d010      	beq.n	80043e8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fc fe7b 	bl	80010c0 <HAL_GetTick>
 80043ca:	1b80      	subs	r0, r0, r6
 80043cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80043d0:	4298      	cmp	r0, r3
 80043d2:	d9f3      	bls.n	80043bc <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80043d4:	2003      	movs	r0, #3
 80043d6:	e090      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470000 	.word	0x42470000
 80043e0:	42470e80 	.word	0x42470e80
 80043e4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e8:	b9ed      	cbnz	r5, 8004426 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ea:	69a3      	ldr	r3, [r4, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8083 	beq.w	80044f8 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f2:	4a49      	ldr	r2, [pc, #292]	; (8004518 <HAL_RCC_OscConfig+0x3f0>)
 80043f4:	6892      	ldr	r2, [r2, #8]
 80043f6:	f002 020c 	and.w	r2, r2, #12
 80043fa:	2a08      	cmp	r2, #8
 80043fc:	d051      	beq.n	80044a2 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d017      	beq.n	8004432 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b46      	ldr	r3, [pc, #280]	; (800451c <HAL_RCC_OscConfig+0x3f4>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fc fe5a 	bl	80010c0 <HAL_GetTick>
 800440c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	4b42      	ldr	r3, [pc, #264]	; (8004518 <HAL_RCC_OscConfig+0x3f0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004416:	d042      	beq.n	800449e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004418:	f7fc fe52 	bl	80010c0 <HAL_GetTick>
 800441c:	1b00      	subs	r0, r0, r4
 800441e:	2802      	cmp	r0, #2
 8004420:	d9f5      	bls.n	800440e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004422:	2003      	movs	r0, #3
 8004424:	e069      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004426:	4a3c      	ldr	r2, [pc, #240]	; (8004518 <HAL_RCC_OscConfig+0x3f0>)
 8004428:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800442a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	; 0x40
 8004430:	e7db      	b.n	80043ea <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x3f4>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004438:	f7fc fe42 	bl	80010c0 <HAL_GetTick>
 800443c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	4b36      	ldr	r3, [pc, #216]	; (8004518 <HAL_RCC_OscConfig+0x3f0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004446:	d006      	beq.n	8004456 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fc fe3a 	bl	80010c0 <HAL_GetTick>
 800444c:	1b40      	subs	r0, r0, r5
 800444e:	2802      	cmp	r0, #2
 8004450:	d9f5      	bls.n	800443e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8004452:	2003      	movs	r0, #3
 8004454:	e051      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004456:	69e3      	ldr	r3, [r4, #28]
 8004458:	6a22      	ldr	r2, [r4, #32]
 800445a:	4313      	orrs	r3, r2
 800445c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800445e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004462:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004464:	0852      	lsrs	r2, r2, #1
 8004466:	3a01      	subs	r2, #1
 8004468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800446c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800446e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004472:	4a29      	ldr	r2, [pc, #164]	; (8004518 <HAL_RCC_OscConfig+0x3f0>)
 8004474:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004476:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCC_OscConfig+0x3f4>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800447c:	f7fc fe20 	bl	80010c0 <HAL_GetTick>
 8004480:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_RCC_OscConfig+0x3f0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448c:	f7fc fe18 	bl	80010c0 <HAL_GetTick>
 8004490:	1b00      	subs	r0, r0, r4
 8004492:	2802      	cmp	r0, #2
 8004494:	d9f5      	bls.n	8004482 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004496:	2003      	movs	r0, #3
 8004498:	e02f      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800449a:	2000      	movs	r0, #0
 800449c:	e02d      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
 800449e:	2000      	movs	r0, #0
 80044a0:	e02b      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d02b      	beq.n	80044fe <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <HAL_RCC_OscConfig+0x3f0>)
 80044a8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80044ae:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b0:	4291      	cmp	r1, r2
 80044b2:	d126      	bne.n	8004502 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044b8:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	428a      	cmp	r2, r1
 80044bc:	d123      	bne.n	8004506 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044be:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80044c4:	401a      	ands	r2, r3
 80044c6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80044ca:	d11e      	bne.n	800450a <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80044d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80044d2:	0852      	lsrs	r2, r2, #1
 80044d4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80044da:	d118      	bne.n	800450e <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80044e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80044e6:	d114      	bne.n	8004512 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80044e8:	2000      	movs	r0, #0
 80044ea:	e006      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 80044ec:	2001      	movs	r0, #1
}
 80044ee:	4770      	bx	lr
        return HAL_ERROR;
 80044f0:	2001      	movs	r0, #1
 80044f2:	e002      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 80044f4:	2001      	movs	r0, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 80044f8:	2000      	movs	r0, #0
}
 80044fa:	b002      	add	sp, #8
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80044fe:	2001      	movs	r0, #1
 8004500:	e7fb      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8004502:	2001      	movs	r0, #1
 8004504:	e7f9      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
 8004506:	2001      	movs	r0, #1
 8004508:	e7f7      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
 800450a:	2001      	movs	r0, #1
 800450c:	e7f5      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
 800450e:	2001      	movs	r0, #1
 8004510:	e7f3      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
 8004512:	2001      	movs	r0, #1
 8004514:	e7f1      	b.n	80044fa <HAL_RCC_OscConfig+0x3d2>
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	42470060 	.word	0x42470060

08004520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d03d      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0x8a>
 800452e:	2b08      	cmp	r3, #8
 8004530:	d13d      	bne.n	80045ae <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004540:	d012      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800454a:	2300      	movs	r3, #0
 800454c:	481a      	ldr	r0, [pc, #104]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800454e:	fba1 0100 	umull	r0, r1, r1, r0
 8004552:	f7fc fbb9 	bl	8000cc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800455e:	3301      	adds	r3, #1
 8004560:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004562:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004566:	e023      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004568:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004570:	015c      	lsls	r4, r3, #5
 8004572:	2500      	movs	r5, #0
 8004574:	1ae4      	subs	r4, r4, r3
 8004576:	f165 0500 	sbc.w	r5, r5, #0
 800457a:	01ae      	lsls	r6, r5, #6
 800457c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8004580:	01a7      	lsls	r7, r4, #6
 8004582:	1b38      	subs	r0, r7, r4
 8004584:	eb66 0105 	sbc.w	r1, r6, r5
 8004588:	00cc      	lsls	r4, r1, #3
 800458a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800458e:	00c5      	lsls	r5, r0, #3
 8004590:	18e8      	adds	r0, r5, r3
 8004592:	f144 0100 	adc.w	r1, r4, #0
 8004596:	028b      	lsls	r3, r1, #10
 8004598:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800459c:	0284      	lsls	r4, r0, #10
 800459e:	4620      	mov	r0, r4
 80045a0:	4619      	mov	r1, r3
 80045a2:	2300      	movs	r3, #0
 80045a4:	f7fc fb90 	bl	8000cc8 <__aeabi_uldivmod>
 80045a8:	e7d5      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80045aa:	4803      	ldr	r0, [pc, #12]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ac:	e000      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ae:	4803      	ldr	r0, [pc, #12]	; (80045bc <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80045b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
 80045b8:	017d7840 	.word	0x017d7840
 80045bc:	00f42400 	.word	0x00f42400

080045c0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f000 809b 	beq.w	80046fc <HAL_RCC_ClockConfig+0x13c>
{
 80045c6:	b570      	push	{r4, r5, r6, lr}
 80045c8:	460d      	mov	r5, r1
 80045ca:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045cc:	4b4f      	ldr	r3, [pc, #316]	; (800470c <HAL_RCC_ClockConfig+0x14c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d208      	bcs.n	80045ea <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d8:	b2cb      	uxtb	r3, r1
 80045da:	4a4c      	ldr	r2, [pc, #304]	; (800470c <HAL_RCC_ClockConfig+0x14c>)
 80045dc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	428b      	cmp	r3, r1
 80045e6:	f040 808b 	bne.w	8004700 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f013 0f02 	tst.w	r3, #2
 80045f0:	d017      	beq.n	8004622 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f2:	f013 0f04 	tst.w	r3, #4
 80045f6:	d004      	beq.n	8004602 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f8:	4a45      	ldr	r2, [pc, #276]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 80045fa:	6893      	ldr	r3, [r2, #8]
 80045fc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004600:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	f013 0f08 	tst.w	r3, #8
 8004608:	d004      	beq.n	8004614 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800460a:	4a41      	ldr	r2, [pc, #260]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 800460c:	6893      	ldr	r3, [r2, #8]
 800460e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004612:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004614:	4a3e      	ldr	r2, [pc, #248]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 8004616:	6893      	ldr	r3, [r2, #8]
 8004618:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800461c:	68a1      	ldr	r1, [r4, #8]
 800461e:	430b      	orrs	r3, r1
 8004620:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	f013 0f01 	tst.w	r3, #1
 8004628:	d032      	beq.n	8004690 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462a:	6863      	ldr	r3, [r4, #4]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d021      	beq.n	8004674 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004630:	1e9a      	subs	r2, r3, #2
 8004632:	2a01      	cmp	r2, #1
 8004634:	d925      	bls.n	8004682 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4a36      	ldr	r2, [pc, #216]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	f012 0f02 	tst.w	r2, #2
 800463e:	d061      	beq.n	8004704 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004640:	4933      	ldr	r1, [pc, #204]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 8004642:	688a      	ldr	r2, [r1, #8]
 8004644:	f022 0203 	bic.w	r2, r2, #3
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800464c:	f7fc fd38 	bl	80010c0 <HAL_GetTick>
 8004650:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	4b2f      	ldr	r3, [pc, #188]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004660:	d016      	beq.n	8004690 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004662:	f7fc fd2d 	bl	80010c0 <HAL_GetTick>
 8004666:	1b80      	subs	r0, r0, r6
 8004668:	f241 3388 	movw	r3, #5000	; 0x1388
 800466c:	4298      	cmp	r0, r3
 800466e:	d9f0      	bls.n	8004652 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8004670:	2003      	movs	r0, #3
 8004672:	e042      	b.n	80046fa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004674:	4a26      	ldr	r2, [pc, #152]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800467c:	d1e0      	bne.n	8004640 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800467e:	2001      	movs	r0, #1
 8004680:	e03b      	b.n	80046fa <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004682:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800468a:	d1d9      	bne.n	8004640 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
 800468e:	e034      	b.n	80046fa <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b1e      	ldr	r3, [pc, #120]	; (800470c <HAL_RCC_ClockConfig+0x14c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	42ab      	cmp	r3, r5
 800469a:	d907      	bls.n	80046ac <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469c:	b2ea      	uxtb	r2, r5
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_ClockConfig+0x14c>)
 80046a0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	d12d      	bne.n	8004708 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	f013 0f04 	tst.w	r3, #4
 80046b2:	d006      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 80046b6:	6893      	ldr	r3, [r2, #8]
 80046b8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80046bc:	68e1      	ldr	r1, [r4, #12]
 80046be:	430b      	orrs	r3, r1
 80046c0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f013 0f08 	tst.w	r3, #8
 80046c8:	d007      	beq.n	80046da <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 80046cc:	6893      	ldr	r3, [r2, #8]
 80046ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80046d2:	6921      	ldr	r1, [r4, #16]
 80046d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80046d8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046da:	f7ff ff21 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_RCC_ClockConfig+0x150>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80046e6:	4a0b      	ldr	r2, [pc, #44]	; (8004714 <HAL_RCC_ClockConfig+0x154>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	40d8      	lsrs	r0, r3
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x158>)
 80046ee:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HAL_RCC_ClockConfig+0x15c>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f7fc fc9a 	bl	800102c <HAL_InitTick>
  return HAL_OK;
 80046f8:	2000      	movs	r0, #0
}
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
}
 80046fe:	4770      	bx	lr
      return HAL_ERROR;
 8004700:	2001      	movs	r0, #1
 8004702:	e7fa      	b.n	80046fa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8004704:	2001      	movs	r0, #1
 8004706:	e7f8      	b.n	80046fa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8004708:	2001      	movs	r0, #1
 800470a:	e7f6      	b.n	80046fa <HAL_RCC_ClockConfig+0x13a>
 800470c:	40023c00 	.word	0x40023c00
 8004710:	40023800 	.word	0x40023800
 8004714:	08019f0c 	.word	0x08019f0c
 8004718:	20002954 	.word	0x20002954
 800471c:	20000004 	.word	0x20000004

08004720 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004720:	4b01      	ldr	r3, [pc, #4]	; (8004728 <HAL_RCC_GetHCLKFreq+0x8>)
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20002954 	.word	0x20002954

0800472c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800472c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800472e:	f7ff fff7 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800473a:	4a03      	ldr	r2, [pc, #12]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800473c:	5cd3      	ldrb	r3, [r2, r3]
}
 800473e:	40d8      	lsrs	r0, r3
 8004740:	bd08      	pop	{r3, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	08019f1c 	.word	0x08019f1c

0800474c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800474c:	b530      	push	{r4, r5, lr}
 800474e:	b083      	sub	sp, #12
 8004750:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004752:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004754:	f013 0f43 	tst.w	r3, #67	; 0x43
 8004758:	d114      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f013 0f0c 	tst.w	r3, #12
 8004760:	d169      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xea>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f013 0f20 	tst.w	r3, #32
 8004768:	f040 80be 	bne.w	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f013 0f10 	tst.w	r3, #16
 8004772:	f000 8120 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004776:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800477a:	4b90      	ldr	r3, [pc, #576]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800477c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800477e:	2000      	movs	r0, #0
}
 8004780:	b003      	add	sp, #12
 8004782:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8004784:	4b8e      	ldr	r3, [pc, #568]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800478a:	f7fc fc99 	bl	80010c0 <HAL_GetTick>
 800478e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004790:	4b8c      	ldr	r3, [pc, #560]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004798:	d006      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800479a:	f7fc fc91 	bl	80010c0 <HAL_GetTick>
 800479e:	1b43      	subs	r3, r0, r5
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d9f5      	bls.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 80047a4:	2003      	movs	r0, #3
 80047a6:	e7eb      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	f013 0f01 	tst.w	r3, #1
 80047ae:	d007      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80047b0:	6862      	ldr	r2, [r4, #4]
 80047b2:	68a3      	ldr	r3, [r4, #8]
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80047ba:	4a82      	ldr	r2, [pc, #520]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80047bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	f013 0f02 	tst.w	r3, #2
 80047c6:	d015      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047c8:	4a7e      	ldr	r2, [pc, #504]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80047ca:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80047ce:	6860      	ldr	r0, [r4, #4]
 80047d0:	68e3      	ldr	r3, [r4, #12]
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80047d8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80047dc:	430b      	orrs	r3, r1
 80047de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80047e6:	f023 031f 	bic.w	r3, r3, #31
 80047ea:	69e1      	ldr	r1, [r4, #28]
 80047ec:	3901      	subs	r1, #1
 80047ee:	430b      	orrs	r3, r1
 80047f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047fc:	6862      	ldr	r2, [r4, #4]
 80047fe:	68e3      	ldr	r3, [r4, #12]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004806:	68a2      	ldr	r2, [r4, #8]
 8004808:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800480c:	4a6d      	ldr	r2, [pc, #436]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800480e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004812:	4b6b      	ldr	r3, [pc, #428]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004818:	f7fc fc52 	bl	80010c0 <HAL_GetTick>
 800481c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800481e:	4b69      	ldr	r3, [pc, #420]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004826:	d198      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004828:	f7fc fc4a 	bl	80010c0 <HAL_GetTick>
 800482c:	1b40      	subs	r0, r0, r5
 800482e:	2802      	cmp	r0, #2
 8004830:	d9f5      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        return HAL_TIMEOUT;
 8004832:	2003      	movs	r0, #3
 8004834:	e7a4      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 8004836:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800483c:	f7fc fc40 	bl	80010c0 <HAL_GetTick>
 8004840:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004842:	4b60      	ldr	r3, [pc, #384]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800484a:	d006      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800484c:	f7fc fc38 	bl	80010c0 <HAL_GetTick>
 8004850:	1b43      	subs	r3, r0, r5
 8004852:	2b02      	cmp	r3, #2
 8004854:	d9f5      	bls.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        return HAL_TIMEOUT;
 8004856:	2003      	movs	r0, #3
 8004858:	e792      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	f013 0f04 	tst.w	r3, #4
 8004860:	d016      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x144>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004862:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004864:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004868:	6920      	ldr	r0, [r4, #16]
 800486a:	6963      	ldr	r3, [r4, #20]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004872:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004876:	430b      	orrs	r3, r1
 8004878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800487c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004880:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004884:	6a21      	ldr	r1, [r4, #32]
 8004886:	3901      	subs	r1, #1
 8004888:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800488c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	f013 0f08 	tst.w	r3, #8
 8004896:	d014      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004898:	4a4a      	ldr	r2, [pc, #296]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800489a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800489e:	6921      	ldr	r1, [r4, #16]
 80048a0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80048a4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80048a8:	69a1      	ldr	r1, [r4, #24]
 80048aa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80048ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80048b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80048ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80048c8:	f7fc fbfa 	bl	80010c0 <HAL_GetTick>
 80048cc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80048d6:	f47f af44 	bne.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048da:	f7fc fbf1 	bl	80010c0 <HAL_GetTick>
 80048de:	1b40      	subs	r0, r0, r5
 80048e0:	2802      	cmp	r0, #2
 80048e2:	d9f4      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x182>
        return HAL_TIMEOUT;
 80048e4:	2003      	movs	r0, #3
 80048e6:	e74b      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 80048e8:	2300      	movs	r3, #0
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80048ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004900:	4a32      	ldr	r2, [pc, #200]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800490a:	f7fc fbd9 	bl	80010c0 <HAL_GetTick>
 800490e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004910:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004918:	d106      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800491a:	f7fc fbd1 	bl	80010c0 <HAL_GetTick>
 800491e:	1b40      	subs	r0, r0, r5
 8004920:	2802      	cmp	r0, #2
 8004922:	d9f5      	bls.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        return HAL_TIMEOUT;
 8004924:	2003      	movs	r0, #3
 8004926:	e72b      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004928:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800492c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004930:	d012      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004932:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004934:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004938:	429a      	cmp	r2, r3
 800493a:	d00d      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800493c:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800493e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004940:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004944:	4922      	ldr	r1, [pc, #136]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004946:	2001      	movs	r0, #1
 8004948:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800494a:	2000      	movs	r0, #0
 800494c:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800494e:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	f013 0f01 	tst.w	r3, #1
 8004956:	d112      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800495a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800495e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004962:	d01d      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004966:	6893      	ldr	r3, [r2, #8]
 8004968:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800496c:	6093      	str	r3, [r2, #8]
 800496e:	4915      	ldr	r1, [pc, #84]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004970:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004972:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004974:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004978:	4313      	orrs	r3, r2
 800497a:	670b      	str	r3, [r1, #112]	; 0x70
 800497c:	e6f6      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 800497e:	f7fc fb9f 	bl	80010c0 <HAL_GetTick>
 8004982:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	f013 0f02 	tst.w	r3, #2
 800498c:	d1e4      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7fc fb97 	bl	80010c0 <HAL_GetTick>
 8004992:	1b40      	subs	r0, r0, r5
 8004994:	f241 3388 	movw	r3, #5000	; 0x1388
 8004998:	4298      	cmp	r0, r3
 800499a:	d9f3      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x238>
            return HAL_TIMEOUT;
 800499c:	2003      	movs	r0, #3
 800499e:	e6ef      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049a0:	4908      	ldr	r1, [pc, #32]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80049a2:	688a      	ldr	r2, [r1, #8]
 80049a4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80049a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]
 80049b4:	e7db      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 80049b6:	2000      	movs	r0, #0
 80049b8:	e6e2      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80049ba:	bf00      	nop
 80049bc:	424711e0 	.word	0x424711e0
 80049c0:	42470068 	.word	0x42470068
 80049c4:	40023800 	.word	0x40023800
 80049c8:	42470070 	.word	0x42470070
 80049cc:	40007000 	.word	0x40007000
 80049d0:	42470e40 	.word	0x42470e40

080049d4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4604      	mov	r4, r0
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80049d8:	6803      	ldr	r3, [r0, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80049e0:	d003      	beq.n	80049ea <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049e8:	d10f      	bne.n	8004a0a <HAL_RTC_AlarmIRQHandler+0x36>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80049f2:	d003      	beq.n	80049fc <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80049fa:	d10f      	bne.n	8004a1c <HAL_RTC_AlarmIRQHandler+0x48>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80049fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a02:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a04:	2301      	movs	r3, #1
 8004a06:	7763      	strb	r3, [r4, #29]
}
 8004a08:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004a0a:	f00d fbe0 	bl	80121ce <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	68d3      	ldr	r3, [r2, #12]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004a18:	60d3      	str	r3, [r2, #12]
 8004a1a:	e7e6      	b.n	80049ea <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f000 fb19 	bl	8005054 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	68d3      	ldr	r3, [r2, #12]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f463 7320 	orn	r3, r3, #640	; 0x280
 8004a2c:	60d3      	str	r3, [r2, #12]
 8004a2e:	e7e5      	b.n	80049fc <HAL_RTC_AlarmIRQHandler+0x28>
 8004a30:	40013c00 	.word	0x40013c00

08004a34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a38:	6802      	ldr	r2, [r0, #0]
 8004a3a:	68d3      	ldr	r3, [r2, #12]
 8004a3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a40:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a42:	f7fc fb3d 	bl	80010c0 <HAL_GetTick>
 8004a46:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f013 0f20 	tst.w	r3, #32
 8004a50:	d107      	bne.n	8004a62 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a52:	f7fc fb35 	bl	80010c0 <HAL_GetTick>
 8004a56:	1b40      	subs	r0, r0, r5
 8004a58:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004a5c:	d9f4      	bls.n	8004a48 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004a5e:	2003      	movs	r0, #3
 8004a60:	e000      	b.n	8004a64 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8004a62:	2000      	movs	r0, #0
}
 8004a64:	bd38      	pop	{r3, r4, r5, pc}

08004a66 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a66:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004a68:	6803      	ldr	r3, [r0, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004a70:	d002      	beq.n	8004a78 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004a72:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8004a74:	4628      	mov	r0, r5
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a80:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004a82:	f7fc fb1d 	bl	80010c0 <HAL_GetTick>
 8004a86:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004a88:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a92:	d1ef      	bne.n	8004a74 <RTC_EnterInitMode+0xe>
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	d1ed      	bne.n	8004a74 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a98:	f7fc fb12 	bl	80010c0 <HAL_GetTick>
 8004a9c:	1b83      	subs	r3, r0, r6
 8004a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa2:	d9f2      	bls.n	8004a8a <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8004aa8:	2501      	movs	r5, #1
 8004aaa:	e7ee      	b.n	8004a8a <RTC_EnterInitMode+0x24>

08004aac <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004aac:	6802      	ldr	r2, [r0, #0]
 8004aae:	68d3      	ldr	r3, [r2, #12]
 8004ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab4:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004ab6:	6803      	ldr	r3, [r0, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f013 0f20 	tst.w	r3, #32
 8004abe:	d001      	beq.n	8004ac4 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004ac2:	4770      	bx	lr
{
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ac8:	f7ff ffb4 	bl	8004a34 <HAL_RTC_WaitForSynchro>
 8004acc:	b110      	cbz	r0, 8004ad4 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ace:	2304      	movs	r3, #4
 8004ad0:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8004ad2:	2001      	movs	r0, #1
}
 8004ad4:	bd10      	pop	{r4, pc}

08004ad6 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d041      	beq.n	8004b5e <HAL_RTC_Init+0x88>
{
 8004ada:	b510      	push	{r4, lr}
 8004adc:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ade:	7f43      	ldrb	r3, [r0, #29]
 8004ae0:	b1e3      	cbz	r3, 8004b1c <HAL_RTC_Init+0x46>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	22ca      	movs	r2, #202	; 0xca
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	2253      	movs	r2, #83	; 0x53
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7ff ffb7 	bl	8004a66 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004af8:	b1a0      	cbz	r0, 8004b24 <HAL_RTC_Init+0x4e>
  if (status == HAL_OK)
 8004afa:	b958      	cbnz	r0, 8004b14 <HAL_RTC_Init+0x3e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b0a:	69a1      	ldr	r1, [r4, #24]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8004b10:	2301      	movs	r3, #1
 8004b12:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b1a:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004b1c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004b1e:	f00c f885 	bl	8010c2c <HAL_RTC_MspInit>
 8004b22:	e7de      	b.n	8004ae2 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	6893      	ldr	r3, [r2, #8]
 8004b28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b30:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b32:	6821      	ldr	r1, [r4, #0]
 8004b34:	688a      	ldr	r2, [r1, #8]
 8004b36:	6863      	ldr	r3, [r4, #4]
 8004b38:	6920      	ldr	r0, [r4, #16]
 8004b3a:	4303      	orrs	r3, r0
 8004b3c:	6960      	ldr	r0, [r4, #20]
 8004b3e:	4303      	orrs	r3, r0
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	68e2      	ldr	r2, [r4, #12]
 8004b48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	6913      	ldr	r3, [r2, #16]
 8004b4e:	68a1      	ldr	r1, [r4, #8]
 8004b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004b54:	6113      	str	r3, [r2, #16]
    status = RTC_ExitInitMode(hrtc);
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7ff ffa8 	bl	8004aac <RTC_ExitInitMode>
 8004b5c:	e7cd      	b.n	8004afa <HAL_RTC_Init+0x24>
    return HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
}
 8004b60:	4770      	bx	lr

08004b62 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;
 8004b62:	2300      	movs	r3, #0

  while (number >= 10U)
 8004b64:	2809      	cmp	r0, #9
 8004b66:	d904      	bls.n	8004b72 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
 8004b68:	3301      	adds	r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
    number -= 10U;
 8004b6c:	380a      	subs	r0, #10
 8004b6e:	b2c0      	uxtb	r0, r0
 8004b70:	e7f8      	b.n	8004b64 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	b2db      	uxtb	r3, r3
}
 8004b76:	4318      	orrs	r0, r3
 8004b78:	4770      	bx	lr

08004b7a <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8004b7a:	7f03      	ldrb	r3, [r0, #28]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d059      	beq.n	8004c34 <HAL_RTC_SetTime+0xba>
{
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4604      	mov	r4, r0
 8004b84:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8004b86:	2301      	movs	r3, #1
 8004b88:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8004b8e:	bb4a      	cbnz	r2, 8004be4 <HAL_RTC_SetTime+0x6a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b90:	6803      	ldr	r3, [r0, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b98:	d101      	bne.n	8004b9e <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b9e:	7830      	ldrb	r0, [r6, #0]
 8004ba0:	f7ff ffdf 	bl	8004b62 <RTC_ByteToBcd2>
 8004ba4:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ba6:	7870      	ldrb	r0, [r6, #1]
 8004ba8:	f7ff ffdb 	bl	8004b62 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004bac:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004bb0:	78b0      	ldrb	r0, [r6, #2]
 8004bb2:	f7ff ffd6 	bl	8004b62 <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004bb6:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004bb8:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004bba:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	22ca      	movs	r2, #202	; 0xca
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	2253      	movs	r2, #83	; 0x53
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff ff4b 	bl	8004a66 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004bd0:	b1d0      	cbz	r0, 8004c08 <HAL_RTC_SetTime+0x8e>
  if (status == HAL_OK)
 8004bd2:	b908      	cbnz	r0, 8004bd8 <HAL_RTC_SetTime+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	22ff      	movs	r2, #255	; 0xff
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8004bde:	2300      	movs	r3, #0
 8004be0:	7723      	strb	r3, [r4, #28]
}
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004be4:	6803      	ldr	r3, [r0, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bec:	d101      	bne.n	8004bf2 <HAL_RTC_SetTime+0x78>
      sTime->TimeFormat = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bf2:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004bf4:	7875      	ldrb	r5, [r6, #1]
 8004bf6:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8004bfc:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004bfe:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c00:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004c02:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
 8004c06:	e7da      	b.n	8004bbe <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8004c0e:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8004c12:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004c14:	6822      	ldr	r2, [r4, #0]
 8004c16:	6893      	ldr	r3, [r2, #8]
 8004c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c1e:	6821      	ldr	r1, [r4, #0]
 8004c20:	688b      	ldr	r3, [r1, #8]
 8004c22:	68f2      	ldr	r2, [r6, #12]
 8004c24:	6930      	ldr	r0, [r6, #16]
 8004c26:	4302      	orrs	r2, r0
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f7ff ff3d 	bl	8004aac <RTC_ExitInitMode>
 8004c32:	e7ce      	b.n	8004bd2 <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8004c34:	2002      	movs	r0, #2
}
 8004c36:	4770      	bx	lr

08004c38 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8004c38:	7f03      	ldrb	r3, [r0, #28]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d048      	beq.n	8004cd0 <HAL_RTC_SetDate+0x98>
{
 8004c3e:	b570      	push	{r4, r5, r6, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8004c44:	2301      	movs	r3, #1
 8004c46:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c4c:	b93a      	cbnz	r2, 8004c5e <HAL_RTC_SetDate+0x26>
 8004c4e:	784b      	ldrb	r3, [r1, #1]
 8004c50:	f013 0f10 	tst.w	r3, #16
 8004c54:	d003      	beq.n	8004c5e <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c56:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004c5a:	330a      	adds	r3, #10
 8004c5c:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 8004c5e:	bb12      	cbnz	r2, 8004ca6 <HAL_RTC_SetDate+0x6e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c60:	78f0      	ldrb	r0, [r6, #3]
 8004c62:	f7ff ff7e 	bl	8004b62 <RTC_ByteToBcd2>
 8004c66:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c68:	7870      	ldrb	r0, [r6, #1]
 8004c6a:	f7ff ff7a 	bl	8004b62 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c6e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004c72:	78b0      	ldrb	r0, [r6, #2]
 8004c74:	f7ff ff75 	bl	8004b62 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c78:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004c7a:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c7c:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	22ca      	movs	r2, #202	; 0xca
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	2253      	movs	r2, #83	; 0x53
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff feea 	bl	8004a66 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004c92:	b198      	cbz	r0, 8004cbc <HAL_RTC_SetDate+0x84>
  if (status == HAL_OK)
 8004c94:	b908      	cbnz	r0, 8004c9a <HAL_RTC_SetDate+0x62>
    hrtc->State = HAL_RTC_STATE_READY;
 8004c96:	2301      	movs	r3, #1
 8004c98:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	22ff      	movs	r2, #255	; 0xff
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	7723      	strb	r3, [r4, #28]
}
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ca6:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ca8:	7875      	ldrb	r5, [r6, #1]
 8004caa:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 8004cb0:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cb2:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004cb4:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cb6:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8004cba:	e7e1      	b.n	8004c80 <HAL_RTC_SetDate+0x48>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004cc2:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8004cc6:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f7ff feef 	bl	8004aac <RTC_ExitInitMode>
 8004cce:	e7e1      	b.n	8004c94 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 8004cd0:	2002      	movs	r0, #2
}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_RTC_SetAlarm_IT>:
{
 8004cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	460d      	mov	r5, r1
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004cda:	4b68      	ldr	r3, [pc, #416]	; (8004e7c <HAL_RTC_SetAlarm_IT+0x1a8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4968      	ldr	r1, [pc, #416]	; (8004e80 <HAL_RTC_SetAlarm_IT+0x1ac>)
 8004ce0:	fba1 1303 	umull	r1, r3, r1, r3
 8004ce4:	0adb      	lsrs	r3, r3, #11
 8004ce6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8004cf0:	7f03      	ldrb	r3, [r0, #28]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	f000 80c0 	beq.w	8004e78 <HAL_RTC_SetAlarm_IT+0x1a4>
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	d16c      	bne.n	8004de0 <HAL_RTC_SetAlarm_IT+0x10c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d06:	6803      	ldr	r3, [r0, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d0e:	d101      	bne.n	8004d14 <HAL_RTC_SetAlarm_IT+0x40>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	70eb      	strb	r3, [r5, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8004d14:	69ef      	ldr	r7, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004d16:	7828      	ldrb	r0, [r5, #0]
 8004d18:	f7ff ff23 	bl	8004b62 <RTC_ByteToBcd2>
 8004d1c:	0406      	lsls	r6, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d1e:	7868      	ldrb	r0, [r5, #1]
 8004d20:	f7ff ff1f 	bl	8004b62 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004d24:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004d28:	78a8      	ldrb	r0, [r5, #2]
 8004d2a:	f7ff ff1a 	bl	8004b62 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d2e:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004d30:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004d32:	ea46 5680 	orr.w	r6, r6, r0, lsl #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004d36:	f895 0020 	ldrb.w	r0, [r5, #32]
 8004d3a:	f7ff ff12 	bl	8004b62 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004d3e:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004d42:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask));
 8004d44:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004d46:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004d48:	6868      	ldr	r0, [r5, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d4a:	69ab      	ldr	r3, [r5, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004d4c:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	22ca      	movs	r2, #202	; 0xca
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	2253      	movs	r2, #83	; 0x53
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004d5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d60:	d058      	beq.n	8004e14 <HAL_RTC_SetAlarm_IT+0x140>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	6893      	ldr	r3, [r2, #8]
 8004d66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d6a:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	68d3      	ldr	r3, [r2, #12]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f463 7320 	orn	r3, r3, #640	; 0x280
 8004d76:	60d3      	str	r3, [r2, #12]
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004d78:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <HAL_RTC_SetAlarm_IT+0x1a8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a40      	ldr	r2, [pc, #256]	; (8004e80 <HAL_RTC_SetAlarm_IT+0x1ac>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	0adb      	lsrs	r3, r3, #11
 8004d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	9301      	str	r3, [sp, #4]
      if (count-- == 0U)
 8004d8e:	9b01      	ldr	r3, [sp, #4]
 8004d90:	1e5a      	subs	r2, r3, #1
 8004d92:	9201      	str	r2, [sp, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d067      	beq.n	8004e68 <HAL_RTC_SetAlarm_IT+0x194>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	f012 0f02 	tst.w	r2, #2
 8004da0:	d0f5      	beq.n	8004d8e <HAL_RTC_SetAlarm_IT+0xba>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004da2:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	6498      	str	r0, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	6893      	ldr	r3, [r2, #8]
 8004dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004db0:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	6893      	ldr	r3, [r2, #8]
 8004db6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dba:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004dbc:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <HAL_RTC_SetAlarm_IT+0x1b0>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004dc4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004dcc:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8004dd8:	2000      	movs	r0, #0
 8004dda:	7720      	strb	r0, [r4, #28]
}
 8004ddc:	b003      	add	sp, #12
 8004dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004de0:	6803      	ldr	r3, [r0, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004de8:	d101      	bne.n	8004dee <HAL_RTC_SetAlarm_IT+0x11a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	70eb      	strb	r3, [r5, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8004dee:	69ea      	ldr	r2, [r5, #28]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004df0:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004df2:	786b      	ldrb	r3, [r5, #1]
 8004df4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004dfa:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004dfc:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004dfe:	78e9      	ldrb	r1, [r5, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004e00:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004e04:	f895 1020 	ldrb.w	r1, [r5, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004e08:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004e0c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmMask));
 8004e0e:	696e      	ldr	r6, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004e10:	431e      	orrs	r6, r3
 8004e12:	e799      	b.n	8004d48 <HAL_RTC_SetAlarm_IT+0x74>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	6893      	ldr	r3, [r2, #8]
 8004e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1c:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	68d3      	ldr	r3, [r2, #12]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004e28:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8004e2a:	9b01      	ldr	r3, [sp, #4]
 8004e2c:	1e5a      	subs	r2, r3, #1
 8004e2e:	9201      	str	r2, [sp, #4]
 8004e30:	b193      	cbz	r3, 8004e58 <HAL_RTC_SetAlarm_IT+0x184>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	f011 0f01 	tst.w	r1, #1
 8004e3a:	d0f6      	beq.n	8004e2a <HAL_RTC_SetAlarm_IT+0x156>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e3c:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	6458      	str	r0, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	6893      	ldr	r3, [r2, #8]
 8004e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4a:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	6893      	ldr	r3, [r2, #8]
 8004e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e54:	6093      	str	r3, [r2, #8]
 8004e56:	e7b1      	b.n	8004dbc <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	22ff      	movs	r2, #255	; 0xff
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e5e:	2003      	movs	r0, #3
 8004e60:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8004e62:	2300      	movs	r3, #0
 8004e64:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8004e66:	e7b9      	b.n	8004ddc <HAL_RTC_SetAlarm_IT+0x108>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	22ff      	movs	r2, #255	; 0xff
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e6e:	2003      	movs	r0, #3
 8004e70:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8004e72:	2300      	movs	r3, #0
 8004e74:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8004e76:	e7b1      	b.n	8004ddc <HAL_RTC_SetAlarm_IT+0x108>
  __HAL_LOCK(hrtc);
 8004e78:	2002      	movs	r0, #2
 8004e7a:	e7af      	b.n	8004ddc <HAL_RTC_SetAlarm_IT+0x108>
 8004e7c:	20002954 	.word	0x20002954
 8004e80:	10624dd3 	.word	0x10624dd3
 8004e84:	40013c00 	.word	0x40013c00

08004e88 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint8_t tmp = 0U;
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004e88:	0903      	lsrs	r3, r0, #4
 8004e8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 8004e8e:	f000 000f 	and.w	r0, r0, #15
 8004e92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004e96:	b2c0      	uxtb	r0, r0
 8004e98:	4770      	bx	lr

08004e9a <HAL_RTC_GetTime>:
{
 8004e9a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e9c:	6803      	ldr	r3, [r0, #0]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ea2:	6803      	ldr	r3, [r0, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004eaa:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004eac:	6803      	ldr	r3, [r0, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004eb0:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8004eb4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004eb6:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8004eba:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004ebc:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8004ec0:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004ec2:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8004ec6:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004ec8:	b95a      	cbnz	r2, 8004ee2 <HAL_RTC_GetTime+0x48>
 8004eca:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ecc:	f7ff ffdc 	bl	8004e88 <RTC_Bcd2ToByte>
 8004ed0:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f7ff ffd8 	bl	8004e88 <RTC_Bcd2ToByte>
 8004ed8:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004eda:	4628      	mov	r0, r5
 8004edc:	f7ff ffd4 	bl	8004e88 <RTC_Bcd2ToByte>
 8004ee0:	70a0      	strb	r0, [r4, #2]
}
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}

08004ee6 <HAL_RTC_GetDate>:
{
 8004ee6:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ee8:	6803      	ldr	r3, [r0, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004eec:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004ef0:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004ef2:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8004ef6:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ef8:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8004efc:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004efe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004f02:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004f04:	b95a      	cbnz	r2, 8004f1e <HAL_RTC_GetDate+0x38>
 8004f06:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f08:	f7ff ffbe 	bl	8004e88 <RTC_Bcd2ToByte>
 8004f0c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f7ff ffba 	bl	8004e88 <RTC_Bcd2ToByte>
 8004f14:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7ff ffb6 	bl	8004e88 <RTC_Bcd2ToByte>
 8004f1c:	70a0      	strb	r0, [r4, #2]
}
 8004f1e:	2000      	movs	r0, #0
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f24 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004f24:	b470      	push	{r4, r5, r6}
 8004f26:	b083      	sub	sp, #12
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004f28:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4c3a      	ldr	r4, [pc, #232]	; (8005018 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8004f2e:	fba4 4303 	umull	r4, r3, r4, r3
 8004f32:	0adb      	lsrs	r3, r3, #11
 8004f34:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004f38:	fb06 f603 	mul.w	r6, r6, r3
 8004f3c:	9601      	str	r6, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f3e:	7f03      	ldrb	r3, [r0, #28]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d065      	beq.n	8005010 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
 8004f44:	2301      	movs	r3, #1
 8004f46:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f4c:	6803      	ldr	r3, [r0, #0]
 8004f4e:	24ca      	movs	r4, #202	; 0xca
 8004f50:	625c      	str	r4, [r3, #36]	; 0x24
 8004f52:	6803      	ldr	r3, [r0, #0]
 8004f54:	2453      	movs	r4, #83	; 0x53
 8004f56:	625c      	str	r4, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004f58:	6805      	ldr	r5, [r0, #0]
 8004f5a:	68ab      	ldr	r3, [r5, #8]
 8004f5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004f60:	d008      	beq.n	8004f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8004f62:	9b01      	ldr	r3, [sp, #4]
 8004f64:	1e5c      	subs	r4, r3, #1
 8004f66:	9401      	str	r4, [sp, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d03e      	beq.n	8004fea <HAL_RTCEx_SetWakeUpTimer_IT+0xc6>
        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);

        return HAL_TIMEOUT;
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004f6c:	68eb      	ldr	r3, [r5, #12]
 8004f6e:	f013 0f04 	tst.w	r3, #4
 8004f72:	d1f6      	bne.n	8004f62 <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004f74:	68ab      	ldr	r3, [r5, #8]
 8004f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f7a:	60ab      	str	r3, [r5, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004f7c:	6804      	ldr	r4, [r0, #0]
 8004f7e:	68e3      	ldr	r3, [r4, #12]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8004f86:	60e3      	str	r3, [r4, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004f88:	9601      	str	r6, [sp, #4]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8004f8a:	9b01      	ldr	r3, [sp, #4]
 8004f8c:	1e5c      	subs	r4, r3, #1
 8004f8e:	9401      	str	r4, [sp, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d032      	beq.n	8004ffa <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);

      return HAL_TIMEOUT;
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004f94:	6803      	ldr	r3, [r0, #0]
 8004f96:	68dc      	ldr	r4, [r3, #12]
 8004f98:	f014 0f04 	tst.w	r4, #4
 8004f9c:	d0f5      	beq.n	8004f8a <HAL_RTCEx_SetWakeUpTimer_IT+0x66>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004f9e:	689c      	ldr	r4, [r3, #8]
 8004fa0:	f024 0407 	bic.w	r4, r4, #7
 8004fa4:	609c      	str	r4, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004fa6:	6804      	ldr	r4, [r0, #0]
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	60a2      	str	r2, [r4, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004fae:	6803      	ldr	r3, [r0, #0]
 8004fb0:	6159      	str	r1, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004fba:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004fc2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004fc4:	6802      	ldr	r2, [r0, #0]
 8004fc6:	6893      	ldr	r3, [r2, #8]
 8004fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fcc:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004fce:	6802      	ldr	r2, [r0, #0]
 8004fd0:	6893      	ldr	r3, [r2, #8]
 8004fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fd6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd8:	6803      	ldr	r3, [r0, #0]
 8004fda:	22ff      	movs	r2, #255	; 0xff
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	7703      	strb	r3, [r0, #28]

  return HAL_OK;
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	e00f      	b.n	800500a <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fea:	23ff      	movs	r3, #255	; 0xff
 8004fec:	626b      	str	r3, [r5, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	7743      	strb	r3, [r0, #29]
        __HAL_UNLOCK(hrtc);
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	7702      	strb	r2, [r0, #28]
        return HAL_TIMEOUT;
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	e007      	b.n	800500a <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ffa:	6803      	ldr	r3, [r0, #0]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	7743      	strb	r3, [r0, #29]
      __HAL_UNLOCK(hrtc);
 8005004:	2200      	movs	r2, #0
 8005006:	7702      	strb	r2, [r0, #28]
      return HAL_TIMEOUT;
 8005008:	4618      	mov	r0, r3
}
 800500a:	b003      	add	sp, #12
 800500c:	bc70      	pop	{r4, r5, r6}
 800500e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005010:	2002      	movs	r0, #2
 8005012:	e7fa      	b.n	800500a <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
 8005014:	20002954 	.word	0x20002954
 8005018:	10624dd3 	.word	0x10624dd3
 800501c:	40013c00 	.word	0x40013c00

08005020 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005020:	b510      	push	{r4, lr}
 8005022:	4604      	mov	r4, r0
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005024:	6803      	ldr	r3, [r0, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800502c:	d106      	bne.n	800503c <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8005030:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005034:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005036:	2301      	movs	r3, #1
 8005038:	7763      	strb	r3, [r4, #29]
}
 800503a:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800503c:	f00d f8c6 	bl	80121cc <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	68d3      	ldr	r3, [r2, #12]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f463 6390 	orn	r3, r3, #1152	; 0x480
 800504a:	60d3      	str	r3, [r2, #12]
 800504c:	e7ef      	b.n	800502e <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 800504e:	bf00      	nop
 8005050:	40013c00 	.word	0x40013c00

08005054 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005054:	4770      	bx	lr
	...

08005058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	4605      	mov	r5, r0
 8005060:	4688      	mov	r8, r1
 8005062:	4617      	mov	r7, r2
 8005064:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005066:	f7fc f82b 	bl	80010c0 <HAL_GetTick>
 800506a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506c:	1a1b      	subs	r3, r3, r0
 800506e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8005072:	f7fc f825 	bl	80010c0 <HAL_GetTick>
 8005076:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005078:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005080:	fb09 f303 	mul.w	r3, r9, r3
 8005084:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	689c      	ldr	r4, [r3, #8]
 800508a:	ea38 0304 	bics.w	r3, r8, r4
 800508e:	bf0c      	ite	eq
 8005090:	2401      	moveq	r4, #1
 8005092:	2400      	movne	r4, #0
 8005094:	42bc      	cmp	r4, r7
 8005096:	d040      	beq.n	800511a <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005098:	f1b6 3fff 	cmp.w	r6, #4294967295
 800509c:	d0f3      	beq.n	8005086 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800509e:	f7fc f80f 	bl	80010c0 <HAL_GetTick>
 80050a2:	eba0 000a 	sub.w	r0, r0, sl
 80050a6:	4548      	cmp	r0, r9
 80050a8:	d20a      	bcs.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0x68>
 80050aa:	f1b9 0f00 	cmp.w	r9, #0
 80050ae:	d007      	beq.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b0:	9a01      	ldr	r2, [sp, #4]
 80050b2:	b102      	cbz	r2, 80050b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
 80050b4:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	4691      	mov	r9, r2
 80050be:	e7e2      	b.n	8005086 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050c0:	682a      	ldr	r2, [r5, #0]
 80050c2:	6853      	ldr	r3, [r2, #4]
 80050c4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80050c8:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ca:	686b      	ldr	r3, [r5, #4]
 80050cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d0:	d00b      	beq.n	80050ea <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80050d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d8:	d014      	beq.n	8005104 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80050da:	2301      	movs	r3, #1
 80050dc:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80050e0:	2300      	movs	r3, #0
 80050e2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80050e6:	2003      	movs	r0, #3
 80050e8:	e018      	b.n	800511c <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ea:	68ab      	ldr	r3, [r5, #8]
 80050ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f0:	d002      	beq.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d1ec      	bne.n	80050d2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80050f8:	682a      	ldr	r2, [r5, #0]
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e7e6      	b.n	80050d2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8005104:	682a      	ldr	r2, [r5, #0]
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	682a      	ldr	r2, [r5, #0]
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e7df      	b.n	80050da <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800511a:	2000      	movs	r0, #0
}
 800511c:	b002      	add	sp, #8
 800511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005122:	bf00      	nop
 8005124:	20002954 	.word	0x20002954

08005128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b530      	push	{r4, r5, lr}
 800512a:	b085      	sub	sp, #20
 800512c:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800512e:	4b16      	ldr	r3, [pc, #88]	; (8005188 <SPI_EndRxTxTransaction+0x60>)
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	4b16      	ldr	r3, [pc, #88]	; (800518c <SPI_EndRxTxTransaction+0x64>)
 8005134:	fba3 3000 	umull	r3, r0, r3, r0
 8005138:	0d40      	lsrs	r0, r0, #21
 800513a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800513e:	fb05 f000 	mul.w	r0, r5, r0
 8005142:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514a:	d00b      	beq.n	8005164 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	b1bb      	cbz	r3, 8005180 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800515e:	d1f5      	bne.n	800514c <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8005160:	2000      	movs	r0, #0
 8005162:	e00e      	b.n	8005182 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005164:	9200      	str	r2, [sp, #0]
 8005166:	460b      	mov	r3, r1
 8005168:	2200      	movs	r2, #0
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	4620      	mov	r0, r4
 800516e:	f7ff ff73 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 8005172:	b130      	cbz	r0, 8005182 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005174:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005176:	f043 0320 	orr.w	r3, r3, #32
 800517a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800517c:	2003      	movs	r0, #3
 800517e:	e000      	b.n	8005182 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8005180:	2000      	movs	r0, #0
}
 8005182:	b005      	add	sp, #20
 8005184:	bd30      	pop	{r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	20002954 	.word	0x20002954
 800518c:	165e9f81 	.word	0x165e9f81

08005190 <SPI_EndRxTransaction>:
{
 8005190:	b510      	push	{r4, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	4604      	mov	r4, r0
 8005196:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005198:	6841      	ldr	r1, [r0, #4]
 800519a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800519e:	d014      	beq.n	80051ca <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051a0:	6861      	ldr	r1, [r4, #4]
 80051a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80051a6:	d12a      	bne.n	80051fe <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051a8:	68a1      	ldr	r1, [r4, #8]
 80051aa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051ae:	d019      	beq.n	80051e4 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b0:	9200      	str	r2, [sp, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7ff ff4e 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 80051bc:	b330      	cbz	r0, 800520c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051c0:	f043 0320 	orr.w	r3, r3, #32
 80051c4:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80051c6:	2003      	movs	r0, #3
 80051c8:	e020      	b.n	800520c <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ca:	6881      	ldr	r1, [r0, #8]
 80051cc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80051d0:	d002      	beq.n	80051d8 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051d2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051d6:	d1e3      	bne.n	80051a0 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	6801      	ldr	r1, [r0, #0]
 80051dc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80051e0:	6001      	str	r1, [r0, #0]
 80051e2:	e7dd      	b.n	80051a0 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051e4:	9200      	str	r2, [sp, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	2101      	movs	r1, #1
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7ff ff34 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 80051f0:	b160      	cbz	r0, 800520c <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051f4:	f043 0320 	orr.w	r3, r3, #32
 80051f8:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80051fa:	2003      	movs	r0, #3
 80051fc:	e006      	b.n	800520c <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051fe:	9200      	str	r2, [sp, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	2101      	movs	r1, #1
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff ff27 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 800520a:	b908      	cbnz	r0, 8005210 <SPI_EndRxTransaction+0x80>
}
 800520c:	b002      	add	sp, #8
 800520e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005210:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005212:	f043 0320 	orr.w	r3, r3, #32
 8005216:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005218:	2003      	movs	r0, #3
 800521a:	e7f7      	b.n	800520c <SPI_EndRxTransaction+0x7c>

0800521c <HAL_SPI_Init>:
  if (hspi == NULL)
 800521c:	2800      	cmp	r0, #0
 800521e:	d05a      	beq.n	80052d6 <HAL_SPI_Init+0xba>
{
 8005220:	b510      	push	{r4, lr}
 8005222:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005224:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005226:	b933      	cbnz	r3, 8005236 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005228:	6843      	ldr	r3, [r0, #4]
 800522a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522e:	d005      	beq.n	800523c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005230:	2300      	movs	r3, #0
 8005232:	61c3      	str	r3, [r0, #28]
 8005234:	e002      	b.n	800523c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005236:	2300      	movs	r3, #0
 8005238:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800523a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800523c:	2300      	movs	r3, #0
 800523e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005240:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005244:	2b00      	cmp	r3, #0
 8005246:	d040      	beq.n	80052ca <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	6813      	ldr	r3, [r2, #0]
 8005252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005256:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005258:	6863      	ldr	r3, [r4, #4]
 800525a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800525e:	68a2      	ldr	r2, [r4, #8]
 8005260:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8005264:	4313      	orrs	r3, r2
 8005266:	68e2      	ldr	r2, [r4, #12]
 8005268:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800526c:	4313      	orrs	r3, r2
 800526e:	6922      	ldr	r2, [r4, #16]
 8005270:	f002 0202 	and.w	r2, r2, #2
 8005274:	4313      	orrs	r3, r2
 8005276:	6962      	ldr	r2, [r4, #20]
 8005278:	f002 0201 	and.w	r2, r2, #1
 800527c:	4313      	orrs	r3, r2
 800527e:	69a2      	ldr	r2, [r4, #24]
 8005280:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005284:	4313      	orrs	r3, r2
 8005286:	69e2      	ldr	r2, [r4, #28]
 8005288:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800528c:	4313      	orrs	r3, r2
 800528e:	6a22      	ldr	r2, [r4, #32]
 8005290:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005294:	4313      	orrs	r3, r2
 8005296:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005298:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800529c:	6821      	ldr	r1, [r4, #0]
 800529e:	4313      	orrs	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052a2:	8b63      	ldrh	r3, [r4, #26]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052aa:	f002 0210 	and.w	r2, r2, #16
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052b4:	6822      	ldr	r2, [r4, #0]
 80052b6:	69d3      	ldr	r3, [r2, #28]
 80052b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052bc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052be:	2000      	movs	r0, #0
 80052c0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80052c8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80052ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80052ce:	4620      	mov	r0, r4
 80052d0:	f00c f948 	bl	8011564 <HAL_SPI_MspInit>
 80052d4:	e7b8      	b.n	8005248 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80052d6:	2001      	movs	r0, #1
}
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_SPI_Transmit_IT>:
{
 80052dc:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 80052de:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80052e2:	2801      	cmp	r0, #1
 80052e4:	d048      	beq.n	8005378 <HAL_SPI_Transmit_IT+0x9c>
 80052e6:	2001      	movs	r0, #1
 80052e8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  if ((pData == NULL) || (Size == 0U))
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d038      	beq.n	8005362 <HAL_SPI_Transmit_IT+0x86>
 80052f0:	2a00      	cmp	r2, #0
 80052f2:	d038      	beq.n	8005366 <HAL_SPI_Transmit_IT+0x8a>
  if (hspi->State != HAL_SPI_STATE_READY)
 80052f4:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
 80052f8:	b2c0      	uxtb	r0, r0
 80052fa:	2801      	cmp	r0, #1
 80052fc:	d138      	bne.n	8005370 <HAL_SPI_Transmit_IT+0x94>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052fe:	2003      	movs	r0, #3
 8005300:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005304:	2000      	movs	r0, #0
 8005306:	6558      	str	r0, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005308:	6319      	str	r1, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800530a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800530c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800530e:	6398      	str	r0, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005310:	8798      	strh	r0, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005312:	87d8      	strh	r0, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005314:	6418      	str	r0, [r3, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	b1aa      	cbz	r2, 8005346 <HAL_SPI_Transmit_IT+0x6a>
    hspi->TxISR = SPI_TxISR_16BIT;
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_SPI_Transmit_IT+0xa0>)
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005324:	d012      	beq.n	800534c <HAL_SPI_Transmit_IT+0x70>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	684a      	ldr	r2, [r1, #4]
 800532a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800532e:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	6811      	ldr	r1, [r2, #0]
 8005334:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005338:	d11c      	bne.n	8005374 <HAL_SPI_Transmit_IT+0x98>
    __HAL_SPI_ENABLE(hspi);
 800533a:	6811      	ldr	r1, [r2, #0]
 800533c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005340:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005342:	2000      	movs	r0, #0
 8005344:	e010      	b.n	8005368 <HAL_SPI_Transmit_IT+0x8c>
    hspi->TxISR = SPI_TxISR_8BIT;
 8005346:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <HAL_SPI_Transmit_IT+0xa4>)
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
 800534a:	e7e8      	b.n	800531e <HAL_SPI_Transmit_IT+0x42>
    __HAL_SPI_DISABLE(hspi);
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	680a      	ldr	r2, [r1, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005354:	600a      	str	r2, [r1, #0]
    SPI_1LINE_TX(hspi);
 8005356:	6819      	ldr	r1, [r3, #0]
 8005358:	680a      	ldr	r2, [r1, #0]
 800535a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800535e:	600a      	str	r2, [r1, #0]
 8005360:	e7e1      	b.n	8005326 <HAL_SPI_Transmit_IT+0x4a>
    errorcode = HAL_ERROR;
 8005362:	2001      	movs	r0, #1
 8005364:	e000      	b.n	8005368 <HAL_SPI_Transmit_IT+0x8c>
 8005366:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800536e:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8005370:	2002      	movs	r0, #2
 8005372:	e7f9      	b.n	8005368 <HAL_SPI_Transmit_IT+0x8c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005374:	2000      	movs	r0, #0
 8005376:	e7f7      	b.n	8005368 <HAL_SPI_Transmit_IT+0x8c>
  __HAL_LOCK(hspi);
 8005378:	2002      	movs	r0, #2
}
 800537a:	4770      	bx	lr
 800537c:	080055cd 	.word	0x080055cd
 8005380:	080055a5 	.word	0x080055a5

08005384 <HAL_SPI_TransmitReceive_IT>:
{
 8005384:	b430      	push	{r4, r5}
 8005386:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005388:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800538c:	2801      	cmp	r0, #1
 800538e:	d053      	beq.n	8005438 <HAL_SPI_TransmitReceive_IT+0xb4>
 8005390:	2001      	movs	r0, #1
 8005392:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8005396:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800539a:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800539c:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800539e:	2801      	cmp	r0, #1
 80053a0:	d007      	beq.n	80053b2 <HAL_SPI_TransmitReceive_IT+0x2e>
 80053a2:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80053a6:	d135      	bne.n	8005414 <HAL_SPI_TransmitReceive_IT+0x90>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053a8:	68a5      	ldr	r5, [r4, #8]
 80053aa:	2d00      	cmp	r5, #0
 80053ac:	d138      	bne.n	8005420 <HAL_SPI_TransmitReceive_IT+0x9c>
 80053ae:	2804      	cmp	r0, #4
 80053b0:	d138      	bne.n	8005424 <HAL_SPI_TransmitReceive_IT+0xa0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d038      	beq.n	8005428 <HAL_SPI_TransmitReceive_IT+0xa4>
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	d038      	beq.n	800542c <HAL_SPI_TransmitReceive_IT+0xa8>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d038      	beq.n	8005430 <HAL_SPI_TransmitReceive_IT+0xac>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053be:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80053c2:	b2c0      	uxtb	r0, r0
 80053c4:	2804      	cmp	r0, #4
 80053c6:	d002      	beq.n	80053ce <HAL_SPI_TransmitReceive_IT+0x4a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053c8:	2005      	movs	r0, #5
 80053ca:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ce:	2000      	movs	r0, #0
 80053d0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053d2:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053d4:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053d6:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053d8:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053da:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053de:	68e3      	ldr	r3, [r4, #12]
 80053e0:	b19b      	cbz	r3, 800540a <HAL_SPI_TransmitReceive_IT+0x86>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <HAL_SPI_TransmitReceive_IT+0xb8>)
 80053e4:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_SPI_TransmitReceive_IT+0xbc>)
 80053e8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	6853      	ldr	r3, [r2, #4]
 80053ee:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80053f2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053fc:	d11a      	bne.n	8005434 <HAL_SPI_TransmitReceive_IT+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005404:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005406:	2000      	movs	r0, #0
 8005408:	e005      	b.n	8005416 <HAL_SPI_TransmitReceive_IT+0x92>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800540a:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <HAL_SPI_TransmitReceive_IT+0xc0>)
 800540c:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800540e:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <HAL_SPI_TransmitReceive_IT+0xc4>)
 8005410:	6463      	str	r3, [r4, #68]	; 0x44
 8005412:	e7ea      	b.n	80053ea <HAL_SPI_TransmitReceive_IT+0x66>
    errorcode = HAL_BUSY;
 8005414:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005416:	2300      	movs	r3, #0
 8005418:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800541c:	bc30      	pop	{r4, r5}
 800541e:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8005420:	2002      	movs	r0, #2
 8005422:	e7f8      	b.n	8005416 <HAL_SPI_TransmitReceive_IT+0x92>
 8005424:	2002      	movs	r0, #2
 8005426:	e7f6      	b.n	8005416 <HAL_SPI_TransmitReceive_IT+0x92>
    errorcode = HAL_ERROR;
 8005428:	2001      	movs	r0, #1
 800542a:	e7f4      	b.n	8005416 <HAL_SPI_TransmitReceive_IT+0x92>
 800542c:	2001      	movs	r0, #1
 800542e:	e7f2      	b.n	8005416 <HAL_SPI_TransmitReceive_IT+0x92>
 8005430:	2001      	movs	r0, #1
 8005432:	e7f0      	b.n	8005416 <HAL_SPI_TransmitReceive_IT+0x92>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005434:	2000      	movs	r0, #0
 8005436:	e7ee      	b.n	8005416 <HAL_SPI_TransmitReceive_IT+0x92>
  __HAL_LOCK(hspi);
 8005438:	2002      	movs	r0, #2
 800543a:	e7ef      	b.n	800541c <HAL_SPI_TransmitReceive_IT+0x98>
 800543c:	080057f5 	.word	0x080057f5
 8005440:	080057bd 	.word	0x080057bd
 8005444:	08005785 	.word	0x08005785
 8005448:	0800574d 	.word	0x0800574d

0800544c <HAL_SPI_Receive_IT>:
{
 800544c:	b510      	push	{r4, lr}
 800544e:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005450:	6883      	ldr	r3, [r0, #8]
 8005452:	b91b      	cbnz	r3, 800545c <HAL_SPI_Receive_IT+0x10>
 8005454:	6840      	ldr	r0, [r0, #4]
 8005456:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800545a:	d032      	beq.n	80054c2 <HAL_SPI_Receive_IT+0x76>
  __HAL_LOCK(hspi);
 800545c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8005460:	2801      	cmp	r0, #1
 8005462:	d04c      	beq.n	80054fe <HAL_SPI_Receive_IT+0xb2>
 8005464:	2001      	movs	r0, #1
 8005466:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800546a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800546e:	b2c0      	uxtb	r0, r0
 8005470:	2801      	cmp	r0, #1
 8005472:	d13d      	bne.n	80054f0 <HAL_SPI_Receive_IT+0xa4>
  if ((pData == NULL) || (Size == 0U))
 8005474:	2900      	cmp	r1, #0
 8005476:	d03c      	beq.n	80054f2 <HAL_SPI_Receive_IT+0xa6>
 8005478:	2a00      	cmp	r2, #0
 800547a:	d03a      	beq.n	80054f2 <HAL_SPI_Receive_IT+0xa6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800547c:	2004      	movs	r0, #4
 800547e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005482:	2000      	movs	r0, #0
 8005484:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005486:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005488:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800548a:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800548c:	6320      	str	r0, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800548e:	86a0      	strh	r0, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005490:	86e0      	strh	r0, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8005492:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005494:	68e2      	ldr	r2, [r4, #12]
 8005496:	b1ea      	cbz	r2, 80054d4 <HAL_SPI_Receive_IT+0x88>
    hspi->RxISR = SPI_RxISR_16BIT;
 8005498:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_SPI_Receive_IT+0xb8>)
 800549a:	6422      	str	r2, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a0:	d01b      	beq.n	80054da <HAL_SPI_Receive_IT+0x8e>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	6853      	ldr	r3, [r2, #4]
 80054a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054aa:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80054b4:	d121      	bne.n	80054fa <HAL_SPI_Receive_IT+0xae>
    __HAL_SPI_ENABLE(hspi);
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054bc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054be:	2000      	movs	r0, #0
 80054c0:	e017      	b.n	80054f2 <HAL_SPI_Receive_IT+0xa6>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054c2:	2304      	movs	r3, #4
 80054c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80054c8:	4613      	mov	r3, r2
 80054ca:	460a      	mov	r2, r1
 80054cc:	4620      	mov	r0, r4
 80054ce:	f7ff ff59 	bl	8005384 <HAL_SPI_TransmitReceive_IT>
 80054d2:	e011      	b.n	80054f8 <HAL_SPI_Receive_IT+0xac>
    hspi->RxISR = SPI_RxISR_8BIT;
 80054d4:	4a0c      	ldr	r2, [pc, #48]	; (8005508 <HAL_SPI_Receive_IT+0xbc>)
 80054d6:	6422      	str	r2, [r4, #64]	; 0x40
 80054d8:	e7e0      	b.n	800549c <HAL_SPI_Receive_IT+0x50>
    __HAL_SPI_DISABLE(hspi);
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	6813      	ldr	r3, [r2, #0]
 80054de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e7d8      	b.n	80054a2 <HAL_SPI_Receive_IT+0x56>
    errorcode = HAL_BUSY;
 80054f0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80054f2:	2300      	movs	r3, #0
 80054f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80054f8:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fa:	2000      	movs	r0, #0
 80054fc:	e7f9      	b.n	80054f2 <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 80054fe:	2002      	movs	r0, #2
 8005500:	e7fa      	b.n	80054f8 <HAL_SPI_Receive_IT+0xac>
 8005502:	bf00      	nop
 8005504:	08005673 	.word	0x08005673
 8005508:	0800564b 	.word	0x0800564b

0800550c <HAL_SPI_TxCpltCallback>:
}
 800550c:	4770      	bx	lr

0800550e <HAL_SPI_RxCpltCallback>:
}
 800550e:	4770      	bx	lr

08005510 <HAL_SPI_TxRxCpltCallback>:
}
 8005510:	4770      	bx	lr

08005512 <HAL_SPI_ErrorCallback>:
}
 8005512:	4770      	bx	lr

08005514 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005514:	b510      	push	{r4, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	4604      	mov	r4, r0
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800551a:	4b20      	ldr	r3, [pc, #128]	; (800559c <SPI_CloseTx_ISR+0x88>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <SPI_CloseTx_ISR+0x8c>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	0a5b      	lsrs	r3, r3, #9
 8005526:	2264      	movs	r2, #100	; 0x64
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	9301      	str	r3, [sp, #4]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800552e:	f7fb fdc7 	bl	80010c0 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005534:	9b01      	ldr	r3, [sp, #4]
 8005536:	b143      	cbz	r3, 800554a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
    count--;
 8005538:	9b01      	ldr	r3, [sp, #4]
 800553a:	3b01      	subs	r3, #1
 800553c:	9301      	str	r3, [sp, #4]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f013 0f02 	tst.w	r3, #2
 8005546:	d0f5      	beq.n	8005534 <SPI_CloseTx_ISR+0x20>
 8005548:	e003      	b.n	8005552 <SPI_CloseTx_ISR+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800554c:	f043 0320 	orr.w	r3, r3, #32
 8005550:	6563      	str	r3, [r4, #84]	; 0x54

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005552:	6821      	ldr	r1, [r4, #0]
 8005554:	684b      	ldr	r3, [r1, #4]
 8005556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800555a:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800555c:	2164      	movs	r1, #100	; 0x64
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff fde2 	bl	8005128 <SPI_EndRxTxTransaction>
 8005564:	b118      	cbz	r0, 800556e <SPI_CloseTx_ISR+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005566:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005568:	f043 0320 	orr.w	r3, r3, #32
 800556c:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	b933      	cbnz	r3, 8005580 <SPI_CloseTx_ISR+0x6c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	9200      	str	r2, [sp, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	9b00      	ldr	r3, [sp, #0]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005580:	2301      	movs	r3, #1
 8005582:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005586:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005588:	b123      	cbz	r3, 8005594 <SPI_CloseTx_ISR+0x80>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800558a:	4620      	mov	r0, r4
 800558c:	f7ff ffc1 	bl	8005512 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005590:	b002      	add	sp, #8
 8005592:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8005594:	4620      	mov	r0, r4
 8005596:	f7ff ffb9 	bl	800550c <HAL_SPI_TxCpltCallback>
}
 800559a:	e7f9      	b.n	8005590 <SPI_CloseTx_ISR+0x7c>
 800559c:	20002954 	.word	0x20002954
 80055a0:	057619f1 	.word	0x057619f1

080055a4 <SPI_TxISR_8BIT>:
{
 80055a4:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80055a8:	6803      	ldr	r3, [r0, #0]
 80055aa:	7812      	ldrb	r2, [r2, #0]
 80055ac:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 80055ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80055b0:	3301      	adds	r3, #1
 80055b2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80055b4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80055be:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	b103      	cbz	r3, 80055c6 <SPI_TxISR_8BIT+0x22>
}
 80055c4:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80055c6:	f7ff ffa5 	bl	8005514 <SPI_CloseTx_ISR>
}
 80055ca:	e7fb      	b.n	80055c4 <SPI_TxISR_8BIT+0x20>

080055cc <SPI_TxISR_16BIT>:
{
 80055cc:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80055d0:	6803      	ldr	r3, [r0, #0]
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80055d8:	3302      	adds	r3, #2
 80055da:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80055dc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80055e6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	b103      	cbz	r3, 80055ee <SPI_TxISR_16BIT+0x22>
}
 80055ec:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80055ee:	f7ff ff91 	bl	8005514 <SPI_CloseTx_ISR>
}
 80055f2:	e7fb      	b.n	80055ec <SPI_TxISR_16BIT+0x20>

080055f4 <SPI_CloseRx_ISR>:
{
 80055f4:	b510      	push	{r4, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80055fa:	6802      	ldr	r2, [r0, #0]
 80055fc:	6853      	ldr	r3, [r2, #4]
 80055fe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005602:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005604:	f7fb fd5c 	bl	80010c0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	2164      	movs	r1, #100	; 0x64
 800560c:	4620      	mov	r0, r4
 800560e:	f7ff fdbf 	bl	8005190 <SPI_EndRxTransaction>
 8005612:	b118      	cbz	r0, 800561c <SPI_CloseRx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005614:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005616:	f043 0320 	orr.w	r3, r3, #32
 800561a:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800561c:	68a3      	ldr	r3, [r4, #8]
 800561e:	b933      	cbnz	r3, 800562e <SPI_CloseRx_ISR+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	9201      	str	r2, [sp, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800562e:	2301      	movs	r3, #1
 8005630:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005634:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005636:	b923      	cbnz	r3, 8005642 <SPI_CloseRx_ISR+0x4e>
      HAL_SPI_RxCpltCallback(hspi);
 8005638:	4620      	mov	r0, r4
 800563a:	f7ff ff68 	bl	800550e <HAL_SPI_RxCpltCallback>
}
 800563e:	b002      	add	sp, #8
 8005640:	bd10      	pop	{r4, pc}
      HAL_SPI_ErrorCallback(hspi);
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff ff65 	bl	8005512 <HAL_SPI_ErrorCallback>
}
 8005648:	e7f9      	b.n	800563e <SPI_CloseRx_ISR+0x4a>

0800564a <SPI_RxISR_8BIT>:
{
 800564a:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800564c:	6802      	ldr	r2, [r0, #0]
 800564e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005650:	7b12      	ldrb	r2, [r2, #12]
 8005652:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005654:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005656:	3301      	adds	r3, #1
 8005658:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 800565a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8005664:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005666:	b29b      	uxth	r3, r3
 8005668:	b103      	cbz	r3, 800566c <SPI_RxISR_8BIT+0x22>
}
 800566a:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 800566c:	f7ff ffc2 	bl	80055f4 <SPI_CloseRx_ISR>
}
 8005670:	e7fb      	b.n	800566a <SPI_RxISR_8BIT+0x20>

08005672 <SPI_RxISR_16BIT>:
{
 8005672:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005674:	6803      	ldr	r3, [r0, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800567a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800567c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800567e:	3302      	adds	r3, #2
 8005680:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8005682:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29b      	uxth	r3, r3
 800568a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 800568c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	b103      	cbz	r3, 8005694 <SPI_RxISR_16BIT+0x22>
}
 8005692:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005694:	f7ff ffae 	bl	80055f4 <SPI_CloseRx_ISR>
}
 8005698:	e7fb      	b.n	8005692 <SPI_RxISR_16BIT+0x20>
	...

0800569c <SPI_CloseRxTx_ISR>:
{
 800569c:	b510      	push	{r4, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80056a2:	4b28      	ldr	r3, [pc, #160]	; (8005744 <SPI_CloseRxTx_ISR+0xa8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a28      	ldr	r2, [pc, #160]	; (8005748 <SPI_CloseRxTx_ISR+0xac>)
 80056a8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ac:	0a5b      	lsrs	r3, r3, #9
 80056ae:	2264      	movs	r2, #100	; 0x64
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	9301      	str	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80056b6:	f7fb fd03 	bl	80010c0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056bc:	6821      	ldr	r1, [r4, #0]
 80056be:	684b      	ldr	r3, [r1, #4]
 80056c0:	f023 0320 	bic.w	r3, r3, #32
 80056c4:	604b      	str	r3, [r1, #4]
    if (count == 0U)
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	b143      	cbz	r3, 80056dc <SPI_CloseRxTx_ISR+0x40>
    count--;
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	9301      	str	r3, [sp, #4]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f013 0f02 	tst.w	r3, #2
 80056d8:	d0f5      	beq.n	80056c6 <SPI_CloseRxTx_ISR+0x2a>
 80056da:	e003      	b.n	80056e4 <SPI_CloseRxTx_ISR+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056de:	f043 0320 	orr.w	r3, r3, #32
 80056e2:	6563      	str	r3, [r4, #84]	; 0x54
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056e4:	2164      	movs	r1, #100	; 0x64
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff fd1e 	bl	8005128 <SPI_EndRxTxTransaction>
 80056ec:	b118      	cbz	r0, 80056f6 <SPI_CloseRxTx_ISR+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056f0:	f043 0320 	orr.w	r3, r3, #32
 80056f4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056f6:	68a3      	ldr	r3, [r4, #8]
 80056f8:	b933      	cbnz	r3, 8005708 <SPI_CloseRxTx_ISR+0x6c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	9200      	str	r2, [sp, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	9b00      	ldr	r3, [sp, #0]
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005708:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800570a:	b99b      	cbnz	r3, 8005734 <SPI_CloseRxTx_ISR+0x98>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800570c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b04      	cmp	r3, #4
 8005714:	d007      	beq.n	8005726 <SPI_CloseRxTx_ISR+0x8a>
        hspi->State = HAL_SPI_STATE_READY;
 8005716:	2301      	movs	r3, #1
 8005718:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800571c:	4620      	mov	r0, r4
 800571e:	f7ff fef7 	bl	8005510 <HAL_SPI_TxRxCpltCallback>
}
 8005722:	b002      	add	sp, #8
 8005724:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8005726:	2301      	movs	r3, #1
 8005728:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff feee 	bl	800550e <HAL_SPI_RxCpltCallback>
 8005732:	e7f6      	b.n	8005722 <SPI_CloseRxTx_ISR+0x86>
      hspi->State = HAL_SPI_STATE_READY;
 8005734:	2301      	movs	r3, #1
 8005736:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fee9 	bl	8005512 <HAL_SPI_ErrorCallback>
}
 8005740:	e7ef      	b.n	8005722 <SPI_CloseRxTx_ISR+0x86>
 8005742:	bf00      	nop
 8005744:	20002954 	.word	0x20002954
 8005748:	057619f1 	.word	0x057619f1

0800574c <SPI_2linesTxISR_8BIT>:
{
 800574c:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800574e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005750:	6803      	ldr	r3, [r0, #0]
 8005752:	7812      	ldrb	r2, [r2, #0]
 8005754:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8005756:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005758:	3301      	adds	r3, #1
 800575a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 800575c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29b      	uxth	r3, r3
 8005764:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8005766:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005768:	b29b      	uxth	r3, r3
 800576a:	b93b      	cbnz	r3, 800577c <SPI_2linesTxISR_8BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800576c:	6802      	ldr	r2, [r0, #0]
 800576e:	6853      	ldr	r3, [r2, #4]
 8005770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005774:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8005776:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005778:	b29b      	uxth	r3, r3
 800577a:	b103      	cbz	r3, 800577e <SPI_2linesTxISR_8BIT+0x32>
}
 800577c:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800577e:	f7ff ff8d 	bl	800569c <SPI_CloseRxTx_ISR>
}
 8005782:	e7fb      	b.n	800577c <SPI_2linesTxISR_8BIT+0x30>

08005784 <SPI_2linesRxISR_8BIT>:
{
 8005784:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005786:	6802      	ldr	r2, [r0, #0]
 8005788:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800578a:	7b12      	ldrb	r2, [r2, #12]
 800578c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800578e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005790:	3301      	adds	r3, #1
 8005792:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8005794:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29b      	uxth	r3, r3
 800579c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 800579e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	b93b      	cbnz	r3, 80057b4 <SPI_2linesRxISR_8BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80057a4:	6802      	ldr	r2, [r0, #0]
 80057a6:	6853      	ldr	r3, [r2, #4]
 80057a8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80057ac:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80057ae:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	b103      	cbz	r3, 80057b6 <SPI_2linesRxISR_8BIT+0x32>
}
 80057b4:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80057b6:	f7ff ff71 	bl	800569c <SPI_CloseRxTx_ISR>
}
 80057ba:	e7fb      	b.n	80057b4 <SPI_2linesRxISR_8BIT+0x30>

080057bc <SPI_2linesTxISR_16BIT>:
{
 80057bc:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057be:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80057c0:	6803      	ldr	r3, [r0, #0]
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80057c8:	3302      	adds	r3, #2
 80057ca:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80057cc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80057d6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80057d8:	b29b      	uxth	r3, r3
 80057da:	b93b      	cbnz	r3, 80057ec <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80057dc:	6802      	ldr	r2, [r0, #0]
 80057de:	6853      	ldr	r3, [r2, #4]
 80057e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e4:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80057e6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	b103      	cbz	r3, 80057ee <SPI_2linesTxISR_16BIT+0x32>
}
 80057ec:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80057ee:	f7ff ff55 	bl	800569c <SPI_CloseRxTx_ISR>
}
 80057f2:	e7fb      	b.n	80057ec <SPI_2linesTxISR_16BIT+0x30>

080057f4 <SPI_2linesRxISR_16BIT>:
{
 80057f4:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80057f6:	6803      	ldr	r3, [r0, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80057fc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80057fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005800:	3302      	adds	r3, #2
 8005802:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8005804:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29b      	uxth	r3, r3
 800580c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 800580e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	b93b      	cbnz	r3, 8005824 <SPI_2linesRxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005814:	6802      	ldr	r2, [r0, #0]
 8005816:	6853      	ldr	r3, [r2, #4]
 8005818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581c:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800581e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005820:	b29b      	uxth	r3, r3
 8005822:	b103      	cbz	r3, 8005826 <SPI_2linesRxISR_16BIT+0x32>
}
 8005824:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8005826:	f7ff ff39 	bl	800569c <SPI_CloseRxTx_ISR>
}
 800582a:	e7fb      	b.n	8005824 <SPI_2linesRxISR_16BIT+0x30>

0800582c <HAL_SPI_IRQHandler>:
{
 800582c:	b530      	push	{r4, r5, lr}
 800582e:	b085      	sub	sp, #20
 8005830:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005832:	6802      	ldr	r2, [r0, #0]
 8005834:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005836:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005838:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800583c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005840:	d105      	bne.n	800584e <HAL_SPI_IRQHandler+0x22>
 8005842:	f013 0f01 	tst.w	r3, #1
 8005846:	d002      	beq.n	800584e <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005848:	f011 0f40 	tst.w	r1, #64	; 0x40
 800584c:	d169      	bne.n	8005922 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800584e:	f013 0f02 	tst.w	r3, #2
 8005852:	d002      	beq.n	800585a <HAL_SPI_IRQHandler+0x2e>
 8005854:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005858:	d167      	bne.n	800592a <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800585a:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800585e:	f013 0f20 	tst.w	r3, #32
 8005862:	d103      	bne.n	800586c <HAL_SPI_IRQHandler+0x40>
 8005864:	b910      	cbnz	r0, 800586c <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005866:	f413 7f80 	tst.w	r3, #256	; 0x100
 800586a:	d061      	beq.n	8005930 <HAL_SPI_IRQHandler+0x104>
 800586c:	f011 0f20 	tst.w	r1, #32
 8005870:	d05e      	beq.n	8005930 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005872:	b178      	cbz	r0, 8005894 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005874:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005878:	b2c0      	uxtb	r0, r0
 800587a:	2803      	cmp	r0, #3
 800587c:	d05a      	beq.n	8005934 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800587e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005880:	f040 0004 	orr.w	r0, r0, #4
 8005884:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005886:	2000      	movs	r0, #0
 8005888:	9000      	str	r0, [sp, #0]
 800588a:	68d0      	ldr	r0, [r2, #12]
 800588c:	9000      	str	r0, [sp, #0]
 800588e:	6890      	ldr	r0, [r2, #8]
 8005890:	9000      	str	r0, [sp, #0]
 8005892:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005894:	b165      	cbz	r5, 80058b0 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005898:	f040 0001 	orr.w	r0, r0, #1
 800589c:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800589e:	2000      	movs	r0, #0
 80058a0:	9002      	str	r0, [sp, #8]
 80058a2:	6890      	ldr	r0, [r2, #8]
 80058a4:	9002      	str	r0, [sp, #8]
 80058a6:	6810      	ldr	r0, [r2, #0]
 80058a8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80058ac:	6010      	str	r0, [r2, #0]
 80058ae:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80058b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058b4:	d009      	beq.n	80058ca <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058b8:	f043 0308 	orr.w	r3, r3, #8
 80058bc:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058be:	2300      	movs	r3, #0
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02f      	beq.n	8005930 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058d0:	6822      	ldr	r2, [r4, #0]
 80058d2:	6853      	ldr	r3, [r2, #4]
 80058d4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80058d8:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80058da:	2301      	movs	r3, #1
 80058dc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058e0:	f011 0f03 	tst.w	r1, #3
 80058e4:	d02e      	beq.n	8005944 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058e6:	6822      	ldr	r2, [r4, #0]
 80058e8:	6853      	ldr	r3, [r2, #4]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80058f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80058f2:	b14b      	cbz	r3, 8005908 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <HAL_SPI_IRQHandler+0x120>)
 80058f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80058f8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80058fa:	f7fc fa04 	bl	8001d06 <HAL_DMA_Abort_IT>
 80058fe:	b118      	cbz	r0, 8005908 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005900:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005906:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005908:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800590a:	b18b      	cbz	r3, 8005930 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800590c:	4a0f      	ldr	r2, [pc, #60]	; (800594c <HAL_SPI_IRQHandler+0x120>)
 800590e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005910:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005912:	f7fc f9f8 	bl	8001d06 <HAL_DMA_Abort_IT>
 8005916:	b158      	cbz	r0, 8005930 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005918:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800591a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591e:	6563      	str	r3, [r4, #84]	; 0x54
 8005920:	e006      	b.n	8005930 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8005922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005924:	4620      	mov	r0, r4
 8005926:	4798      	blx	r3
    return;
 8005928:	e002      	b.n	8005930 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800592a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800592c:	4620      	mov	r0, r4
 800592e:	4798      	blx	r3
}
 8005930:	b005      	add	sp, #20
 8005932:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005934:	2300      	movs	r3, #0
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	68d3      	ldr	r3, [r2, #12]
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	6893      	ldr	r3, [r2, #8]
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	9b01      	ldr	r3, [sp, #4]
        return;
 8005942:	e7f5      	b.n	8005930 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8005944:	4620      	mov	r0, r4
 8005946:	f7ff fde4 	bl	8005512 <HAL_SPI_ErrorCallback>
    return;
 800594a:	e7f1      	b.n	8005930 <HAL_SPI_IRQHandler+0x104>
 800594c:	08005951 	.word	0x08005951

08005950 <SPI_DMAAbortOnError>:
{
 8005950:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005952:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005958:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800595a:	f7ff fdda 	bl	8005512 <HAL_SPI_ErrorCallback>
}
 800595e:	bd08      	pop	{r3, pc}

08005960 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005960:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d137      	bne.n	80059da <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	68d3      	ldr	r3, [r2, #12]
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	6803      	ldr	r3, [r0, #0]
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <HAL_TIM_Base_Start_IT+0x84>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d020      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d01d      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
 8005988:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800598c:	4293      	cmp	r3, r2
 800598e:	d019      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
 8005990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005994:	4293      	cmp	r3, r2
 8005996:	d015      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
 8005998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800599c:	4293      	cmp	r3, r2
 800599e:	d011      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
 80059a0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00d      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
 80059a8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
 80059b0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d005      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059c0:	2000      	movs	r0, #0
 80059c2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	2a06      	cmp	r2, #6
 80059cc:	d007      	beq.n	80059de <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80059d6:	2000      	movs	r0, #0
 80059d8:	4770      	bx	lr
    return HAL_ERROR;
 80059da:	2001      	movs	r0, #1
 80059dc:	4770      	bx	lr
  return HAL_OK;
 80059de:	2000      	movs	r0, #0
}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000

080059e8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e8:	4770      	bx	lr

080059ea <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ea:	4770      	bx	lr

080059ec <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIM_IRQHandler>:
{
 80059f0:	b510      	push	{r4, lr}
 80059f2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059f4:	6803      	ldr	r3, [r0, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	f012 0f02 	tst.w	r2, #2
 80059fc:	d011      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	f012 0f02 	tst.w	r2, #2
 8005a04:	d00d      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a06:	f06f 0202 	mvn.w	r2, #2
 8005a0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a10:	6803      	ldr	r3, [r0, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f013 0f03 	tst.w	r3, #3
 8005a18:	d070      	beq.n	8005afc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	f7ff ffe6 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	f012 0f04 	tst.w	r2, #4
 8005a2a:	d012      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	f012 0f04 	tst.w	r2, #4
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a34:	f06f 0204 	mvn.w	r2, #4
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a46:	d05f      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7ff ffce 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	f012 0f08 	tst.w	r2, #8
 8005a5a:	d012      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	f012 0f08 	tst.w	r2, #8
 8005a62:	d00e      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a64:	f06f 0208 	mvn.w	r2, #8
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6a:	2304      	movs	r3, #4
 8005a6c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f013 0f03 	tst.w	r3, #3
 8005a76:	d04e      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f7ff ffb6 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	f012 0f10 	tst.w	r2, #16
 8005a8a:	d012      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	f012 0f10 	tst.w	r2, #16
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a94:	f06f 0210 	mvn.w	r2, #16
 8005a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005aa6:	d03d      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f7ff ff9e 	bl	80059ea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	f012 0f01 	tst.w	r2, #1
 8005aba:	d003      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	f012 0f01 	tst.w	r2, #1
 8005ac2:	d136      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005ad4:	d134      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ade:	d003      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ae6:	d132      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	f012 0f20 	tst.w	r2, #32
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	f012 0f20 	tst.w	r2, #32
 8005af8:	d130      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x16c>
}
 8005afa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afc:	f7ff ff74 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7ff ff73 	bl	80059ec <HAL_TIM_PWM_PulseFinishedCallback>
 8005b06:	e78a      	b.n	8005a1e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f7ff ff6d 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff ff6c 	bl	80059ec <HAL_TIM_PWM_PulseFinishedCallback>
 8005b14:	e79b      	b.n	8005a4e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b16:	4620      	mov	r0, r4
 8005b18:	f7ff ff66 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff ff65 	bl	80059ec <HAL_TIM_PWM_PulseFinishedCallback>
 8005b22:	e7ac      	b.n	8005a7e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b24:	4620      	mov	r0, r4
 8005b26:	f7ff ff5f 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7ff ff5e 	bl	80059ec <HAL_TIM_PWM_PulseFinishedCallback>
 8005b30:	e7bd      	b.n	8005aae <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b32:	f06f 0201 	mvn.w	r2, #1
 8005b36:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f00c fbe1 	bl	8012300 <HAL_TIM_PeriodElapsedCallback>
 8005b3e:	e7c1      	b.n	8005ac4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 f8e5 	bl	8005d16 <HAL_TIMEx_BreakCallback>
 8005b4c:	e7c3      	b.n	8005ad6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b52:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7ff ff4a 	bl	80059ee <HAL_TIM_TriggerCallback>
 8005b5a:	e7c5      	b.n	8005ae8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b5c:	f06f 0220 	mvn.w	r2, #32
 8005b60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005b62:	4620      	mov	r0, r4
 8005b64:	f000 f8d6 	bl	8005d14 <HAL_TIMEx_CommutCallback>
}
 8005b68:	e7c7      	b.n	8005afa <HAL_TIM_IRQHandler+0x10a>
	...

08005b6c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b6e:	4a30      	ldr	r2, [pc, #192]	; (8005c30 <TIM_Base_SetConfig+0xc4>)
 8005b70:	4290      	cmp	r0, r2
 8005b72:	d012      	beq.n	8005b9a <TIM_Base_SetConfig+0x2e>
 8005b74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b78:	d00f      	beq.n	8005b9a <TIM_Base_SetConfig+0x2e>
 8005b7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005b7e:	4290      	cmp	r0, r2
 8005b80:	d00b      	beq.n	8005b9a <TIM_Base_SetConfig+0x2e>
 8005b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b86:	4290      	cmp	r0, r2
 8005b88:	d007      	beq.n	8005b9a <TIM_Base_SetConfig+0x2e>
 8005b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b8e:	4290      	cmp	r0, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_Base_SetConfig+0x2e>
 8005b92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005b96:	4290      	cmp	r0, r2
 8005b98:	d103      	bne.n	8005ba2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b9e:	684a      	ldr	r2, [r1, #4]
 8005ba0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba2:	4a23      	ldr	r2, [pc, #140]	; (8005c30 <TIM_Base_SetConfig+0xc4>)
 8005ba4:	4290      	cmp	r0, r2
 8005ba6:	d02a      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005ba8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005bac:	d027      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005bb2:	4290      	cmp	r0, r2
 8005bb4:	d023      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bba:	4290      	cmp	r0, r2
 8005bbc:	d01f      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bc2:	4290      	cmp	r0, r2
 8005bc4:	d01b      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bc6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005bca:	4290      	cmp	r0, r2
 8005bcc:	d017      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005bd2:	4290      	cmp	r0, r2
 8005bd4:	d013      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bda:	4290      	cmp	r0, r2
 8005bdc:	d00f      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be2:	4290      	cmp	r0, r2
 8005be4:	d00b      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005be6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005bea:	4290      	cmp	r0, r2
 8005bec:	d007      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bf2:	4290      	cmp	r0, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_Base_SetConfig+0x92>
 8005bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bfa:	4290      	cmp	r0, r2
 8005bfc:	d103      	bne.n	8005c06 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c02:	68ca      	ldr	r2, [r1, #12]
 8005c04:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c0a:	694a      	ldr	r2, [r1, #20]
 8005c0c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005c0e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c10:	688b      	ldr	r3, [r1, #8]
 8005c12:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c14:	680b      	ldr	r3, [r1, #0]
 8005c16:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <TIM_Base_SetConfig+0xc4>)
 8005c1a:	4298      	cmp	r0, r3
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0xba>
 8005c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c22:	4298      	cmp	r0, r3
 8005c24:	d101      	bne.n	8005c2a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c26:	690b      	ldr	r3, [r1, #16]
 8005c28:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	6143      	str	r3, [r0, #20]
}
 8005c2e:	4770      	bx	lr
 8005c30:	40010000 	.word	0x40010000

08005c34 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005c34:	b340      	cbz	r0, 8005c88 <HAL_TIM_Base_Init+0x54>
{
 8005c36:	b510      	push	{r4, lr}
 8005c38:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c3e:	b1f3      	cbz	r3, 8005c7e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	2302      	movs	r3, #2
 8005c42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c46:	4621      	mov	r1, r4
 8005c48:	f851 0b04 	ldr.w	r0, [r1], #4
 8005c4c:	f7ff ff8e 	bl	8005b6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005c5a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005c72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005c7a:	2000      	movs	r0, #0
}
 8005c7c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005c7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005c82:	f00b fe49 	bl	8011918 <HAL_TIM_Base_MspInit>
 8005c86:	e7db      	b.n	8005c40 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005c88:	2001      	movs	r0, #1
}
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d03b      	beq.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8005c94:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005c96:	2301      	movs	r3, #1
 8005c98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca2:	6803      	ldr	r3, [r0, #0]
 8005ca4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ca8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cac:	680a      	ldr	r2, [r1, #0]
 8005cae:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb2:	6803      	ldr	r3, [r0, #0]
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01a      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbe:	d017      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005cc0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d013      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00f      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005cd8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005ce0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005ce8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d104      	bne.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf4:	684a      	ldr	r2, [r1, #4]
 8005cf6:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cf8:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d00:	2300      	movs	r3, #0
 8005d02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005d06:	4618      	mov	r0, r3
}
 8005d08:	bc30      	pop	{r4, r5}
 8005d0a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005d0c:	2002      	movs	r0, #2
}
 8005d0e:	4770      	bx	lr
 8005d10:	40010000 	.word	0x40010000

08005d14 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d16:	4770      	bx	lr

08005d18 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005d18:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005d1a:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	fa94 f4a4 	rbit	r4, r4
 8005d20:	fab4 f484 	clz	r4, r4
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005d24:	e04a      	b.n	8005dbc <LL_GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005d26:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005d28:	6882      	ldr	r2, [r0, #8]
 8005d2a:	fa93 f5a3 	rbit	r5, r3
 8005d2e:	fab5 f585 	clz	r5, r5
 8005d32:	006d      	lsls	r5, r5, #1
 8005d34:	2703      	movs	r7, #3
 8005d36:	fa07 f505 	lsl.w	r5, r7, r5
 8005d3a:	ea22 0205 	bic.w	r2, r2, r5
 8005d3e:	fa93 f5a3 	rbit	r5, r3
 8005d42:	fab5 f585 	clz	r5, r5
 8005d46:	006d      	lsls	r5, r5, #1
 8005d48:	fa06 f505 	lsl.w	r5, r6, r5
 8005d4c:	432a      	orrs	r2, r5
 8005d4e:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005d50:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d52:	6842      	ldr	r2, [r0, #4]
 8005d54:	ea22 0203 	bic.w	r2, r2, r3
 8005d58:	fb03 f505 	mul.w	r5, r3, r5
 8005d5c:	432a      	orrs	r2, r5
 8005d5e:	6042      	str	r2, [r0, #4]
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005d60:	690e      	ldr	r6, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005d62:	68c2      	ldr	r2, [r0, #12]
 8005d64:	fa93 f5a3 	rbit	r5, r3
 8005d68:	fab5 f585 	clz	r5, r5
 8005d6c:	006d      	lsls	r5, r5, #1
 8005d6e:	2703      	movs	r7, #3
 8005d70:	fa07 f505 	lsl.w	r5, r7, r5
 8005d74:	ea22 0205 	bic.w	r2, r2, r5
 8005d78:	fa93 f5a3 	rbit	r5, r3
 8005d7c:	fab5 f585 	clz	r5, r5
 8005d80:	006d      	lsls	r5, r5, #1
 8005d82:	fa06 f505 	lsl.w	r5, r6, r5
 8005d86:	432a      	orrs	r2, r5
 8005d88:	60c2      	str	r2, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005d8a:	684a      	ldr	r2, [r1, #4]
 8005d8c:	2a02      	cmp	r2, #2
 8005d8e:	d022      	beq.n	8005dd6 <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005d90:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005d92:	6805      	ldr	r5, [r0, #0]
 8005d94:	fa93 f6a3 	rbit	r6, r3
 8005d98:	fab6 f686 	clz	r6, r6
 8005d9c:	0076      	lsls	r6, r6, #1
 8005d9e:	2703      	movs	r7, #3
 8005da0:	fa07 f606 	lsl.w	r6, r7, r6
 8005da4:	ea25 0506 	bic.w	r5, r5, r6
 8005da8:	fa93 f3a3 	rbit	r3, r3
 8005dac:	fab3 f383 	clz	r3, r3
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	432b      	orrs	r3, r5
 8005db8:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8005dba:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005dbc:	680b      	ldr	r3, [r1, #0]
 8005dbe:	fa33 f204 	lsrs.w	r2, r3, r4
 8005dc2:	d03c      	beq.n	8005e3e <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	40a2      	lsls	r2, r4
    if (currentpin)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d0f6      	beq.n	8005dba <LL_GPIO_Init+0xa2>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005dcc:	684a      	ldr	r2, [r1, #4]
 8005dce:	3a01      	subs	r2, #1
 8005dd0:	2a01      	cmp	r2, #1
 8005dd2:	d8c5      	bhi.n	8005d60 <LL_GPIO_Init+0x48>
 8005dd4:	e7a7      	b.n	8005d26 <LL_GPIO_Init+0xe>
 8005dd6:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005dda:	fab2 f282 	clz	r2, r2
 8005dde:	2a07      	cmp	r2, #7
 8005de0:	d815      	bhi.n	8005e0e <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005de2:	694e      	ldr	r6, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005de4:	6a02      	ldr	r2, [r0, #32]
 8005de6:	fa93 f5a3 	rbit	r5, r3
 8005dea:	fab5 f585 	clz	r5, r5
 8005dee:	00ad      	lsls	r5, r5, #2
 8005df0:	270f      	movs	r7, #15
 8005df2:	fa07 f505 	lsl.w	r5, r7, r5
 8005df6:	ea22 0205 	bic.w	r2, r2, r5
 8005dfa:	fa93 f5a3 	rbit	r5, r3
 8005dfe:	fab5 f585 	clz	r5, r5
 8005e02:	00ad      	lsls	r5, r5, #2
 8005e04:	fa06 f505 	lsl.w	r5, r6, r5
 8005e08:	432a      	orrs	r2, r5
 8005e0a:	6202      	str	r2, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005e0c:	e7c0      	b.n	8005d90 <LL_GPIO_Init+0x78>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e0e:	694d      	ldr	r5, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005e10:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e12:	0a1a      	lsrs	r2, r3, #8
 8005e14:	fa92 f7a2 	rbit	r7, r2
 8005e18:	fab7 f787 	clz	r7, r7
 8005e1c:	00bf      	lsls	r7, r7, #2
 8005e1e:	f04f 0c0f 	mov.w	ip, #15
 8005e22:	fa0c f707 	lsl.w	r7, ip, r7
 8005e26:	ea26 0607 	bic.w	r6, r6, r7
 8005e2a:	fa92 f2a2 	rbit	r2, r2
 8005e2e:	fab2 f282 	clz	r2, r2
 8005e32:	0092      	lsls	r2, r2, #2
 8005e34:	fa05 f202 	lsl.w	r2, r5, r2
 8005e38:	4332      	orrs	r2, r6
 8005e3a:	6242      	str	r2, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005e3c:	e7a8      	b.n	8005d90 <LL_GPIO_Init+0x78>
  }

  return (SUCCESS);
}
 8005e3e:	2000      	movs	r0, #0
 8005e40:	bcf0      	pop	{r4, r5, r6, r7}
 8005e42:	4770      	bx	lr

08005e44 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <RCC_GetHCLKClockFreq+0x10>)
 8005e46:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005e48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e4c:	4a02      	ldr	r2, [pc, #8]	; (8005e58 <RCC_GetHCLKClockFreq+0x14>)
 8005e4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005e50:	40d8      	lsrs	r0, r3
 8005e52:	4770      	bx	lr
 8005e54:	40023800 	.word	0x40023800
 8005e58:	08019f0c 	.word	0x08019f0c

08005e5c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <RCC_GetPCLK1ClockFreq+0x10>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005e60:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005e64:	4a02      	ldr	r2, [pc, #8]	; (8005e70 <RCC_GetPCLK1ClockFreq+0x14>)
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
}
 8005e68:	40d8      	lsrs	r0, r3
 8005e6a:	4770      	bx	lr
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	08019f1c 	.word	0x08019f1c

08005e74 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005e74:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <RCC_GetPCLK2ClockFreq+0x10>)
 8005e76:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005e78:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005e7c:	4a02      	ldr	r2, [pc, #8]	; (8005e88 <RCC_GetPCLK2ClockFreq+0x14>)
 8005e7e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005e80:	40d8      	lsrs	r0, r3
 8005e82:	4770      	bx	lr
 8005e84:	40023800 	.word	0x40023800
 8005e88:	08019f1c 	.word	0x08019f1c

08005e8c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005e94:	b923      	cbnz	r3, 8005ea0 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005e98:	2808      	cmp	r0, #8
 8005e9a:	d003      	beq.n	8005ea4 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005e9c:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8005e9e:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8005ea2:	e7f9      	b.n	8005e98 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ea4:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8005ea6:	6850      	ldr	r0, [r2, #4]
 8005ea8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005eac:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005eb0:	6850      	ldr	r0, [r2, #4]
 8005eb2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005eb6:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005eba:	6853      	ldr	r3, [r2, #4]
 8005ebc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	00f42400 	.word	0x00f42400
 8005ed4:	017d7840 	.word	0x017d7840

08005ed8 <RCC_GetSystemClockFreq>:
{
 8005ed8:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <RCC_GetSystemClockFreq+0x24>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d005      	beq.n	8005ef2 <RCC_GetSystemClockFreq+0x1a>
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d105      	bne.n	8005ef6 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005eea:	2008      	movs	r0, #8
 8005eec:	f7ff ffce 	bl	8005e8c <RCC_PLL_GetFreqDomain_SYS>
      break;
 8005ef0:	e002      	b.n	8005ef8 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8005ef2:	4803      	ldr	r0, [pc, #12]	; (8005f00 <RCC_GetSystemClockFreq+0x28>)
 8005ef4:	e000      	b.n	8005ef8 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8005ef6:	4803      	ldr	r0, [pc, #12]	; (8005f04 <RCC_GetSystemClockFreq+0x2c>)
}
 8005ef8:	bd08      	pop	{r3, pc}
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	017d7840 	.word	0x017d7840
 8005f04:	00f42400 	.word	0x00f42400

08005f08 <LL_RCC_GetSystemClocksFreq>:
{
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005f0c:	f7ff ffe4 	bl	8005ed8 <RCC_GetSystemClockFreq>
 8005f10:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005f12:	f7ff ff97 	bl	8005e44 <RCC_GetHCLKClockFreq>
 8005f16:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005f18:	f7ff ffa0 	bl	8005e5c <RCC_GetPCLK1ClockFreq>
 8005f1c:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005f1e:	6860      	ldr	r0, [r4, #4]
 8005f20:	f7ff ffa8 	bl	8005e74 <RCC_GetPCLK2ClockFreq>
 8005f24:	60e0      	str	r0, [r4, #12]
}
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <LL_USART_Init>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005f28:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005f2a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005f2e:	d001      	beq.n	8005f34 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8005f30:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005f32:	4770      	bx	lr
{
 8005f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f36:	b085      	sub	sp, #20
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8005f3c:	68c3      	ldr	r3, [r0, #12]
 8005f3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f42:	f023 030c 	bic.w	r3, r3, #12
 8005f46:	684a      	ldr	r2, [r1, #4]
 8005f48:	68c9      	ldr	r1, [r1, #12]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	6929      	ldr	r1, [r5, #16]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	69a9      	ldr	r1, [r5, #24]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005f58:	68ab      	ldr	r3, [r5, #8]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005f5a:	6902      	ldr	r2, [r0, #16]
 8005f5c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f60:	4313      	orrs	r3, r2
 8005f62:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005f64:	696b      	ldr	r3, [r5, #20]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005f66:	6942      	ldr	r2, [r0, #20]
 8005f68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005f70:	4668      	mov	r0, sp
 8005f72:	f7ff ffc9 	bl	8005f08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005f76:	4b48      	ldr	r3, [pc, #288]	; (8006098 <LL_USART_Init+0x170>)
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	d016      	beq.n	8005faa <LL_USART_Init+0x82>
    else if (USARTx == USART2)
 8005f7c:	4b47      	ldr	r3, [pc, #284]	; (800609c <LL_USART_Init+0x174>)
 8005f7e:	429c      	cmp	r4, r3
 8005f80:	d01a      	beq.n	8005fb8 <LL_USART_Init+0x90>
    else if (USARTx == USART3)
 8005f82:	4b47      	ldr	r3, [pc, #284]	; (80060a0 <LL_USART_Init+0x178>)
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d019      	beq.n	8005fbc <LL_USART_Init+0x94>
    else if (USARTx == USART6)
 8005f88:	4b46      	ldr	r3, [pc, #280]	; (80060a4 <LL_USART_Init+0x17c>)
 8005f8a:	429c      	cmp	r4, r3
 8005f8c:	d018      	beq.n	8005fc0 <LL_USART_Init+0x98>
    else if (USARTx == UART4)
 8005f8e:	4b46      	ldr	r3, [pc, #280]	; (80060a8 <LL_USART_Init+0x180>)
 8005f90:	429c      	cmp	r4, r3
 8005f92:	d017      	beq.n	8005fc4 <LL_USART_Init+0x9c>
    else if (USARTx == UART5)
 8005f94:	4b45      	ldr	r3, [pc, #276]	; (80060ac <LL_USART_Init+0x184>)
 8005f96:	429c      	cmp	r4, r3
 8005f98:	d016      	beq.n	8005fc8 <LL_USART_Init+0xa0>
    else if (USARTx == UART7)
 8005f9a:	4b45      	ldr	r3, [pc, #276]	; (80060b0 <LL_USART_Init+0x188>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d015      	beq.n	8005fcc <LL_USART_Init+0xa4>
    else if (USARTx == UART8)
 8005fa0:	4b44      	ldr	r3, [pc, #272]	; (80060b4 <LL_USART_Init+0x18c>)
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	d014      	beq.n	8005fd0 <LL_USART_Init+0xa8>
  ErrorStatus status = ERROR;
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	e074      	b.n	8006094 <LL_USART_Init+0x16c>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005faa:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d070      	beq.n	8006092 <LL_USART_Init+0x16a>
        && (USART_InitStruct->BaudRate != 0U))
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b97b      	cbnz	r3, 8005fd4 <LL_USART_Init+0xac>
  ErrorStatus status = ERROR;
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	e06d      	b.n	8006094 <LL_USART_Init+0x16c>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fb8:	9802      	ldr	r0, [sp, #8]
 8005fba:	e7f7      	b.n	8005fac <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fbc:	9802      	ldr	r0, [sp, #8]
 8005fbe:	e7f5      	b.n	8005fac <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005fc0:	9803      	ldr	r0, [sp, #12]
 8005fc2:	e7f3      	b.n	8005fac <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fc4:	9802      	ldr	r0, [sp, #8]
 8005fc6:	e7f1      	b.n	8005fac <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fc8:	9802      	ldr	r0, [sp, #8]
 8005fca:	e7ef      	b.n	8005fac <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fcc:	9802      	ldr	r0, [sp, #8]
 8005fce:	e7ed      	b.n	8005fac <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fd0:	9802      	ldr	r0, [sp, #8]
 8005fd2:	e7eb      	b.n	8005fac <LL_USART_Init+0x84>
      LL_USART_SetBaudRate(USARTx,
 8005fd4:	69aa      	ldr	r2, [r5, #24]
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005fd6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005fda:	d02c      	beq.n	8006036 <LL_USART_Init+0x10e>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005fdc:	2600      	movs	r6, #0
 8005fde:	1805      	adds	r5, r0, r0
 8005fe0:	eb46 0106 	adc.w	r1, r6, r6
 8005fe4:	182d      	adds	r5, r5, r0
 8005fe6:	eb46 0101 	adc.w	r1, r6, r1
 8005fea:	00ca      	lsls	r2, r1, #3
 8005fec:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8005ff0:	00ef      	lsls	r7, r5, #3
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	009a      	lsls	r2, r3, #2
 8005ff6:	0f9b      	lsrs	r3, r3, #30
 8005ff8:	1838      	adds	r0, r7, r0
 8005ffa:	eb46 0101 	adc.w	r1, r6, r1
 8005ffe:	f7fa fe63 	bl	8000cc8 <__aeabi_uldivmod>
 8006002:	492d      	ldr	r1, [pc, #180]	; (80060b8 <LL_USART_Init+0x190>)
 8006004:	fba1 3200 	umull	r3, r2, r1, r0
 8006008:	0953      	lsrs	r3, r2, #5
 800600a:	011a      	lsls	r2, r3, #4
 800600c:	b292      	uxth	r2, r2
 800600e:	2564      	movs	r5, #100	; 0x64
 8006010:	fb05 0313 	mls	r3, r5, r3, r0
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	3332      	adds	r3, #50	; 0x32
 8006018:	fba1 1303 	umull	r1, r3, r1, r3
 800601c:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8006020:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8006024:	440a      	add	r2, r1
 8006026:	b292      	uxth	r2, r2
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	4413      	add	r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8006032:	2000      	movs	r0, #0
  }
}
 8006034:	e02e      	b.n	8006094 <LL_USART_Init+0x16c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006036:	2600      	movs	r6, #0
 8006038:	1805      	adds	r5, r0, r0
 800603a:	eb46 0106 	adc.w	r1, r6, r6
 800603e:	182d      	adds	r5, r5, r0
 8006040:	eb46 0101 	adc.w	r1, r6, r1
 8006044:	00ca      	lsls	r2, r1, #3
 8006046:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 800604a:	00ef      	lsls	r7, r5, #3
 800604c:	4611      	mov	r1, r2
 800604e:	18da      	adds	r2, r3, r3
 8006050:	eb46 0306 	adc.w	r3, r6, r6
 8006054:	1838      	adds	r0, r7, r0
 8006056:	eb46 0101 	adc.w	r1, r6, r1
 800605a:	f7fa fe35 	bl	8000cc8 <__aeabi_uldivmod>
 800605e:	4916      	ldr	r1, [pc, #88]	; (80060b8 <LL_USART_Init+0x190>)
 8006060:	fba1 3200 	umull	r3, r2, r1, r0
 8006064:	0953      	lsrs	r3, r2, #5
 8006066:	011a      	lsls	r2, r3, #4
 8006068:	b292      	uxth	r2, r2
 800606a:	2564      	movs	r5, #100	; 0x64
 800606c:	fb05 0313 	mls	r3, r5, r3, r0
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	3332      	adds	r3, #50	; 0x32
 8006074:	fba1 1303 	umull	r1, r3, r1, r3
 8006078:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800607c:	0059      	lsls	r1, r3, #1
 800607e:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8006082:	440a      	add	r2, r1
 8006084:	b292      	uxth	r2, r2
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	4413      	add	r3, r2
 800608c:	b29b      	uxth	r3, r3
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	e7cf      	b.n	8006032 <LL_USART_Init+0x10a>
  ErrorStatus status = ERROR;
 8006092:	2001      	movs	r0, #1
}
 8006094:	b005      	add	sp, #20
 8006096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006098:	40011000 	.word	0x40011000
 800609c:	40004400 	.word	0x40004400
 80060a0:	40004800 	.word	0x40004800
 80060a4:	40011400 	.word	0x40011400
 80060a8:	40004c00 	.word	0x40004c00
 80060ac:	40005000 	.word	0x40005000
 80060b0:	40007800 	.word	0x40007800
 80060b4:	40007c00 	.word	0x40007c00
 80060b8:	51eb851f 	.word	0x51eb851f

080060bc <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80060bc:	0a03      	lsrs	r3, r0, #8
 80060be:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80060c2:	b280      	uxth	r0, r0
 80060c4:	4770      	bx	lr

080060c6 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 80060c6:	0203      	lsls	r3, r0, #8
 80060c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060cc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80060d0:	0a02      	lsrs	r2, r0, #8
 80060d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80060d6:	4313      	orrs	r3, r2
}
 80060d8:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80060dc:	4770      	bx	lr

080060de <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80060de:	b410      	push	{r4}
 80060e0:	b083      	sub	sp, #12
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80060e8:	f010 0401 	ands.w	r4, r0, #1
 80060ec:	d006      	beq.n	80060fc <lwip_standard_chksum+0x1e>
 80060ee:	4299      	cmp	r1, r3
 80060f0:	dd04      	ble.n	80060fc <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 80060f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80060f6:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
 80060fa:	3901      	subs	r1, #1
  u32_t sum = 0;
 80060fc:	2300      	movs	r3, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80060fe:	2901      	cmp	r1, #1
 8006100:	dd04      	ble.n	800610c <lwip_standard_chksum+0x2e>
    sum += *ps++;
 8006102:	f830 2b02 	ldrh.w	r2, [r0], #2
 8006106:	4413      	add	r3, r2
    len -= 2;
 8006108:	3902      	subs	r1, #2
 800610a:	e7f8      	b.n	80060fe <lwip_standard_chksum+0x20>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800610c:	2900      	cmp	r1, #0
 800610e:	dd02      	ble.n	8006116 <lwip_standard_chksum+0x38>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006110:	7802      	ldrb	r2, [r0, #0]
 8006112:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8006116:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800611a:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800611c:	b298      	uxth	r0, r3
 800611e:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8006122:	b298      	uxth	r0, r3
 8006124:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8006128:	b124      	cbz	r4, 8006134 <lwip_standard_chksum+0x56>
    sum = SWAP_BYTES_IN_WORD(sum);
 800612a:	0203      	lsls	r3, r0, #8
 800612c:	b29b      	uxth	r3, r3
 800612e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006132:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8006134:	b280      	uxth	r0, r0
 8006136:	b003      	add	sp, #12
 8006138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800613c:	4770      	bx	lr

0800613e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800613e:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006140:	f7ff ffcd 	bl	80060de <lwip_standard_chksum>
 8006144:	43c0      	mvns	r0, r0
}
 8006146:	b280      	uxth	r0, r0
 8006148:	bd08      	pop	{r3, pc}

0800614a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800614a:	b570      	push	{r4, r5, r6, lr}
 800614c:	4605      	mov	r5, r0
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800614e:	2600      	movs	r6, #0

  acc = 0;
 8006150:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8006152:	e000      	b.n	8006156 <inet_chksum_pbuf+0xc>
 8006154:	682d      	ldr	r5, [r5, #0]
 8006156:	b19d      	cbz	r5, 8006180 <inet_chksum_pbuf+0x36>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006158:	8969      	ldrh	r1, [r5, #10]
 800615a:	6868      	ldr	r0, [r5, #4]
 800615c:	f7ff ffbf 	bl	80060de <lwip_standard_chksum>
 8006160:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 8006162:	b2a0      	uxth	r0, r4
 8006164:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8006168:	896b      	ldrh	r3, [r5, #10]
 800616a:	f013 0f01 	tst.w	r3, #1
 800616e:	d0f1      	beq.n	8006154 <inet_chksum_pbuf+0xa>
      swapped = !swapped;
 8006170:	f086 0601 	eor.w	r6, r6, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 8006174:	0223      	lsls	r3, r4, #8
 8006176:	b29b      	uxth	r3, r3
 8006178:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800617c:	431c      	orrs	r4, r3
 800617e:	e7e9      	b.n	8006154 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8006180:	b126      	cbz	r6, 800618c <inet_chksum_pbuf+0x42>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006182:	0223      	lsls	r3, r4, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800618a:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800618c:	43e0      	mvns	r0, r4
}
 800618e:	b280      	uxth	r0, r0
 8006190:	bd70      	pop	{r4, r5, r6, pc}

08006192 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006192:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006194:	f000 f8c4 	bl	8006320 <mem_init>
  memp_init();
 8006198:	f000 fae4 	bl	8006764 <memp_init>
  pbuf_init();
  netif_init();
 800619c:	f000 fba8 	bl	80068f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80061a0:	f004 fca4 	bl	800aaec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80061a4:	f001 f91a 	bl	80073dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80061a8:	f004 fc3c 	bl	800aa24 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80061ac:	bd08      	pop	{r3, pc}
	...

080061b0 <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
 80061b0:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <ptr_to_mem+0x8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
}
 80061b4:	4418      	add	r0, r3
 80061b6:	4770      	bx	lr
 80061b8:	20003388 	.word	0x20003388

080061bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
 80061bc:	4b02      	ldr	r3, [pc, #8]	; (80061c8 <mem_to_ptr+0xc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	1ac0      	subs	r0, r0, r3
}
 80061c2:	b280      	uxth	r0, r0
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20003388 	.word	0x20003388

080061cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	4604      	mov	r4, r0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80061d0:	f7ff fff4 	bl	80061bc <mem_to_ptr>
 80061d4:	4607      	mov	r7, r0
  nmem = ptr_to_mem(mem->next);
 80061d6:	8825      	ldrh	r5, [r4, #0]
 80061d8:	4628      	mov	r0, r5
 80061da:	f7ff ffe9 	bl	80061b0 <ptr_to_mem>
 80061de:	4606      	mov	r6, r0
  pmem = ptr_to_mem(mem->prev);
 80061e0:	8864      	ldrh	r4, [r4, #2]
 80061e2:	4620      	mov	r0, r4
 80061e4:	f7ff ffe4 	bl	80061b0 <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80061e8:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80061ec:	d810      	bhi.n	8006210 <mem_link_valid+0x44>
 80061ee:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 80061f2:	d80f      	bhi.n	8006214 <mem_link_valid+0x48>
 80061f4:	42bc      	cmp	r4, r7
 80061f6:	d002      	beq.n	80061fe <mem_link_valid+0x32>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80061f8:	8803      	ldrh	r3, [r0, #0]
 80061fa:	42bb      	cmp	r3, r7
 80061fc:	d10c      	bne.n	8006218 <mem_link_valid+0x4c>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80061fe:	4b09      	ldr	r3, [pc, #36]	; (8006224 <mem_link_valid+0x58>)
 8006200:	685b      	ldr	r3, [r3, #4]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006202:	42b3      	cmp	r3, r6
 8006204:	d00a      	beq.n	800621c <mem_link_valid+0x50>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006206:	8873      	ldrh	r3, [r6, #2]
 8006208:	42bb      	cmp	r3, r7
 800620a:	d109      	bne.n	8006220 <mem_link_valid+0x54>
    return 0;
  }
  return 1;
 800620c:	2001      	movs	r0, #1
 800620e:	e000      	b.n	8006212 <mem_link_valid+0x46>
    return 0;
 8006210:	2000      	movs	r0, #0
}
 8006212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 8006214:	2000      	movs	r0, #0
 8006216:	e7fc      	b.n	8006212 <mem_link_valid+0x46>
 8006218:	2000      	movs	r0, #0
 800621a:	e7fa      	b.n	8006212 <mem_link_valid+0x46>
  return 1;
 800621c:	2001      	movs	r0, #1
 800621e:	e7f8      	b.n	8006212 <mem_link_valid+0x46>
    return 0;
 8006220:	2000      	movs	r0, #0
 8006222:	e7f6      	b.n	8006212 <mem_link_valid+0x46>
 8006224:	20003388 	.word	0x20003388

08006228 <plug_holes>:
{
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4604      	mov	r4, r0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800622c:	4b35      	ldr	r3, [pc, #212]	; (8006304 <plug_holes+0xdc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4283      	cmp	r3, r0
 8006232:	d840      	bhi.n	80062b6 <plug_holes+0x8e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006234:	4b33      	ldr	r3, [pc, #204]	; (8006304 <plug_holes+0xdc>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	42a3      	cmp	r3, r4
 800623a:	d944      	bls.n	80062c6 <plug_holes+0x9e>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800623c:	7923      	ldrb	r3, [r4, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d149      	bne.n	80062d6 <plug_holes+0xae>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006242:	8823      	ldrh	r3, [r4, #0]
 8006244:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006248:	d84d      	bhi.n	80062e6 <plug_holes+0xbe>
  nmem = ptr_to_mem(mem->next);
 800624a:	8820      	ldrh	r0, [r4, #0]
 800624c:	f7ff ffb0 	bl	80061b0 <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006250:	4284      	cmp	r4, r0
 8006252:	d016      	beq.n	8006282 <plug_holes+0x5a>
 8006254:	7903      	ldrb	r3, [r0, #4]
 8006256:	b9a3      	cbnz	r3, 8006282 <plug_holes+0x5a>
 8006258:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <plug_holes+0xdc>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4283      	cmp	r3, r0
 800625e:	d010      	beq.n	8006282 <plug_holes+0x5a>
    if (lfree == nmem) {
 8006260:	4b28      	ldr	r3, [pc, #160]	; (8006304 <plug_holes+0xdc>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4283      	cmp	r3, r0
 8006266:	d046      	beq.n	80062f6 <plug_holes+0xce>
    mem->next = nmem->next;
 8006268:	8803      	ldrh	r3, [r0, #0]
 800626a:	8023      	strh	r3, [r4, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800626c:	8800      	ldrh	r0, [r0, #0]
 800626e:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8006272:	d006      	beq.n	8006282 <plug_holes+0x5a>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006274:	f7ff ff9c 	bl	80061b0 <ptr_to_mem>
 8006278:	4605      	mov	r5, r0
 800627a:	4620      	mov	r0, r4
 800627c:	f7ff ff9e 	bl	80061bc <mem_to_ptr>
 8006280:	8068      	strh	r0, [r5, #2]
  pmem = ptr_to_mem(mem->prev);
 8006282:	8860      	ldrh	r0, [r4, #2]
 8006284:	f7ff ff94 	bl	80061b0 <ptr_to_mem>
 8006288:	4605      	mov	r5, r0
  if (pmem != mem && pmem->used == 0) {
 800628a:	4284      	cmp	r4, r0
 800628c:	d012      	beq.n	80062b4 <plug_holes+0x8c>
 800628e:	7903      	ldrb	r3, [r0, #4]
 8006290:	b983      	cbnz	r3, 80062b4 <plug_holes+0x8c>
    if (lfree == mem) {
 8006292:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <plug_holes+0xdc>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	42a3      	cmp	r3, r4
 8006298:	d030      	beq.n	80062fc <plug_holes+0xd4>
    pmem->next = mem->next;
 800629a:	8823      	ldrh	r3, [r4, #0]
 800629c:	802b      	strh	r3, [r5, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800629e:	8820      	ldrh	r0, [r4, #0]
 80062a0:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 80062a4:	d006      	beq.n	80062b4 <plug_holes+0x8c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80062a6:	f7ff ff83 	bl	80061b0 <ptr_to_mem>
 80062aa:	4604      	mov	r4, r0
 80062ac:	4628      	mov	r0, r5
 80062ae:	f7ff ff85 	bl	80061bc <mem_to_ptr>
 80062b2:	8060      	strh	r0, [r4, #2]
}
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80062b6:	4b14      	ldr	r3, [pc, #80]	; (8006308 <plug_holes+0xe0>)
 80062b8:	f240 12df 	movw	r2, #479	; 0x1df
 80062bc:	4913      	ldr	r1, [pc, #76]	; (800630c <plug_holes+0xe4>)
 80062be:	4814      	ldr	r0, [pc, #80]	; (8006310 <plug_holes+0xe8>)
 80062c0:	f00c fc08 	bl	8012ad4 <printf>
 80062c4:	e7b6      	b.n	8006234 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <plug_holes+0xe0>)
 80062c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80062cc:	4911      	ldr	r1, [pc, #68]	; (8006314 <plug_holes+0xec>)
 80062ce:	4810      	ldr	r0, [pc, #64]	; (8006310 <plug_holes+0xe8>)
 80062d0:	f00c fc00 	bl	8012ad4 <printf>
 80062d4:	e7b2      	b.n	800623c <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <plug_holes+0xe0>)
 80062d8:	f240 12e1 	movw	r2, #481	; 0x1e1
 80062dc:	490e      	ldr	r1, [pc, #56]	; (8006318 <plug_holes+0xf0>)
 80062de:	480c      	ldr	r0, [pc, #48]	; (8006310 <plug_holes+0xe8>)
 80062e0:	f00c fbf8 	bl	8012ad4 <printf>
 80062e4:	e7ad      	b.n	8006242 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <plug_holes+0xe0>)
 80062e8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80062ec:	490b      	ldr	r1, [pc, #44]	; (800631c <plug_holes+0xf4>)
 80062ee:	4808      	ldr	r0, [pc, #32]	; (8006310 <plug_holes+0xe8>)
 80062f0:	f00c fbf0 	bl	8012ad4 <printf>
 80062f4:	e7a9      	b.n	800624a <plug_holes+0x22>
      lfree = mem;
 80062f6:	4b03      	ldr	r3, [pc, #12]	; (8006304 <plug_holes+0xdc>)
 80062f8:	609c      	str	r4, [r3, #8]
 80062fa:	e7b5      	b.n	8006268 <plug_holes+0x40>
      lfree = pmem;
 80062fc:	4b01      	ldr	r3, [pc, #4]	; (8006304 <plug_holes+0xdc>)
 80062fe:	6098      	str	r0, [r3, #8]
 8006300:	e7cb      	b.n	800629a <plug_holes+0x72>
 8006302:	bf00      	nop
 8006304:	20003388 	.word	0x20003388
 8006308:	08019f24 	.word	0x08019f24
 800630c:	08019f54 	.word	0x08019f54
 8006310:	08019f6c 	.word	0x08019f6c
 8006314:	08019f94 	.word	0x08019f94
 8006318:	08019fb0 	.word	0x08019fb0
 800631c:	08019fcc 	.word	0x08019fcc

08006320 <mem_init>:
{
 8006320:	b538      	push	{r3, r4, r5, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006322:	4c0a      	ldr	r4, [pc, #40]	; (800634c <mem_init+0x2c>)
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <mem_init+0x30>)
 8006326:	6023      	str	r3, [r4, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8006328:	f44f 65c8 	mov.w	r5, #1600	; 0x640
 800632c:	801d      	strh	r5, [r3, #0]
  mem->prev = 0;
 800632e:	2200      	movs	r2, #0
 8006330:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006332:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006334:	4628      	mov	r0, r5
 8006336:	f7ff ff3b 	bl	80061b0 <ptr_to_mem>
 800633a:	6060      	str	r0, [r4, #4]
  ram_end->used = 1;
 800633c:	2301      	movs	r3, #1
 800633e:	7103      	strb	r3, [r0, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006340:	8005      	strh	r5, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006342:	8045      	strh	r5, [r0, #2]
  lfree = (struct mem *)(void *)ram;
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	60a3      	str	r3, [r4, #8]
}
 8006348:	bd38      	pop	{r3, r4, r5, pc}
 800634a:	bf00      	nop
 800634c:	20003388 	.word	0x20003388
 8006350:	30044000 	.word	0x30044000

08006354 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006354:	2800      	cmp	r0, #0
 8006356:	d044      	beq.n	80063e2 <mem_free+0x8e>
{
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800635c:	f010 0f03 	tst.w	r0, #3
 8006360:	d11f      	bne.n	80063a2 <mem_free+0x4e>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006362:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006366:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <mem_free+0x90>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	42ab      	cmp	r3, r5
 800636c:	d821      	bhi.n	80063b2 <mem_free+0x5e>
 800636e:	f100 030c 	add.w	r3, r0, #12
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <mem_free+0x90>)
 8006374:	6852      	ldr	r2, [r2, #4]
 8006376:	4293      	cmp	r3, r2
 8006378:	d81b      	bhi.n	80063b2 <mem_free+0x5e>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800637a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 800637e:	b303      	cbz	r3, 80063c2 <mem_free+0x6e>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8006380:	4628      	mov	r0, r5
 8006382:	f7ff ff23 	bl	80061cc <mem_link_valid>
 8006386:	b320      	cbz	r0, 80063d2 <mem_free+0x7e>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <mem_free+0x90>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	42ab      	cmp	r3, r5
 8006394:	d901      	bls.n	800639a <mem_free+0x46>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <mem_free+0x90>)
 8006398:	609d      	str	r5, [r3, #8]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff ff44 	bl	8006228 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80063a0:	e00e      	b.n	80063c0 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <mem_free+0x94>)
 80063a4:	f240 2273 	movw	r2, #627	; 0x273
 80063a8:	4910      	ldr	r1, [pc, #64]	; (80063ec <mem_free+0x98>)
 80063aa:	4811      	ldr	r0, [pc, #68]	; (80063f0 <mem_free+0x9c>)
 80063ac:	f00c fb92 	bl	8012ad4 <printf>
    return;
 80063b0:	e006      	b.n	80063c0 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <mem_free+0x94>)
 80063b4:	f240 227f 	movw	r2, #639	; 0x27f
 80063b8:	490e      	ldr	r1, [pc, #56]	; (80063f4 <mem_free+0xa0>)
 80063ba:	480d      	ldr	r0, [pc, #52]	; (80063f0 <mem_free+0x9c>)
 80063bc:	f00c fb8a 	bl	8012ad4 <printf>
}
 80063c0:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80063c2:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <mem_free+0x94>)
 80063c4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80063c8:	490b      	ldr	r1, [pc, #44]	; (80063f8 <mem_free+0xa4>)
 80063ca:	4809      	ldr	r0, [pc, #36]	; (80063f0 <mem_free+0x9c>)
 80063cc:	f00c fb82 	bl	8012ad4 <printf>
    return;
 80063d0:	e7f6      	b.n	80063c0 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <mem_free+0x94>)
 80063d4:	f240 2295 	movw	r2, #661	; 0x295
 80063d8:	4908      	ldr	r1, [pc, #32]	; (80063fc <mem_free+0xa8>)
 80063da:	4805      	ldr	r0, [pc, #20]	; (80063f0 <mem_free+0x9c>)
 80063dc:	f00c fb7a 	bl	8012ad4 <printf>
    return;
 80063e0:	e7ee      	b.n	80063c0 <mem_free+0x6c>
 80063e2:	4770      	bx	lr
 80063e4:	20003388 	.word	0x20003388
 80063e8:	08019f24 	.word	0x08019f24
 80063ec:	08019ff8 	.word	0x08019ff8
 80063f0:	08019f6c 	.word	0x08019f6c
 80063f4:	0801a01c 	.word	0x0801a01c
 80063f8:	0801a038 	.word	0x0801a038
 80063fc:	0801a060 	.word	0x0801a060

08006400 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006404:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006406:	1ccc      	adds	r4, r1, #3
 8006408:	b2a4      	uxth	r4, r4
 800640a:	f024 0403 	bic.w	r4, r4, #3
 800640e:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8006410:	2c0b      	cmp	r4, #11
 8006412:	d904      	bls.n	800641e <mem_trim+0x1e>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006414:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8006418:	d902      	bls.n	8006420 <mem_trim+0x20>
    return NULL;
 800641a:	2500      	movs	r5, #0
 800641c:	e099      	b.n	8006552 <mem_trim+0x152>
    newsize = MIN_SIZE_ALIGNED;
 800641e:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006420:	428c      	cmp	r4, r1
 8006422:	f0c0 8095 	bcc.w	8006550 <mem_trim+0x150>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006426:	4b4d      	ldr	r3, [pc, #308]	; (800655c <mem_trim+0x15c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	42ab      	cmp	r3, r5
 800642c:	d803      	bhi.n	8006436 <mem_trim+0x36>
 800642e:	4b4b      	ldr	r3, [pc, #300]	; (800655c <mem_trim+0x15c>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	42ab      	cmp	r3, r5
 8006434:	d806      	bhi.n	8006444 <mem_trim+0x44>
 8006436:	4b4a      	ldr	r3, [pc, #296]	; (8006560 <mem_trim+0x160>)
 8006438:	f240 22d1 	movw	r2, #721	; 0x2d1
 800643c:	4949      	ldr	r1, [pc, #292]	; (8006564 <mem_trim+0x164>)
 800643e:	484a      	ldr	r0, [pc, #296]	; (8006568 <mem_trim+0x168>)
 8006440:	f00c fb48 	bl	8012ad4 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006444:	4b45      	ldr	r3, [pc, #276]	; (800655c <mem_trim+0x15c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	42ab      	cmp	r3, r5
 800644a:	f200 8082 	bhi.w	8006552 <mem_trim+0x152>
 800644e:	4b43      	ldr	r3, [pc, #268]	; (800655c <mem_trim+0x15c>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	42ab      	cmp	r3, r5
 8006454:	d97d      	bls.n	8006552 <mem_trim+0x152>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006456:	f1a5 0008 	sub.w	r0, r5, #8
 800645a:	f7ff feaf 	bl	80061bc <mem_to_ptr>
 800645e:	4606      	mov	r6, r0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006460:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 8006464:	eba8 0800 	sub.w	r8, r8, r0
 8006468:	fa1f f888 	uxth.w	r8, r8
 800646c:	f1a8 0808 	sub.w	r8, r8, #8
 8006470:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006474:	4544      	cmp	r4, r8
 8006476:	d829      	bhi.n	80064cc <mem_trim+0xcc>
  if (newsize > size) {
 8006478:	4544      	cmp	r4, r8
 800647a:	d86d      	bhi.n	8006558 <mem_trim+0x158>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800647c:	d069      	beq.n	8006552 <mem_trim+0x152>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800647e:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 8006482:	4638      	mov	r0, r7
 8006484:	f7ff fe94 	bl	80061b0 <ptr_to_mem>
 8006488:	4681      	mov	r9, r0
  if (mem2->used == 0) {
 800648a:	7903      	ldrb	r3, [r0, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d133      	bne.n	80064f8 <mem_trim+0xf8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006490:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 8006494:	d022      	beq.n	80064dc <mem_trim+0xdc>
    /* remember the old next pointer */
    next = mem2->next;
 8006496:	f8b9 7000 	ldrh.w	r7, [r9]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800649a:	4434      	add	r4, r6
 800649c:	b2a4      	uxth	r4, r4
 800649e:	3408      	adds	r4, #8
 80064a0:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 80064a2:	4b2e      	ldr	r3, [pc, #184]	; (800655c <mem_trim+0x15c>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	454b      	cmp	r3, r9
 80064a8:	d020      	beq.n	80064ec <mem_trim+0xec>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff fe80 	bl	80061b0 <ptr_to_mem>
    mem2->used = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	7103      	strb	r3, [r0, #4]
    /* restore the next pointer */
    mem2->next = next;
 80064b4:	8007      	strh	r7, [r0, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80064b6:	8046      	strh	r6, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 80064b8:	f825 4c08 	strh.w	r4, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80064bc:	8800      	ldrh	r0, [r0, #0]
 80064be:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 80064c2:	d046      	beq.n	8006552 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80064c4:	f7ff fe74 	bl	80061b0 <ptr_to_mem>
 80064c8:	8044      	strh	r4, [r0, #2]
 80064ca:	e042      	b.n	8006552 <mem_trim+0x152>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80064cc:	4b24      	ldr	r3, [pc, #144]	; (8006560 <mem_trim+0x160>)
 80064ce:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80064d2:	4926      	ldr	r1, [pc, #152]	; (800656c <mem_trim+0x16c>)
 80064d4:	4824      	ldr	r0, [pc, #144]	; (8006568 <mem_trim+0x168>)
 80064d6:	f00c fafd 	bl	8012ad4 <printf>
 80064da:	e7cd      	b.n	8006478 <mem_trim+0x78>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80064dc:	4b20      	ldr	r3, [pc, #128]	; (8006560 <mem_trim+0x160>)
 80064de:	f240 22f5 	movw	r2, #757	; 0x2f5
 80064e2:	4923      	ldr	r1, [pc, #140]	; (8006570 <mem_trim+0x170>)
 80064e4:	4820      	ldr	r0, [pc, #128]	; (8006568 <mem_trim+0x168>)
 80064e6:	f00c faf5 	bl	8012ad4 <printf>
 80064ea:	e7d4      	b.n	8006496 <mem_trim+0x96>
      lfree = ptr_to_mem(ptr2);
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff fe5f 	bl	80061b0 <ptr_to_mem>
 80064f2:	4b1a      	ldr	r3, [pc, #104]	; (800655c <mem_trim+0x15c>)
 80064f4:	6098      	str	r0, [r3, #8]
 80064f6:	e7d8      	b.n	80064aa <mem_trim+0xaa>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80064f8:	f104 0314 	add.w	r3, r4, #20
 80064fc:	4543      	cmp	r3, r8
 80064fe:	d828      	bhi.n	8006552 <mem_trim+0x152>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006500:	4434      	add	r4, r6
 8006502:	b2a4      	uxth	r4, r4
 8006504:	3408      	adds	r4, #8
 8006506:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006508:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 800650c:	d018      	beq.n	8006540 <mem_trim+0x140>
    mem2 = ptr_to_mem(ptr2);
 800650e:	4620      	mov	r0, r4
 8006510:	f7ff fe4e 	bl	80061b0 <ptr_to_mem>
    if (mem2 < lfree) {
 8006514:	4b11      	ldr	r3, [pc, #68]	; (800655c <mem_trim+0x15c>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4283      	cmp	r3, r0
 800651a:	d901      	bls.n	8006520 <mem_trim+0x120>
      lfree = mem2;
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <mem_trim+0x15c>)
 800651e:	6098      	str	r0, [r3, #8]
    }
    mem2->used = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	7103      	strb	r3, [r0, #4]
    mem2->next = mem->next;
 8006524:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8006528:	8003      	strh	r3, [r0, #0]
    mem2->prev = ptr;
 800652a:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 800652c:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006530:	8800      	ldrh	r0, [r0, #0]
 8006532:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8006536:	d00c      	beq.n	8006552 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006538:	f7ff fe3a 	bl	80061b0 <ptr_to_mem>
 800653c:	8044      	strh	r4, [r0, #2]
 800653e:	e008      	b.n	8006552 <mem_trim+0x152>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <mem_trim+0x160>)
 8006542:	f240 3216 	movw	r2, #790	; 0x316
 8006546:	490a      	ldr	r1, [pc, #40]	; (8006570 <mem_trim+0x170>)
 8006548:	4807      	ldr	r0, [pc, #28]	; (8006568 <mem_trim+0x168>)
 800654a:	f00c fac3 	bl	8012ad4 <printf>
 800654e:	e7de      	b.n	800650e <mem_trim+0x10e>
    return NULL;
 8006550:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8006552:	4628      	mov	r0, r5
 8006554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006558:	2500      	movs	r5, #0
 800655a:	e7fa      	b.n	8006552 <mem_trim+0x152>
 800655c:	20003388 	.word	0x20003388
 8006560:	08019f24 	.word	0x08019f24
 8006564:	0801a094 	.word	0x0801a094
 8006568:	08019f6c 	.word	0x08019f6c
 800656c:	0801a0ac 	.word	0x0801a0ac
 8006570:	0801a0cc 	.word	0x0801a0cc

08006574 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006574:	2800      	cmp	r0, #0
 8006576:	f000 8099 	beq.w	80066ac <mem_malloc+0x138>
{
 800657a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657e:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006580:	1cc6      	adds	r6, r0, #3
 8006582:	b2b6      	uxth	r6, r6
 8006584:	f026 0603 	bic.w	r6, r6, #3
 8006588:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 800658a:	2e0b      	cmp	r6, #11
 800658c:	d904      	bls.n	8006598 <mem_malloc+0x24>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800658e:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8006592:	d902      	bls.n	800659a <mem_malloc+0x26>
    return NULL;
 8006594:	2000      	movs	r0, #0
 8006596:	e087      	b.n	80066a8 <mem_malloc+0x134>
    size = MIN_SIZE_ALIGNED;
 8006598:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800659a:	429e      	cmp	r6, r3
 800659c:	f0c0 8088 	bcc.w	80066b0 <mem_malloc+0x13c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80065a0:	4b44      	ldr	r3, [pc, #272]	; (80066b4 <mem_malloc+0x140>)
 80065a2:	6898      	ldr	r0, [r3, #8]
 80065a4:	f7ff fe0a 	bl	80061bc <mem_to_ptr>
 80065a8:	4605      	mov	r5, r0
 80065aa:	e04b      	b.n	8006644 <mem_malloc+0xd0>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80065ac:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <mem_malloc+0x144>)
 80065ae:	f240 3287 	movw	r2, #903	; 0x387
 80065b2:	4942      	ldr	r1, [pc, #264]	; (80066bc <mem_malloc+0x148>)
 80065b4:	4842      	ldr	r0, [pc, #264]	; (80066c0 <mem_malloc+0x14c>)
 80065b6:	f00c fa8d 	bl	8012ad4 <printf>
 80065ba:	e061      	b.n	8006680 <mem_malloc+0x10c>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80065bc:	2301      	movs	r3, #1
 80065be:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80065c0:	4b3c      	ldr	r3, [pc, #240]	; (80066b4 <mem_malloc+0x140>)
 80065c2:	6898      	ldr	r0, [r3, #8]
 80065c4:	42a0      	cmp	r0, r4
 80065c6:	d00f      	beq.n	80065e8 <mem_malloc+0x74>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80065c8:	4427      	add	r7, r4
 80065ca:	3708      	adds	r7, #8
 80065cc:	4b39      	ldr	r3, [pc, #228]	; (80066b4 <mem_malloc+0x140>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	429f      	cmp	r7, r3
 80065d2:	d81e      	bhi.n	8006612 <mem_malloc+0x9e>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80065d4:	f014 0503 	ands.w	r5, r4, #3
 80065d8:	d123      	bne.n	8006622 <mem_malloc+0xae>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80065da:	bb55      	cbnz	r5, 8006632 <mem_malloc+0xbe>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80065dc:	f104 0008 	add.w	r0, r4, #8
 80065e0:	e062      	b.n	80066a8 <mem_malloc+0x134>
            cur = ptr_to_mem(cur->next);
 80065e2:	8800      	ldrh	r0, [r0, #0]
 80065e4:	f7ff fde4 	bl	80061b0 <ptr_to_mem>
          while (cur->used && cur != ram_end) {
 80065e8:	7903      	ldrb	r3, [r0, #4]
 80065ea:	b11b      	cbz	r3, 80065f4 <mem_malloc+0x80>
 80065ec:	4a31      	ldr	r2, [pc, #196]	; (80066b4 <mem_malloc+0x140>)
 80065ee:	6852      	ldr	r2, [r2, #4]
 80065f0:	4282      	cmp	r2, r0
 80065f2:	d1f6      	bne.n	80065e2 <mem_malloc+0x6e>
          lfree = cur;
 80065f4:	4a2f      	ldr	r2, [pc, #188]	; (80066b4 <mem_malloc+0x140>)
 80065f6:	6090      	str	r0, [r2, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80065f8:	6852      	ldr	r2, [r2, #4]
 80065fa:	4282      	cmp	r2, r0
 80065fc:	d0e4      	beq.n	80065c8 <mem_malloc+0x54>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0e2      	beq.n	80065c8 <mem_malloc+0x54>
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <mem_malloc+0x144>)
 8006604:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006608:	492e      	ldr	r1, [pc, #184]	; (80066c4 <mem_malloc+0x150>)
 800660a:	482d      	ldr	r0, [pc, #180]	; (80066c0 <mem_malloc+0x14c>)
 800660c:	f00c fa62 	bl	8012ad4 <printf>
 8006610:	e7da      	b.n	80065c8 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006612:	4b29      	ldr	r3, [pc, #164]	; (80066b8 <mem_malloc+0x144>)
 8006614:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006618:	492b      	ldr	r1, [pc, #172]	; (80066c8 <mem_malloc+0x154>)
 800661a:	4829      	ldr	r0, [pc, #164]	; (80066c0 <mem_malloc+0x14c>)
 800661c:	f00c fa5a 	bl	8012ad4 <printf>
 8006620:	e7d8      	b.n	80065d4 <mem_malloc+0x60>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006622:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <mem_malloc+0x144>)
 8006624:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006628:	4928      	ldr	r1, [pc, #160]	; (80066cc <mem_malloc+0x158>)
 800662a:	4825      	ldr	r0, [pc, #148]	; (80066c0 <mem_malloc+0x14c>)
 800662c:	f00c fa52 	bl	8012ad4 <printf>
 8006630:	e7d3      	b.n	80065da <mem_malloc+0x66>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006632:	4b21      	ldr	r3, [pc, #132]	; (80066b8 <mem_malloc+0x144>)
 8006634:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006638:	4925      	ldr	r1, [pc, #148]	; (80066d0 <mem_malloc+0x15c>)
 800663a:	4821      	ldr	r0, [pc, #132]	; (80066c0 <mem_malloc+0x14c>)
 800663c:	f00c fa4a 	bl	8012ad4 <printf>
 8006640:	e7cc      	b.n	80065dc <mem_malloc+0x68>
         ptr = ptr_to_mem(ptr)->next) {
 8006642:	8825      	ldrh	r5, [r4, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006644:	46a8      	mov	r8, r5
 8006646:	4637      	mov	r7, r6
 8006648:	f5c6 63c8 	rsb	r3, r6, #1600	; 0x640
 800664c:	429d      	cmp	r5, r3
 800664e:	d22a      	bcs.n	80066a6 <mem_malloc+0x132>
      mem = ptr_to_mem(ptr);
 8006650:	4628      	mov	r0, r5
 8006652:	f7ff fdad 	bl	80061b0 <ptr_to_mem>
 8006656:	4604      	mov	r4, r0
      if ((!mem->used) &&
 8006658:	7903      	ldrb	r3, [r0, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f1      	bne.n	8006642 <mem_malloc+0xce>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800665e:	8803      	ldrh	r3, [r0, #0]
 8006660:	eba3 0308 	sub.w	r3, r3, r8
 8006664:	3b08      	subs	r3, #8
      if ((!mem->used) &&
 8006666:	42bb      	cmp	r3, r7
 8006668:	d3eb      	bcc.n	8006642 <mem_malloc+0xce>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800666a:	f107 0214 	add.w	r2, r7, #20
 800666e:	4293      	cmp	r3, r2
 8006670:	d3a4      	bcc.n	80065bc <mem_malloc+0x48>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006672:	442e      	add	r6, r5
 8006674:	b2b6      	uxth	r6, r6
 8006676:	3608      	adds	r6, #8
 8006678:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800667a:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 800667e:	d095      	beq.n	80065ac <mem_malloc+0x38>
          mem2 = ptr_to_mem(ptr2);
 8006680:	4630      	mov	r0, r6
 8006682:	f7ff fd95 	bl	80061b0 <ptr_to_mem>
          mem2->used = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	7103      	strb	r3, [r0, #4]
          mem2->next = mem->next;
 800668a:	8823      	ldrh	r3, [r4, #0]
 800668c:	8003      	strh	r3, [r0, #0]
          mem2->prev = ptr;
 800668e:	8045      	strh	r5, [r0, #2]
          mem->next = ptr2;
 8006690:	8026      	strh	r6, [r4, #0]
          mem->used = 1;
 8006692:	2301      	movs	r3, #1
 8006694:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006696:	8800      	ldrh	r0, [r0, #0]
 8006698:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 800669c:	d090      	beq.n	80065c0 <mem_malloc+0x4c>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800669e:	f7ff fd87 	bl	80061b0 <ptr_to_mem>
 80066a2:	8046      	strh	r6, [r0, #2]
 80066a4:	e78c      	b.n	80065c0 <mem_malloc+0x4c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80066a6:	2000      	movs	r0, #0
}
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;
 80066ac:	2000      	movs	r0, #0
}
 80066ae:	4770      	bx	lr
    return NULL;
 80066b0:	2000      	movs	r0, #0
 80066b2:	e7f9      	b.n	80066a8 <mem_malloc+0x134>
 80066b4:	20003388 	.word	0x20003388
 80066b8:	08019f24 	.word	0x08019f24
 80066bc:	0801a0cc 	.word	0x0801a0cc
 80066c0:	08019f6c 	.word	0x08019f6c
 80066c4:	0801a0e0 	.word	0x0801a0e0
 80066c8:	0801a0fc 	.word	0x0801a0fc
 80066cc:	0801a12c 	.word	0x0801a12c
 80066d0:	0801a15c 	.word	0x0801a15c

080066d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80066d4:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80066d6:	6883      	ldr	r3, [r0, #8]
 80066d8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80066da:	b124      	cbz	r4, 80066e6 <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80066e0:	f014 0f03 	tst.w	r4, #3
 80066e4:	d101      	bne.n	80066ea <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80066e6:	4620      	mov	r0, r4
 80066e8:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80066ea:	4b04      	ldr	r3, [pc, #16]	; (80066fc <do_memp_malloc_pool+0x28>)
 80066ec:	f44f 728c 	mov.w	r2, #280	; 0x118
 80066f0:	4903      	ldr	r1, [pc, #12]	; (8006700 <do_memp_malloc_pool+0x2c>)
 80066f2:	4804      	ldr	r0, [pc, #16]	; (8006704 <do_memp_malloc_pool+0x30>)
 80066f4:	f00c f9ee 	bl	8012ad4 <printf>
    return ((u8_t *)memp + MEMP_SIZE);
 80066f8:	e7f5      	b.n	80066e6 <do_memp_malloc_pool+0x12>
 80066fa:	bf00      	nop
 80066fc:	0801a180 	.word	0x0801a180
 8006700:	0801a1b0 	.word	0x0801a1b0
 8006704:	08019f6c 	.word	0x08019f6c

08006708 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4605      	mov	r5, r0
 800670c:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800670e:	f011 0f03 	tst.w	r1, #3
 8006712:	d105      	bne.n	8006720 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006714:	68ab      	ldr	r3, [r5, #8]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 800671a:	68ab      	ldr	r3, [r5, #8]
 800671c:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800671e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <do_memp_free_pool+0x28>)
 8006722:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006726:	4903      	ldr	r1, [pc, #12]	; (8006734 <do_memp_free_pool+0x2c>)
 8006728:	4803      	ldr	r0, [pc, #12]	; (8006738 <do_memp_free_pool+0x30>)
 800672a:	f00c f9d3 	bl	8012ad4 <printf>
 800672e:	e7f1      	b.n	8006714 <do_memp_free_pool+0xc>
 8006730:	0801a180 	.word	0x0801a180
 8006734:	0801a1d4 	.word	0x0801a1d4
 8006738:	08019f6c 	.word	0x08019f6c

0800673c <memp_init_pool>:
  *desc->tab = NULL;
 800673c:	6883      	ldr	r3, [r0, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006742:	6843      	ldr	r3, [r0, #4]
 8006744:	3303      	adds	r3, #3
 8006746:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800674a:	8841      	ldrh	r1, [r0, #2]
 800674c:	4291      	cmp	r1, r2
 800674e:	dd08      	ble.n	8006762 <memp_init_pool+0x26>
    memp->next = *desc->tab;
 8006750:	6881      	ldr	r1, [r0, #8]
 8006752:	6809      	ldr	r1, [r1, #0]
 8006754:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8006756:	6881      	ldr	r1, [r0, #8]
 8006758:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800675a:	8801      	ldrh	r1, [r0, #0]
 800675c:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800675e:	3201      	adds	r2, #1
 8006760:	e7f3      	b.n	800674a <memp_init_pool+0xe>
}
 8006762:	4770      	bx	lr

08006764 <memp_init>:
{
 8006764:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006766:	2400      	movs	r4, #0
 8006768:	e006      	b.n	8006778 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 800676a:	4b05      	ldr	r3, [pc, #20]	; (8006780 <memp_init+0x1c>)
 800676c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006770:	f7ff ffe4 	bl	800673c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006774:	3401      	adds	r4, #1
 8006776:	b2a4      	uxth	r4, r4
 8006778:	2c08      	cmp	r4, #8
 800677a:	d9f6      	bls.n	800676a <memp_init+0x6>
}
 800677c:	bd10      	pop	{r4, pc}
 800677e:	bf00      	nop
 8006780:	08019de8 	.word	0x08019de8

08006784 <memp_malloc>:
{
 8006784:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006786:	2808      	cmp	r0, #8
 8006788:	d805      	bhi.n	8006796 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800678a:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <memp_malloc+0x24>)
 800678c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006790:	f7ff ffa0 	bl	80066d4 <do_memp_malloc_pool>
}
 8006794:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <memp_malloc+0x28>)
 8006798:	f240 1257 	movw	r2, #343	; 0x157
 800679c:	4904      	ldr	r1, [pc, #16]	; (80067b0 <memp_malloc+0x2c>)
 800679e:	4805      	ldr	r0, [pc, #20]	; (80067b4 <memp_malloc+0x30>)
 80067a0:	f00c f998 	bl	8012ad4 <printf>
 80067a4:	2000      	movs	r0, #0
 80067a6:	e7f5      	b.n	8006794 <memp_malloc+0x10>
 80067a8:	08019de8 	.word	0x08019de8
 80067ac:	0801a180 	.word	0x0801a180
 80067b0:	0801a208 	.word	0x0801a208
 80067b4:	08019f6c 	.word	0x08019f6c

080067b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80067b8:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80067ba:	2808      	cmp	r0, #8
 80067bc:	d806      	bhi.n	80067cc <memp_free+0x14>

  if (mem == NULL) {
 80067be:	b121      	cbz	r1, 80067ca <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <memp_free+0x24>)
 80067c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80067c6:	f7ff ff9f 	bl	8006708 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80067ca:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <memp_free+0x28>)
 80067ce:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80067d2:	4904      	ldr	r1, [pc, #16]	; (80067e4 <memp_free+0x2c>)
 80067d4:	4804      	ldr	r0, [pc, #16]	; (80067e8 <memp_free+0x30>)
 80067d6:	f00c f97d 	bl	8012ad4 <printf>
 80067da:	e7f6      	b.n	80067ca <memp_free+0x12>
 80067dc:	08019de8 	.word	0x08019de8
 80067e0:	0801a180 	.word	0x0801a180
 80067e4:	0801a228 	.word	0x0801a228
 80067e8:	08019f6c 	.word	0x08019f6c

080067ec <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80067ec:	680b      	ldr	r3, [r1, #0]
 80067ee:	6882      	ldr	r2, [r0, #8]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d005      	beq.n	8006800 <netif_do_set_netmask+0x14>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80067f4:	b111      	cbz	r1, 80067fc <netif_do_set_netmask+0x10>
 80067f6:	6083      	str	r3, [r0, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80067f8:	2001      	movs	r0, #1
 80067fa:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80067fc:	2300      	movs	r3, #0
 80067fe:	e7fa      	b.n	80067f6 <netif_do_set_netmask+0xa>
  }
  return 0; /* netmask unchanged */
 8006800:	2000      	movs	r0, #0
}
 8006802:	4770      	bx	lr

08006804 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006804:	680b      	ldr	r3, [r1, #0]
 8006806:	68c2      	ldr	r2, [r0, #12]
 8006808:	4293      	cmp	r3, r2
 800680a:	d005      	beq.n	8006818 <netif_do_set_gw+0x14>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800680c:	b111      	cbz	r1, 8006814 <netif_do_set_gw+0x10>
 800680e:	60c3      	str	r3, [r0, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006810:	2001      	movs	r0, #1
 8006812:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006814:	2300      	movs	r3, #0
 8006816:	e7fa      	b.n	800680e <netif_do_set_gw+0xa>
  }
  return 0; /* gateway unchanged */
 8006818:	2000      	movs	r0, #0
}
 800681a:	4770      	bx	lr

0800681c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800681c:	f06f 000b 	mvn.w	r0, #11
 8006820:	4770      	bx	lr

08006822 <netif_do_ip_addr_changed>:
{
 8006822:	b538      	push	{r3, r4, r5, lr}
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006828:	f001 f87e 	bl	8007928 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800682c:	4629      	mov	r1, r5
 800682e:	4620      	mov	r0, r4
 8006830:	f004 fa2a 	bl	800ac88 <udp_netif_ip_addr_changed>
}
 8006834:	bd38      	pop	{r3, r4, r5, pc}
	...

08006838 <netif_issue_reports>:
{
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800683c:	4605      	mov	r5, r0
 800683e:	b170      	cbz	r0, 800685e <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006840:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8006844:	f003 0205 	and.w	r2, r3, #5
 8006848:	2a05      	cmp	r2, #5
 800684a:	d107      	bne.n	800685c <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800684c:	f014 0f01 	tst.w	r4, #1
 8006850:	d004      	beq.n	800685c <netif_issue_reports+0x24>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006852:	686a      	ldr	r2, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006854:	b112      	cbz	r2, 800685c <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006856:	f013 0f08 	tst.w	r3, #8
 800685a:	d108      	bne.n	800686e <netif_issue_reports+0x36>
}
 800685c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <netif_issue_reports+0x40>)
 8006860:	f240 326d 	movw	r2, #877	; 0x36d
 8006864:	4905      	ldr	r1, [pc, #20]	; (800687c <netif_issue_reports+0x44>)
 8006866:	4806      	ldr	r0, [pc, #24]	; (8006880 <netif_issue_reports+0x48>)
 8006868:	f00c f934 	bl	8012ad4 <printf>
 800686c:	e7e8      	b.n	8006840 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 800686e:	1d29      	adds	r1, r5, #4
 8006870:	4628      	mov	r0, r5
 8006872:	f004 fc7f 	bl	800b174 <etharp_request>
 8006876:	e7f1      	b.n	800685c <netif_issue_reports+0x24>
 8006878:	0801a244 	.word	0x0801a244
 800687c:	0801a278 	.word	0x0801a278
 8006880:	08019f6c 	.word	0x08019f6c

08006884 <netif_do_set_ipaddr>:
{
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	4604      	mov	r4, r0
 800688a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800688c:	460e      	mov	r6, r1
 800688e:	b139      	cbz	r1, 80068a0 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006890:	b175      	cbz	r5, 80068b0 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006892:	6832      	ldr	r2, [r6, #0]
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d112      	bne.n	80068c0 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 800689a:	2000      	movs	r0, #0
}
 800689c:	b002      	add	sp, #8
 800689e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <netif_do_set_ipaddr+0x60>)
 80068a2:	f240 12cb 	movw	r2, #459	; 0x1cb
 80068a6:	4910      	ldr	r1, [pc, #64]	; (80068e8 <netif_do_set_ipaddr+0x64>)
 80068a8:	4810      	ldr	r0, [pc, #64]	; (80068ec <netif_do_set_ipaddr+0x68>)
 80068aa:	f00c f913 	bl	8012ad4 <printf>
 80068ae:	e7ef      	b.n	8006890 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <netif_do_set_ipaddr+0x60>)
 80068b2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80068b6:	490c      	ldr	r1, [pc, #48]	; (80068e8 <netif_do_set_ipaddr+0x64>)
 80068b8:	480c      	ldr	r0, [pc, #48]	; (80068ec <netif_do_set_ipaddr+0x68>)
 80068ba:	f00c f90b 	bl	8012ad4 <printf>
 80068be:	e7e8      	b.n	8006892 <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 80068c0:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80068c2:	602b      	str	r3, [r5, #0]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80068c4:	a901      	add	r1, sp, #4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7ff ffab 	bl	8006822 <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80068cc:	b13e      	cbz	r6, 80068de <netif_do_set_ipaddr+0x5a>
 80068ce:	6833      	ldr	r3, [r6, #0]
 80068d0:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80068d2:	2101      	movs	r1, #1
 80068d4:	4620      	mov	r0, r4
 80068d6:	f7ff ffaf 	bl	8006838 <netif_issue_reports>
    return 1; /* address changed */
 80068da:	2001      	movs	r0, #1
 80068dc:	e7de      	b.n	800689c <netif_do_set_ipaddr+0x18>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80068de:	2300      	movs	r3, #0
 80068e0:	e7f6      	b.n	80068d0 <netif_do_set_ipaddr+0x4c>
 80068e2:	bf00      	nop
 80068e4:	0801a244 	.word	0x0801a244
 80068e8:	0801a29c 	.word	0x0801a29c
 80068ec:	08019f6c 	.word	0x08019f6c

080068f0 <netif_init>:
}
 80068f0:	4770      	bx	lr
	...

080068f4 <netif_set_addr>:
{
 80068f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	4604      	mov	r4, r0
 80068fc:	4616      	mov	r6, r2
 80068fe:	461d      	mov	r5, r3
  if (ipaddr == NULL) {
 8006900:	460f      	mov	r7, r1
 8006902:	b1d9      	cbz	r1, 800693c <netif_set_addr+0x48>
  if (netmask == NULL) {
 8006904:	b1e6      	cbz	r6, 8006940 <netif_set_addr+0x4c>
  if (gw == NULL) {
 8006906:	b1ed      	cbz	r5, 8006944 <netif_set_addr+0x50>
  remove = ip4_addr_isany(ipaddr);
 8006908:	b10f      	cbz	r7, 800690e <netif_set_addr+0x1a>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	b9e3      	cbnz	r3, 8006948 <netif_set_addr+0x54>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800690e:	aa01      	add	r2, sp, #4
 8006910:	4639      	mov	r1, r7
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff ffb6 	bl	8006884 <netif_do_set_ipaddr>
 8006918:	f04f 0801 	mov.w	r8, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800691c:	2200      	movs	r2, #0
 800691e:	4631      	mov	r1, r6
 8006920:	4620      	mov	r0, r4
 8006922:	f7ff ff63 	bl	80067ec <netif_do_set_netmask>
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006926:	2200      	movs	r2, #0
 8006928:	4629      	mov	r1, r5
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff ff6a 	bl	8006804 <netif_do_set_gw>
  if (!remove) {
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	d00b      	beq.n	800694e <netif_set_addr+0x5a>
}
 8006936:	b002      	add	sp, #8
 8006938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY4;
 800693c:	4f07      	ldr	r7, [pc, #28]	; (800695c <netif_set_addr+0x68>)
 800693e:	e7e1      	b.n	8006904 <netif_set_addr+0x10>
    netmask = IP4_ADDR_ANY4;
 8006940:	4e06      	ldr	r6, [pc, #24]	; (800695c <netif_set_addr+0x68>)
 8006942:	e7e0      	b.n	8006906 <netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 8006944:	4d05      	ldr	r5, [pc, #20]	; (800695c <netif_set_addr+0x68>)
 8006946:	e7df      	b.n	8006908 <netif_set_addr+0x14>
  remove = ip4_addr_isany(ipaddr);
 8006948:	f04f 0800 	mov.w	r8, #0
 800694c:	e7e6      	b.n	800691c <netif_set_addr+0x28>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800694e:	aa01      	add	r2, sp, #4
 8006950:	4639      	mov	r1, r7
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff ff96 	bl	8006884 <netif_do_set_ipaddr>
}
 8006958:	e7ed      	b.n	8006936 <netif_set_addr+0x42>
 800695a:	bf00      	nop
 800695c:	08019eec 	.word	0x08019eec

08006960 <netif_add>:
{
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	9c05      	ldr	r4, [sp, #20]
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006964:	4606      	mov	r6, r0
 8006966:	b310      	cbz	r0, 80069ae <netif_add+0x4e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006968:	2c00      	cmp	r4, #0
 800696a:	d029      	beq.n	80069c0 <netif_add+0x60>
  if (ipaddr == NULL) {
 800696c:	2900      	cmp	r1, #0
 800696e:	d030      	beq.n	80069d2 <netif_add+0x72>
  if (netmask == NULL) {
 8006970:	2a00      	cmp	r2, #0
 8006972:	d030      	beq.n	80069d6 <netif_add+0x76>
  if (gw == NULL) {
 8006974:	2b00      	cmp	r3, #0
 8006976:	d030      	beq.n	80069da <netif_add+0x7a>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006978:	2000      	movs	r0, #0
 800697a:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800697c:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800697e:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8006980:	4d36      	ldr	r5, [pc, #216]	; (8006a5c <netif_add+0xfc>)
 8006982:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 8006984:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 8006986:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 800698a:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 800698c:	9804      	ldr	r0, [sp, #16]
 800698e:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8006990:	4833      	ldr	r0, [pc, #204]	; (8006a60 <netif_add+0x100>)
 8006992:	7800      	ldrb	r0, [r0, #0]
 8006994:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 8006998:	9806      	ldr	r0, [sp, #24]
 800699a:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff ffa9 	bl	80068f4 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80069a2:	4630      	mov	r0, r6
 80069a4:	47a0      	blx	r4
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d03e      	beq.n	8006a28 <netif_add+0xc8>
    return NULL;
 80069aa:	2000      	movs	r0, #0
 80069ac:	e050      	b.n	8006a50 <netif_add+0xf0>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80069ae:	4b2d      	ldr	r3, [pc, #180]	; (8006a64 <netif_add+0x104>)
 80069b0:	f240 1227 	movw	r2, #295	; 0x127
 80069b4:	492c      	ldr	r1, [pc, #176]	; (8006a68 <netif_add+0x108>)
 80069b6:	482d      	ldr	r0, [pc, #180]	; (8006a6c <netif_add+0x10c>)
 80069b8:	f00c f88c 	bl	8012ad4 <printf>
 80069bc:	4630      	mov	r0, r6
 80069be:	e047      	b.n	8006a50 <netif_add+0xf0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80069c0:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <netif_add+0x104>)
 80069c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80069c6:	492a      	ldr	r1, [pc, #168]	; (8006a70 <netif_add+0x110>)
 80069c8:	4828      	ldr	r0, [pc, #160]	; (8006a6c <netif_add+0x10c>)
 80069ca:	f00c f883 	bl	8012ad4 <printf>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e03e      	b.n	8006a50 <netif_add+0xf0>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80069d2:	4928      	ldr	r1, [pc, #160]	; (8006a74 <netif_add+0x114>)
 80069d4:	e7cc      	b.n	8006970 <netif_add+0x10>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80069d6:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <netif_add+0x114>)
 80069d8:	e7cc      	b.n	8006974 <netif_add+0x14>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80069da:	4b26      	ldr	r3, [pc, #152]	; (8006a74 <netif_add+0x114>)
 80069dc:	e7cc      	b.n	8006978 <netif_add+0x18>
        netif->num = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 80069e4:	e024      	b.n	8006a30 <netif_add+0xd0>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80069e6:	4b1f      	ldr	r3, [pc, #124]	; (8006a64 <netif_add+0x104>)
 80069e8:	f240 128b 	movw	r2, #395	; 0x18b
 80069ec:	4922      	ldr	r1, [pc, #136]	; (8006a78 <netif_add+0x118>)
 80069ee:	481f      	ldr	r0, [pc, #124]	; (8006a6c <netif_add+0x10c>)
 80069f0:	f00c f870 	bl	8012ad4 <printf>
 80069f4:	e010      	b.n	8006a18 <netif_add+0xb8>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80069f6:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <netif_add+0x104>)
 80069f8:	f240 128d 	movw	r2, #397	; 0x18d
 80069fc:	491f      	ldr	r1, [pc, #124]	; (8006a7c <netif_add+0x11c>)
 80069fe:	481b      	ldr	r0, [pc, #108]	; (8006a6c <netif_add+0x10c>)
 8006a00:	f00c f868 	bl	8012ad4 <printf>
        if (netif2->num == netif->num) {
 8006a04:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006a08:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d007      	beq.n	8006a20 <netif_add+0xc0>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006a10:	6824      	ldr	r4, [r4, #0]
 8006a12:	b144      	cbz	r4, 8006a26 <netif_add+0xc6>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006a14:	42b4      	cmp	r4, r6
 8006a16:	d0e6      	beq.n	80069e6 <netif_add+0x86>
        num_netifs++;
 8006a18:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006a1a:	2dff      	cmp	r5, #255	; 0xff
 8006a1c:	ddf2      	ble.n	8006a04 <netif_add+0xa4>
 8006a1e:	e7ea      	b.n	80069f6 <netif_add+0x96>
          netif->num++;
 8006a20:	3301      	adds	r3, #1
 8006a22:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 8006a26:	b13c      	cbz	r4, 8006a38 <netif_add+0xd8>
      if (netif->num == 255) {
 8006a28:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8006a2c:	2bff      	cmp	r3, #255	; 0xff
 8006a2e:	d0d6      	beq.n	80069de <netif_add+0x7e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <netif_add+0x120>)
 8006a32:	681c      	ldr	r4, [r3, #0]
      num_netifs = 0;
 8006a34:	2500      	movs	r5, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006a36:	e7ec      	b.n	8006a12 <netif_add+0xb2>
  if (netif->num == 254) {
 8006a38:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8006a3c:	2bfe      	cmp	r3, #254	; 0xfe
 8006a3e:	d008      	beq.n	8006a52 <netif_add+0xf2>
    netif_num = (u8_t)(netif->num + 1);
 8006a40:	3301      	adds	r3, #1
 8006a42:	4a07      	ldr	r2, [pc, #28]	; (8006a60 <netif_add+0x100>)
 8006a44:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8006a46:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <netif_add+0x120>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8006a4c:	601e      	str	r6, [r3, #0]
  return netif;
 8006a4e:	4630      	mov	r0, r6
}
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
    netif_num = 0;
 8006a52:	4b03      	ldr	r3, [pc, #12]	; (8006a60 <netif_add+0x100>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e7f5      	b.n	8006a46 <netif_add+0xe6>
 8006a5a:	bf00      	nop
 8006a5c:	0800681d 	.word	0x0800681d
 8006a60:	200033b8 	.word	0x200033b8
 8006a64:	0801a244 	.word	0x0801a244
 8006a68:	0801a344 	.word	0x0801a344
 8006a6c:	08019f6c 	.word	0x08019f6c
 8006a70:	0801a360 	.word	0x0801a360
 8006a74:	08019eec 	.word	0x08019eec
 8006a78:	0801a384 	.word	0x0801a384
 8006a7c:	0801a398 	.word	0x0801a398
 8006a80:	200073b8 	.word	0x200073b8

08006a84 <netif_set_default>:
  netif_default = netif;
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <netif_set_default+0x8>)
 8006a86:	6018      	str	r0, [r3, #0]
}
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	200073bc 	.word	0x200073bc

08006a90 <netif_set_up>:
{
 8006a90:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006a92:	b128      	cbz	r0, 8006aa0 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006a94:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006a98:	f013 0f01 	tst.w	r3, #1
 8006a9c:	d008      	beq.n	8006ab0 <netif_set_up+0x20>
}
 8006a9e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <netif_set_up+0x30>)
 8006aa2:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006aa6:	4907      	ldr	r1, [pc, #28]	; (8006ac4 <netif_set_up+0x34>)
 8006aa8:	4807      	ldr	r0, [pc, #28]	; (8006ac8 <netif_set_up+0x38>)
 8006aaa:	f00c f813 	bl	8012ad4 <printf>
 8006aae:	e7f6      	b.n	8006a9e <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006ab8:	2103      	movs	r1, #3
 8006aba:	f7ff febd 	bl	8006838 <netif_issue_reports>
 8006abe:	e7ee      	b.n	8006a9e <netif_set_up+0xe>
 8006ac0:	0801a244 	.word	0x0801a244
 8006ac4:	0801a3c8 	.word	0x0801a3c8
 8006ac8:	08019f6c 	.word	0x08019f6c

08006acc <netif_set_down>:
{
 8006acc:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006ace:	b160      	cbz	r0, 8006aea <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 8006ad0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006ad4:	f013 0f01 	tst.w	r3, #1
 8006ad8:	d006      	beq.n	8006ae8 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006ada:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ade:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006ae2:	f013 0f08 	tst.w	r3, #8
 8006ae6:	d108      	bne.n	8006afa <netif_set_down+0x2e>
}
 8006ae8:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <netif_set_down+0x34>)
 8006aec:	f240 329b 	movw	r2, #923	; 0x39b
 8006af0:	4904      	ldr	r1, [pc, #16]	; (8006b04 <netif_set_down+0x38>)
 8006af2:	4805      	ldr	r0, [pc, #20]	; (8006b08 <netif_set_down+0x3c>)
 8006af4:	f00b ffee 	bl	8012ad4 <printf>
 8006af8:	e7f6      	b.n	8006ae8 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 8006afa:	f004 fac1 	bl	800b080 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 8006afe:	e7f3      	b.n	8006ae8 <netif_set_down+0x1c>
 8006b00:	0801a244 	.word	0x0801a244
 8006b04:	0801a3e4 	.word	0x0801a3e4
 8006b08:	08019f6c 	.word	0x08019f6c

08006b0c <netif_set_link_callback>:
  if (netif) {
 8006b0c:	b100      	cbz	r0, 8006b10 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8006b0e:	61c1      	str	r1, [r0, #28]
}
 8006b10:	4770      	bx	lr
	...

08006b14 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006b14:	4602      	mov	r2, r0
 8006b16:	b158      	cbz	r0, 8006b30 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <netif_get_by_index+0x20>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	b138      	cbz	r0, 8006b2e <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
 8006b1e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8006b22:	3301      	adds	r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	e7f6      	b.n	8006b1c <netif_get_by_index+0x8>
 8006b2e:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8006b30:	2000      	movs	r0, #0
}
 8006b32:	4770      	bx	lr
 8006b34:	200073b8 	.word	0x200073b8

08006b38 <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006b38:	4b01      	ldr	r3, [pc, #4]	; (8006b40 <pbuf_pool_is_empty+0x8>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006b3e:	4770      	bx	lr
 8006b40:	200073c0 	.word	0x200073c0

08006b44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006b44:	b410      	push	{r4}
  p->next = NULL;
 8006b46:	2400      	movs	r4, #0
 8006b48:	6004      	str	r4, [r0, #0]
  p->payload = payload;
 8006b4a:	6041      	str	r1, [r0, #4]
  p->tot_len = tot_len;
 8006b4c:	8102      	strh	r2, [r0, #8]
  p->len = len;
 8006b4e:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8006b50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b54:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 8006b56:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006b5a:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006b60:	73c4      	strb	r4, [r0, #15]
}
 8006b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	4616      	mov	r6, r2
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006b6e:	4605      	mov	r5, r0
 8006b70:	b1c0      	cbz	r0, 8006ba4 <pbuf_add_header_impl+0x3c>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006b72:	b33d      	cbz	r5, 8006bc4 <pbuf_add_header_impl+0x5c>
 8006b74:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006b78:	d226      	bcs.n	8006bc8 <pbuf_add_header_impl+0x60>
    return 1;
  }
  if (header_size_increment == 0) {
 8006b7a:	b33c      	cbz	r4, 8006bcc <pbuf_add_header_impl+0x64>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006b7c:	b2a2      	uxth	r2, r4
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006b7e:	892b      	ldrh	r3, [r5, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d323      	bcc.n	8006bd0 <pbuf_add_header_impl+0x68>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006b88:	f995 100c 	ldrsb.w	r1, [r5, #12]
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	db11      	blt.n	8006bb4 <pbuf_add_header_impl+0x4c>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006b90:	b306      	cbz	r6, 8006bd4 <pbuf_add_header_impl+0x6c>
      payload = (u8_t *)p->payload - header_size_increment;
 8006b92:	6869      	ldr	r1, [r5, #4]
 8006b94:	1b0c      	subs	r4, r1, r4
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006b96:	606c      	str	r4, [r5, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006b98:	8969      	ldrh	r1, [r5, #10]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	816a      	strh	r2, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006b9e:	812b      	strh	r3, [r5, #8]


  return 0;
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e012      	b.n	8006bca <pbuf_add_header_impl+0x62>
  LWIP_ASSERT("p != NULL", p != NULL);
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <pbuf_add_header_impl+0x70>)
 8006ba6:	f240 12df 	movw	r2, #479	; 0x1df
 8006baa:	490c      	ldr	r1, [pc, #48]	; (8006bdc <pbuf_add_header_impl+0x74>)
 8006bac:	480c      	ldr	r0, [pc, #48]	; (8006be0 <pbuf_add_header_impl+0x78>)
 8006bae:	f00b ff91 	bl	8012ad4 <printf>
 8006bb2:	e7de      	b.n	8006b72 <pbuf_add_header_impl+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
 8006bb4:	6869      	ldr	r1, [r5, #4]
 8006bb6:	1b0c      	subs	r4, r1, r4
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006bb8:	f105 0110 	add.w	r1, r5, #16
 8006bbc:	42a1      	cmp	r1, r4
 8006bbe:	d9ea      	bls.n	8006b96 <pbuf_add_header_impl+0x2e>
      return 1;
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	e002      	b.n	8006bca <pbuf_add_header_impl+0x62>
    return 1;
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	e000      	b.n	8006bca <pbuf_add_header_impl+0x62>
 8006bc8:	2001      	movs	r0, #1
}
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e7fc      	b.n	8006bca <pbuf_add_header_impl+0x62>
    return 1;
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	e7fa      	b.n	8006bca <pbuf_add_header_impl+0x62>
      return 1;
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	e7f8      	b.n	8006bca <pbuf_add_header_impl+0x62>
 8006bd8:	0801a44c 	.word	0x0801a44c
 8006bdc:	0801a47c 	.word	0x0801a47c
 8006be0:	08019f6c 	.word	0x08019f6c

08006be4 <pbuf_alloc_reference>:
{
 8006be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be6:	b083      	sub	sp, #12
 8006be8:	4606      	mov	r6, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006bee:	2a41      	cmp	r2, #65	; 0x41
 8006bf0:	d001      	beq.n	8006bf6 <pbuf_alloc_reference+0x12>
 8006bf2:	2a01      	cmp	r2, #1
 8006bf4:	d10f      	bne.n	8006c16 <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006bf6:	2007      	movs	r0, #7
 8006bf8:	f7ff fdc4 	bl	8006784 <memp_malloc>
  if (p == NULL) {
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	b138      	cbz	r0, 8006c10 <pbuf_alloc_reference+0x2c>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006c00:	2300      	movs	r3, #0
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	9400      	str	r4, [sp, #0]
 8006c06:	462b      	mov	r3, r5
 8006c08:	462a      	mov	r2, r5
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	f7ff ff9a 	bl	8006b44 <pbuf_init_alloced_pbuf>
}
 8006c10:	4638      	mov	r0, r7
 8006c12:	b003      	add	sp, #12
 8006c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006c16:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <pbuf_alloc_reference+0x44>)
 8006c18:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006c1c:	4903      	ldr	r1, [pc, #12]	; (8006c2c <pbuf_alloc_reference+0x48>)
 8006c1e:	4804      	ldr	r0, [pc, #16]	; (8006c30 <pbuf_alloc_reference+0x4c>)
 8006c20:	f00b ff58 	bl	8012ad4 <printf>
 8006c24:	e7e7      	b.n	8006bf6 <pbuf_alloc_reference+0x12>
 8006c26:	bf00      	nop
 8006c28:	0801a44c 	.word	0x0801a44c
 8006c2c:	0801a488 	.word	0x0801a488
 8006c30:	08019f6c 	.word	0x08019f6c

08006c34 <pbuf_alloced_custom>:
{
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	460d      	mov	r5, r1
 8006c3a:	461e      	mov	r6, r3
 8006c3c:	9906      	ldr	r1, [sp, #24]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006c3e:	1cc4      	adds	r4, r0, #3
 8006c40:	f024 0403 	bic.w	r4, r4, #3
 8006c44:	1928      	adds	r0, r5, r4
 8006c46:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006c4a:	4298      	cmp	r0, r3
 8006c4c:	d80d      	bhi.n	8006c6a <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 8006c4e:	b101      	cbz	r1, 8006c52 <pbuf_alloced_custom+0x1e>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006c50:	4421      	add	r1, r4
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006c52:	4634      	mov	r4, r6
 8006c54:	2302      	movs	r3, #2
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	9200      	str	r2, [sp, #0]
 8006c5a:	462b      	mov	r3, r5
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f7ff ff70 	bl	8006b44 <pbuf_init_alloced_pbuf>
}
 8006c64:	4620      	mov	r0, r4
 8006c66:	b002      	add	sp, #8
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8006c6a:	2400      	movs	r4, #0
 8006c6c:	e7fa      	b.n	8006c64 <pbuf_alloced_custom+0x30>

08006c6e <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006c6e:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006c70:	2200      	movs	r2, #0
 8006c72:	f7ff ff79 	bl	8006b68 <pbuf_add_header_impl>
}
 8006c76:	bd08      	pop	{r3, pc}

08006c78 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	460c      	mov	r4, r1
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	b190      	cbz	r0, 8006ca6 <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006c80:	b315      	cbz	r5, 8006cc8 <pbuf_remove_header+0x50>
 8006c82:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006c86:	d221      	bcs.n	8006ccc <pbuf_remove_header+0x54>
    return 1;
  }
  if (header_size_decrement == 0) {
 8006c88:	b314      	cbz	r4, 8006cd0 <pbuf_remove_header+0x58>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006c8a:	b2a2      	uxth	r2, r4
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006c8c:	896b      	ldrh	r3, [r5, #10]
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d311      	bcc.n	8006cb6 <pbuf_remove_header+0x3e>

  /* remember current payload pointer */
  payload = p->payload;
 8006c92:	6869      	ldr	r1, [r5, #4]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006c94:	4421      	add	r1, r4
 8006c96:	6069      	str	r1, [r5, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	816b      	strh	r3, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006c9c:	892b      	ldrh	r3, [r5, #8]
 8006c9e:	1a9a      	subs	r2, r3, r2
 8006ca0:	812a      	strh	r2, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006ca2:	2000      	movs	r0, #0
}
 8006ca4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <pbuf_remove_header+0x5c>)
 8006ca8:	f240 224b 	movw	r2, #587	; 0x24b
 8006cac:	490a      	ldr	r1, [pc, #40]	; (8006cd8 <pbuf_remove_header+0x60>)
 8006cae:	480b      	ldr	r0, [pc, #44]	; (8006cdc <pbuf_remove_header+0x64>)
 8006cb0:	f00b ff10 	bl	8012ad4 <printf>
 8006cb4:	e7e4      	b.n	8006c80 <pbuf_remove_header+0x8>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <pbuf_remove_header+0x5c>)
 8006cb8:	f240 2255 	movw	r2, #597	; 0x255
 8006cbc:	4908      	ldr	r1, [pc, #32]	; (8006ce0 <pbuf_remove_header+0x68>)
 8006cbe:	4807      	ldr	r0, [pc, #28]	; (8006cdc <pbuf_remove_header+0x64>)
 8006cc0:	f00b ff08 	bl	8012ad4 <printf>
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	e7ed      	b.n	8006ca4 <pbuf_remove_header+0x2c>
    return 1;
 8006cc8:	2001      	movs	r0, #1
 8006cca:	e7eb      	b.n	8006ca4 <pbuf_remove_header+0x2c>
 8006ccc:	2001      	movs	r0, #1
 8006cce:	e7e9      	b.n	8006ca4 <pbuf_remove_header+0x2c>
    return 0;
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e7e7      	b.n	8006ca4 <pbuf_remove_header+0x2c>
 8006cd4:	0801a44c 	.word	0x0801a44c
 8006cd8:	0801a47c 	.word	0x0801a47c
 8006cdc:	08019f6c 	.word	0x08019f6c
 8006ce0:	0801a49c 	.word	0x0801a49c

08006ce4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006ce4:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8006ce6:	2900      	cmp	r1, #0
 8006ce8:	db02      	blt.n	8006cf0 <pbuf_header_impl+0xc>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006cea:	f7ff ff3d 	bl	8006b68 <pbuf_add_header_impl>
  }
}
 8006cee:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006cf0:	4249      	negs	r1, r1
 8006cf2:	f7ff ffc1 	bl	8006c78 <pbuf_remove_header>
 8006cf6:	e7fa      	b.n	8006cee <pbuf_header_impl+0xa>

08006cf8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006cf8:	b508      	push	{r3, lr}
  return pbuf_header_impl(p, header_size_increment, 1);
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f7ff fff2 	bl	8006ce4 <pbuf_header_impl>
}
 8006d00:	bd08      	pop	{r3, pc}
	...

08006d04 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006d04:	b570      	push	{r4, r5, r6, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006d06:	b110      	cbz	r0, 8006d0e <pbuf_free+0xa>
 8006d08:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006d0a:	2500      	movs	r5, #0
 8006d0c:	e017      	b.n	8006d3e <pbuf_free+0x3a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006d0e:	4b28      	ldr	r3, [pc, #160]	; (8006db0 <pbuf_free+0xac>)
 8006d10:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006d14:	4927      	ldr	r1, [pc, #156]	; (8006db4 <pbuf_free+0xb0>)
 8006d16:	4828      	ldr	r0, [pc, #160]	; (8006db8 <pbuf_free+0xb4>)
 8006d18:	f00b fedc 	bl	8012ad4 <printf>
    return 0;
 8006d1c:	2500      	movs	r5, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006d1e:	4628      	mov	r0, r5
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006d22:	4b23      	ldr	r3, [pc, #140]	; (8006db0 <pbuf_free+0xac>)
 8006d24:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006d28:	4924      	ldr	r1, [pc, #144]	; (8006dbc <pbuf_free+0xb8>)
 8006d2a:	4823      	ldr	r0, [pc, #140]	; (8006db8 <pbuf_free+0xb4>)
 8006d2c:	f00b fed2 	bl	8012ad4 <printf>
 8006d30:	e00a      	b.n	8006d48 <pbuf_free+0x44>
        pc->custom_free_function(p);
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	4620      	mov	r0, r4
 8006d36:	4798      	blx	r3
      count++;
 8006d38:	3501      	adds	r5, #1
 8006d3a:	b2ed      	uxtb	r5, r5
      p = q;
 8006d3c:	4634      	mov	r4, r6
  while (p != NULL) {
 8006d3e:	2c00      	cmp	r4, #0
 8006d40:	d0ed      	beq.n	8006d1e <pbuf_free+0x1a>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006d42:	7ba3      	ldrb	r3, [r4, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0ec      	beq.n	8006d22 <pbuf_free+0x1e>
    ref = --(p->ref);
 8006d48:	7ba3      	ldrb	r3, [r4, #14]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e4      	bne.n	8006d1e <pbuf_free+0x1a>
      q = p->next;
 8006d54:	6826      	ldr	r6, [r4, #0]
      alloc_src = pbuf_get_allocsrc(p);
 8006d56:	7b23      	ldrb	r3, [r4, #12]
 8006d58:	f003 030f 	and.w	r3, r3, #15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006d5c:	7b62      	ldrb	r2, [r4, #13]
 8006d5e:	f012 0f02 	tst.w	r2, #2
 8006d62:	d00a      	beq.n	8006d7a <pbuf_free+0x76>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e3      	bne.n	8006d32 <pbuf_free+0x2e>
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <pbuf_free+0xac>)
 8006d6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006d70:	4913      	ldr	r1, [pc, #76]	; (8006dc0 <pbuf_free+0xbc>)
 8006d72:	4811      	ldr	r0, [pc, #68]	; (8006db8 <pbuf_free+0xb4>)
 8006d74:	f00b feae 	bl	8012ad4 <printf>
 8006d78:	e7db      	b.n	8006d32 <pbuf_free+0x2e>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d006      	beq.n	8006d8c <pbuf_free+0x88>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d009      	beq.n	8006d96 <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006d82:	b96b      	cbnz	r3, 8006da0 <pbuf_free+0x9c>
          mem_free(p);
 8006d84:	4620      	mov	r0, r4
 8006d86:	f7ff fae5 	bl	8006354 <mem_free>
 8006d8a:	e7d5      	b.n	8006d38 <pbuf_free+0x34>
          memp_free(MEMP_PBUF_POOL, p);
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	2008      	movs	r0, #8
 8006d90:	f7ff fd12 	bl	80067b8 <memp_free>
 8006d94:	e7d0      	b.n	8006d38 <pbuf_free+0x34>
          memp_free(MEMP_PBUF, p);
 8006d96:	4621      	mov	r1, r4
 8006d98:	2007      	movs	r0, #7
 8006d9a:	f7ff fd0d 	bl	80067b8 <memp_free>
 8006d9e:	e7cb      	b.n	8006d38 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8006da0:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <pbuf_free+0xac>)
 8006da2:	f240 320f 	movw	r2, #783	; 0x30f
 8006da6:	4907      	ldr	r1, [pc, #28]	; (8006dc4 <pbuf_free+0xc0>)
 8006da8:	4803      	ldr	r0, [pc, #12]	; (8006db8 <pbuf_free+0xb4>)
 8006daa:	f00b fe93 	bl	8012ad4 <printf>
 8006dae:	e7c3      	b.n	8006d38 <pbuf_free+0x34>
 8006db0:	0801a44c 	.word	0x0801a44c
 8006db4:	0801a47c 	.word	0x0801a47c
 8006db8:	08019f6c 	.word	0x08019f6c
 8006dbc:	0801a4bc 	.word	0x0801a4bc
 8006dc0:	0801a4d4 	.word	0x0801a4d4
 8006dc4:	0801a4f8 	.word	0x0801a4f8

08006dc8 <pbuf_alloc>:
{
 8006dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	460e      	mov	r6, r1
 8006dd0:	4690      	mov	r8, r2
  u16_t offset = (u16_t)layer;
 8006dd2:	b285      	uxth	r5, r0
  switch (type) {
 8006dd4:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8006dd8:	d046      	beq.n	8006e68 <pbuf_alloc+0xa0>
 8006dda:	4607      	mov	r7, r0
 8006ddc:	d80e      	bhi.n	8006dfc <pbuf_alloc+0x34>
 8006dde:	2a01      	cmp	r2, #1
 8006de0:	d002      	beq.n	8006de8 <pbuf_alloc+0x20>
 8006de2:	2a41      	cmp	r2, #65	; 0x41
 8006de4:	f040 8084 	bne.w	8006ef0 <pbuf_alloc+0x128>
      p = pbuf_alloc_reference(NULL, length, type);
 8006de8:	4642      	mov	r2, r8
 8006dea:	4631      	mov	r1, r6
 8006dec:	2000      	movs	r0, #0
 8006dee:	f7ff fef9 	bl	8006be4 <pbuf_alloc_reference>
 8006df2:	4681      	mov	r9, r0
}
 8006df4:	4648      	mov	r0, r9
 8006df6:	b002      	add	sp, #8
 8006df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 8006dfc:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8006e00:	d176      	bne.n	8006ef0 <pbuf_alloc+0x128>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006e02:	3503      	adds	r5, #3
 8006e04:	f025 0503 	bic.w	r5, r5, #3
 8006e08:	b2ad      	uxth	r5, r5
 8006e0a:	1cca      	adds	r2, r1, #3
 8006e0c:	b293      	uxth	r3, r2
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	441d      	add	r5, r3
 8006e14:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006e16:	f105 0010 	add.w	r0, r5, #16
 8006e1a:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006e1c:	f022 0203 	bic.w	r2, r2, #3
 8006e20:	4295      	cmp	r5, r2
 8006e22:	d36f      	bcc.n	8006f04 <pbuf_alloc+0x13c>
 8006e24:	4282      	cmp	r2, r0
 8006e26:	d870      	bhi.n	8006f0a <pbuf_alloc+0x142>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006e28:	f7ff fba4 	bl	8006574 <mem_malloc>
      if (p == NULL) {
 8006e2c:	4681      	mov	r9, r0
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d0e0      	beq.n	8006df4 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006e32:	f107 0110 	add.w	r1, r7, #16
 8006e36:	4401      	add	r1, r0
 8006e38:	3103      	adds	r1, #3
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	f8cd 8000 	str.w	r8, [sp]
 8006e42:	4633      	mov	r3, r6
 8006e44:	4632      	mov	r2, r6
 8006e46:	f021 0103 	bic.w	r1, r1, #3
 8006e4a:	f7ff fe7b 	bl	8006b44 <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006e4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006e52:	f013 0f03 	tst.w	r3, #3
 8006e56:	d0cd      	beq.n	8006df4 <pbuf_alloc+0x2c>
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <pbuf_alloc+0x148>)
 8006e5a:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006e5e:	492d      	ldr	r1, [pc, #180]	; (8006f14 <pbuf_alloc+0x14c>)
 8006e60:	482d      	ldr	r0, [pc, #180]	; (8006f18 <pbuf_alloc+0x150>)
 8006e62:	f00b fe37 	bl	8012ad4 <printf>
 8006e66:	e7c5      	b.n	8006df4 <pbuf_alloc+0x2c>
  switch (type) {
 8006e68:	2700      	movs	r7, #0
 8006e6a:	46b9      	mov	r9, r7
 8006e6c:	e01a      	b.n	8006ea4 <pbuf_alloc+0xdc>
          PBUF_POOL_IS_EMPTY();
 8006e6e:	f7ff fe63 	bl	8006b38 <pbuf_pool_is_empty>
          if (p) {
 8006e72:	f1b9 0f00 	cmp.w	r9, #0
 8006e76:	d002      	beq.n	8006e7e <pbuf_alloc+0xb6>
            pbuf_free(p);
 8006e78:	4648      	mov	r0, r9
 8006e7a:	f7ff ff43 	bl	8006d04 <pbuf_free>
          return NULL;
 8006e7e:	46b9      	mov	r9, r7
 8006e80:	e7b8      	b.n	8006df4 <pbuf_alloc+0x2c>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006e82:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <pbuf_alloc+0x148>)
 8006e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e88:	4924      	ldr	r1, [pc, #144]	; (8006f1c <pbuf_alloc+0x154>)
 8006e8a:	4823      	ldr	r0, [pc, #140]	; (8006f18 <pbuf_alloc+0x150>)
 8006e8c:	f00b fe22 	bl	8012ad4 <printf>
        if (p == NULL) {
 8006e90:	f1b9 0f00 	cmp.w	r9, #0
 8006e94:	d02a      	beq.n	8006eec <pbuf_alloc+0x124>
          last->next = q;
 8006e96:	f8ca 7000 	str.w	r7, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8006e9a:	1b36      	subs	r6, r6, r4
 8006e9c:	b2b6      	uxth	r6, r6
        offset = 0;
 8006e9e:	2500      	movs	r5, #0
      } while (rem_len > 0);
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	d0a7      	beq.n	8006df4 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006ea4:	46ba      	mov	sl, r7
 8006ea6:	2008      	movs	r0, #8
 8006ea8:	f7ff fc6c 	bl	8006784 <memp_malloc>
        if (q == NULL) {
 8006eac:	4607      	mov	r7, r0
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d0dd      	beq.n	8006e6e <pbuf_alloc+0xa6>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006eb2:	1cec      	adds	r4, r5, #3
 8006eb4:	f024 0403 	bic.w	r4, r4, #3
 8006eb8:	b2a4      	uxth	r4, r4
 8006eba:	f5c4 7414 	rsb	r4, r4, #592	; 0x250
 8006ebe:	b2a4      	uxth	r4, r4
 8006ec0:	42b4      	cmp	r4, r6
 8006ec2:	bf28      	it	cs
 8006ec4:	4634      	movcs	r4, r6
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006ec6:	f105 0110 	add.w	r1, r5, #16
 8006eca:	4401      	add	r1, r0
 8006ecc:	3103      	adds	r1, #3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	f8cd 8000 	str.w	r8, [sp]
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	4632      	mov	r2, r6
 8006eda:	f021 0103 	bic.w	r1, r1, #3
 8006ede:	f7ff fe31 	bl	8006b44 <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f013 0f03 	tst.w	r3, #3
 8006ee8:	d0d2      	beq.n	8006e90 <pbuf_alloc+0xc8>
 8006eea:	e7ca      	b.n	8006e82 <pbuf_alloc+0xba>
          p = q;
 8006eec:	46b9      	mov	r9, r7
 8006eee:	e7d4      	b.n	8006e9a <pbuf_alloc+0xd2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <pbuf_alloc+0x148>)
 8006ef2:	f240 1227 	movw	r2, #295	; 0x127
 8006ef6:	490a      	ldr	r1, [pc, #40]	; (8006f20 <pbuf_alloc+0x158>)
 8006ef8:	4807      	ldr	r0, [pc, #28]	; (8006f18 <pbuf_alloc+0x150>)
 8006efa:	f00b fdeb 	bl	8012ad4 <printf>
      return NULL;
 8006efe:	f04f 0900 	mov.w	r9, #0
 8006f02:	e777      	b.n	8006df4 <pbuf_alloc+0x2c>
        return NULL;
 8006f04:	f04f 0900 	mov.w	r9, #0
 8006f08:	e774      	b.n	8006df4 <pbuf_alloc+0x2c>
 8006f0a:	f04f 0900 	mov.w	r9, #0
 8006f0e:	e771      	b.n	8006df4 <pbuf_alloc+0x2c>
 8006f10:	0801a44c 	.word	0x0801a44c
 8006f14:	0801a570 	.word	0x0801a570
 8006f18:	08019f6c 	.word	0x08019f6c
 8006f1c:	0801a50c 	.word	0x0801a50c
 8006f20:	0801a59c 	.word	0x0801a59c

08006f24 <pbuf_realloc>:
{
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006f28:	4604      	mov	r4, r0
 8006f2a:	b1b8      	cbz	r0, 8006f5c <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 8006f2c:	8927      	ldrh	r7, [r4, #8]
 8006f2e:	42b7      	cmp	r7, r6
 8006f30:	d92e      	bls.n	8006f90 <pbuf_realloc+0x6c>
  rem_len = new_len;
 8006f32:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8006f34:	8963      	ldrh	r3, [r4, #10]
 8006f36:	42ab      	cmp	r3, r5
 8006f38:	d218      	bcs.n	8006f6c <pbuf_realloc+0x48>
    rem_len = (u16_t)(rem_len - q->len);
 8006f3a:	1aeb      	subs	r3, r5, r3
 8006f3c:	b29d      	uxth	r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006f3e:	8923      	ldrh	r3, [r4, #8]
 8006f40:	1bf2      	subs	r2, r6, r7
 8006f42:	4413      	add	r3, r2
 8006f44:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8006f46:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006f48:	2c00      	cmp	r4, #0
 8006f4a:	d1f3      	bne.n	8006f34 <pbuf_realloc+0x10>
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <pbuf_realloc+0x94>)
 8006f4e:	f240 12af 	movw	r2, #431	; 0x1af
 8006f52:	491a      	ldr	r1, [pc, #104]	; (8006fbc <pbuf_realloc+0x98>)
 8006f54:	481a      	ldr	r0, [pc, #104]	; (8006fc0 <pbuf_realloc+0x9c>)
 8006f56:	f00b fdbd 	bl	8012ad4 <printf>
 8006f5a:	e7eb      	b.n	8006f34 <pbuf_realloc+0x10>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006f5c:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <pbuf_realloc+0x94>)
 8006f5e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006f62:	4918      	ldr	r1, [pc, #96]	; (8006fc4 <pbuf_realloc+0xa0>)
 8006f64:	4816      	ldr	r0, [pc, #88]	; (8006fc0 <pbuf_realloc+0x9c>)
 8006f66:	f00b fdb5 	bl	8012ad4 <printf>
 8006f6a:	e7df      	b.n	8006f2c <pbuf_realloc+0x8>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006f6c:	7b22      	ldrb	r2, [r4, #12]
 8006f6e:	f012 0f0f 	tst.w	r2, #15
 8006f72:	d105      	bne.n	8006f80 <pbuf_realloc+0x5c>
 8006f74:	42ab      	cmp	r3, r5
 8006f76:	d003      	beq.n	8006f80 <pbuf_realloc+0x5c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006f78:	7b63      	ldrb	r3, [r4, #13]
 8006f7a:	f013 0f02 	tst.w	r3, #2
 8006f7e:	d008      	beq.n	8006f92 <pbuf_realloc+0x6e>
  q->len = rem_len;
 8006f80:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8006f82:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	b108      	cbz	r0, 8006f8c <pbuf_realloc+0x68>
    pbuf_free(q->next);
 8006f88:	f7ff febc 	bl	8006d04 <pbuf_free>
  q->next = NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6023      	str	r3, [r4, #0]
}
 8006f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	1b1b      	subs	r3, r3, r4
 8006f96:	18e9      	adds	r1, r5, r3
 8006f98:	b289      	uxth	r1, r1
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7ff fa30 	bl	8006400 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d1ec      	bne.n	8006f80 <pbuf_realloc+0x5c>
 8006fa6:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <pbuf_realloc+0x94>)
 8006fa8:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006fac:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <pbuf_realloc+0xa4>)
 8006fae:	4804      	ldr	r0, [pc, #16]	; (8006fc0 <pbuf_realloc+0x9c>)
 8006fb0:	f00b fd90 	bl	8012ad4 <printf>
 8006fb4:	e7e4      	b.n	8006f80 <pbuf_realloc+0x5c>
 8006fb6:	bf00      	nop
 8006fb8:	0801a44c 	.word	0x0801a44c
 8006fbc:	0801a5d0 	.word	0x0801a5d0
 8006fc0:	08019f6c 	.word	0x08019f6c
 8006fc4:	0801a5b8 	.word	0x0801a5b8
 8006fc8:	0801a5e8 	.word	0x0801a5e8

08006fcc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006fcc:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
 8006fce:	2000      	movs	r0, #0
  while (p != NULL) {
 8006fd0:	b11b      	cbz	r3, 8006fda <pbuf_clen+0xe>
    ++len;
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	b280      	uxth	r0, r0
    p = p->next;
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	e7fa      	b.n	8006fd0 <pbuf_clen+0x4>
  }
  return len;
}
 8006fda:	4770      	bx	lr

08006fdc <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8006fdc:	b170      	cbz	r0, 8006ffc <pbuf_ref+0x20>
{
 8006fde:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006fe0:	7b83      	ldrb	r3, [r0, #14]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006fe8:	b103      	cbz	r3, 8006fec <pbuf_ref+0x10>
  }
}
 8006fea:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <pbuf_ref+0x24>)
 8006fee:	f240 3242 	movw	r2, #834	; 0x342
 8006ff2:	4904      	ldr	r1, [pc, #16]	; (8007004 <pbuf_ref+0x28>)
 8006ff4:	4804      	ldr	r0, [pc, #16]	; (8007008 <pbuf_ref+0x2c>)
 8006ff6:	f00b fd6d 	bl	8012ad4 <printf>
}
 8006ffa:	e7f6      	b.n	8006fea <pbuf_ref+0xe>
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	0801a44c 	.word	0x0801a44c
 8007004:	0801a604 	.word	0x0801a604
 8007008:	08019f6c 	.word	0x08019f6c

0800700c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800700c:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800700e:	b110      	cbz	r0, 8007016 <pbuf_cat+0xa>
 8007010:	460d      	mov	r5, r1
 8007012:	4604      	mov	r4, r0
 8007014:	b961      	cbnz	r1, 8007030 <pbuf_cat+0x24>
 8007016:	4b15      	ldr	r3, [pc, #84]	; (800706c <pbuf_cat+0x60>)
 8007018:	f240 3259 	movw	r2, #857	; 0x359
 800701c:	4914      	ldr	r1, [pc, #80]	; (8007070 <pbuf_cat+0x64>)
 800701e:	4815      	ldr	r0, [pc, #84]	; (8007074 <pbuf_cat+0x68>)
 8007020:	f00b fd58 	bl	8012ad4 <printf>
 8007024:	e019      	b.n	800705a <pbuf_cat+0x4e>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007026:	8923      	ldrh	r3, [r4, #8]
 8007028:	8928      	ldrh	r0, [r5, #8]
 800702a:	4403      	add	r3, r0
 800702c:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800702e:	4614      	mov	r4, r2
 8007030:	6822      	ldr	r2, [r4, #0]
 8007032:	2a00      	cmp	r2, #0
 8007034:	d1f7      	bne.n	8007026 <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007036:	8922      	ldrh	r2, [r4, #8]
 8007038:	8963      	ldrh	r3, [r4, #10]
 800703a:	429a      	cmp	r2, r3
 800703c:	d10e      	bne.n	800705c <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	b133      	cbz	r3, 8007050 <pbuf_cat+0x44>
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <pbuf_cat+0x60>)
 8007044:	f240 3263 	movw	r2, #867	; 0x363
 8007048:	490b      	ldr	r1, [pc, #44]	; (8007078 <pbuf_cat+0x6c>)
 800704a:	480a      	ldr	r0, [pc, #40]	; (8007074 <pbuf_cat+0x68>)
 800704c:	f00b fd42 	bl	8012ad4 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007050:	8923      	ldrh	r3, [r4, #8]
 8007052:	892a      	ldrh	r2, [r5, #8]
 8007054:	4413      	add	r3, r2
 8007056:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007058:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800705a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800705c:	4b03      	ldr	r3, [pc, #12]	; (800706c <pbuf_cat+0x60>)
 800705e:	f240 3262 	movw	r2, #866	; 0x362
 8007062:	4906      	ldr	r1, [pc, #24]	; (800707c <pbuf_cat+0x70>)
 8007064:	4803      	ldr	r0, [pc, #12]	; (8007074 <pbuf_cat+0x68>)
 8007066:	f00b fd35 	bl	8012ad4 <printf>
 800706a:	e7e8      	b.n	800703e <pbuf_cat+0x32>
 800706c:	0801a44c 	.word	0x0801a44c
 8007070:	0801a618 	.word	0x0801a618
 8007074:	08019f6c 	.word	0x08019f6c
 8007078:	0801a680 	.word	0x0801a680
 800707c:	0801a650 	.word	0x0801a650

08007080 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007084:	b148      	cbz	r0, 800709a <pbuf_copy+0x1a>
 8007086:	460c      	mov	r4, r1
 8007088:	4605      	mov	r5, r0
 800708a:	b131      	cbz	r1, 800709a <pbuf_copy+0x1a>
 800708c:	8902      	ldrh	r2, [r0, #8]
 800708e:	890b      	ldrh	r3, [r1, #8]
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <pbuf_copy+0x1a>
  size_t offset_to = 0, offset_from = 0, len;
 8007094:	2700      	movs	r7, #0
 8007096:	46b8      	mov	r8, r7
 8007098:	e03a      	b.n	8007110 <pbuf_copy+0x90>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800709a:	4b3a      	ldr	r3, [pc, #232]	; (8007184 <pbuf_copy+0x104>)
 800709c:	f240 32c9 	movw	r2, #969	; 0x3c9
 80070a0:	4939      	ldr	r1, [pc, #228]	; (8007188 <pbuf_copy+0x108>)
 80070a2:	483a      	ldr	r0, [pc, #232]	; (800718c <pbuf_copy+0x10c>)
 80070a4:	f00b fd16 	bl	8012ad4 <printf>
 80070a8:	f06f 000f 	mvn.w	r0, #15
 80070ac:	e068      	b.n	8007180 <pbuf_copy+0x100>
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80070ae:	4b35      	ldr	r3, [pc, #212]	; (8007184 <pbuf_copy+0x104>)
 80070b0:	f240 32d9 	movw	r2, #985	; 0x3d9
 80070b4:	4936      	ldr	r1, [pc, #216]	; (8007190 <pbuf_copy+0x110>)
 80070b6:	4835      	ldr	r0, [pc, #212]	; (800718c <pbuf_copy+0x10c>)
 80070b8:	f00b fd0c 	bl	8012ad4 <printf>
 80070bc:	e03c      	b.n	8007138 <pbuf_copy+0xb8>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80070be:	4b31      	ldr	r3, [pc, #196]	; (8007184 <pbuf_copy+0x104>)
 80070c0:	f240 32da 	movw	r2, #986	; 0x3da
 80070c4:	4933      	ldr	r1, [pc, #204]	; (8007194 <pbuf_copy+0x114>)
 80070c6:	4831      	ldr	r0, [pc, #196]	; (800718c <pbuf_copy+0x10c>)
 80070c8:	f00b fd04 	bl	8012ad4 <printf>
 80070cc:	e037      	b.n	800713e <pbuf_copy+0xbe>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 80070ce:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80070d0:	b115      	cbz	r5, 80070d8 <pbuf_copy+0x58>
      offset_to = 0;
 80070d2:	f04f 0800 	mov.w	r8, #0
 80070d6:	e03a      	b.n	800714e <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80070d8:	b914      	cbnz	r4, 80070e0 <pbuf_copy+0x60>
      offset_to = 0;
 80070da:	f04f 0800 	mov.w	r8, #0
 80070de:	e036      	b.n	800714e <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80070e0:	4b28      	ldr	r3, [pc, #160]	; (8007184 <pbuf_copy+0x104>)
 80070e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80070e6:	492c      	ldr	r1, [pc, #176]	; (8007198 <pbuf_copy+0x118>)
 80070e8:	4828      	ldr	r0, [pc, #160]	; (800718c <pbuf_copy+0x10c>)
 80070ea:	f00b fcf3 	bl	8012ad4 <printf>
 80070ee:	f06f 000f 	mvn.w	r0, #15
 80070f2:	e045      	b.n	8007180 <pbuf_copy+0x100>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	b37b      	cbz	r3, 8007158 <pbuf_copy+0xd8>
 80070f8:	4b22      	ldr	r3, [pc, #136]	; (8007184 <pbuf_copy+0x104>)
 80070fa:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80070fe:	4927      	ldr	r1, [pc, #156]	; (800719c <pbuf_copy+0x11c>)
 8007100:	4822      	ldr	r0, [pc, #136]	; (800718c <pbuf_copy+0x10c>)
 8007102:	f00b fce7 	bl	8012ad4 <printf>
 8007106:	f06f 0005 	mvn.w	r0, #5
 800710a:	e039      	b.n	8007180 <pbuf_copy+0x100>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800710c:	2c00      	cmp	r4, #0
 800710e:	d036      	beq.n	800717e <pbuf_copy+0xfe>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007110:	896e      	ldrh	r6, [r5, #10]
 8007112:	eba6 0608 	sub.w	r6, r6, r8
 8007116:	8963      	ldrh	r3, [r4, #10]
 8007118:	1bdb      	subs	r3, r3, r7
 800711a:	429e      	cmp	r6, r3
 800711c:	d300      	bcc.n	8007120 <pbuf_copy+0xa0>
      len = p_from->len - offset_from;
 800711e:	461e      	mov	r6, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007120:	6868      	ldr	r0, [r5, #4]
 8007122:	6861      	ldr	r1, [r4, #4]
 8007124:	4632      	mov	r2, r6
 8007126:	4439      	add	r1, r7
 8007128:	4440      	add	r0, r8
 800712a:	f00b fc97 	bl	8012a5c <memcpy>
    offset_to += len;
 800712e:	44b0      	add	r8, r6
    offset_from += len;
 8007130:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007132:	896b      	ldrh	r3, [r5, #10]
 8007134:	4543      	cmp	r3, r8
 8007136:	d3ba      	bcc.n	80070ae <pbuf_copy+0x2e>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007138:	8963      	ldrh	r3, [r4, #10]
 800713a:	42bb      	cmp	r3, r7
 800713c:	d3bf      	bcc.n	80070be <pbuf_copy+0x3e>
    if (offset_from >= p_from->len) {
 800713e:	8963      	ldrh	r3, [r4, #10]
 8007140:	42bb      	cmp	r3, r7
 8007142:	d801      	bhi.n	8007148 <pbuf_copy+0xc8>
      p_from = p_from->next;
 8007144:	6824      	ldr	r4, [r4, #0]
      offset_from = 0;
 8007146:	2700      	movs	r7, #0
    if (offset_to == p_to->len) {
 8007148:	896b      	ldrh	r3, [r5, #10]
 800714a:	4543      	cmp	r3, r8
 800714c:	d0bf      	beq.n	80070ce <pbuf_copy+0x4e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800714e:	b11c      	cbz	r4, 8007158 <pbuf_copy+0xd8>
 8007150:	8962      	ldrh	r2, [r4, #10]
 8007152:	8923      	ldrh	r3, [r4, #8]
 8007154:	429a      	cmp	r2, r3
 8007156:	d0cd      	beq.n	80070f4 <pbuf_copy+0x74>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007158:	2d00      	cmp	r5, #0
 800715a:	d0d7      	beq.n	800710c <pbuf_copy+0x8c>
 800715c:	896a      	ldrh	r2, [r5, #10]
 800715e:	892b      	ldrh	r3, [r5, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	d1d3      	bne.n	800710c <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0d0      	beq.n	800710c <pbuf_copy+0x8c>
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <pbuf_copy+0x104>)
 800716c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007170:	490a      	ldr	r1, [pc, #40]	; (800719c <pbuf_copy+0x11c>)
 8007172:	4806      	ldr	r0, [pc, #24]	; (800718c <pbuf_copy+0x10c>)
 8007174:	f00b fcae 	bl	8012ad4 <printf>
 8007178:	f06f 0005 	mvn.w	r0, #5
 800717c:	e000      	b.n	8007180 <pbuf_copy+0x100>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800717e:	2000      	movs	r0, #0
}
 8007180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007184:	0801a44c 	.word	0x0801a44c
 8007188:	0801a6cc 	.word	0x0801a6cc
 800718c:	08019f6c 	.word	0x08019f6c
 8007190:	0801a6fc 	.word	0x0801a6fc
 8007194:	0801a714 	.word	0x0801a714
 8007198:	0801a730 	.word	0x0801a730
 800719c:	0801a740 	.word	0x0801a740

080071a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80071a4:	b130      	cbz	r0, 80071b4 <pbuf_copy_partial+0x14>
 80071a6:	4688      	mov	r8, r1
 80071a8:	4691      	mov	r9, r2
 80071aa:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80071ac:	b169      	cbz	r1, 80071ca <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 80071ae:	2700      	movs	r7, #0
  u16_t left = 0;
 80071b0:	463e      	mov	r6, r7
 80071b2:	e02a      	b.n	800720a <pbuf_copy_partial+0x6a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80071b4:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <pbuf_copy_partial+0x84>)
 80071b6:	f240 420a 	movw	r2, #1034	; 0x40a
 80071ba:	491b      	ldr	r1, [pc, #108]	; (8007228 <pbuf_copy_partial+0x88>)
 80071bc:	481b      	ldr	r0, [pc, #108]	; (800722c <pbuf_copy_partial+0x8c>)
 80071be:	f00b fc89 	bl	8012ad4 <printf>
 80071c2:	2700      	movs	r7, #0
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 80071c4:	4638      	mov	r0, r7
 80071c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <pbuf_copy_partial+0x84>)
 80071cc:	f240 420b 	movw	r2, #1035	; 0x40b
 80071d0:	4917      	ldr	r1, [pc, #92]	; (8007230 <pbuf_copy_partial+0x90>)
 80071d2:	4816      	ldr	r0, [pc, #88]	; (800722c <pbuf_copy_partial+0x8c>)
 80071d4:	f00b fc7e 	bl	8012ad4 <printf>
 80071d8:	2700      	movs	r7, #0
 80071da:	e7f3      	b.n	80071c4 <pbuf_copy_partial+0x24>
      buf_copy_len = (u16_t)(p->len - offset);
 80071dc:	896c      	ldrh	r4, [r5, #10]
 80071de:	1ae4      	subs	r4, r4, r3
 80071e0:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 80071e2:	45a1      	cmp	r9, r4
 80071e4:	d200      	bcs.n	80071e8 <pbuf_copy_partial+0x48>
        buf_copy_len = len;
 80071e6:	464c      	mov	r4, r9
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80071e8:	6869      	ldr	r1, [r5, #4]
 80071ea:	4622      	mov	r2, r4
 80071ec:	4419      	add	r1, r3
 80071ee:	eb08 0006 	add.w	r0, r8, r6
 80071f2:	f00b fc33 	bl	8012a5c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80071f6:	4427      	add	r7, r4
 80071f8:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 80071fa:	4426      	add	r6, r4
 80071fc:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 80071fe:	eba9 0404 	sub.w	r4, r9, r4
 8007202:	fa1f f984 	uxth.w	r9, r4
      offset = 0;
 8007206:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007208:	682d      	ldr	r5, [r5, #0]
 800720a:	f1b9 0f00 	cmp.w	r9, #0
 800720e:	d0d9      	beq.n	80071c4 <pbuf_copy_partial+0x24>
 8007210:	2d00      	cmp	r5, #0
 8007212:	d0d7      	beq.n	80071c4 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0e1      	beq.n	80071dc <pbuf_copy_partial+0x3c>
 8007218:	8969      	ldrh	r1, [r5, #10]
 800721a:	4299      	cmp	r1, r3
 800721c:	d8de      	bhi.n	80071dc <pbuf_copy_partial+0x3c>
      offset = (u16_t)(offset - p->len);
 800721e:	1a5b      	subs	r3, r3, r1
 8007220:	b29b      	uxth	r3, r3
 8007222:	e7f1      	b.n	8007208 <pbuf_copy_partial+0x68>
 8007224:	0801a44c 	.word	0x0801a44c
 8007228:	0801a76c 	.word	0x0801a76c
 800722c:	08019f6c 	.word	0x08019f6c
 8007230:	0801a78c 	.word	0x0801a78c

08007234 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007238:	460a      	mov	r2, r1
 800723a:	8921      	ldrh	r1, [r4, #8]
 800723c:	f7ff fdc4 	bl	8006dc8 <pbuf_alloc>
  if (q == NULL) {
 8007240:	4605      	mov	r5, r0
 8007242:	b118      	cbz	r0, 800724c <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8007244:	4621      	mov	r1, r4
 8007246:	f7ff ff1b 	bl	8007080 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800724a:	b908      	cbnz	r0, 8007250 <pbuf_clone+0x1c>
  return q;
}
 800724c:	4628      	mov	r0, r5
 800724e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007250:	4b03      	ldr	r3, [pc, #12]	; (8007260 <pbuf_clone+0x2c>)
 8007252:	f240 5224 	movw	r2, #1316	; 0x524
 8007256:	4903      	ldr	r1, [pc, #12]	; (8007264 <pbuf_clone+0x30>)
 8007258:	4803      	ldr	r0, [pc, #12]	; (8007268 <pbuf_clone+0x34>)
 800725a:	f00b fc3b 	bl	8012ad4 <printf>
 800725e:	e7f5      	b.n	800724c <pbuf_clone+0x18>
 8007260:	0801a44c 	.word	0x0801a44c
 8007264:	0801a898 	.word	0x0801a898
 8007268:	08019f6c 	.word	0x08019f6c

0800726c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007270:	460d      	mov	r5, r1
 8007272:	b949      	cbnz	r1, 8007288 <tcp_remove_listener+0x1c>
 8007274:	4b07      	ldr	r3, [pc, #28]	; (8007294 <tcp_remove_listener+0x28>)
 8007276:	22ff      	movs	r2, #255	; 0xff
 8007278:	4907      	ldr	r1, [pc, #28]	; (8007298 <tcp_remove_listener+0x2c>)
 800727a:	4808      	ldr	r0, [pc, #32]	; (800729c <tcp_remove_listener+0x30>)
 800727c:	f00b fc2a 	bl	8012ad4 <printf>
 8007280:	e002      	b.n	8007288 <tcp_remove_listener+0x1c>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
    if (pcb->listener == lpcb) {
      pcb->listener = NULL;
 8007282:	2300      	movs	r3, #0
 8007284:	67e3      	str	r3, [r4, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007286:	68e4      	ldr	r4, [r4, #12]
 8007288:	b11c      	cbz	r4, 8007292 <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 800728a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800728c:	42ab      	cmp	r3, r5
 800728e:	d1fa      	bne.n	8007286 <tcp_remove_listener+0x1a>
 8007290:	e7f7      	b.n	8007282 <tcp_remove_listener+0x16>
    }
  }
}
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	0801a8ac 	.word	0x0801a8ac
 8007298:	0801a8dc 	.word	0x0801a8dc
 800729c:	08019f6c 	.word	0x08019f6c

080072a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80072a0:	b538      	push	{r3, r4, r5, lr}
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80072a2:	4605      	mov	r5, r0
 80072a4:	b120      	cbz	r0, 80072b0 <tcp_listen_closed+0x10>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80072a6:	7d2b      	ldrb	r3, [r5, #20]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d109      	bne.n	80072c0 <tcp_listen_closed+0x20>
{
 80072ac:	2401      	movs	r4, #1
 80072ae:	e017      	b.n	80072e0 <tcp_listen_closed+0x40>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <tcp_listen_closed+0x48>)
 80072b2:	f240 1211 	movw	r2, #273	; 0x111
 80072b6:	490d      	ldr	r1, [pc, #52]	; (80072ec <tcp_listen_closed+0x4c>)
 80072b8:	480d      	ldr	r0, [pc, #52]	; (80072f0 <tcp_listen_closed+0x50>)
 80072ba:	f00b fc0b 	bl	8012ad4 <printf>
 80072be:	e7f2      	b.n	80072a6 <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <tcp_listen_closed+0x48>)
 80072c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80072c6:	490b      	ldr	r1, [pc, #44]	; (80072f4 <tcp_listen_closed+0x54>)
 80072c8:	4809      	ldr	r0, [pc, #36]	; (80072f0 <tcp_listen_closed+0x50>)
 80072ca:	f00b fc03 	bl	8012ad4 <printf>
 80072ce:	e7ed      	b.n	80072ac <tcp_listen_closed+0xc>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <tcp_listen_closed+0x58>)
 80072d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80072d6:	4629      	mov	r1, r5
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	f7ff ffc7 	bl	800726c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80072de:	3401      	adds	r4, #1
 80072e0:	2c03      	cmp	r4, #3
 80072e2:	d9f5      	bls.n	80072d0 <tcp_listen_closed+0x30>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	bf00      	nop
 80072e8:	0801a8ac 	.word	0x0801a8ac
 80072ec:	0801a904 	.word	0x0801a904
 80072f0:	08019f6c 	.word	0x08019f6c
 80072f4:	0801a910 	.word	0x0801a910
 80072f8:	08019e78 	.word	0x08019e78

080072fc <tcp_free_listen>:
{
 80072fc:	b510      	push	{r4, lr}
 80072fe:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007300:	7d03      	ldrb	r3, [r0, #20]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d004      	beq.n	8007310 <tcp_free_listen+0x14>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007306:	4621      	mov	r1, r4
 8007308:	2002      	movs	r0, #2
 800730a:	f7ff fa55 	bl	80067b8 <memp_free>
}
 800730e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007310:	4b03      	ldr	r3, [pc, #12]	; (8007320 <tcp_free_listen+0x24>)
 8007312:	22df      	movs	r2, #223	; 0xdf
 8007314:	4903      	ldr	r1, [pc, #12]	; (8007324 <tcp_free_listen+0x28>)
 8007316:	4804      	ldr	r0, [pc, #16]	; (8007328 <tcp_free_listen+0x2c>)
 8007318:	f00b fbdc 	bl	8012ad4 <printf>
 800731c:	e7f3      	b.n	8007306 <tcp_free_listen+0xa>
 800731e:	bf00      	nop
 8007320:	0801a8ac 	.word	0x0801a8ac
 8007324:	0801a928 	.word	0x0801a928
 8007328:	08019f6c 	.word	0x08019f6c

0800732c <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800732c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800732e:	4605      	mov	r5, r0
 8007330:	b148      	cbz	r0, 8007346 <tcp_close_shutdown_fin+0x1a>

  switch (pcb->state) {
 8007332:	7d2b      	ldrb	r3, [r5, #20]
 8007334:	2b04      	cmp	r3, #4
 8007336:	d01f      	beq.n	8007378 <tcp_close_shutdown_fin+0x4c>
 8007338:	2b07      	cmp	r3, #7
 800733a:	d026      	beq.n	800738a <tcp_close_shutdown_fin+0x5e>
 800733c:	2b03      	cmp	r3, #3
 800733e:	d00a      	beq.n	8007356 <tcp_close_shutdown_fin+0x2a>
 8007340:	2400      	movs	r4, #0
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8007342:	4620      	mov	r0, r4
 8007344:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007346:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <tcp_close_shutdown_fin+0x78>)
 8007348:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800734c:	4916      	ldr	r1, [pc, #88]	; (80073a8 <tcp_close_shutdown_fin+0x7c>)
 800734e:	4817      	ldr	r0, [pc, #92]	; (80073ac <tcp_close_shutdown_fin+0x80>)
 8007350:	f00b fbc0 	bl	8012ad4 <printf>
 8007354:	e7ed      	b.n	8007332 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8007356:	4628      	mov	r0, r5
 8007358:	f002 ff10 	bl	800a17c <tcp_send_fin>
      if (err == ERR_OK) {
 800735c:	4604      	mov	r4, r0
 800735e:	b908      	cbnz	r0, 8007364 <tcp_close_shutdown_fin+0x38>
        pcb->state = FIN_WAIT_1;
 8007360:	2305      	movs	r3, #5
 8007362:	752b      	strb	r3, [r5, #20]
  if (err == ERR_OK) {
 8007364:	b1d4      	cbz	r4, 800739c <tcp_close_shutdown_fin+0x70>
  } else if (err == ERR_MEM) {
 8007366:	f1b4 3fff 	cmp.w	r4, #4294967295
 800736a:	d1ea      	bne.n	8007342 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800736c:	8b6b      	ldrh	r3, [r5, #26]
 800736e:	f043 0308 	orr.w	r3, r3, #8
 8007372:	836b      	strh	r3, [r5, #26]
    return ERR_OK;
 8007374:	2400      	movs	r4, #0
 8007376:	e7e4      	b.n	8007342 <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 8007378:	4628      	mov	r0, r5
 800737a:	f002 feff 	bl	800a17c <tcp_send_fin>
      if (err == ERR_OK) {
 800737e:	4604      	mov	r4, r0
 8007380:	2800      	cmp	r0, #0
 8007382:	d1ef      	bne.n	8007364 <tcp_close_shutdown_fin+0x38>
        pcb->state = FIN_WAIT_1;
 8007384:	2305      	movs	r3, #5
 8007386:	752b      	strb	r3, [r5, #20]
 8007388:	e7ec      	b.n	8007364 <tcp_close_shutdown_fin+0x38>
      err = tcp_send_fin(pcb);
 800738a:	4628      	mov	r0, r5
 800738c:	f002 fef6 	bl	800a17c <tcp_send_fin>
      if (err == ERR_OK) {
 8007390:	4604      	mov	r4, r0
 8007392:	2800      	cmp	r0, #0
 8007394:	d1e6      	bne.n	8007364 <tcp_close_shutdown_fin+0x38>
        pcb->state = LAST_ACK;
 8007396:	2309      	movs	r3, #9
 8007398:	752b      	strb	r3, [r5, #20]
 800739a:	e7e3      	b.n	8007364 <tcp_close_shutdown_fin+0x38>
    tcp_output(pcb);
 800739c:	4628      	mov	r0, r5
 800739e:	f003 f86b 	bl	800a478 <tcp_output>
 80073a2:	e7ce      	b.n	8007342 <tcp_close_shutdown_fin+0x16>
 80073a4:	0801a8ac 	.word	0x0801a8ac
 80073a8:	0801a904 	.word	0x0801a904
 80073ac:	08019f6c 	.word	0x08019f6c

080073b0 <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80073b0:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <tcp_handle_closepend+0x28>)
 80073b2:	6818      	ldr	r0, [r3, #0]

  while (pcb != NULL) {
 80073b4:	b178      	cbz	r0, 80073d6 <tcp_handle_closepend+0x26>
{
 80073b6:	b510      	push	{r4, lr}
 80073b8:	e006      	b.n	80073c8 <tcp_handle_closepend+0x18>
    struct tcp_pcb *next = pcb->next;
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80073ba:	f023 0308 	bic.w	r3, r3, #8
 80073be:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 80073c0:	f7ff ffb4 	bl	800732c <tcp_close_shutdown_fin>
{
 80073c4:	4620      	mov	r0, r4
  while (pcb != NULL) {
 80073c6:	b12c      	cbz	r4, 80073d4 <tcp_handle_closepend+0x24>
    struct tcp_pcb *next = pcb->next;
 80073c8:	68c4      	ldr	r4, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80073ca:	8b43      	ldrh	r3, [r0, #26]
 80073cc:	f013 0f08 	tst.w	r3, #8
 80073d0:	d0f8      	beq.n	80073c4 <tcp_handle_closepend+0x14>
 80073d2:	e7f2      	b.n	80073ba <tcp_handle_closepend+0xa>
    }
    pcb = next;
  }
}
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	4770      	bx	lr
 80073d8:	200073c8 	.word	0x200073c8

080073dc <tcp_init>:
{
 80073dc:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80073de:	f00b fb8b 	bl	8012af8 <rand>
 80073e2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80073e6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 80073ea:	4b01      	ldr	r3, [pc, #4]	; (80073f0 <tcp_init+0x14>)
 80073ec:	8018      	strh	r0, [r3, #0]
}
 80073ee:	bd08      	pop	{r3, pc}
 80073f0:	20000008 	.word	0x20000008

080073f4 <tcp_free>:
{
 80073f4:	b510      	push	{r4, lr}
 80073f6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80073f8:	7d03      	ldrb	r3, [r0, #20]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d004      	beq.n	8007408 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 80073fe:	4621      	mov	r1, r4
 8007400:	2001      	movs	r0, #1
 8007402:	f7ff f9d9 	bl	80067b8 <memp_free>
}
 8007406:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007408:	4b03      	ldr	r3, [pc, #12]	; (8007418 <tcp_free+0x24>)
 800740a:	22d4      	movs	r2, #212	; 0xd4
 800740c:	4903      	ldr	r1, [pc, #12]	; (800741c <tcp_free+0x28>)
 800740e:	4804      	ldr	r0, [pc, #16]	; (8007420 <tcp_free+0x2c>)
 8007410:	f00b fb60 	bl	8012ad4 <printf>
 8007414:	e7f3      	b.n	80073fe <tcp_free+0xa>
 8007416:	bf00      	nop
 8007418:	0801a8ac 	.word	0x0801a8ac
 800741c:	0801a944 	.word	0x0801a944
 8007420:	08019f6c 	.word	0x08019f6c

08007424 <tcp_update_rcv_ann_wnd>:
{
 8007424:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007426:	4604      	mov	r4, r0
 8007428:	b180      	cbz	r0, 800744c <tcp_update_rcv_ann_wnd+0x28>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800742a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800742c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800742e:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007430:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007432:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007434:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007438:	bf94      	ite	ls
 800743a:	18d3      	addls	r3, r2, r3
 800743c:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 8007440:	1ac3      	subs	r3, r0, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	db0a      	blt.n	800745c <tcp_update_rcv_ann_wnd+0x38>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007446:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007448:	1a80      	subs	r0, r0, r2
}
 800744a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800744c:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <tcp_update_rcv_ann_wnd+0x64>)
 800744e:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007452:	490e      	ldr	r1, [pc, #56]	; (800748c <tcp_update_rcv_ann_wnd+0x68>)
 8007454:	480e      	ldr	r0, [pc, #56]	; (8007490 <tcp_update_rcv_ann_wnd+0x6c>)
 8007456:	f00b fb3d 	bl	8012ad4 <printf>
 800745a:	e7e6      	b.n	800742a <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800745c:	1aab      	subs	r3, r5, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd03      	ble.n	800746a <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	8563      	strh	r3, [r4, #42]	; 0x2a
    return 0;
 8007466:	2000      	movs	r0, #0
 8007468:	e7ef      	b.n	800744a <tcp_update_rcv_ann_wnd+0x26>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800746a:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800746c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007470:	d201      	bcs.n	8007476 <tcp_update_rcv_ann_wnd+0x52>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007472:	8565      	strh	r5, [r4, #42]	; 0x2a
 8007474:	e7f7      	b.n	8007466 <tcp_update_rcv_ann_wnd+0x42>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007476:	4b04      	ldr	r3, [pc, #16]	; (8007488 <tcp_update_rcv_ann_wnd+0x64>)
 8007478:	f240 32b6 	movw	r2, #950	; 0x3b6
 800747c:	4905      	ldr	r1, [pc, #20]	; (8007494 <tcp_update_rcv_ann_wnd+0x70>)
 800747e:	4804      	ldr	r0, [pc, #16]	; (8007490 <tcp_update_rcv_ann_wnd+0x6c>)
 8007480:	f00b fb28 	bl	8012ad4 <printf>
 8007484:	e7f5      	b.n	8007472 <tcp_update_rcv_ann_wnd+0x4e>
 8007486:	bf00      	nop
 8007488:	0801a8ac 	.word	0x0801a8ac
 800748c:	0801aa00 	.word	0x0801aa00
 8007490:	08019f6c 	.word	0x08019f6c
 8007494:	0801aa24 	.word	0x0801aa24

08007498 <tcp_recved>:
{
 8007498:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800749a:	b1b0      	cbz	r0, 80074ca <tcp_recved+0x32>
 800749c:	460c      	mov	r4, r1
 800749e:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80074a0:	7d03      	ldrb	r3, [r0, #20]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d019      	beq.n	80074da <tcp_recved+0x42>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80074a6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80074a8:	1919      	adds	r1, r3, r4
 80074aa:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80074ac:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 80074b0:	d801      	bhi.n	80074b6 <tcp_recved+0x1e>
 80074b2:	428b      	cmp	r3, r1
 80074b4:	d919      	bls.n	80074ea <tcp_recved+0x52>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80074b6:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80074ba:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80074bc:	4628      	mov	r0, r5
 80074be:	f7ff ffb1 	bl	8007424 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80074c2:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80074c6:	d212      	bcs.n	80074ee <tcp_recved+0x56>
}
 80074c8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80074ca:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <tcp_recved+0x68>)
 80074cc:	f240 32cf 	movw	r2, #975	; 0x3cf
 80074d0:	490c      	ldr	r1, [pc, #48]	; (8007504 <tcp_recved+0x6c>)
 80074d2:	480d      	ldr	r0, [pc, #52]	; (8007508 <tcp_recved+0x70>)
 80074d4:	f00b fafe 	bl	8012ad4 <printf>
 80074d8:	e7f6      	b.n	80074c8 <tcp_recved+0x30>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <tcp_recved+0x68>)
 80074dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80074e0:	490a      	ldr	r1, [pc, #40]	; (800750c <tcp_recved+0x74>)
 80074e2:	4809      	ldr	r0, [pc, #36]	; (8007508 <tcp_recved+0x70>)
 80074e4:	f00b faf6 	bl	8012ad4 <printf>
 80074e8:	e7dd      	b.n	80074a6 <tcp_recved+0xe>
    pcb->rcv_wnd = rcv_wnd;
 80074ea:	8529      	strh	r1, [r5, #40]	; 0x28
 80074ec:	e7e6      	b.n	80074bc <tcp_recved+0x24>
    tcp_ack_now(pcb);
 80074ee:	8b6b      	ldrh	r3, [r5, #26]
 80074f0:	f043 0302 	orr.w	r3, r3, #2
 80074f4:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 80074f6:	4628      	mov	r0, r5
 80074f8:	f002 ffbe 	bl	800a478 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 80074fc:	e7e4      	b.n	80074c8 <tcp_recved+0x30>
 80074fe:	bf00      	nop
 8007500:	0801a8ac 	.word	0x0801a8ac
 8007504:	0801aa40 	.word	0x0801aa40
 8007508:	08019f6c 	.word	0x08019f6c
 800750c:	0801aa58 	.word	0x0801aa58

08007510 <tcp_seg_free>:
  if (seg != NULL) {
 8007510:	b150      	cbz	r0, 8007528 <tcp_seg_free+0x18>
{
 8007512:	b510      	push	{r4, lr}
 8007514:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8007516:	6840      	ldr	r0, [r0, #4]
 8007518:	b108      	cbz	r0, 800751e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800751a:	f7ff fbf3 	bl	8006d04 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800751e:	4621      	mov	r1, r4
 8007520:	2003      	movs	r0, #3
 8007522:	f7ff f949 	bl	80067b8 <memp_free>
}
 8007526:	bd10      	pop	{r4, pc}
 8007528:	4770      	bx	lr

0800752a <tcp_segs_free>:
  while (seg != NULL) {
 800752a:	b138      	cbz	r0, 800753c <tcp_segs_free+0x12>
{
 800752c:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 800752e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007530:	f7ff ffee 	bl	8007510 <tcp_seg_free>
    seg = next;
 8007534:	4620      	mov	r0, r4
  while (seg != NULL) {
 8007536:	2c00      	cmp	r4, #0
 8007538:	d1f9      	bne.n	800752e <tcp_segs_free+0x4>
}
 800753a:	bd10      	pop	{r4, pc}
 800753c:	4770      	bx	lr
	...

08007540 <tcp_seg_copy>:
{
 8007540:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007542:	4605      	mov	r5, r0
 8007544:	b188      	cbz	r0, 800756a <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007546:	2003      	movs	r0, #3
 8007548:	f7ff f91c 	bl	8006784 <memp_malloc>
  if (cseg == NULL) {
 800754c:	4604      	mov	r4, r0
 800754e:	b150      	cbz	r0, 8007566 <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007550:	6828      	ldr	r0, [r5, #0]
 8007552:	6869      	ldr	r1, [r5, #4]
 8007554:	68aa      	ldr	r2, [r5, #8]
 8007556:	68eb      	ldr	r3, [r5, #12]
 8007558:	6020      	str	r0, [r4, #0]
 800755a:	6061      	str	r1, [r4, #4]
 800755c:	60a2      	str	r2, [r4, #8]
 800755e:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8007560:	6860      	ldr	r0, [r4, #4]
 8007562:	f7ff fd3b 	bl	8006fdc <pbuf_ref>
}
 8007566:	4620      	mov	r0, r4
 8007568:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800756a:	4b04      	ldr	r3, [pc, #16]	; (800757c <tcp_seg_copy+0x3c>)
 800756c:	f240 6282 	movw	r2, #1666	; 0x682
 8007570:	4903      	ldr	r1, [pc, #12]	; (8007580 <tcp_seg_copy+0x40>)
 8007572:	4804      	ldr	r0, [pc, #16]	; (8007584 <tcp_seg_copy+0x44>)
 8007574:	f00b faae 	bl	8012ad4 <printf>
 8007578:	e7e5      	b.n	8007546 <tcp_seg_copy+0x6>
 800757a:	bf00      	nop
 800757c:	0801a8ac 	.word	0x0801a8ac
 8007580:	0801aa9c 	.word	0x0801aa9c
 8007584:	08019f6c 	.word	0x08019f6c

08007588 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007588:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800758a:	b130      	cbz	r0, 800759a <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800758c:	4b07      	ldr	r3, [pc, #28]	; (80075ac <tcp_next_iss+0x24>)
 800758e:	6858      	ldr	r0, [r3, #4]
 8007590:	4a07      	ldr	r2, [pc, #28]	; (80075b0 <tcp_next_iss+0x28>)
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	4410      	add	r0, r2
 8007596:	6058      	str	r0, [r3, #4]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007598:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <tcp_next_iss+0x2c>)
 800759c:	f640 02af 	movw	r2, #2223	; 0x8af
 80075a0:	4905      	ldr	r1, [pc, #20]	; (80075b8 <tcp_next_iss+0x30>)
 80075a2:	4806      	ldr	r0, [pc, #24]	; (80075bc <tcp_next_iss+0x34>)
 80075a4:	f00b fa96 	bl	8012ad4 <printf>
 80075a8:	e7f0      	b.n	800758c <tcp_next_iss+0x4>
 80075aa:	bf00      	nop
 80075ac:	20000008 	.word	0x20000008
 80075b0:	200073cc 	.word	0x200073cc
 80075b4:	0801a8ac 	.word	0x0801a8ac
 80075b8:	0801ab68 	.word	0x0801ab68
 80075bc:	08019f6c 	.word	0x08019f6c

080075c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4605      	mov	r5, r0
 80075c4:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80075c6:	b15a      	cbz	r2, 80075e0 <tcp_eff_send_mss_netif+0x20>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80075c8:	b144      	cbz	r4, 80075dc <tcp_eff_send_mss_netif+0x1c>
      return sendmss;
    }
    mtu = outif->mtu;
 80075ca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80075cc:	b133      	cbz	r3, 80075dc <tcp_eff_send_mss_netif+0x1c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80075ce:	2b28      	cmp	r3, #40	; 0x28
 80075d0:	d90e      	bls.n	80075f0 <tcp_eff_send_mss_netif+0x30>
 80075d2:	3b28      	subs	r3, #40	; 0x28
 80075d4:	b29b      	uxth	r3, r3
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80075d6:	429d      	cmp	r5, r3
 80075d8:	bf28      	it	cs
 80075da:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 80075dc:	4628      	mov	r0, r5
 80075de:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <tcp_eff_send_mss_netif+0x34>)
 80075e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80075e6:	4904      	ldr	r1, [pc, #16]	; (80075f8 <tcp_eff_send_mss_netif+0x38>)
 80075e8:	4804      	ldr	r0, [pc, #16]	; (80075fc <tcp_eff_send_mss_netif+0x3c>)
 80075ea:	f00b fa73 	bl	8012ad4 <printf>
 80075ee:	e7eb      	b.n	80075c8 <tcp_eff_send_mss_netif+0x8>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e7f0      	b.n	80075d6 <tcp_eff_send_mss_netif+0x16>
 80075f4:	0801a8ac 	.word	0x0801a8ac
 80075f8:	0801ab84 	.word	0x0801ab84
 80075fc:	08019f6c 	.word	0x08019f6c

08007600 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007600:	b510      	push	{r4, lr}
 8007602:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8007604:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007606:	b118      	cbz	r0, 8007610 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8007608:	f7ff ff8f 	bl	800752a <tcp_segs_free>
    pcb->ooseq = NULL;
 800760c:	2300      	movs	r3, #0
 800760e:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007610:	bd10      	pop	{r4, pc}
	...

08007614 <tcp_pcb_purge>:
{
 8007614:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007616:	b300      	cbz	r0, 800765a <tcp_pcb_purge+0x46>
 8007618:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800761a:	7d03      	ldrb	r3, [r0, #20]
 800761c:	b1e3      	cbz	r3, 8007658 <tcp_pcb_purge+0x44>
 800761e:	2b0a      	cmp	r3, #10
 8007620:	d01a      	beq.n	8007658 <tcp_pcb_purge+0x44>
      pcb->state != TIME_WAIT &&
 8007622:	2b01      	cmp	r3, #1
 8007624:	d018      	beq.n	8007658 <tcp_pcb_purge+0x44>
    if (pcb->refused_data != NULL) {
 8007626:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8007628:	b118      	cbz	r0, 8007632 <tcp_pcb_purge+0x1e>
      pbuf_free(pcb->refused_data);
 800762a:	f7ff fb6b 	bl	8006d04 <pbuf_free>
      pcb->refused_data = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8007632:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007634:	b113      	cbz	r3, 800763c <tcp_pcb_purge+0x28>
      tcp_free_ooseq(pcb);
 8007636:	4620      	mov	r0, r4
 8007638:	f7ff ffe2 	bl	8007600 <tcp_free_ooseq>
    pcb->rtime = -1;
 800763c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007640:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8007642:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007644:	f7ff ff71 	bl	800752a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007648:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800764a:	f7ff ff6e 	bl	800752a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007652:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8007654:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8007658:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800765a:	4b04      	ldr	r3, [pc, #16]	; (800766c <tcp_pcb_purge+0x58>)
 800765c:	f640 0251 	movw	r2, #2129	; 0x851
 8007660:	4903      	ldr	r1, [pc, #12]	; (8007670 <tcp_pcb_purge+0x5c>)
 8007662:	4804      	ldr	r0, [pc, #16]	; (8007674 <tcp_pcb_purge+0x60>)
 8007664:	f00b fa36 	bl	8012ad4 <printf>
 8007668:	e7f6      	b.n	8007658 <tcp_pcb_purge+0x44>
 800766a:	bf00      	nop
 800766c:	0801a8ac 	.word	0x0801a8ac
 8007670:	0801ac14 	.word	0x0801ac14
 8007674:	08019f6c 	.word	0x08019f6c

08007678 <tcp_pcb_remove>:
{
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800767c:	460c      	mov	r4, r1
 800767e:	b149      	cbz	r1, 8007694 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007680:	b185      	cbz	r5, 80076a4 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	42a3      	cmp	r3, r4
 8007686:	d015      	beq.n	80076b4 <tcp_pcb_remove+0x3c>
 8007688:	b1cb      	cbz	r3, 80076be <tcp_pcb_remove+0x46>
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	42a2      	cmp	r2, r4
 800768e:	d014      	beq.n	80076ba <tcp_pcb_remove+0x42>
 8007690:	4613      	mov	r3, r2
 8007692:	e7f9      	b.n	8007688 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <tcp_pcb_remove+0xb4>)
 8007696:	f640 0283 	movw	r2, #2179	; 0x883
 800769a:	4925      	ldr	r1, [pc, #148]	; (8007730 <tcp_pcb_remove+0xb8>)
 800769c:	4825      	ldr	r0, [pc, #148]	; (8007734 <tcp_pcb_remove+0xbc>)
 800769e:	f00b fa19 	bl	8012ad4 <printf>
 80076a2:	e7ed      	b.n	8007680 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80076a4:	4b21      	ldr	r3, [pc, #132]	; (800772c <tcp_pcb_remove+0xb4>)
 80076a6:	f640 0284 	movw	r2, #2180	; 0x884
 80076aa:	4923      	ldr	r1, [pc, #140]	; (8007738 <tcp_pcb_remove+0xc0>)
 80076ac:	4821      	ldr	r0, [pc, #132]	; (8007734 <tcp_pcb_remove+0xbc>)
 80076ae:	f00b fa11 	bl	8012ad4 <printf>
 80076b2:	e7e6      	b.n	8007682 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	e001      	b.n	80076be <tcp_pcb_remove+0x46>
 80076ba:	68e2      	ldr	r2, [r4, #12]
 80076bc:	60da      	str	r2, [r3, #12]
 80076be:	2300      	movs	r3, #0
 80076c0:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff ffa6 	bl	8007614 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 80076c8:	7d23      	ldrb	r3, [r4, #20]
 80076ca:	2b0a      	cmp	r3, #10
 80076cc:	d005      	beq.n	80076da <tcp_pcb_remove+0x62>
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d003      	beq.n	80076da <tcp_pcb_remove+0x62>
      (pcb->flags & TF_ACK_DELAY)) {
 80076d2:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 80076d4:	f013 0f01 	tst.w	r3, #1
 80076d8:	d121      	bne.n	800771e <tcp_pcb_remove+0xa6>
  if (pcb->state != LISTEN) {
 80076da:	7d23      	ldrb	r3, [r4, #20]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d01a      	beq.n	8007716 <tcp_pcb_remove+0x9e>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80076e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80076e2:	b133      	cbz	r3, 80076f2 <tcp_pcb_remove+0x7a>
 80076e4:	4b11      	ldr	r3, [pc, #68]	; (800772c <tcp_pcb_remove+0xb4>)
 80076e6:	f640 0293 	movw	r2, #2195	; 0x893
 80076ea:	4914      	ldr	r1, [pc, #80]	; (800773c <tcp_pcb_remove+0xc4>)
 80076ec:	4811      	ldr	r0, [pc, #68]	; (8007734 <tcp_pcb_remove+0xbc>)
 80076ee:	f00b f9f1 	bl	8012ad4 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80076f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80076f4:	b133      	cbz	r3, 8007704 <tcp_pcb_remove+0x8c>
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <tcp_pcb_remove+0xb4>)
 80076f8:	f640 0294 	movw	r2, #2196	; 0x894
 80076fc:	4910      	ldr	r1, [pc, #64]	; (8007740 <tcp_pcb_remove+0xc8>)
 80076fe:	480d      	ldr	r0, [pc, #52]	; (8007734 <tcp_pcb_remove+0xbc>)
 8007700:	f00b f9e8 	bl	8012ad4 <printf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007704:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007706:	b133      	cbz	r3, 8007716 <tcp_pcb_remove+0x9e>
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <tcp_pcb_remove+0xb4>)
 800770a:	f640 0296 	movw	r2, #2198	; 0x896
 800770e:	490d      	ldr	r1, [pc, #52]	; (8007744 <tcp_pcb_remove+0xcc>)
 8007710:	4808      	ldr	r0, [pc, #32]	; (8007734 <tcp_pcb_remove+0xbc>)
 8007712:	f00b f9df 	bl	8012ad4 <printf>
  pcb->state = CLOSED;
 8007716:	2300      	movs	r3, #0
 8007718:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800771a:	82e3      	strh	r3, [r4, #22]
}
 800771c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 800771e:	f043 0302 	orr.w	r3, r3, #2
 8007722:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8007724:	4620      	mov	r0, r4
 8007726:	f002 fea7 	bl	800a478 <tcp_output>
 800772a:	e7d6      	b.n	80076da <tcp_pcb_remove+0x62>
 800772c:	0801a8ac 	.word	0x0801a8ac
 8007730:	0801ac30 	.word	0x0801ac30
 8007734:	08019f6c 	.word	0x08019f6c
 8007738:	0801ac4c 	.word	0x0801ac4c
 800773c:	0801ac6c 	.word	0x0801ac6c
 8007740:	0801ac84 	.word	0x0801ac84
 8007744:	0801aca0 	.word	0x0801aca0

08007748 <tcp_abandon>:
{
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800774e:	b1f8      	cbz	r0, 8007790 <tcp_abandon+0x48>
 8007750:	460d      	mov	r5, r1
 8007752:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007754:	7d03      	ldrb	r3, [r0, #20]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d022      	beq.n	80077a0 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 800775a:	7d23      	ldrb	r3, [r4, #20]
 800775c:	2b0a      	cmp	r3, #10
 800775e:	d027      	beq.n	80077b0 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 8007760:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8007764:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8007768:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800776c:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 800776e:	2b00      	cmp	r3, #0
 8007770:	d147      	bne.n	8007802 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 8007772:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8007776:	f1ba 0f00 	cmp.w	sl, #0
 800777a:	d04c      	beq.n	8007816 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800777c:	4b2d      	ldr	r3, [pc, #180]	; (8007834 <tcp_abandon+0xec>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	42a3      	cmp	r3, r4
 8007782:	d01d      	beq.n	80077c0 <tcp_abandon+0x78>
 8007784:	b313      	cbz	r3, 80077cc <tcp_abandon+0x84>
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	42a2      	cmp	r2, r4
 800778a:	d01d      	beq.n	80077c8 <tcp_abandon+0x80>
 800778c:	4613      	mov	r3, r2
 800778e:	e7f9      	b.n	8007784 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007790:	4b29      	ldr	r3, [pc, #164]	; (8007838 <tcp_abandon+0xf0>)
 8007792:	f240 223d 	movw	r2, #573	; 0x23d
 8007796:	4929      	ldr	r1, [pc, #164]	; (800783c <tcp_abandon+0xf4>)
 8007798:	4829      	ldr	r0, [pc, #164]	; (8007840 <tcp_abandon+0xf8>)
 800779a:	f00b f99b 	bl	8012ad4 <printf>
 800779e:	e02d      	b.n	80077fc <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80077a0:	4b25      	ldr	r3, [pc, #148]	; (8007838 <tcp_abandon+0xf0>)
 80077a2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80077a6:	4927      	ldr	r1, [pc, #156]	; (8007844 <tcp_abandon+0xfc>)
 80077a8:	4825      	ldr	r0, [pc, #148]	; (8007840 <tcp_abandon+0xf8>)
 80077aa:	f00b f993 	bl	8012ad4 <printf>
 80077ae:	e7d4      	b.n	800775a <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80077b0:	4621      	mov	r1, r4
 80077b2:	4825      	ldr	r0, [pc, #148]	; (8007848 <tcp_abandon+0x100>)
 80077b4:	f7ff ff60 	bl	8007678 <tcp_pcb_remove>
    tcp_free(pcb);
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7ff fe1b 	bl	80073f4 <tcp_free>
 80077be:	e01d      	b.n	80077fc <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <tcp_abandon+0xec>)
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e001      	b.n	80077cc <tcp_abandon+0x84>
 80077c8:	68e2      	ldr	r2, [r4, #12]
 80077ca:	60da      	str	r2, [r3, #12]
 80077cc:	2500      	movs	r5, #0
 80077ce:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 80077d0:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80077d2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80077d4:	b108      	cbz	r0, 80077da <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 80077d6:	f7ff fea8 	bl	800752a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80077da:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80077dc:	b108      	cbz	r0, 80077e2 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 80077de:	f7ff fea4 	bl	800752a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80077e2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80077e4:	b108      	cbz	r0, 80077ea <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 80077e6:	f7ff fea0 	bl	800752a <tcp_segs_free>
    if (send_rst) {
 80077ea:	b9b5      	cbnz	r5, 800781a <tcp_abandon+0xd2>
    tcp_free(pcb);
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff fe01 	bl	80073f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80077f2:	b11e      	cbz	r6, 80077fc <tcp_abandon+0xb4>
 80077f4:	f06f 010c 	mvn.w	r1, #12
 80077f8:	4638      	mov	r0, r7
 80077fa:	47b0      	blx	r6
}
 80077fc:	b004      	add	sp, #16
 80077fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8007802:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007806:	4621      	mov	r1, r4
 8007808:	4810      	ldr	r0, [pc, #64]	; (800784c <tcp_abandon+0x104>)
 800780a:	f7ff ff35 	bl	8007678 <tcp_pcb_remove>
 800780e:	4b10      	ldr	r3, [pc, #64]	; (8007850 <tcp_abandon+0x108>)
 8007810:	2201      	movs	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e7dd      	b.n	80077d2 <tcp_abandon+0x8a>
    int send_rst = 0;
 8007816:	2500      	movs	r5, #0
 8007818:	e7db      	b.n	80077d2 <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800781a:	1d23      	adds	r3, r4, #4
 800781c:	8b22      	ldrh	r2, [r4, #24]
 800781e:	9202      	str	r2, [sp, #8]
 8007820:	f8cd a004 	str.w	sl, [sp, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4623      	mov	r3, r4
 8007828:	464a      	mov	r2, r9
 800782a:	4641      	mov	r1, r8
 800782c:	4620      	mov	r0, r4
 800782e:	f002 fda1 	bl	800a374 <tcp_rst>
 8007832:	e7db      	b.n	80077ec <tcp_abandon+0xa4>
 8007834:	200073d4 	.word	0x200073d4
 8007838:	0801a8ac 	.word	0x0801a8ac
 800783c:	0801acb8 	.word	0x0801acb8
 8007840:	08019f6c 	.word	0x08019f6c
 8007844:	0801acd4 	.word	0x0801acd4
 8007848:	200073d8 	.word	0x200073d8
 800784c:	200073c8 	.word	0x200073c8
 8007850:	200073c4 	.word	0x200073c4

08007854 <tcp_abort>:
{
 8007854:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8007856:	2101      	movs	r1, #1
 8007858:	f7ff ff76 	bl	8007748 <tcp_abandon>
}
 800785c:	bd08      	pop	{r3, pc}
	...

08007860 <tcp_kill_timewait>:
{
 8007860:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <tcp_kill_timewait+0x2c>)
 8007864:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007866:	2400      	movs	r4, #0
  inactive = NULL;
 8007868:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800786a:	e000      	b.n	800786e <tcp_kill_timewait+0xe>
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	b143      	cbz	r3, 8007882 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007870:	6a19      	ldr	r1, [r3, #32]
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <tcp_kill_timewait+0x30>)
 8007874:	6812      	ldr	r2, [r2, #0]
 8007876:	1a52      	subs	r2, r2, r1
 8007878:	42a2      	cmp	r2, r4
 800787a:	d3f7      	bcc.n	800786c <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 800787c:	4614      	mov	r4, r2
      inactive = pcb;
 800787e:	4618      	mov	r0, r3
 8007880:	e7f4      	b.n	800786c <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8007882:	b108      	cbz	r0, 8007888 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8007884:	f7ff ffe6 	bl	8007854 <tcp_abort>
}
 8007888:	bd10      	pop	{r4, pc}
 800788a:	bf00      	nop
 800788c:	200073d8 	.word	0x200073d8
 8007890:	200073cc 	.word	0x200073cc

08007894 <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007894:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007898:	d101      	bne.n	800789e <tcp_kill_prio+0xa>
  if (mprio == 0) {
 800789a:	b908      	cbnz	r0, 80078a0 <tcp_kill_prio+0xc>
 800789c:	4770      	bx	lr
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800789e:	207f      	movs	r0, #127	; 0x7f
{
 80078a0:	b570      	push	{r4, r5, r6, lr}
  mprio--;
 80078a2:	3801      	subs	r0, #1
 80078a4:	b2c2      	uxtb	r2, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078a6:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <tcp_kill_prio+0x4c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80078aa:	2400      	movs	r4, #0
  inactive = NULL;
 80078ac:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078ae:	e006      	b.n	80078be <tcp_kill_prio+0x2a>
      inactivity = tcp_ticks - pcb->tmr;
 80078b0:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <tcp_kill_prio+0x50>)
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	6a1c      	ldr	r4, [r3, #32]
 80078b6:	1b14      	subs	r4, r2, r4
      mprio      = pcb->prio;
 80078b8:	460a      	mov	r2, r1
      inactive   = pcb;
 80078ba:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	b153      	cbz	r3, 80078d6 <tcp_kill_prio+0x42>
    if ((pcb->prio < mprio) ||
 80078c0:	7d59      	ldrb	r1, [r3, #21]
 80078c2:	4291      	cmp	r1, r2
 80078c4:	d3f4      	bcc.n	80078b0 <tcp_kill_prio+0x1c>
 80078c6:	d1f9      	bne.n	80078bc <tcp_kill_prio+0x28>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80078c8:	6a1e      	ldr	r6, [r3, #32]
 80078ca:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <tcp_kill_prio+0x50>)
 80078cc:	682d      	ldr	r5, [r5, #0]
 80078ce:	1bad      	subs	r5, r5, r6
 80078d0:	42a5      	cmp	r5, r4
 80078d2:	d3f3      	bcc.n	80078bc <tcp_kill_prio+0x28>
 80078d4:	e7ec      	b.n	80078b0 <tcp_kill_prio+0x1c>
  if (inactive != NULL) {
 80078d6:	b108      	cbz	r0, 80078dc <tcp_kill_prio+0x48>
    tcp_abort(inactive);
 80078d8:	f7ff ffbc 	bl	8007854 <tcp_abort>
}
 80078dc:	bd70      	pop	{r4, r5, r6, pc}
 80078de:	bf00      	nop
 80078e0:	200073c8 	.word	0x200073c8
 80078e4:	200073cc 	.word	0x200073cc

080078e8 <tcp_netif_ip_addr_changed_pcblist>:
{
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80078ec:	4605      	mov	r5, r0
 80078ee:	b960      	cbnz	r0, 800790a <tcp_netif_ip_addr_changed_pcblist+0x22>
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <tcp_netif_ip_addr_changed_pcblist+0x34>)
 80078f2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80078f6:	490a      	ldr	r1, [pc, #40]	; (8007920 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 80078f8:	480a      	ldr	r0, [pc, #40]	; (8007924 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 80078fa:	f00b f8eb 	bl	8012ad4 <printf>
 80078fe:	e004      	b.n	800790a <tcp_netif_ip_addr_changed_pcblist+0x22>
      struct tcp_pcb *next = pcb->next;
 8007900:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 8007902:	4620      	mov	r0, r4
 8007904:	f7ff ffa6 	bl	8007854 <tcp_abort>
      pcb = next;
 8007908:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800790a:	b12c      	cbz	r4, 8007918 <tcp_netif_ip_addr_changed_pcblist+0x30>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800790c:	6822      	ldr	r2, [r4, #0]
 800790e:	682b      	ldr	r3, [r5, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d0f5      	beq.n	8007900 <tcp_netif_ip_addr_changed_pcblist+0x18>
      pcb = pcb->next;
 8007914:	68e4      	ldr	r4, [r4, #12]
 8007916:	e7f8      	b.n	800790a <tcp_netif_ip_addr_changed_pcblist+0x22>
}
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	bf00      	nop
 800791c:	0801a8ac 	.word	0x0801a8ac
 8007920:	0801ad28 	.word	0x0801ad28
 8007924:	08019f6c 	.word	0x08019f6c

08007928 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8007928:	b300      	cbz	r0, 800796c <tcp_netif_ip_addr_changed+0x44>
{
 800792a:	b538      	push	{r3, r4, r5, lr}
 800792c:	460d      	mov	r5, r1
 800792e:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8007930:	6803      	ldr	r3, [r0, #0]
 8007932:	b903      	cbnz	r3, 8007936 <tcp_netif_ip_addr_changed+0xe>
}
 8007934:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007936:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <tcp_netif_ip_addr_changed+0x48>)
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	f7ff ffd5 	bl	80078e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800793e:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <tcp_netif_ip_addr_changed+0x4c>)
 8007940:	6819      	ldr	r1, [r3, #0]
 8007942:	4620      	mov	r0, r4
 8007944:	f7ff ffd0 	bl	80078e8 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8007948:	2d00      	cmp	r5, #0
 800794a:	d0f3      	beq.n	8007934 <tcp_netif_ip_addr_changed+0xc>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f0      	beq.n	8007934 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007952:	4b09      	ldr	r3, [pc, #36]	; (8007978 <tcp_netif_ip_addr_changed+0x50>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	e000      	b.n	800795a <tcp_netif_ip_addr_changed+0x32>
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ea      	beq.n	8007934 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800795e:	6819      	ldr	r1, [r3, #0]
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	4291      	cmp	r1, r2
 8007964:	d1f8      	bne.n	8007958 <tcp_netif_ip_addr_changed+0x30>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007966:	682a      	ldr	r2, [r5, #0]
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	e7f5      	b.n	8007958 <tcp_netif_ip_addr_changed+0x30>
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	200073c8 	.word	0x200073c8
 8007974:	200073d4 	.word	0x200073d4
 8007978:	200073d0 	.word	0x200073d0

0800797c <tcp_kill_state>:
{
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007980:	f1a0 0308 	sub.w	r3, r0, #8
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d804      	bhi.n	8007994 <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800798a:	4b10      	ldr	r3, [pc, #64]	; (80079cc <tcp_kill_state+0x50>)
 800798c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800798e:	2100      	movs	r1, #0
  inactive = NULL;
 8007990:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007992:	e008      	b.n	80079a6 <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007994:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <tcp_kill_state+0x54>)
 8007996:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800799a:	490e      	ldr	r1, [pc, #56]	; (80079d4 <tcp_kill_state+0x58>)
 800799c:	480e      	ldr	r0, [pc, #56]	; (80079d8 <tcp_kill_state+0x5c>)
 800799e:	f00b f899 	bl	8012ad4 <printf>
 80079a2:	e7f2      	b.n	800798a <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	b15b      	cbz	r3, 80079c0 <tcp_kill_state+0x44>
    if (pcb->state == state) {
 80079a8:	7d1a      	ldrb	r2, [r3, #20]
 80079aa:	42a2      	cmp	r2, r4
 80079ac:	d1fa      	bne.n	80079a4 <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80079ae:	6a1d      	ldr	r5, [r3, #32]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <tcp_kill_state+0x60>)
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	1b52      	subs	r2, r2, r5
 80079b6:	428a      	cmp	r2, r1
 80079b8:	d3f4      	bcc.n	80079a4 <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 80079ba:	4611      	mov	r1, r2
        inactive = pcb;
 80079bc:	4618      	mov	r0, r3
 80079be:	e7f1      	b.n	80079a4 <tcp_kill_state+0x28>
  if (inactive != NULL) {
 80079c0:	b110      	cbz	r0, 80079c8 <tcp_kill_state+0x4c>
    tcp_abandon(inactive, 0);
 80079c2:	2100      	movs	r1, #0
 80079c4:	f7ff fec0 	bl	8007748 <tcp_abandon>
}
 80079c8:	bd38      	pop	{r3, r4, r5, pc}
 80079ca:	bf00      	nop
 80079cc:	200073c8 	.word	0x200073c8
 80079d0:	0801a8ac 	.word	0x0801a8ac
 80079d4:	0801ad5c 	.word	0x0801ad5c
 80079d8:	08019f6c 	.word	0x08019f6c
 80079dc:	200073cc 	.word	0x200073cc

080079e0 <tcp_alloc>:
{
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80079e4:	2001      	movs	r0, #1
 80079e6:	f7fe fecd 	bl	8006784 <memp_malloc>
  if (pcb == NULL) {
 80079ea:	4604      	mov	r4, r0
 80079ec:	b368      	cbz	r0, 8007a4a <tcp_alloc+0x6a>
  if (pcb != NULL) {
 80079ee:	b354      	cbz	r4, 8007a46 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80079f0:	229c      	movs	r2, #156	; 0x9c
 80079f2:	2100      	movs	r1, #0
 80079f4:	4620      	mov	r0, r4
 80079f6:	f00b f859 	bl	8012aac <memset>
    pcb->prio = prio;
 80079fa:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80079fc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8007a00:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007a04:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007a08:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007a0a:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007a0c:	22ff      	movs	r2, #255	; 0xff
 8007a0e:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 8007a10:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007a14:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007a16:	2206      	movs	r2, #6
 8007a18:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007a1c:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8007a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a22:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007a24:	2201      	movs	r2, #1
 8007a26:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <tcp_alloc+0xb4>)
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007a30:	4a19      	ldr	r2, [pc, #100]	; (8007a98 <tcp_alloc+0xb8>)
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 8007a36:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <tcp_alloc+0xbc>)
 8007a3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007a40:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <tcp_alloc+0xc0>)
 8007a42:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8007a46:	4620      	mov	r0, r4
 8007a48:	bd38      	pop	{r3, r4, r5, pc}
    tcp_handle_closepend();
 8007a4a:	f7ff fcb1 	bl	80073b0 <tcp_handle_closepend>
    tcp_kill_timewait();
 8007a4e:	f7ff ff07 	bl	8007860 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007a52:	2001      	movs	r0, #1
 8007a54:	f7fe fe96 	bl	8006784 <memp_malloc>
    if (pcb == NULL) {
 8007a58:	4604      	mov	r4, r0
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d1c7      	bne.n	80079ee <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8007a5e:	2009      	movs	r0, #9
 8007a60:	f7ff ff8c 	bl	800797c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007a64:	2001      	movs	r0, #1
 8007a66:	f7fe fe8d 	bl	8006784 <memp_malloc>
      if (pcb == NULL) {
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d1be      	bne.n	80079ee <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8007a70:	2008      	movs	r0, #8
 8007a72:	f7ff ff83 	bl	800797c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007a76:	2001      	movs	r0, #1
 8007a78:	f7fe fe84 	bl	8006784 <memp_malloc>
        if (pcb == NULL) {
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d1b5      	bne.n	80079ee <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8007a82:	4628      	mov	r0, r5
 8007a84:	f7ff ff06 	bl	8007894 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007a88:	2001      	movs	r0, #1
 8007a8a:	f7fe fe7b 	bl	8006784 <memp_malloc>
 8007a8e:	4604      	mov	r4, r0
          if (pcb != NULL) {
 8007a90:	e7ad      	b.n	80079ee <tcp_alloc+0xe>
 8007a92:	bf00      	nop
 8007a94:	200073cc 	.word	0x200073cc
 8007a98:	200033b9 	.word	0x200033b9
 8007a9c:	08007c31 	.word	0x08007c31
 8007aa0:	006ddd00 	.word	0x006ddd00

08007aa4 <tcp_close_shutdown>:
{
 8007aa4:	b530      	push	{r4, r5, lr}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007aaa:	4604      	mov	r4, r0
 8007aac:	b180      	cbz	r0, 8007ad0 <tcp_close_shutdown+0x2c>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007aae:	b125      	cbz	r5, 8007aba <tcp_close_shutdown+0x16>
 8007ab0:	7d23      	ldrb	r3, [r4, #20]
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d014      	beq.n	8007ae0 <tcp_close_shutdown+0x3c>
 8007ab6:	2b07      	cmp	r3, #7
 8007ab8:	d012      	beq.n	8007ae0 <tcp_close_shutdown+0x3c>
  switch (pcb->state) {
 8007aba:	7d23      	ldrb	r3, [r4, #20]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d06c      	beq.n	8007b9a <tcp_close_shutdown+0xf6>
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d076      	beq.n	8007bb2 <tcp_close_shutdown+0x10e>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d04f      	beq.n	8007b68 <tcp_close_shutdown+0xc4>
      return tcp_close_shutdown_fin(pcb);
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f7ff fc2f 	bl	800732c <tcp_close_shutdown_fin>
 8007ace:	e046      	b.n	8007b5e <tcp_close_shutdown+0xba>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007ad0:	4b3e      	ldr	r3, [pc, #248]	; (8007bcc <tcp_close_shutdown+0x128>)
 8007ad2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007ad6:	493e      	ldr	r1, [pc, #248]	; (8007bd0 <tcp_close_shutdown+0x12c>)
 8007ad8:	483e      	ldr	r0, [pc, #248]	; (8007bd4 <tcp_close_shutdown+0x130>)
 8007ada:	f00a fffb 	bl	8012ad4 <printf>
 8007ade:	e7e6      	b.n	8007aae <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007ae0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007ae2:	b1e3      	cbz	r3, 8007b1e <tcp_close_shutdown+0x7a>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007ae4:	8b63      	ldrh	r3, [r4, #26]
 8007ae6:	f013 0f10 	tst.w	r3, #16
 8007aea:	d01d      	beq.n	8007b28 <tcp_close_shutdown+0x84>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007aec:	1d23      	adds	r3, r4, #4
 8007aee:	8b22      	ldrh	r2, [r4, #24]
 8007af0:	9202      	str	r2, [sp, #8]
 8007af2:	8ae2      	ldrh	r2, [r4, #22]
 8007af4:	9201      	str	r2, [sp, #4]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4623      	mov	r3, r4
 8007afa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007afc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007afe:	4620      	mov	r0, r4
 8007b00:	f002 fc38 	bl	800a374 <tcp_rst>
      tcp_pcb_purge(pcb);
 8007b04:	4620      	mov	r0, r4
 8007b06:	f7ff fd85 	bl	8007614 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007b0a:	4b33      	ldr	r3, [pc, #204]	; (8007bd8 <tcp_close_shutdown+0x134>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	42a3      	cmp	r3, r4
 8007b10:	d012      	beq.n	8007b38 <tcp_close_shutdown+0x94>
 8007b12:	b1bb      	cbz	r3, 8007b44 <tcp_close_shutdown+0xa0>
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	42a2      	cmp	r2, r4
 8007b18:	d012      	beq.n	8007b40 <tcp_close_shutdown+0x9c>
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	e7f9      	b.n	8007b12 <tcp_close_shutdown+0x6e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007b1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007b20:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007b24:	d0c9      	beq.n	8007aba <tcp_close_shutdown+0x16>
 8007b26:	e7dd      	b.n	8007ae4 <tcp_close_shutdown+0x40>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007b28:	4b28      	ldr	r3, [pc, #160]	; (8007bcc <tcp_close_shutdown+0x128>)
 8007b2a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007b2e:	492b      	ldr	r1, [pc, #172]	; (8007bdc <tcp_close_shutdown+0x138>)
 8007b30:	4828      	ldr	r0, [pc, #160]	; (8007bd4 <tcp_close_shutdown+0x130>)
 8007b32:	f00a ffcf 	bl	8012ad4 <printf>
 8007b36:	e7d9      	b.n	8007aec <tcp_close_shutdown+0x48>
      TCP_RMV_ACTIVE(pcb);
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <tcp_close_shutdown+0x134>)
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e001      	b.n	8007b44 <tcp_close_shutdown+0xa0>
 8007b40:	68e2      	ldr	r2, [r4, #12]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	2300      	movs	r3, #0
 8007b46:	60e3      	str	r3, [r4, #12]
 8007b48:	4b25      	ldr	r3, [pc, #148]	; (8007be0 <tcp_close_shutdown+0x13c>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8007b4e:	4b25      	ldr	r3, [pc, #148]	; (8007be4 <tcp_close_shutdown+0x140>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	d005      	beq.n	8007b62 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7ff fc4c 	bl	80073f4 <tcp_free>
      return ERR_OK;
 8007b5c:	2000      	movs	r0, #0
}
 8007b5e:	b005      	add	sp, #20
 8007b60:	bd30      	pop	{r4, r5, pc}
        tcp_trigger_input_pcb_close();
 8007b62:	f001 ff6d 	bl	8009a40 <tcp_trigger_input_pcb_close>
 8007b66:	e7f9      	b.n	8007b5c <tcp_close_shutdown+0xb8>
      if (pcb->local_port != 0) {
 8007b68:	8ae3      	ldrh	r3, [r4, #22]
 8007b6a:	b18b      	cbz	r3, 8007b90 <tcp_close_shutdown+0xec>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b6c:	4b1e      	ldr	r3, [pc, #120]	; (8007be8 <tcp_close_shutdown+0x144>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	d005      	beq.n	8007b80 <tcp_close_shutdown+0xdc>
 8007b74:	b153      	cbz	r3, 8007b8c <tcp_close_shutdown+0xe8>
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	42a2      	cmp	r2, r4
 8007b7a:	d005      	beq.n	8007b88 <tcp_close_shutdown+0xe4>
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	e7f9      	b.n	8007b74 <tcp_close_shutdown+0xd0>
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <tcp_close_shutdown+0x144>)
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e001      	b.n	8007b8c <tcp_close_shutdown+0xe8>
 8007b88:	68e2      	ldr	r2, [r4, #12]
 8007b8a:	60da      	str	r2, [r3, #12]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8007b90:	4620      	mov	r0, r4
 8007b92:	f7ff fc2f 	bl	80073f4 <tcp_free>
  return ERR_OK;
 8007b96:	2000      	movs	r0, #0
      break;
 8007b98:	e7e1      	b.n	8007b5e <tcp_close_shutdown+0xba>
      tcp_listen_closed(pcb);
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f7ff fb80 	bl	80072a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4812      	ldr	r0, [pc, #72]	; (8007bec <tcp_close_shutdown+0x148>)
 8007ba4:	f7ff fd68 	bl	8007678 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f7ff fba7 	bl	80072fc <tcp_free_listen>
  return ERR_OK;
 8007bae:	2000      	movs	r0, #0
      break;
 8007bb0:	e7d5      	b.n	8007b5e <tcp_close_shutdown+0xba>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	4808      	ldr	r0, [pc, #32]	; (8007bd8 <tcp_close_shutdown+0x134>)
 8007bb6:	f7ff fd5f 	bl	8007678 <tcp_pcb_remove>
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <tcp_close_shutdown+0x13c>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7ff fc17 	bl	80073f4 <tcp_free>
  return ERR_OK;
 8007bc6:	2000      	movs	r0, #0
      break;
 8007bc8:	e7c9      	b.n	8007b5e <tcp_close_shutdown+0xba>
 8007bca:	bf00      	nop
 8007bcc:	0801a8ac 	.word	0x0801a8ac
 8007bd0:	0801ad6c 	.word	0x0801ad6c
 8007bd4:	08019f6c 	.word	0x08019f6c
 8007bd8:	200073c8 	.word	0x200073c8
 8007bdc:	0801ad8c 	.word	0x0801ad8c
 8007be0:	200073c4 	.word	0x200073c4
 8007be4:	200073dc 	.word	0x200073dc
 8007be8:	200073d4 	.word	0x200073d4
 8007bec:	200073d0 	.word	0x200073d0

08007bf0 <tcp_close>:
{
 8007bf0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bf2:	b160      	cbz	r0, 8007c0e <tcp_close+0x1e>
 8007bf4:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 8007bf6:	7d02      	ldrb	r2, [r0, #20]
 8007bf8:	2a01      	cmp	r2, #1
 8007bfa:	d003      	beq.n	8007c04 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007bfc:	8b42      	ldrh	r2, [r0, #26]
 8007bfe:	f042 0210 	orr.w	r2, r2, #16
 8007c02:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8007c04:	2101      	movs	r1, #1
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff ff4c 	bl	8007aa4 <tcp_close_shutdown>
}
 8007c0c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c0e:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <tcp_close+0x34>)
 8007c10:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007c14:	4904      	ldr	r1, [pc, #16]	; (8007c28 <tcp_close+0x38>)
 8007c16:	4805      	ldr	r0, [pc, #20]	; (8007c2c <tcp_close+0x3c>)
 8007c18:	f00a ff5c 	bl	8012ad4 <printf>
 8007c1c:	f06f 000f 	mvn.w	r0, #15
 8007c20:	e7f4      	b.n	8007c0c <tcp_close+0x1c>
 8007c22:	bf00      	nop
 8007c24:	0801a8ac 	.word	0x0801a8ac
 8007c28:	0801ada8 	.word	0x0801ada8
 8007c2c:	08019f6c 	.word	0x08019f6c

08007c30 <tcp_recv_null>:
{
 8007c30:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c32:	b151      	cbz	r1, 8007c4a <tcp_recv_null+0x1a>
 8007c34:	4614      	mov	r4, r2
 8007c36:	4608      	mov	r0, r1
  if (p != NULL) {
 8007c38:	b18a      	cbz	r2, 8007c5e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8007c3a:	8911      	ldrh	r1, [r2, #8]
 8007c3c:	f7ff fc2c 	bl	8007498 <tcp_recved>
    pbuf_free(p);
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7ff f85f 	bl	8006d04 <pbuf_free>
  return ERR_OK;
 8007c46:	2000      	movs	r0, #0
}
 8007c48:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c4a:	4b08      	ldr	r3, [pc, #32]	; (8007c6c <tcp_recv_null+0x3c>)
 8007c4c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007c50:	4907      	ldr	r1, [pc, #28]	; (8007c70 <tcp_recv_null+0x40>)
 8007c52:	4808      	ldr	r0, [pc, #32]	; (8007c74 <tcp_recv_null+0x44>)
 8007c54:	f00a ff3e 	bl	8012ad4 <printf>
 8007c58:	f06f 000f 	mvn.w	r0, #15
 8007c5c:	e7f4      	b.n	8007c48 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 8007c5e:	b10b      	cbz	r3, 8007c64 <tcp_recv_null+0x34>
  return ERR_OK;
 8007c60:	2000      	movs	r0, #0
 8007c62:	e7f1      	b.n	8007c48 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8007c64:	f7ff ffc4 	bl	8007bf0 <tcp_close>
 8007c68:	e7ee      	b.n	8007c48 <tcp_recv_null+0x18>
 8007c6a:	bf00      	nop
 8007c6c:	0801a8ac 	.word	0x0801a8ac
 8007c70:	0801adc0 	.word	0x0801adc0
 8007c74:	08019f6c 	.word	0x08019f6c

08007c78 <tcp_process_refused_data>:
{
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c7a:	b318      	cbz	r0, 8007cc4 <tcp_process_refused_data+0x4c>
 8007c7c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8007c7e:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8007c80:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c86:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8007c8a:	b32d      	cbz	r5, 8007cd8 <tcp_process_refused_data+0x60>
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	4601      	mov	r1, r0
 8007c90:	6900      	ldr	r0, [r0, #16]
 8007c92:	47a8      	blx	r5
 8007c94:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007c96:	bb3d      	cbnz	r5, 8007ce8 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007c98:	f017 0f20 	tst.w	r7, #32
 8007c9c:	d02a      	beq.n	8007cf4 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007ca0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ca4:	d001      	beq.n	8007caa <tcp_process_refused_data+0x32>
          pcb->rcv_wnd++;
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007caa:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8007cae:	b30e      	cbz	r6, 8007cf4 <tcp_process_refused_data+0x7c>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	6920      	ldr	r0, [r4, #16]
 8007cb8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007cba:	f110 0f0d 	cmn.w	r0, #13
 8007cbe:	d119      	bne.n	8007cf4 <tcp_process_refused_data+0x7c>
          return ERR_ABRT;
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	e017      	b.n	8007cf4 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <tcp_process_refused_data+0x80>)
 8007cc6:	f240 6209 	movw	r2, #1545	; 0x609
 8007cca:	490c      	ldr	r1, [pc, #48]	; (8007cfc <tcp_process_refused_data+0x84>)
 8007ccc:	480c      	ldr	r0, [pc, #48]	; (8007d00 <tcp_process_refused_data+0x88>)
 8007cce:	f00a ff01 	bl	8012ad4 <printf>
 8007cd2:	f06f 050f 	mvn.w	r5, #15
 8007cd6:	e00d      	b.n	8007cf4 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4632      	mov	r2, r6
 8007cdc:	4601      	mov	r1, r0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff ffa6 	bl	8007c30 <tcp_recv_null>
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	e7d6      	b.n	8007c96 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 8007ce8:	f115 0f0d 	cmn.w	r5, #13
 8007cec:	d002      	beq.n	8007cf4 <tcp_process_refused_data+0x7c>
      pcb->refused_data = refused_data;
 8007cee:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 8007cf0:	f06f 0504 	mvn.w	r5, #4
}
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf8:	0801a8ac 	.word	0x0801a8ac
 8007cfc:	0801addc 	.word	0x0801addc
 8007d00:	08019f6c 	.word	0x08019f6c

08007d04 <tcp_fasttmr>:
{
 8007d04:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8007d06:	4a1c      	ldr	r2, [pc, #112]	; (8007d78 <tcp_fasttmr+0x74>)
 8007d08:	7813      	ldrb	r3, [r2, #0]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8007d0e:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <tcp_fasttmr+0x78>)
 8007d10:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8007d12:	e013      	b.n	8007d3c <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8007d14:	f043 0302 	orr.w	r3, r3, #2
 8007d18:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f002 fbac 	bl	800a478 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007d20:	8b63      	ldrh	r3, [r4, #26]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	8363      	strh	r3, [r4, #26]
 8007d28:	e013      	b.n	8007d52 <tcp_fasttmr+0x4e>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007d2a:	f023 0308 	bic.w	r3, r3, #8
 8007d2e:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7ff fafb 	bl	800732c <tcp_close_shutdown_fin>
 8007d36:	e010      	b.n	8007d5a <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8007d38:	68e5      	ldr	r5, [r4, #12]
{
 8007d3a:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8007d3c:	b1dc      	cbz	r4, 8007d76 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007d3e:	7fa2      	ldrb	r2, [r4, #30]
 8007d40:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <tcp_fasttmr+0x74>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d0f7      	beq.n	8007d38 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8007d48:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8007d4a:	8b63      	ldrh	r3, [r4, #26]
 8007d4c:	f013 0f01 	tst.w	r3, #1
 8007d50:	d1e0      	bne.n	8007d14 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8007d52:	8b63      	ldrh	r3, [r4, #26]
 8007d54:	f013 0f08 	tst.w	r3, #8
 8007d58:	d1e7      	bne.n	8007d2a <tcp_fasttmr+0x26>
      next = pcb->next;
 8007d5a:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007d5c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0eb      	beq.n	8007d3a <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8007d62:	4e07      	ldr	r6, [pc, #28]	; (8007d80 <tcp_fasttmr+0x7c>)
 8007d64:	2300      	movs	r3, #0
 8007d66:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7ff ff85 	bl	8007c78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007d6e:	7833      	ldrb	r3, [r6, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0e2      	beq.n	8007d3a <tcp_fasttmr+0x36>
 8007d74:	e7cb      	b.n	8007d0e <tcp_fasttmr+0xa>
}
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	200033b9 	.word	0x200033b9
 8007d7c:	200073c8 	.word	0x200073c8
 8007d80:	200073c4 	.word	0x200073c4

08007d84 <tcp_slowtmr>:
{
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	b084      	sub	sp, #16
  ++tcp_ticks;
 8007d8a:	4aae      	ldr	r2, [pc, #696]	; (8008044 <tcp_slowtmr+0x2c0>)
 8007d8c:	6813      	ldr	r3, [r2, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007d92:	4aad      	ldr	r2, [pc, #692]	; (8008048 <tcp_slowtmr+0x2c4>)
 8007d94:	7813      	ldrb	r3, [r2, #0]
 8007d96:	3301      	adds	r3, #1
 8007d98:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8007d9a:	4bac      	ldr	r3, [pc, #688]	; (800804c <tcp_slowtmr+0x2c8>)
 8007d9c:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8007d9e:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8007da0:	e198      	b.n	80080d4 <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007da2:	4bab      	ldr	r3, [pc, #684]	; (8008050 <tcp_slowtmr+0x2cc>)
 8007da4:	f240 42be 	movw	r2, #1214	; 0x4be
 8007da8:	49aa      	ldr	r1, [pc, #680]	; (8008054 <tcp_slowtmr+0x2d0>)
 8007daa:	48ab      	ldr	r0, [pc, #684]	; (8008058 <tcp_slowtmr+0x2d4>)
 8007dac:	f00a fe92 	bl	8012ad4 <printf>
 8007db0:	e196      	b.n	80080e0 <tcp_slowtmr+0x35c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007db2:	4ba7      	ldr	r3, [pc, #668]	; (8008050 <tcp_slowtmr+0x2cc>)
 8007db4:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007db8:	49a8      	ldr	r1, [pc, #672]	; (800805c <tcp_slowtmr+0x2d8>)
 8007dba:	48a7      	ldr	r0, [pc, #668]	; (8008058 <tcp_slowtmr+0x2d4>)
 8007dbc:	f00a fe8a 	bl	8012ad4 <printf>
 8007dc0:	e192      	b.n	80080e8 <tcp_slowtmr+0x364>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007dc2:	4ba3      	ldr	r3, [pc, #652]	; (8008050 <tcp_slowtmr+0x2cc>)
 8007dc4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007dc8:	49a5      	ldr	r1, [pc, #660]	; (8008060 <tcp_slowtmr+0x2dc>)
 8007dca:	48a3      	ldr	r0, [pc, #652]	; (8008058 <tcp_slowtmr+0x2d4>)
 8007dcc:	f00a fe82 	bl	8012ad4 <printf>
 8007dd0:	e18e      	b.n	80080f0 <tcp_slowtmr+0x36c>
      prev = pcb;
 8007dd2:	4626      	mov	r6, r4
      pcb = pcb->next;
 8007dd4:	68e4      	ldr	r4, [r4, #12]
      continue;
 8007dd6:	e17d      	b.n	80080d4 <tcp_slowtmr+0x350>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007dd8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007ddc:	2b05      	cmp	r3, #5
 8007dde:	f240 8192 	bls.w	8008106 <tcp_slowtmr+0x382>
      ++pcb_remove;
 8007de2:	2501      	movs	r5, #1
 8007de4:	e072      	b.n	8007ecc <tcp_slowtmr+0x148>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007de6:	4b9a      	ldr	r3, [pc, #616]	; (8008050 <tcp_slowtmr+0x2cc>)
 8007de8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007dec:	499d      	ldr	r1, [pc, #628]	; (8008064 <tcp_slowtmr+0x2e0>)
 8007dee:	489a      	ldr	r0, [pc, #616]	; (8008058 <tcp_slowtmr+0x2d4>)
 8007df0:	f00a fe70 	bl	8012ad4 <printf>
 8007df4:	e19e      	b.n	8008134 <tcp_slowtmr+0x3b0>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007df6:	4620      	mov	r0, r4
 8007df8:	f002 f834 	bl	8009e64 <tcp_split_unsent_seg>
 8007dfc:	b160      	cbz	r0, 8007e18 <tcp_slowtmr+0x94>
              pcb->persist_cnt = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007e04:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	f200 80a3 	bhi.w	8007f54 <tcp_slowtmr+0x1d0>
                pcb->persist_backoff++;
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 8007e14:	2500      	movs	r5, #0
 8007e16:	e059      	b.n	8007ecc <tcp_slowtmr+0x148>
                if (tcp_output(pcb) == ERR_OK) {
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f002 fb2d 	bl	800a478 <tcp_output>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1ed      	bne.n	8007dfe <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8007e22:	2500      	movs	r5, #0
 8007e24:	e052      	b.n	8007ecc <tcp_slowtmr+0x148>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007e26:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d801      	bhi.n	8007e38 <tcp_slowtmr+0xb4>
          ++pcb->rtime;
 8007e34:	3301      	adds	r3, #1
 8007e36:	8623      	strh	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8007e38:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8007e3c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007e40:	429a      	cmp	r2, r3
 8007e42:	db43      	blt.n	8007ecc <tcp_slowtmr+0x148>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007e44:	4620      	mov	r0, r4
 8007e46:	f002 f9cb 	bl	800a1e0 <tcp_rexmit_rto_prepare>
 8007e4a:	b128      	cbz	r0, 8007e58 <tcp_slowtmr+0xd4>
 8007e4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d13c      	bne.n	8007ecc <tcp_slowtmr+0x148>
 8007e52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d039      	beq.n	8007ecc <tcp_slowtmr+0x148>
            if (pcb->state != SYN_SENT) {
 8007e58:	7d23      	ldrb	r3, [r4, #20]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d016      	beq.n	8007e8c <tcp_slowtmr+0x108>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007e5e:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007e62:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8007e66:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8007e6a:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8007e6e:	4a7e      	ldr	r2, [pc, #504]	; (8008068 <tcp_slowtmr+0x2e4>)
 8007e70:	290c      	cmp	r1, #12
 8007e72:	bf94      	ite	ls
 8007e74:	1852      	addls	r2, r2, r1
 8007e76:	320c      	addhi	r2, #12
 8007e78:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8007e7c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007e7e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007e82:	4293      	cmp	r3, r2
 8007e84:	dc1e      	bgt.n	8007ec4 <tcp_slowtmr+0x140>
 8007e86:	b21b      	sxth	r3, r3
 8007e88:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007e90:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8007e94:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	bf28      	it	cs
 8007e9c:	4613      	movcs	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007ea4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8007ea6:	004a      	lsls	r2, r1, #1
 8007ea8:	b292      	uxth	r2, r2
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d201      	bcs.n	8007eb2 <tcp_slowtmr+0x12e>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007eae:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 8007eb2:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f002 fc31 	bl	800a724 <tcp_rexmit_rto_commit>
 8007ec2:	e003      	b.n	8007ecc <tcp_slowtmr+0x148>
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007ec4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007ec8:	e7de      	b.n	8007e88 <tcp_slowtmr+0x104>
      ++pcb_remove;
 8007eca:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8007ecc:	7d22      	ldrb	r2, [r4, #20]
 8007ece:	2a06      	cmp	r2, #6
 8007ed0:	d042      	beq.n	8007f58 <tcp_slowtmr+0x1d4>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007ed2:	7a63      	ldrb	r3, [r4, #9]
 8007ed4:	f013 0708 	ands.w	r7, r3, #8
 8007ed8:	d004      	beq.n	8007ee4 <tcp_slowtmr+0x160>
 8007eda:	2a04      	cmp	r2, #4
 8007edc:	d049      	beq.n	8007f72 <tcp_slowtmr+0x1ee>
        ((pcb->state == ESTABLISHED) ||
 8007ede:	2a07      	cmp	r2, #7
 8007ee0:	d047      	beq.n	8007f72 <tcp_slowtmr+0x1ee>
    pcb_reset = 0;
 8007ee2:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8007ee4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007ee6:	b153      	cbz	r3, 8007efe <tcp_slowtmr+0x17a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007ee8:	6a23      	ldr	r3, [r4, #32]
 8007eea:	4a56      	ldr	r2, [pc, #344]	; (8008044 <tcp_slowtmr+0x2c0>)
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007ef4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8007ef8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8007efc:	d267      	bcs.n	8007fce <tcp_slowtmr+0x24a>
    if (pcb->state == SYN_RCVD) {
 8007efe:	7d23      	ldrb	r3, [r4, #20]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d068      	beq.n	8007fd6 <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d06f      	beq.n	8007fe8 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	d176      	bne.n	8007ffa <tcp_slowtmr+0x276>
      pcb = pcb->next;
 8007f0c:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8007f0e:	7f23      	ldrb	r3, [r4, #28]
 8007f10:	3301      	adds	r3, #1
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007f16:	7f62      	ldrb	r2, [r4, #29]
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	f0c0 80d9 	bcc.w	80080d0 <tcp_slowtmr+0x34c>
        prev->polltmr = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8007f22:	4a52      	ldr	r2, [pc, #328]	; (800806c <tcp_slowtmr+0x2e8>)
 8007f24:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8007f26:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80c8 	beq.w	80080c0 <tcp_slowtmr+0x33c>
 8007f30:	4621      	mov	r1, r4
 8007f32:	6920      	ldr	r0, [r4, #16]
 8007f34:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8007f36:	4b4d      	ldr	r3, [pc, #308]	; (800806c <tcp_slowtmr+0x2e8>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f47f af2d 	bne.w	8007d9a <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8007f40:	2800      	cmp	r0, #0
 8007f42:	f000 80bf 	beq.w	80080c4 <tcp_slowtmr+0x340>
      prev = pcb;
 8007f46:	4626      	mov	r6, r4
      pcb = pcb->next;
 8007f48:	462c      	mov	r4, r5
 8007f4a:	e0c3      	b.n	80080d4 <tcp_slowtmr+0x350>
          ++pcb_remove; /* max probes reached */
 8007f4c:	2501      	movs	r5, #1
 8007f4e:	e7bd      	b.n	8007ecc <tcp_slowtmr+0x148>
    pcb_remove = 0;
 8007f50:	2500      	movs	r5, #0
 8007f52:	e7bb      	b.n	8007ecc <tcp_slowtmr+0x148>
 8007f54:	2500      	movs	r5, #0
 8007f56:	e7b9      	b.n	8007ecc <tcp_slowtmr+0x148>
      if (pcb->flags & TF_RXCLOSED) {
 8007f58:	8b63      	ldrh	r3, [r4, #26]
 8007f5a:	f013 0f10 	tst.w	r3, #16
 8007f5e:	d0b8      	beq.n	8007ed2 <tcp_slowtmr+0x14e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f60:	6a21      	ldr	r1, [r4, #32]
 8007f62:	4b38      	ldr	r3, [pc, #224]	; (8008044 <tcp_slowtmr+0x2c0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	1a5b      	subs	r3, r3, r1
 8007f68:	2b28      	cmp	r3, #40	; 0x28
 8007f6a:	d9b2      	bls.n	8007ed2 <tcp_slowtmr+0x14e>
          ++pcb_remove;
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	b2ed      	uxtb	r5, r5
 8007f70:	e7af      	b.n	8007ed2 <tcp_slowtmr+0x14e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f72:	4b34      	ldr	r3, [pc, #208]	; (8008044 <tcp_slowtmr+0x2c0>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	6a23      	ldr	r3, [r4, #32]
 8007f78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007f7a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007f7e:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8007f82:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007f86:	483a      	ldr	r0, [pc, #232]	; (8008070 <tcp_slowtmr+0x2ec>)
 8007f88:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f8c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8007f90:	d903      	bls.n	8007f9a <tcp_slowtmr+0x216>
        ++pcb_remove;
 8007f92:	3501      	adds	r5, #1
 8007f94:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8007f96:	2701      	movs	r7, #1
 8007f98:	e7a4      	b.n	8007ee4 <tcp_slowtmr+0x160>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007f9a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8007f9e:	4835      	ldr	r0, [pc, #212]	; (8008074 <tcp_slowtmr+0x2f0>)
 8007fa0:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007fa4:	4932      	ldr	r1, [pc, #200]	; (8008070 <tcp_slowtmr+0x2ec>)
 8007fa6:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007faa:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8007fae:	d801      	bhi.n	8007fb4 <tcp_slowtmr+0x230>
    pcb_reset = 0;
 8007fb0:	2700      	movs	r7, #0
 8007fb2:	e797      	b.n	8007ee4 <tcp_slowtmr+0x160>
        err = tcp_keepalive(pcb);
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f002 fbeb 	bl	800a790 <tcp_keepalive>
        if (err == ERR_OK) {
 8007fba:	b930      	cbnz	r0, 8007fca <tcp_slowtmr+0x246>
          pcb->keep_cnt_sent++;
 8007fbc:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8007fc6:	2700      	movs	r7, #0
 8007fc8:	e78c      	b.n	8007ee4 <tcp_slowtmr+0x160>
 8007fca:	2700      	movs	r7, #0
 8007fcc:	e78a      	b.n	8007ee4 <tcp_slowtmr+0x160>
      tcp_free_ooseq(pcb);
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f7ff fb16 	bl	8007600 <tcp_free_ooseq>
 8007fd4:	e793      	b.n	8007efe <tcp_slowtmr+0x17a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fd6:	6a21      	ldr	r1, [r4, #32]
 8007fd8:	4a1a      	ldr	r2, [pc, #104]	; (8008044 <tcp_slowtmr+0x2c0>)
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	1a52      	subs	r2, r2, r1
 8007fde:	2a28      	cmp	r2, #40	; 0x28
 8007fe0:	d990      	bls.n	8007f04 <tcp_slowtmr+0x180>
        ++pcb_remove;
 8007fe2:	3501      	adds	r5, #1
 8007fe4:	b2ed      	uxtb	r5, r5
 8007fe6:	e78d      	b.n	8007f04 <tcp_slowtmr+0x180>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007fe8:	6a22      	ldr	r2, [r4, #32]
 8007fea:	4b16      	ldr	r3, [pc, #88]	; (8008044 <tcp_slowtmr+0x2c0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	1a9b      	subs	r3, r3, r2
 8007ff0:	2bf0      	cmp	r3, #240	; 0xf0
 8007ff2:	d989      	bls.n	8007f08 <tcp_slowtmr+0x184>
        ++pcb_remove;
 8007ff4:	3501      	adds	r5, #1
 8007ff6:	b2ed      	uxtb	r5, r5
 8007ff8:	e786      	b.n	8007f08 <tcp_slowtmr+0x184>
      tcp_err_fn err_fn = pcb->errf;
 8007ffa:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8007ffe:	4620      	mov	r0, r4
 8008000:	f7ff fb08 	bl	8007614 <tcp_pcb_purge>
      if (prev != NULL) {
 8008004:	2e00      	cmp	r6, #0
 8008006:	d03f      	beq.n	8008088 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008008:	4b10      	ldr	r3, [pc, #64]	; (800804c <tcp_slowtmr+0x2c8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	42a3      	cmp	r3, r4
 800800e:	d033      	beq.n	8008078 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 8008010:	68e3      	ldr	r3, [r4, #12]
 8008012:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8008014:	2f00      	cmp	r7, #0
 8008016:	d146      	bne.n	80080a6 <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 8008018:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 800801c:	68e7      	ldr	r7, [r4, #12]
      tcp_free(pcb2);
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff f9e8 	bl	80073f4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008024:	4b11      	ldr	r3, [pc, #68]	; (800806c <tcp_slowtmr+0x2e8>)
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800802a:	b11d      	cbz	r5, 8008034 <tcp_slowtmr+0x2b0>
 800802c:	f06f 010c 	mvn.w	r1, #12
 8008030:	4640      	mov	r0, r8
 8008032:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <tcp_slowtmr+0x2e8>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f aeae 	bne.w	8007d9a <tcp_slowtmr+0x16>
      pcb = pcb->next;
 800803e:	463c      	mov	r4, r7
 8008040:	e048      	b.n	80080d4 <tcp_slowtmr+0x350>
 8008042:	bf00      	nop
 8008044:	200073cc 	.word	0x200073cc
 8008048:	200033b9 	.word	0x200033b9
 800804c:	200073c8 	.word	0x200073c8
 8008050:	0801a8ac 	.word	0x0801a8ac
 8008054:	0801ae20 	.word	0x0801ae20
 8008058:	08019f6c 	.word	0x08019f6c
 800805c:	0801ae4c 	.word	0x0801ae4c
 8008060:	0801ae78 	.word	0x0801ae78
 8008064:	0801aedc 	.word	0x0801aedc
 8008068:	08019e78 	.word	0x08019e78
 800806c:	200073c4 	.word	0x200073c4
 8008070:	10624dd3 	.word	0x10624dd3
 8008074:	000124f8 	.word	0x000124f8
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008078:	4b61      	ldr	r3, [pc, #388]	; (8008200 <tcp_slowtmr+0x47c>)
 800807a:	f240 526d 	movw	r2, #1389	; 0x56d
 800807e:	4961      	ldr	r1, [pc, #388]	; (8008204 <tcp_slowtmr+0x480>)
 8008080:	4861      	ldr	r0, [pc, #388]	; (8008208 <tcp_slowtmr+0x484>)
 8008082:	f00a fd27 	bl	8012ad4 <printf>
 8008086:	e7c3      	b.n	8008010 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008088:	4b60      	ldr	r3, [pc, #384]	; (800820c <tcp_slowtmr+0x488>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	42a3      	cmp	r3, r4
 800808e:	d006      	beq.n	800809e <tcp_slowtmr+0x31a>
 8008090:	4b5b      	ldr	r3, [pc, #364]	; (8008200 <tcp_slowtmr+0x47c>)
 8008092:	f240 5271 	movw	r2, #1393	; 0x571
 8008096:	495e      	ldr	r1, [pc, #376]	; (8008210 <tcp_slowtmr+0x48c>)
 8008098:	485b      	ldr	r0, [pc, #364]	; (8008208 <tcp_slowtmr+0x484>)
 800809a:	f00a fd1b 	bl	8012ad4 <printf>
        tcp_active_pcbs = pcb->next;
 800809e:	68e2      	ldr	r2, [r4, #12]
 80080a0:	4b5a      	ldr	r3, [pc, #360]	; (800820c <tcp_slowtmr+0x488>)
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	e7b6      	b.n	8008014 <tcp_slowtmr+0x290>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80080a6:	1d23      	adds	r3, r4, #4
 80080a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080aa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80080ac:	8b20      	ldrh	r0, [r4, #24]
 80080ae:	9002      	str	r0, [sp, #8]
 80080b0:	8ae0      	ldrh	r0, [r4, #22]
 80080b2:	9001      	str	r0, [sp, #4]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	4623      	mov	r3, r4
 80080b8:	4620      	mov	r0, r4
 80080ba:	f002 f95b 	bl	800a374 <tcp_rst>
 80080be:	e7ab      	b.n	8008018 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 80080c0:	2000      	movs	r0, #0
 80080c2:	e738      	b.n	8007f36 <tcp_slowtmr+0x1b2>
          tcp_output(prev);
 80080c4:	4620      	mov	r0, r4
 80080c6:	f002 f9d7 	bl	800a478 <tcp_output>
      prev = pcb;
 80080ca:	4626      	mov	r6, r4
      pcb = pcb->next;
 80080cc:	462c      	mov	r4, r5
 80080ce:	e001      	b.n	80080d4 <tcp_slowtmr+0x350>
      prev = pcb;
 80080d0:	4626      	mov	r6, r4
      pcb = pcb->next;
 80080d2:	462c      	mov	r4, r5
  while (pcb != NULL) {
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	d052      	beq.n	800817e <tcp_slowtmr+0x3fa>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80080d8:	7d23      	ldrb	r3, [r4, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f43f ae61 	beq.w	8007da2 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80080e0:	7d23      	ldrb	r3, [r4, #20]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	f43f ae65 	beq.w	8007db2 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80080e8:	7d23      	ldrb	r3, [r4, #20]
 80080ea:	2b0a      	cmp	r3, #10
 80080ec:	f43f ae69 	beq.w	8007dc2 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 80080f0:	7fa2      	ldrb	r2, [r4, #30]
 80080f2:	4b48      	ldr	r3, [pc, #288]	; (8008214 <tcp_slowtmr+0x490>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	f43f ae6b 	beq.w	8007dd2 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 80080fc:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80080fe:	7d23      	ldrb	r3, [r4, #20]
 8008100:	2b02      	cmp	r3, #2
 8008102:	f43f ae69 	beq.w	8007dd8 <tcp_slowtmr+0x54>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008106:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800810a:	2b0b      	cmp	r3, #11
 800810c:	f63f aedd 	bhi.w	8007eca <tcp_slowtmr+0x146>
      if (pcb->persist_backoff > 0) {
 8008110:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 8008114:	2d00      	cmp	r5, #0
 8008116:	f43f ae86 	beq.w	8007e26 <tcp_slowtmr+0xa2>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800811a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800811c:	b133      	cbz	r3, 800812c <tcp_slowtmr+0x3a8>
 800811e:	4b38      	ldr	r3, [pc, #224]	; (8008200 <tcp_slowtmr+0x47c>)
 8008120:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008124:	493c      	ldr	r1, [pc, #240]	; (8008218 <tcp_slowtmr+0x494>)
 8008126:	4838      	ldr	r0, [pc, #224]	; (8008208 <tcp_slowtmr+0x484>)
 8008128:	f00a fcd4 	bl	8012ad4 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800812c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800812e:	2b00      	cmp	r3, #0
 8008130:	f43f ae59 	beq.w	8007de6 <tcp_slowtmr+0x62>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008134:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008138:	2b0b      	cmp	r3, #11
 800813a:	f63f af07 	bhi.w	8007f4c <tcp_slowtmr+0x1c8>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800813e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	4b35      	ldr	r3, [pc, #212]	; (800821c <tcp_slowtmr+0x498>)
 8008146:	4413      	add	r3, r2
 8008148:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
          if (pcb->persist_cnt < backoff_cnt) {
 800814c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8008150:	4293      	cmp	r3, r2
 8008152:	d202      	bcs.n	800815a <tcp_slowtmr+0x3d6>
            pcb->persist_cnt++;
 8008154:	3301      	adds	r3, #1
 8008156:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800815a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800815e:	4293      	cmp	r3, r2
 8008160:	f4ff aef6 	bcc.w	8007f50 <tcp_slowtmr+0x1cc>
            if (pcb->snd_wnd == 0) {
 8008164:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8008168:	2900      	cmp	r1, #0
 800816a:	f47f ae44 	bne.w	8007df6 <tcp_slowtmr+0x72>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800816e:	4620      	mov	r0, r4
 8008170:	f002 fb3c 	bl	800a7ec <tcp_zero_window_probe>
 8008174:	2800      	cmp	r0, #0
 8008176:	f43f ae42 	beq.w	8007dfe <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 800817a:	2500      	movs	r5, #0
 800817c:	e6a6      	b.n	8007ecc <tcp_slowtmr+0x148>
  pcb = tcp_tw_pcbs;
 800817e:	4b28      	ldr	r3, [pc, #160]	; (8008220 <tcp_slowtmr+0x49c>)
 8008180:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8008182:	e00e      	b.n	80081a2 <tcp_slowtmr+0x41e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008184:	4b1e      	ldr	r3, [pc, #120]	; (8008200 <tcp_slowtmr+0x47c>)
 8008186:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800818a:	4926      	ldr	r1, [pc, #152]	; (8008224 <tcp_slowtmr+0x4a0>)
 800818c:	481e      	ldr	r0, [pc, #120]	; (8008208 <tcp_slowtmr+0x484>)
 800818e:	f00a fca1 	bl	8012ad4 <printf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008192:	6a2a      	ldr	r2, [r5, #32]
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <tcp_slowtmr+0x4a4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	1a9b      	subs	r3, r3, r2
 800819a:	2bf0      	cmp	r3, #240	; 0xf0
 800819c:	d806      	bhi.n	80081ac <tcp_slowtmr+0x428>
      prev = pcb;
 800819e:	462c      	mov	r4, r5
      pcb = pcb->next;
 80081a0:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 80081a2:	b355      	cbz	r5, 80081fa <tcp_slowtmr+0x476>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80081a4:	7d2b      	ldrb	r3, [r5, #20]
 80081a6:	2b0a      	cmp	r3, #10
 80081a8:	d0f3      	beq.n	8008192 <tcp_slowtmr+0x40e>
 80081aa:	e7eb      	b.n	8008184 <tcp_slowtmr+0x400>
      tcp_pcb_purge(pcb);
 80081ac:	4628      	mov	r0, r5
 80081ae:	f7ff fa31 	bl	8007614 <tcp_pcb_purge>
      if (prev != NULL) {
 80081b2:	b19c      	cbz	r4, 80081dc <tcp_slowtmr+0x458>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80081b4:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <tcp_slowtmr+0x49c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	42ab      	cmp	r3, r5
 80081ba:	d007      	beq.n	80081cc <tcp_slowtmr+0x448>
        prev->next = pcb->next;
 80081bc:	68eb      	ldr	r3, [r5, #12]
 80081be:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80081c0:	68ee      	ldr	r6, [r5, #12]
      tcp_free(pcb2);
 80081c2:	4628      	mov	r0, r5
 80081c4:	f7ff f916 	bl	80073f4 <tcp_free>
      pcb = pcb->next;
 80081c8:	4635      	mov	r5, r6
 80081ca:	e7ea      	b.n	80081a2 <tcp_slowtmr+0x41e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80081cc:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <tcp_slowtmr+0x47c>)
 80081ce:	f240 52af 	movw	r2, #1455	; 0x5af
 80081d2:	4916      	ldr	r1, [pc, #88]	; (800822c <tcp_slowtmr+0x4a8>)
 80081d4:	480c      	ldr	r0, [pc, #48]	; (8008208 <tcp_slowtmr+0x484>)
 80081d6:	f00a fc7d 	bl	8012ad4 <printf>
 80081da:	e7ef      	b.n	80081bc <tcp_slowtmr+0x438>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80081dc:	4b10      	ldr	r3, [pc, #64]	; (8008220 <tcp_slowtmr+0x49c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	d006      	beq.n	80081f2 <tcp_slowtmr+0x46e>
 80081e4:	4b06      	ldr	r3, [pc, #24]	; (8008200 <tcp_slowtmr+0x47c>)
 80081e6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80081ea:	4911      	ldr	r1, [pc, #68]	; (8008230 <tcp_slowtmr+0x4ac>)
 80081ec:	4806      	ldr	r0, [pc, #24]	; (8008208 <tcp_slowtmr+0x484>)
 80081ee:	f00a fc71 	bl	8012ad4 <printf>
        tcp_tw_pcbs = pcb->next;
 80081f2:	68ea      	ldr	r2, [r5, #12]
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <tcp_slowtmr+0x49c>)
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e7e2      	b.n	80081c0 <tcp_slowtmr+0x43c>
}
 80081fa:	b004      	add	sp, #16
 80081fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008200:	0801a8ac 	.word	0x0801a8ac
 8008204:	0801af14 	.word	0x0801af14
 8008208:	08019f6c 	.word	0x08019f6c
 800820c:	200073c8 	.word	0x200073c8
 8008210:	0801af40 	.word	0x0801af40
 8008214:	200033b9 	.word	0x200033b9
 8008218:	0801aea8 	.word	0x0801aea8
 800821c:	08019e78 	.word	0x08019e78
 8008220:	200073d8 	.word	0x200073d8
 8008224:	0801af6c 	.word	0x0801af6c
 8008228:	200073cc 	.word	0x200073cc
 800822c:	0801af9c 	.word	0x0801af9c
 8008230:	0801afc4 	.word	0x0801afc4

08008234 <tcp_tmr>:
{
 8008234:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8008236:	f7ff fd65 	bl	8007d04 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800823a:	4a06      	ldr	r2, [pc, #24]	; (8008254 <tcp_tmr+0x20>)
 800823c:	7853      	ldrb	r3, [r2, #1]
 800823e:	3301      	adds	r3, #1
 8008240:	b2db      	uxtb	r3, r3
 8008242:	7053      	strb	r3, [r2, #1]
 8008244:	f013 0f01 	tst.w	r3, #1
 8008248:	d100      	bne.n	800824c <tcp_tmr+0x18>
}
 800824a:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800824c:	f7ff fd9a 	bl	8007d84 <tcp_slowtmr>
}
 8008250:	e7fb      	b.n	800824a <tcp_tmr+0x16>
 8008252:	bf00      	nop
 8008254:	200033b9 	.word	0x200033b9

08008258 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8008258:	4a09      	ldr	r2, [pc, #36]	; (8008280 <tcp_get_next_optbyte+0x28>)
 800825a:	8813      	ldrh	r3, [r2, #0]
 800825c:	1c59      	adds	r1, r3, #1
 800825e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008260:	6851      	ldr	r1, [r2, #4]
 8008262:	b111      	cbz	r1, 800826a <tcp_get_next_optbyte+0x12>
 8008264:	8912      	ldrh	r2, [r2, #8]
 8008266:	4293      	cmp	r3, r2
 8008268:	d204      	bcs.n	8008274 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800826a:	4a05      	ldr	r2, [pc, #20]	; (8008280 <tcp_get_next_optbyte+0x28>)
 800826c:	68d2      	ldr	r2, [r2, #12]
    return opts[optidx];
 800826e:	4413      	add	r3, r2
 8008270:	7d18      	ldrb	r0, [r3, #20]
 8008272:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008274:	b2db      	uxtb	r3, r3
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 800827c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800827e:	4770      	bx	lr
 8008280:	200033bc 	.word	0x200033bc

08008284 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008284:	b538      	push	{r3, r4, r5, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008286:	4604      	mov	r4, r0
 8008288:	b1e0      	cbz	r0, 80082c4 <tcp_parseopt+0x40>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800828a:	4b21      	ldr	r3, [pc, #132]	; (8008310 <tcp_parseopt+0x8c>)
 800828c:	8a1b      	ldrh	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d03c      	beq.n	800830c <tcp_parseopt+0x88>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008292:	4b1f      	ldr	r3, [pc, #124]	; (8008310 <tcp_parseopt+0x8c>)
 8008294:	2200      	movs	r2, #0
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <tcp_parseopt+0x8c>)
 800829a:	881a      	ldrh	r2, [r3, #0]
 800829c:	8a1b      	ldrh	r3, [r3, #16]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d234      	bcs.n	800830c <tcp_parseopt+0x88>
      u8_t opt = tcp_get_next_optbyte();
 80082a2:	f7ff ffd9 	bl	8008258 <tcp_get_next_optbyte>
      switch (opt) {
 80082a6:	2801      	cmp	r0, #1
 80082a8:	d0f6      	beq.n	8008298 <tcp_parseopt+0x14>
 80082aa:	2802      	cmp	r0, #2
 80082ac:	d012      	beq.n	80082d4 <tcp_parseopt+0x50>
 80082ae:	b368      	cbz	r0, 800830c <tcp_parseopt+0x88>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80082b0:	f7ff ffd2 	bl	8008258 <tcp_get_next_optbyte>
          if (data < 2) {
 80082b4:	2801      	cmp	r0, #1
 80082b6:	d929      	bls.n	800830c <tcp_parseopt+0x88>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80082b8:	4b15      	ldr	r3, [pc, #84]	; (8008310 <tcp_parseopt+0x8c>)
 80082ba:	881a      	ldrh	r2, [r3, #0]
 80082bc:	4410      	add	r0, r2
 80082be:	3802      	subs	r0, #2
 80082c0:	8018      	strh	r0, [r3, #0]
 80082c2:	e7e9      	b.n	8008298 <tcp_parseopt+0x14>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80082c4:	4b13      	ldr	r3, [pc, #76]	; (8008314 <tcp_parseopt+0x90>)
 80082c6:	f240 727d 	movw	r2, #1917	; 0x77d
 80082ca:	4913      	ldr	r1, [pc, #76]	; (8008318 <tcp_parseopt+0x94>)
 80082cc:	4813      	ldr	r0, [pc, #76]	; (800831c <tcp_parseopt+0x98>)
 80082ce:	f00a fc01 	bl	8012ad4 <printf>
 80082d2:	e7da      	b.n	800828a <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80082d4:	f7ff ffc0 	bl	8008258 <tcp_get_next_optbyte>
 80082d8:	2804      	cmp	r0, #4
 80082da:	d117      	bne.n	800830c <tcp_parseopt+0x88>
 80082dc:	4a0c      	ldr	r2, [pc, #48]	; (8008310 <tcp_parseopt+0x8c>)
 80082de:	8813      	ldrh	r3, [r2, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	8a12      	ldrh	r2, [r2, #16]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	da11      	bge.n	800830c <tcp_parseopt+0x88>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80082e8:	f7ff ffb6 	bl	8008258 <tcp_get_next_optbyte>
 80082ec:	b285      	uxth	r5, r0
 80082ee:	022d      	lsls	r5, r5, #8
 80082f0:	b2ad      	uxth	r5, r5
          mss |= tcp_get_next_optbyte();
 80082f2:	f7ff ffb1 	bl	8008258 <tcp_get_next_optbyte>
 80082f6:	b280      	uxth	r0, r0
 80082f8:	4305      	orrs	r5, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80082fa:	1e6b      	subs	r3, r5, #1
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008302:	d301      	bcc.n	8008308 <tcp_parseopt+0x84>
 8008304:	f44f 7506 	mov.w	r5, #536	; 0x218
 8008308:	8665      	strh	r5, [r4, #50]	; 0x32
          break;
 800830a:	e7c5      	b.n	8008298 <tcp_parseopt+0x14>
      }
    }
  }
}
 800830c:	bd38      	pop	{r3, r4, r5, pc}
 800830e:	bf00      	nop
 8008310:	200033bc 	.word	0x200033bc
 8008314:	0801b054 	.word	0x0801b054
 8008318:	0801b088 	.word	0x0801b088
 800831c:	08019f6c 	.word	0x08019f6c

08008320 <tcp_input_delayed_close>:
{
 8008320:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008322:	4604      	mov	r4, r0
 8008324:	b130      	cbz	r0, 8008334 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 8008326:	4b11      	ldr	r3, [pc, #68]	; (800836c <tcp_input_delayed_close+0x4c>)
 8008328:	7c9b      	ldrb	r3, [r3, #18]
 800832a:	f013 0f10 	tst.w	r3, #16
 800832e:	d109      	bne.n	8008344 <tcp_input_delayed_close+0x24>
  return 0;
 8008330:	2000      	movs	r0, #0
}
 8008332:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008334:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <tcp_input_delayed_close+0x50>)
 8008336:	f240 225a 	movw	r2, #602	; 0x25a
 800833a:	490e      	ldr	r1, [pc, #56]	; (8008374 <tcp_input_delayed_close+0x54>)
 800833c:	480e      	ldr	r0, [pc, #56]	; (8008378 <tcp_input_delayed_close+0x58>)
 800833e:	f00a fbc9 	bl	8012ad4 <printf>
 8008342:	e7f0      	b.n	8008326 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008344:	8b63      	ldrh	r3, [r4, #26]
 8008346:	f013 0f10 	tst.w	r3, #16
 800834a:	d106      	bne.n	800835a <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800834c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008350:	b11b      	cbz	r3, 800835a <tcp_input_delayed_close+0x3a>
 8008352:	f06f 010e 	mvn.w	r1, #14
 8008356:	6920      	ldr	r0, [r4, #16]
 8008358:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800835a:	4621      	mov	r1, r4
 800835c:	4807      	ldr	r0, [pc, #28]	; (800837c <tcp_input_delayed_close+0x5c>)
 800835e:	f7ff f98b 	bl	8007678 <tcp_pcb_remove>
    tcp_free(pcb);
 8008362:	4620      	mov	r0, r4
 8008364:	f7ff f846 	bl	80073f4 <tcp_free>
    return 1;
 8008368:	2001      	movs	r0, #1
 800836a:	e7e2      	b.n	8008332 <tcp_input_delayed_close+0x12>
 800836c:	200033bc 	.word	0x200033bc
 8008370:	0801b054 	.word	0x0801b054
 8008374:	0801b0a4 	.word	0x0801b0a4
 8008378:	08019f6c 	.word	0x08019f6c
 800837c:	200073c8 	.word	0x200073c8

08008380 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8008380:	4b22      	ldr	r3, [pc, #136]	; (800840c <tcp_timewait_input+0x8c>)
 8008382:	7cdb      	ldrb	r3, [r3, #19]
 8008384:	f013 0f04 	tst.w	r3, #4
 8008388:	d13f      	bne.n	800840a <tcp_timewait_input+0x8a>
{
 800838a:	b570      	push	{r4, r5, r6, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008390:	b1a0      	cbz	r0, 80083bc <tcp_timewait_input+0x3c>
  if (flags & TCP_SYN) {
 8008392:	4b1e      	ldr	r3, [pc, #120]	; (800840c <tcp_timewait_input+0x8c>)
 8008394:	7cdb      	ldrb	r3, [r3, #19]
 8008396:	f013 0f02 	tst.w	r3, #2
 800839a:	d027      	beq.n	80083ec <tcp_timewait_input+0x6c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800839c:	4b1b      	ldr	r3, [pc, #108]	; (800840c <tcp_timewait_input+0x8c>)
 800839e:	695a      	ldr	r2, [r3, #20]
 80083a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083a2:	1ad1      	subs	r1, r2, r3
 80083a4:	2900      	cmp	r1, #0
 80083a6:	db04      	blt.n	80083b2 <tcp_timewait_input+0x32>
 80083a8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80083aa:	440b      	add	r3, r1
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dd0c      	ble.n	80083cc <tcp_timewait_input+0x4c>
  if ((tcplen > 0)) {
 80083b2:	4b16      	ldr	r3, [pc, #88]	; (800840c <tcp_timewait_input+0x8c>)
 80083b4:	8b1b      	ldrh	r3, [r3, #24]
 80083b6:	bb03      	cbnz	r3, 80083fa <tcp_timewait_input+0x7a>
}
 80083b8:	b004      	add	sp, #16
 80083ba:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80083bc:	4b14      	ldr	r3, [pc, #80]	; (8008410 <tcp_timewait_input+0x90>)
 80083be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80083c2:	4914      	ldr	r1, [pc, #80]	; (8008414 <tcp_timewait_input+0x94>)
 80083c4:	4814      	ldr	r0, [pc, #80]	; (8008418 <tcp_timewait_input+0x98>)
 80083c6:	f00a fb85 	bl	8012ad4 <printf>
 80083ca:	e7e2      	b.n	8008392 <tcp_timewait_input+0x12>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083cc:	490f      	ldr	r1, [pc, #60]	; (800840c <tcp_timewait_input+0x8c>)
 80083ce:	68c8      	ldr	r0, [r1, #12]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083d0:	4b12      	ldr	r3, [pc, #72]	; (800841c <tcp_timewait_input+0x9c>)
 80083d2:	8b0d      	ldrh	r5, [r1, #24]
 80083d4:	8806      	ldrh	r6, [r0, #0]
 80083d6:	9602      	str	r6, [sp, #8]
 80083d8:	8840      	ldrh	r0, [r0, #2]
 80083da:	9001      	str	r0, [sp, #4]
 80083dc:	1f18      	subs	r0, r3, #4
 80083de:	9000      	str	r0, [sp, #0]
 80083e0:	442a      	add	r2, r5
 80083e2:	69c9      	ldr	r1, [r1, #28]
 80083e4:	4620      	mov	r0, r4
 80083e6:	f001 ffc5 	bl	800a374 <tcp_rst>
      return;
 80083ea:	e7e5      	b.n	80083b8 <tcp_timewait_input+0x38>
  } else if (flags & TCP_FIN) {
 80083ec:	f013 0f01 	tst.w	r3, #1
 80083f0:	d0df      	beq.n	80083b2 <tcp_timewait_input+0x32>
    pcb->tmr = tcp_ticks;
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <tcp_timewait_input+0xa0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6223      	str	r3, [r4, #32]
 80083f8:	e7db      	b.n	80083b2 <tcp_timewait_input+0x32>
    tcp_ack_now(pcb);
 80083fa:	8b63      	ldrh	r3, [r4, #26]
 80083fc:	f043 0302 	orr.w	r3, r3, #2
 8008400:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8008402:	4620      	mov	r0, r4
 8008404:	f002 f838 	bl	800a478 <tcp_output>
 8008408:	e7d6      	b.n	80083b8 <tcp_timewait_input+0x38>
 800840a:	4770      	bx	lr
 800840c:	200033bc 	.word	0x200033bc
 8008410:	0801b054 	.word	0x0801b054
 8008414:	0801b0cc 	.word	0x0801b0cc
 8008418:	08019f6c 	.word	0x08019f6c
 800841c:	200044ec 	.word	0x200044ec
 8008420:	200073cc 	.word	0x200073cc

08008424 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8008424:	4b45      	ldr	r3, [pc, #276]	; (800853c <tcp_listen_input+0x118>)
 8008426:	7cdb      	ldrb	r3, [r3, #19]
 8008428:	f013 0f04 	tst.w	r3, #4
 800842c:	f040 8084 	bne.w	8008538 <tcp_listen_input+0x114>
{
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008436:	b148      	cbz	r0, 800844c <tcp_listen_input+0x28>
  if (flags & TCP_ACK) {
 8008438:	4b40      	ldr	r3, [pc, #256]	; (800853c <tcp_listen_input+0x118>)
 800843a:	7cdb      	ldrb	r3, [r3, #19]
 800843c:	f013 0f10 	tst.w	r3, #16
 8008440:	d10c      	bne.n	800845c <tcp_listen_input+0x38>
  } else if (flags & TCP_SYN) {
 8008442:	f013 0f02 	tst.w	r3, #2
 8008446:	d11a      	bne.n	800847e <tcp_listen_input+0x5a>
}
 8008448:	b004      	add	sp, #16
 800844a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800844c:	4b3c      	ldr	r3, [pc, #240]	; (8008540 <tcp_listen_input+0x11c>)
 800844e:	f240 2281 	movw	r2, #641	; 0x281
 8008452:	493c      	ldr	r1, [pc, #240]	; (8008544 <tcp_listen_input+0x120>)
 8008454:	483c      	ldr	r0, [pc, #240]	; (8008548 <tcp_listen_input+0x124>)
 8008456:	f00a fb3d 	bl	8012ad4 <printf>
 800845a:	e7ed      	b.n	8008438 <tcp_listen_input+0x14>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800845c:	4937      	ldr	r1, [pc, #220]	; (800853c <tcp_listen_input+0x118>)
 800845e:	68c8      	ldr	r0, [r1, #12]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008460:	4b3a      	ldr	r3, [pc, #232]	; (800854c <tcp_listen_input+0x128>)
 8008462:	8b0d      	ldrh	r5, [r1, #24]
 8008464:	694a      	ldr	r2, [r1, #20]
 8008466:	8806      	ldrh	r6, [r0, #0]
 8008468:	9602      	str	r6, [sp, #8]
 800846a:	8840      	ldrh	r0, [r0, #2]
 800846c:	9001      	str	r0, [sp, #4]
 800846e:	1f18      	subs	r0, r3, #4
 8008470:	9000      	str	r0, [sp, #0]
 8008472:	442a      	add	r2, r5
 8008474:	69c9      	ldr	r1, [r1, #28]
 8008476:	4620      	mov	r0, r4
 8008478:	f001 ff7c 	bl	800a374 <tcp_rst>
 800847c:	e7e4      	b.n	8008448 <tcp_listen_input+0x24>
    npcb = tcp_alloc(pcb->prio);
 800847e:	7d60      	ldrb	r0, [r4, #21]
 8008480:	f7ff faae 	bl	80079e0 <tcp_alloc>
    if (npcb == NULL) {
 8008484:	4605      	mov	r5, r0
 8008486:	2800      	cmp	r0, #0
 8008488:	d048      	beq.n	800851c <tcp_listen_input+0xf8>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800848a:	4b31      	ldr	r3, [pc, #196]	; (8008550 <tcp_listen_input+0x12c>)
 800848c:	695a      	ldr	r2, [r3, #20]
 800848e:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8008494:	8ae3      	ldrh	r3, [r4, #22]
 8008496:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008498:	4e28      	ldr	r6, [pc, #160]	; (800853c <tcp_listen_input+0x118>)
 800849a:	68f3      	ldr	r3, [r6, #12]
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80084a0:	2303      	movs	r3, #3
 80084a2:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80084a4:	6973      	ldr	r3, [r6, #20]
 80084a6:	3301      	adds	r3, #1
 80084a8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80084aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80084ac:	f7ff f86c 	bl	8007588 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 80084b0:	65a8      	str	r0, [r5, #88]	; 0x58
    npcb->snd_nxt = iss;
 80084b2:	6528      	str	r0, [r5, #80]	; 0x50
    npcb->lastack = iss;
 80084b4:	6468      	str	r0, [r5, #68]	; 0x44
    npcb->snd_lbb = iss;
 80084b6:	65e8      	str	r0, [r5, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80084b8:	6973      	ldr	r3, [r6, #20]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	656b      	str	r3, [r5, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	612b      	str	r3, [r5, #16]
    npcb->listener = pcb;
 80084c2:	67ec      	str	r4, [r5, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80084c4:	7a63      	ldrb	r3, [r4, #9]
 80084c6:	f003 030c 	and.w	r3, r3, #12
 80084ca:	726b      	strb	r3, [r5, #9]
    npcb->netif_idx = pcb->netif_idx;
 80084cc:	7a23      	ldrb	r3, [r4, #8]
 80084ce:	722b      	strb	r3, [r5, #8]
    TCP_REG_ACTIVE(npcb);
 80084d0:	4b20      	ldr	r3, [pc, #128]	; (8008554 <tcp_listen_input+0x130>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	60ea      	str	r2, [r5, #12]
 80084d6:	601d      	str	r5, [r3, #0]
 80084d8:	f002 fa6a 	bl	800a9b0 <tcp_timer_needed>
 80084dc:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <tcp_listen_input+0x134>)
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80084e2:	4628      	mov	r0, r5
 80084e4:	f7ff fece 	bl	8008284 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80084e8:	68f3      	ldr	r3, [r6, #12]
 80084ea:	89db      	ldrh	r3, [r3, #14]
 80084ec:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80084f0:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80084f4:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
 80084f6:	1d2c      	adds	r4, r5, #4
 80084f8:	4620      	mov	r0, r4
 80084fa:	f003 f9b9 	bl	800b870 <ip4_route>
 80084fe:	4601      	mov	r1, r0
 8008500:	4622      	mov	r2, r4
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff f85c 	bl	80075c0 <tcp_eff_send_mss_netif>
 8008508:	8668      	strh	r0, [r5, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800850a:	2112      	movs	r1, #18
 800850c:	4628      	mov	r0, r5
 800850e:	f001 fd85 	bl	800a01c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008512:	b960      	cbnz	r0, 800852e <tcp_listen_input+0x10a>
    tcp_output(npcb);
 8008514:	4628      	mov	r0, r5
 8008516:	f001 ffaf 	bl	800a478 <tcp_output>
 800851a:	e795      	b.n	8008448 <tcp_listen_input+0x24>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800851c:	69a3      	ldr	r3, [r4, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d092      	beq.n	8008448 <tcp_listen_input+0x24>
 8008522:	f04f 32ff 	mov.w	r2, #4294967295
 8008526:	2100      	movs	r1, #0
 8008528:	6920      	ldr	r0, [r4, #16]
 800852a:	4798      	blx	r3
      return;
 800852c:	e78c      	b.n	8008448 <tcp_listen_input+0x24>
      tcp_abandon(npcb, 0);
 800852e:	2100      	movs	r1, #0
 8008530:	4628      	mov	r0, r5
 8008532:	f7ff f909 	bl	8007748 <tcp_abandon>
      return;
 8008536:	e787      	b.n	8008448 <tcp_listen_input+0x24>
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	200033bc 	.word	0x200033bc
 8008540:	0801b054 	.word	0x0801b054
 8008544:	0801b0ec 	.word	0x0801b0ec
 8008548:	08019f6c 	.word	0x08019f6c
 800854c:	200044ec 	.word	0x200044ec
 8008550:	200044d8 	.word	0x200044d8
 8008554:	200073c8 	.word	0x200073c8
 8008558:	200073c4 	.word	0x200073c4

0800855c <tcp_free_acked_segments>:
{
 800855c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008560:	4606      	mov	r6, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4699      	mov	r9, r3
  while (seg_list != NULL &&
 8008566:	e008      	b.n	800857a <tcp_free_acked_segments+0x1e>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008568:	4b26      	ldr	r3, [pc, #152]	; (8008604 <tcp_free_acked_segments+0xa8>)
 800856a:	f240 4257 	movw	r2, #1111	; 0x457
 800856e:	4926      	ldr	r1, [pc, #152]	; (8008608 <tcp_free_acked_segments+0xac>)
 8008570:	4826      	ldr	r0, [pc, #152]	; (800860c <tcp_free_acked_segments+0xb0>)
 8008572:	f00a faaf 	bl	8012ad4 <printf>
 8008576:	e021      	b.n	80085bc <tcp_free_acked_segments+0x60>
{
 8008578:	463c      	mov	r4, r7
  while (seg_list != NULL &&
 800857a:	2c00      	cmp	r4, #0
 800857c:	d03e      	beq.n	80085fc <tcp_free_acked_segments+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	6858      	ldr	r0, [r3, #4]
 8008582:	f7fd fda0 	bl	80060c6 <lwip_htonl>
 8008586:	4605      	mov	r5, r0
 8008588:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800858c:	68e3      	ldr	r3, [r4, #12]
 800858e:	8998      	ldrh	r0, [r3, #12]
 8008590:	f7fd fd94 	bl	80060bc <lwip_htons>
 8008594:	f010 0f03 	tst.w	r0, #3
 8008598:	d02e      	beq.n	80085f8 <tcp_free_acked_segments+0x9c>
 800859a:	2001      	movs	r0, #1
 800859c:	4480      	add	r8, r0
 800859e:	4445      	add	r5, r8
 80085a0:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <tcp_free_acked_segments+0xb4>)
 80085a2:	69d8      	ldr	r0, [r3, #28]
 80085a4:	1a2d      	subs	r5, r5, r0
  while (seg_list != NULL &&
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	dc28      	bgt.n	80085fc <tcp_free_acked_segments+0xa0>
    seg_list = seg_list->next;
 80085aa:	6827      	ldr	r7, [r4, #0]
    clen = pbuf_clen(next->p);
 80085ac:	6860      	ldr	r0, [r4, #4]
 80085ae:	f7fe fd0d 	bl	8006fcc <pbuf_clen>
 80085b2:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80085b4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 80085b8:	4283      	cmp	r3, r0
 80085ba:	d3d5      	bcc.n	8008568 <tcp_free_acked_segments+0xc>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80085bc:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 80085c0:	1b45      	subs	r5, r0, r5
 80085c2:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80085c6:	8923      	ldrh	r3, [r4, #8]
 80085c8:	4a11      	ldr	r2, [pc, #68]	; (8008610 <tcp_free_acked_segments+0xb4>)
 80085ca:	8c11      	ldrh	r1, [r2, #32]
 80085cc:	440b      	add	r3, r1
 80085ce:	8413      	strh	r3, [r2, #32]
    tcp_seg_free(next);
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7fe ff9d 	bl	8007510 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80085d6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0cc      	beq.n	8008578 <tcp_free_acked_segments+0x1c>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80085de:	2f00      	cmp	r7, #0
 80085e0:	d1ca      	bne.n	8008578 <tcp_free_acked_segments+0x1c>
 80085e2:	f1b9 0f00 	cmp.w	r9, #0
 80085e6:	d1c7      	bne.n	8008578 <tcp_free_acked_segments+0x1c>
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <tcp_free_acked_segments+0xa8>)
 80085ea:	f240 4261 	movw	r2, #1121	; 0x461
 80085ee:	4909      	ldr	r1, [pc, #36]	; (8008614 <tcp_free_acked_segments+0xb8>)
 80085f0:	4806      	ldr	r0, [pc, #24]	; (800860c <tcp_free_acked_segments+0xb0>)
 80085f2:	f00a fa6f 	bl	8012ad4 <printf>
 80085f6:	e7bf      	b.n	8008578 <tcp_free_acked_segments+0x1c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80085f8:	2000      	movs	r0, #0
 80085fa:	e7cf      	b.n	800859c <tcp_free_acked_segments+0x40>
}
 80085fc:	4620      	mov	r0, r4
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	bf00      	nop
 8008604:	0801b054 	.word	0x0801b054
 8008608:	0801b10c 	.word	0x0801b10c
 800860c:	08019f6c 	.word	0x08019f6c
 8008610:	200033bc 	.word	0x200033bc
 8008614:	0801b134 	.word	0x0801b134

08008618 <tcp_oos_insert_segment>:
{
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800861c:	4605      	mov	r5, r0
 800861e:	b160      	cbz	r0, 800863a <tcp_oos_insert_segment+0x22>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008620:	68eb      	ldr	r3, [r5, #12]
 8008622:	8998      	ldrh	r0, [r3, #12]
 8008624:	f7fd fd4a 	bl	80060bc <lwip_htons>
 8008628:	f010 0f01 	tst.w	r0, #1
 800862c:	d01a      	beq.n	8008664 <tcp_oos_insert_segment+0x4c>
    tcp_segs_free(next);
 800862e:	4620      	mov	r0, r4
 8008630:	f7fe ff7b 	bl	800752a <tcp_segs_free>
    next = NULL;
 8008634:	2400      	movs	r4, #0
  cseg->next = next;
 8008636:	602c      	str	r4, [r5, #0]
}
 8008638:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <tcp_oos_insert_segment+0x98>)
 800863c:	f240 421f 	movw	r2, #1055	; 0x41f
 8008640:	491c      	ldr	r1, [pc, #112]	; (80086b4 <tcp_oos_insert_segment+0x9c>)
 8008642:	481d      	ldr	r0, [pc, #116]	; (80086b8 <tcp_oos_insert_segment+0xa0>)
 8008644:	f00a fa46 	bl	8012ad4 <printf>
 8008648:	e7ea      	b.n	8008620 <tcp_oos_insert_segment+0x8>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800864a:	68eb      	ldr	r3, [r5, #12]
 800864c:	899e      	ldrh	r6, [r3, #12]
 800864e:	2001      	movs	r0, #1
 8008650:	f7fd fd34 	bl	80060bc <lwip_htons>
 8008654:	68eb      	ldr	r3, [r5, #12]
 8008656:	4306      	orrs	r6, r0
 8008658:	819e      	strh	r6, [r3, #12]
      next = next->next;
 800865a:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 800865c:	4620      	mov	r0, r4
 800865e:	f7fe ff57 	bl	8007510 <tcp_seg_free>
      next = next->next;
 8008662:	4634      	mov	r4, r6
    while (next &&
 8008664:	b18c      	cbz	r4, 800868a <tcp_oos_insert_segment+0x72>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008666:	892b      	ldrh	r3, [r5, #8]
 8008668:	4a14      	ldr	r2, [pc, #80]	; (80086bc <tcp_oos_insert_segment+0xa4>)
 800866a:	6952      	ldr	r2, [r2, #20]
 800866c:	4413      	add	r3, r2
 800866e:	68e1      	ldr	r1, [r4, #12]
 8008670:	684a      	ldr	r2, [r1, #4]
 8008672:	8920      	ldrh	r0, [r4, #8]
 8008674:	4402      	add	r2, r0
 8008676:	1a9b      	subs	r3, r3, r2
    while (next &&
 8008678:	2b00      	cmp	r3, #0
 800867a:	db06      	blt.n	800868a <tcp_oos_insert_segment+0x72>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800867c:	8988      	ldrh	r0, [r1, #12]
 800867e:	f7fd fd1d 	bl	80060bc <lwip_htons>
 8008682:	f010 0f01 	tst.w	r0, #1
 8008686:	d0e8      	beq.n	800865a <tcp_oos_insert_segment+0x42>
 8008688:	e7df      	b.n	800864a <tcp_oos_insert_segment+0x32>
    if (next &&
 800868a:	2c00      	cmp	r4, #0
 800868c:	d0d3      	beq.n	8008636 <tcp_oos_insert_segment+0x1e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800868e:	892b      	ldrh	r3, [r5, #8]
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <tcp_oos_insert_segment+0xa4>)
 8008692:	6951      	ldr	r1, [r2, #20]
 8008694:	440b      	add	r3, r1
 8008696:	68e2      	ldr	r2, [r4, #12]
 8008698:	6852      	ldr	r2, [r2, #4]
 800869a:	1a9b      	subs	r3, r3, r2
    if (next &&
 800869c:	2b00      	cmp	r3, #0
 800869e:	ddca      	ble.n	8008636 <tcp_oos_insert_segment+0x1e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80086a0:	1a52      	subs	r2, r2, r1
 80086a2:	b291      	uxth	r1, r2
 80086a4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80086a6:	6868      	ldr	r0, [r5, #4]
 80086a8:	f7fe fc3c 	bl	8006f24 <pbuf_realloc>
 80086ac:	e7c3      	b.n	8008636 <tcp_oos_insert_segment+0x1e>
 80086ae:	bf00      	nop
 80086b0:	0801b054 	.word	0x0801b054
 80086b4:	0801b154 	.word	0x0801b154
 80086b8:	08019f6c 	.word	0x08019f6c
 80086bc:	200033bc 	.word	0x200033bc

080086c0 <tcp_receive>:
{
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80086c2:	4604      	mov	r4, r0
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d06e      	beq.n	80087a6 <tcp_receive+0xe6>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80086c8:	7d23      	ldrb	r3, [r4, #20]
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d973      	bls.n	80087b6 <tcp_receive+0xf6>
  if (flags & TCP_ACK) {
 80086ce:	4baf      	ldr	r3, [pc, #700]	; (800898c <tcp_receive+0x2cc>)
 80086d0:	7cdb      	ldrb	r3, [r3, #19]
 80086d2:	f013 0f10 	tst.w	r3, #16
 80086d6:	d03c      	beq.n	8008752 <tcp_receive+0x92>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80086d8:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 80086dc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80086de:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80086e0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80086e2:	4baa      	ldr	r3, [pc, #680]	; (800898c <tcp_receive+0x2cc>)
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	1acd      	subs	r5, r1, r3
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	db0a      	blt.n	8008702 <tcp_receive+0x42>
 80086ec:	4299      	cmp	r1, r3
 80086ee:	d06a      	beq.n	80087c6 <tcp_receive+0x106>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80086f0:	49a6      	ldr	r1, [pc, #664]	; (800898c <tcp_receive+0x2cc>)
 80086f2:	69c9      	ldr	r1, [r1, #28]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80086f4:	428a      	cmp	r2, r1
 80086f6:	d114      	bne.n	8008722 <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80086f8:	4aa4      	ldr	r2, [pc, #656]	; (800898c <tcp_receive+0x2cc>)
 80086fa:	68d2      	ldr	r2, [r2, #12]
 80086fc:	89d2      	ldrh	r2, [r2, #14]
 80086fe:	4290      	cmp	r0, r2
 8008700:	d20f      	bcs.n	8008722 <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008702:	4aa2      	ldr	r2, [pc, #648]	; (800898c <tcp_receive+0x2cc>)
 8008704:	68d2      	ldr	r2, [r2, #12]
 8008706:	89d2      	ldrh	r2, [r2, #14]
 8008708:	b290      	uxth	r0, r2
 800870a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800870e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8008712:	4288      	cmp	r0, r1
 8008714:	d901      	bls.n	800871a <tcp_receive+0x5a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008716:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 800871a:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800871c:	4b9b      	ldr	r3, [pc, #620]	; (800898c <tcp_receive+0x2cc>)
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008722:	4b9a      	ldr	r3, [pc, #616]	; (800898c <tcp_receive+0x2cc>)
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008728:	1a5a      	subs	r2, r3, r1
 800872a:	2a00      	cmp	r2, #0
 800872c:	dd51      	ble.n	80087d2 <tcp_receive+0x112>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800872e:	2a01      	cmp	r2, #1
 8008730:	d403      	bmi.n	800873a <tcp_receive+0x7a>
 8008732:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008734:	1a9a      	subs	r2, r3, r2
 8008736:	2a00      	cmp	r2, #0
 8008738:	dd7d      	ble.n	8008836 <tcp_receive+0x176>
      tcp_send_empty_ack(pcb);
 800873a:	4620      	mov	r0, r4
 800873c:	f001 fe62 	bl	800a404 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008742:	b133      	cbz	r3, 8008752 <tcp_receive+0x92>
 8008744:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008746:	4991      	ldr	r1, [pc, #580]	; (800898c <tcp_receive+0x2cc>)
 8008748:	69c9      	ldr	r1, [r1, #28]
 800874a:	1a52      	subs	r2, r2, r1
 800874c:	2a00      	cmp	r2, #0
 800874e:	f2c0 812b 	blt.w	80089a8 <tcp_receive+0x2e8>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008752:	4b8e      	ldr	r3, [pc, #568]	; (800898c <tcp_receive+0x2cc>)
 8008754:	8b1b      	ldrh	r3, [r3, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 8412 	beq.w	8008f80 <tcp_receive+0x8c0>
 800875c:	7d22      	ldrb	r2, [r4, #20]
 800875e:	2a06      	cmp	r2, #6
 8008760:	f200 840e 	bhi.w	8008f80 <tcp_receive+0x8c0>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008764:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008766:	4a89      	ldr	r2, [pc, #548]	; (800898c <tcp_receive+0x2cc>)
 8008768:	6952      	ldr	r2, [r2, #20]
 800876a:	1a8e      	subs	r6, r1, r2
 800876c:	2e01      	cmp	r6, #1
 800876e:	d405      	bmi.n	800877c <tcp_receive+0xbc>
 8008770:	4413      	add	r3, r2
 8008772:	1acb      	subs	r3, r1, r3
 8008774:	3301      	adds	r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	f340 813c 	ble.w	80089f4 <tcp_receive+0x334>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800877c:	1a52      	subs	r2, r2, r1
 800877e:	2a00      	cmp	r2, #0
 8008780:	f2c0 8179 	blt.w	8008a76 <tcp_receive+0x3b6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008784:	4b81      	ldr	r3, [pc, #516]	; (800898c <tcp_receive+0x2cc>)
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800878a:	1a5a      	subs	r2, r3, r1
 800878c:	2a00      	cmp	r2, #0
 800878e:	db06      	blt.n	800879e <tcp_receive+0xde>
 8008790:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008792:	440a      	add	r2, r1
 8008794:	1a9a      	subs	r2, r3, r2
 8008796:	3201      	adds	r2, #1
 8008798:	2a00      	cmp	r2, #0
 800879a:	f340 8171 	ble.w	8008a80 <tcp_receive+0x3c0>
      tcp_send_empty_ack(pcb);
 800879e:	4620      	mov	r0, r4
 80087a0:	f001 fe30 	bl	800a404 <tcp_send_empty_ack>
 80087a4:	e3fc      	b.n	8008fa0 <tcp_receive+0x8e0>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80087a6:	4b7a      	ldr	r3, [pc, #488]	; (8008990 <tcp_receive+0x2d0>)
 80087a8:	f240 427b 	movw	r2, #1147	; 0x47b
 80087ac:	4979      	ldr	r1, [pc, #484]	; (8008994 <tcp_receive+0x2d4>)
 80087ae:	487a      	ldr	r0, [pc, #488]	; (8008998 <tcp_receive+0x2d8>)
 80087b0:	f00a f990 	bl	8012ad4 <printf>
 80087b4:	e788      	b.n	80086c8 <tcp_receive+0x8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80087b6:	4b76      	ldr	r3, [pc, #472]	; (8008990 <tcp_receive+0x2d0>)
 80087b8:	f240 427c 	movw	r2, #1148	; 0x47c
 80087bc:	4977      	ldr	r1, [pc, #476]	; (800899c <tcp_receive+0x2dc>)
 80087be:	4876      	ldr	r0, [pc, #472]	; (8008998 <tcp_receive+0x2d8>)
 80087c0:	f00a f988 	bl	8012ad4 <printf>
 80087c4:	e783      	b.n	80086ce <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80087c6:	4971      	ldr	r1, [pc, #452]	; (800898c <tcp_receive+0x2cc>)
 80087c8:	69c9      	ldr	r1, [r1, #28]
 80087ca:	1a51      	subs	r1, r2, r1
 80087cc:	2900      	cmp	r1, #0
 80087ce:	da8f      	bge.n	80086f0 <tcp_receive+0x30>
 80087d0:	e797      	b.n	8008702 <tcp_receive+0x42>
      if (tcplen == 0) {
 80087d2:	4a6e      	ldr	r2, [pc, #440]	; (800898c <tcp_receive+0x2cc>)
 80087d4:	8b12      	ldrh	r2, [r2, #24]
 80087d6:	b92a      	cbnz	r2, 80087e4 <tcp_receive+0x124>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80087d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80087da:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 80087de:	4402      	add	r2, r0
 80087e0:	42b2      	cmp	r2, r6
 80087e2:	d003      	beq.n	80087ec <tcp_receive+0x12c>
        pcb->dupacks = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ea:	e7a9      	b.n	8008740 <tcp_receive+0x80>
          if (pcb->rtime >= 0) {
 80087ec:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	dbf7      	blt.n	80087e4 <tcp_receive+0x124>
            if (pcb->lastack == ackno) {
 80087f4:	428b      	cmp	r3, r1
 80087f6:	d1f5      	bne.n	80087e4 <tcp_receive+0x124>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80087f8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087fc:	2bff      	cmp	r3, #255	; 0xff
 80087fe:	d002      	beq.n	8008806 <tcp_receive+0x146>
                ++pcb->dupacks;
 8008800:	3301      	adds	r3, #1
 8008802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8008806:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800880a:	2b03      	cmp	r3, #3
 800880c:	d908      	bls.n	8008820 <tcp_receive+0x160>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800880e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 8008812:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8008814:	440a      	add	r2, r1
 8008816:	b292      	uxth	r2, r2
 8008818:	4291      	cmp	r1, r2
 800881a:	d807      	bhi.n	800882c <tcp_receive+0x16c>
 800881c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
              if (pcb->dupacks >= 3) {
 8008820:	2b02      	cmp	r3, #2
 8008822:	d98d      	bls.n	8008740 <tcp_receive+0x80>
                tcp_rexmit_fast(pcb);
 8008824:	4620      	mov	r0, r4
 8008826:	f001 fd69 	bl	800a2fc <tcp_rexmit_fast>
      if (!found_dupack) {
 800882a:	e789      	b.n	8008740 <tcp_receive+0x80>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800882c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008830:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8008834:	e7f4      	b.n	8008820 <tcp_receive+0x160>
      if (pcb->flags & TF_INFR) {
 8008836:	8b62      	ldrh	r2, [r4, #26]
 8008838:	f012 0f04 	tst.w	r2, #4
 800883c:	d009      	beq.n	8008852 <tcp_receive+0x192>
        tcp_clear_flags(pcb, TF_INFR);
 800883e:	f022 0204 	bic.w	r2, r2, #4
 8008842:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008844:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008848:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800884c:	2200      	movs	r2, #0
 800884e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 8008852:	2000      	movs	r0, #0
 8008854:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008858:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800885c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800885e:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 8008862:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008866:	b29a      	uxth	r2, r3
 8008868:	b289      	uxth	r1, r1
 800886a:	1a51      	subs	r1, r2, r1
 800886c:	b289      	uxth	r1, r1
      pcb->dupacks = 0;
 800886e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8008872:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8008874:	7d23      	ldrb	r3, [r4, #20]
 8008876:	2b03      	cmp	r3, #3
 8008878:	d917      	bls.n	80088aa <tcp_receive+0x1ea>
        if (pcb->cwnd < pcb->ssthresh) {
 800887a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800887e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008882:	429a      	cmp	r2, r3
 8008884:	d24b      	bcs.n	800891e <tcp_receive+0x25e>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008886:	8b63      	ldrh	r3, [r4, #26]
 8008888:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800888c:	d040      	beq.n	8008910 <tcp_receive+0x250>
 800888e:	2301      	movs	r3, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008890:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008892:	fb13 f300 	smulbb	r3, r3, r0
 8008896:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 8008898:	428b      	cmp	r3, r1
 800889a:	bf94      	ite	ls
 800889c:	18d1      	addls	r1, r2, r3
 800889e:	1851      	addhi	r1, r2, r1
 80088a0:	b289      	uxth	r1, r1
 80088a2:	428a      	cmp	r2, r1
 80088a4:	d836      	bhi.n	8008914 <tcp_receive+0x254>
 80088a6:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80088aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80088ac:	4a3c      	ldr	r2, [pc, #240]	; (80089a0 <tcp_receive+0x2e0>)
 80088ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80088b0:	4620      	mov	r0, r4
 80088b2:	f7ff fe53 	bl	800855c <tcp_free_acked_segments>
 80088b6:	4603      	mov	r3, r0
 80088b8:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80088ba:	4a3a      	ldr	r2, [pc, #232]	; (80089a4 <tcp_receive+0x2e4>)
 80088bc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80088be:	4620      	mov	r0, r4
 80088c0:	f7ff fe4c 	bl	800855c <tcp_free_acked_segments>
 80088c4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 80088c6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80088c8:	2a00      	cmp	r2, #0
 80088ca:	d049      	beq.n	8008960 <tcp_receive+0x2a0>
        pcb->rtime = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d047      	beq.n	8008968 <tcp_receive+0x2a8>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80088d8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80088dc:	492b      	ldr	r1, [pc, #172]	; (800898c <tcp_receive+0x2cc>)
 80088de:	8c09      	ldrh	r1, [r1, #32]
 80088e0:	440b      	add	r3, r1
 80088e2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 80088e6:	8b63      	ldrh	r3, [r4, #26]
 80088e8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80088ec:	f43f af28 	beq.w	8008740 <tcp_receive+0x80>
        if (pcb->unacked == NULL) {
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	d03c      	beq.n	800896e <tcp_receive+0x2ae>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80088f4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80088f6:	68d3      	ldr	r3, [r2, #12]
 80088f8:	6858      	ldr	r0, [r3, #4]
 80088fa:	f7fd fbe4 	bl	80060c6 <lwip_htonl>
 80088fe:	1a2d      	subs	r5, r5, r0
 8008900:	2d00      	cmp	r5, #0
 8008902:	f73f af1d 	bgt.w	8008740 <tcp_receive+0x80>
          tcp_clear_flags(pcb, TF_RTO);
 8008906:	8b63      	ldrh	r3, [r4, #26]
 8008908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800890c:	8363      	strh	r3, [r4, #26]
 800890e:	e717      	b.n	8008740 <tcp_receive+0x80>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008910:	2302      	movs	r3, #2
 8008912:	e7bd      	b.n	8008890 <tcp_receive+0x1d0>
          TCP_WND_INC(pcb->cwnd, increase);
 8008914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008918:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800891c:	e7c5      	b.n	80088aa <tcp_receive+0x1ea>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800891e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008922:	4419      	add	r1, r3
 8008924:	b289      	uxth	r1, r1
 8008926:	428b      	cmp	r3, r1
 8008928:	d810      	bhi.n	800894c <tcp_receive+0x28c>
 800892a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800892e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008932:	429a      	cmp	r2, r3
 8008934:	d8b9      	bhi.n	80088aa <tcp_receive+0x1ea>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800893c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800893e:	4413      	add	r3, r2
 8008940:	b29b      	uxth	r3, r3
 8008942:	429a      	cmp	r2, r3
 8008944:	d807      	bhi.n	8008956 <tcp_receive+0x296>
 8008946:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800894a:	e7ae      	b.n	80088aa <tcp_receive+0x1ea>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800894c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008950:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8008954:	e7eb      	b.n	800892e <tcp_receive+0x26e>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800895a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800895e:	e7a4      	b.n	80088aa <tcp_receive+0x1ea>
        pcb->rtime = -1;
 8008960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008964:	8623      	strh	r3, [r4, #48]	; 0x30
 8008966:	e7b3      	b.n	80088d0 <tcp_receive+0x210>
        pcb->unsent_oversize = 0;
 8008968:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800896c:	e7b4      	b.n	80088d8 <tcp_receive+0x218>
          if ((pcb->unsent == NULL) ||
 800896e:	b140      	cbz	r0, 8008982 <tcp_receive+0x2c2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008970:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008972:	68c3      	ldr	r3, [r0, #12]
 8008974:	6858      	ldr	r0, [r3, #4]
 8008976:	f7fd fba6 	bl	80060c6 <lwip_htonl>
 800897a:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800897c:	2d00      	cmp	r5, #0
 800897e:	f73f aedf 	bgt.w	8008740 <tcp_receive+0x80>
            tcp_clear_flags(pcb, TF_RTO);
 8008982:	8b63      	ldrh	r3, [r4, #26]
 8008984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008988:	8363      	strh	r3, [r4, #26]
 800898a:	e6d9      	b.n	8008740 <tcp_receive+0x80>
 800898c:	200033bc 	.word	0x200033bc
 8008990:	0801b054 	.word	0x0801b054
 8008994:	0801b17c 	.word	0x0801b17c
 8008998:	08019f6c 	.word	0x08019f6c
 800899c:	0801b198 	.word	0x0801b198
 80089a0:	0801b1b4 	.word	0x0801b1b4
 80089a4:	0801b1bc 	.word	0x0801b1bc
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80089a8:	4aa1      	ldr	r2, [pc, #644]	; (8008c30 <tcp_receive+0x570>)
 80089aa:	8816      	ldrh	r6, [r2, #0]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	1af2      	subs	r2, r6, r3
 80089b0:	b292      	uxth	r2, r2
      m = (s16_t)(m - (pcb->sa >> 3));
 80089b2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 80089b6:	f3c0 05cf 	ubfx	r5, r0, #3, #16
 80089ba:	1b52      	subs	r2, r2, r5
 80089bc:	b211      	sxth	r1, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 80089be:	b280      	uxth	r0, r0
 80089c0:	fa10 f282 	uxtah	r2, r0, r2
 80089c4:	b212      	sxth	r2, r2
 80089c6:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 80089c8:	2900      	cmp	r1, #0
 80089ca:	db0f      	blt.n	80089ec <tcp_receive+0x32c>
      m = (s16_t)(m - (pcb->sv >> 2));
 80089cc:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80089d0:	eba1 01a3 	sub.w	r1, r1, r3, asr #2
      pcb->sv = (s16_t)(pcb->sv + m);
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	fa13 f181 	uxtah	r1, r3, r1
 80089da:	87e1      	strh	r1, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80089dc:	10d2      	asrs	r2, r2, #3
 80089de:	fa12 f281 	uxtah	r2, r2, r1
 80089e2:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	6363      	str	r3, [r4, #52]	; 0x34
 80089ea:	e6b2      	b.n	8008752 <tcp_receive+0x92>
        m = (s16_t) - m;
 80089ec:	1b9b      	subs	r3, r3, r6
 80089ee:	442b      	add	r3, r5
 80089f0:	b219      	sxth	r1, r3
 80089f2:	e7eb      	b.n	80089cc <tcp_receive+0x30c>
      struct pbuf *p = inseg.p;
 80089f4:	4b8f      	ldr	r3, [pc, #572]	; (8008c34 <tcp_receive+0x574>)
 80089f6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80089f8:	b1dd      	cbz	r5, 8008a32 <tcp_receive+0x372>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80089fa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80089fe:	429e      	cmp	r6, r3
 8008a00:	d81f      	bhi.n	8008a42 <tcp_receive+0x382>
      off = (u16_t)off32;
 8008a02:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008a04:	4b8b      	ldr	r3, [pc, #556]	; (8008c34 <tcp_receive+0x574>)
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	891b      	ldrh	r3, [r3, #8]
 8008a0a:	42b3      	cmp	r3, r6
 8008a0c:	d321      	bcc.n	8008a52 <tcp_receive+0x392>
      inseg.len -= off;
 8008a0e:	4b89      	ldr	r3, [pc, #548]	; (8008c34 <tcp_receive+0x574>)
 8008a10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a12:	1b92      	subs	r2, r2, r6
 8008a14:	859a      	strh	r2, [r3, #44]	; 0x2c
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	891a      	ldrh	r2, [r3, #8]
 8008a1a:	1b92      	subs	r2, r2, r6
 8008a1c:	b292      	uxth	r2, r2
      while (p->len < off) {
 8008a1e:	8969      	ldrh	r1, [r5, #10]
 8008a20:	42b1      	cmp	r1, r6
 8008a22:	d21e      	bcs.n	8008a62 <tcp_receive+0x3a2>
        off -= p->len;
 8008a24:	1a71      	subs	r1, r6, r1
 8008a26:	b28e      	uxth	r6, r1
        p->tot_len = new_tot_len;
 8008a28:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	816b      	strh	r3, [r5, #10]
        p = p->next;
 8008a2e:	682d      	ldr	r5, [r5, #0]
 8008a30:	e7f5      	b.n	8008a1e <tcp_receive+0x35e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008a32:	4b81      	ldr	r3, [pc, #516]	; (8008c38 <tcp_receive+0x578>)
 8008a34:	f240 5294 	movw	r2, #1428	; 0x594
 8008a38:	4980      	ldr	r1, [pc, #512]	; (8008c3c <tcp_receive+0x57c>)
 8008a3a:	4881      	ldr	r0, [pc, #516]	; (8008c40 <tcp_receive+0x580>)
 8008a3c:	f00a f84a 	bl	8012ad4 <printf>
 8008a40:	e7db      	b.n	80089fa <tcp_receive+0x33a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008a42:	4b7d      	ldr	r3, [pc, #500]	; (8008c38 <tcp_receive+0x578>)
 8008a44:	f240 5295 	movw	r2, #1429	; 0x595
 8008a48:	497e      	ldr	r1, [pc, #504]	; (8008c44 <tcp_receive+0x584>)
 8008a4a:	487d      	ldr	r0, [pc, #500]	; (8008c40 <tcp_receive+0x580>)
 8008a4c:	f00a f842 	bl	8012ad4 <printf>
 8008a50:	e7d7      	b.n	8008a02 <tcp_receive+0x342>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008a52:	4b79      	ldr	r3, [pc, #484]	; (8008c38 <tcp_receive+0x578>)
 8008a54:	f240 5297 	movw	r2, #1431	; 0x597
 8008a58:	497b      	ldr	r1, [pc, #492]	; (8008c48 <tcp_receive+0x588>)
 8008a5a:	4879      	ldr	r0, [pc, #484]	; (8008c40 <tcp_receive+0x580>)
 8008a5c:	f00a f83a 	bl	8012ad4 <printf>
 8008a60:	e7d5      	b.n	8008a0e <tcp_receive+0x34e>
      pbuf_remove_header(p, off);
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	f7fe f907 	bl	8006c78 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6c:	4a71      	ldr	r2, [pc, #452]	; (8008c34 <tcp_receive+0x574>)
 8008a6e:	6153      	str	r3, [r2, #20]
 8008a70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a72:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008a74:	e686      	b.n	8008784 <tcp_receive+0xc4>
        tcp_ack_now(pcb);
 8008a76:	8b63      	ldrh	r3, [r4, #26]
 8008a78:	f043 0302 	orr.w	r3, r3, #2
 8008a7c:	8363      	strh	r3, [r4, #26]
 8008a7e:	e681      	b.n	8008784 <tcp_receive+0xc4>
      if (pcb->rcv_nxt == seqno) {
 8008a80:	428b      	cmp	r3, r1
 8008a82:	d005      	beq.n	8008a90 <tcp_receive+0x3d0>
        if (pcb->ooseq == NULL) {
 8008a84:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	f000 819b 	beq.w	8008dc2 <tcp_receive+0x702>
          struct tcp_seg *next, *prev = NULL;
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	e1bd      	b.n	8008e0c <tcp_receive+0x74c>
        tcplen = TCP_TCPLEN(&inseg);
 8008a90:	4b68      	ldr	r3, [pc, #416]	; (8008c34 <tcp_receive+0x574>)
 8008a92:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	8998      	ldrh	r0, [r3, #12]
 8008a98:	f7fd fb10 	bl	80060bc <lwip_htons>
 8008a9c:	f010 0f03 	tst.w	r0, #3
 8008aa0:	d014      	beq.n	8008acc <tcp_receive+0x40c>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	442b      	add	r3, r5
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	4a62      	ldr	r2, [pc, #392]	; (8008c34 <tcp_receive+0x574>)
 8008aaa:	8313      	strh	r3, [r2, #24]
        if (tcplen > pcb->rcv_wnd) {
 8008aac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d80e      	bhi.n	8008ad0 <tcp_receive+0x410>
        if (pcb->ooseq != NULL) {
 8008ab2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d05d      	beq.n	8008b74 <tcp_receive+0x4b4>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ab8:	4b5e      	ldr	r3, [pc, #376]	; (8008c34 <tcp_receive+0x574>)
 8008aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abc:	8998      	ldrh	r0, [r3, #12]
 8008abe:	f7fd fafd 	bl	80060bc <lwip_htons>
 8008ac2:	f010 0f01 	tst.w	r0, #1
 8008ac6:	d152      	bne.n	8008b6e <tcp_receive+0x4ae>
            struct tcp_seg *next = pcb->ooseq;
 8008ac8:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8008aca:	e082      	b.n	8008bd2 <tcp_receive+0x512>
        tcplen = TCP_TCPLEN(&inseg);
 8008acc:	2300      	movs	r3, #0
 8008ace:	e7e9      	b.n	8008aa4 <tcp_receive+0x3e4>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ad0:	4b58      	ldr	r3, [pc, #352]	; (8008c34 <tcp_receive+0x574>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	8998      	ldrh	r0, [r3, #12]
 8008ad6:	f7fd faf1 	bl	80060bc <lwip_htons>
 8008ada:	f010 0f01 	tst.w	r0, #1
 8008ade:	d12e      	bne.n	8008b3e <tcp_receive+0x47e>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008ae0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008ae2:	4b54      	ldr	r3, [pc, #336]	; (8008c34 <tcp_receive+0x574>)
 8008ae4:	859a      	strh	r2, [r3, #44]	; 0x2c
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae8:	8998      	ldrh	r0, [r3, #12]
 8008aea:	f7fd fae7 	bl	80060bc <lwip_htons>
 8008aee:	f010 0f02 	tst.w	r0, #2
 8008af2:	d003      	beq.n	8008afc <tcp_receive+0x43c>
            inseg.len -= 1;
 8008af4:	4a4f      	ldr	r2, [pc, #316]	; (8008c34 <tcp_receive+0x574>)
 8008af6:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8008af8:	3b01      	subs	r3, #1
 8008afa:	8593      	strh	r3, [r2, #44]	; 0x2c
          pbuf_realloc(inseg.p, inseg.len);
 8008afc:	4e4d      	ldr	r6, [pc, #308]	; (8008c34 <tcp_receive+0x574>)
 8008afe:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
 8008b00:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8008b02:	f7fe fa0f 	bl	8006f24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008b06:	8db5      	ldrh	r5, [r6, #44]	; 0x2c
 8008b08:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008b0a:	8998      	ldrh	r0, [r3, #12]
 8008b0c:	f7fd fad6 	bl	80060bc <lwip_htons>
 8008b10:	f010 0f03 	tst.w	r0, #3
 8008b14:	d025      	beq.n	8008b62 <tcp_receive+0x4a2>
 8008b16:	2301      	movs	r3, #1
 8008b18:	442b      	add	r3, r5
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4a45      	ldr	r2, [pc, #276]	; (8008c34 <tcp_receive+0x574>)
 8008b1e:	8313      	strh	r3, [r2, #24]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008b20:	6952      	ldr	r2, [r2, #20]
 8008b22:	4413      	add	r3, r2
 8008b24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008b26:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008b28:	440a      	add	r2, r1
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d0c1      	beq.n	8008ab2 <tcp_receive+0x3f2>
 8008b2e:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <tcp_receive+0x578>)
 8008b30:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008b34:	4945      	ldr	r1, [pc, #276]	; (8008c4c <tcp_receive+0x58c>)
 8008b36:	4842      	ldr	r0, [pc, #264]	; (8008c40 <tcp_receive+0x580>)
 8008b38:	f009 ffcc 	bl	8012ad4 <printf>
 8008b3c:	e7b9      	b.n	8008ab2 <tcp_receive+0x3f2>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008b3e:	4e3d      	ldr	r6, [pc, #244]	; (8008c34 <tcp_receive+0x574>)
 8008b40:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008b42:	8998      	ldrh	r0, [r3, #12]
 8008b44:	b205      	sxth	r5, r0
 8008b46:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8008b4a:	b280      	uxth	r0, r0
 8008b4c:	f7fd fab6 	bl	80060bc <lwip_htons>
 8008b50:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008b54:	f7fd fab2 	bl	80060bc <lwip_htons>
 8008b58:	b203      	sxth	r3, r0
 8008b5a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8008b5c:	431d      	orrs	r5, r3
 8008b5e:	8195      	strh	r5, [r2, #12]
 8008b60:	e7be      	b.n	8008ae0 <tcp_receive+0x420>
          tcplen = TCP_TCPLEN(&inseg);
 8008b62:	2300      	movs	r3, #0
 8008b64:	e7d8      	b.n	8008b18 <tcp_receive+0x458>
              pcb->ooseq = pcb->ooseq->next;
 8008b66:	6803      	ldr	r3, [r0, #0]
 8008b68:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008b6a:	f7fe fcd1 	bl	8007510 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008b6e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d1f8      	bne.n	8008b66 <tcp_receive+0x4a6>
        pcb->rcv_nxt = seqno + tcplen;
 8008b74:	4b2f      	ldr	r3, [pc, #188]	; (8008c34 <tcp_receive+0x574>)
 8008b76:	8b1a      	ldrh	r2, [r3, #24]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008b7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008b80:	429a      	cmp	r2, r3
 8008b82:	f200 80a1 	bhi.w	8008cc8 <tcp_receive+0x608>
        pcb->rcv_wnd -= tcplen;
 8008b86:	4d2b      	ldr	r5, [pc, #172]	; (8008c34 <tcp_receive+0x574>)
 8008b88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008b8a:	8b2a      	ldrh	r2, [r5, #24]
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8008b90:	4620      	mov	r0, r4
 8008b92:	f7fe fc47 	bl	8007424 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8008b96:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008b98:	891a      	ldrh	r2, [r3, #8]
 8008b9a:	b112      	cbz	r2, 8008ba2 <tcp_receive+0x4e2>
          recv_data = inseg.p;
 8008b9c:	636b      	str	r3, [r5, #52]	; 0x34
          inseg.p = NULL;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	62ab      	str	r3, [r5, #40]	; 0x28
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <tcp_receive+0x574>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	8998      	ldrh	r0, [r3, #12]
 8008ba8:	f7fd fa88 	bl	80060bc <lwip_htons>
 8008bac:	f010 0f01 	tst.w	r0, #1
 8008bb0:	f000 80b8 	beq.w	8008d24 <tcp_receive+0x664>
          recv_flags |= TF_GOT_FIN;
 8008bb4:	4a1f      	ldr	r2, [pc, #124]	; (8008c34 <tcp_receive+0x574>)
 8008bb6:	7c93      	ldrb	r3, [r2, #18]
 8008bb8:	f043 0320 	orr.w	r3, r3, #32
 8008bbc:	7493      	strb	r3, [r2, #18]
 8008bbe:	e0b1      	b.n	8008d24 <tcp_receive+0x664>
                tcplen = TCP_TCPLEN(&inseg);
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	441f      	add	r7, r3
 8008bc4:	4b1b      	ldr	r3, [pc, #108]	; (8008c34 <tcp_receive+0x574>)
 8008bc6:	831f      	strh	r7, [r3, #24]
              next = next->next;
 8008bc8:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(tmp);
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7fe fca0 	bl	8007510 <tcp_seg_free>
              next = next->next;
 8008bd0:	4635      	mov	r5, r6
            while (next &&
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	d03c      	beq.n	8008c50 <tcp_receive+0x590>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008bd6:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <tcp_receive+0x574>)
 8008bd8:	8b13      	ldrh	r3, [r2, #24]
 8008bda:	6952      	ldr	r2, [r2, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	68e9      	ldr	r1, [r5, #12]
 8008be0:	684a      	ldr	r2, [r1, #4]
 8008be2:	8928      	ldrh	r0, [r5, #8]
 8008be4:	4402      	add	r2, r0
 8008be6:	1a9b      	subs	r3, r3, r2
            while (next &&
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	db31      	blt.n	8008c50 <tcp_receive+0x590>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008bec:	8988      	ldrh	r0, [r1, #12]
 8008bee:	f7fd fa65 	bl	80060bc <lwip_htons>
 8008bf2:	f010 0f01 	tst.w	r0, #1
 8008bf6:	d0e7      	beq.n	8008bc8 <tcp_receive+0x508>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008bf8:	4b0e      	ldr	r3, [pc, #56]	; (8008c34 <tcp_receive+0x574>)
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	8998      	ldrh	r0, [r3, #12]
 8008bfe:	f7fd fa5d 	bl	80060bc <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008c02:	f010 0f02 	tst.w	r0, #2
 8008c06:	d1df      	bne.n	8008bc8 <tcp_receive+0x508>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008c08:	4e0a      	ldr	r6, [pc, #40]	; (8008c34 <tcp_receive+0x574>)
 8008c0a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008c0c:	899f      	ldrh	r7, [r3, #12]
 8008c0e:	2001      	movs	r0, #1
 8008c10:	f7fd fa54 	bl	80060bc <lwip_htons>
 8008c14:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008c16:	4307      	orrs	r7, r0
 8008c18:	819f      	strh	r7, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008c1a:	8db7      	ldrh	r7, [r6, #44]	; 0x2c
 8008c1c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008c1e:	8998      	ldrh	r0, [r3, #12]
 8008c20:	f7fd fa4c 	bl	80060bc <lwip_htons>
 8008c24:	f010 0f03 	tst.w	r0, #3
 8008c28:	d0ca      	beq.n	8008bc0 <tcp_receive+0x500>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7c9      	b.n	8008bc2 <tcp_receive+0x502>
 8008c2e:	bf00      	nop
 8008c30:	200073cc 	.word	0x200073cc
 8008c34:	200033bc 	.word	0x200033bc
 8008c38:	0801b054 	.word	0x0801b054
 8008c3c:	0801b1c4 	.word	0x0801b1c4
 8008c40:	08019f6c 	.word	0x08019f6c
 8008c44:	0801b1d4 	.word	0x0801b1d4
 8008c48:	0801b1e4 	.word	0x0801b1e4
 8008c4c:	0801b1f4 	.word	0x0801b1f4
            if (next &&
 8008c50:	b145      	cbz	r5, 8008c64 <tcp_receive+0x5a4>
                TCP_SEQ_GT(seqno + tcplen,
 8008c52:	4b8c      	ldr	r3, [pc, #560]	; (8008e84 <tcp_receive+0x7c4>)
 8008c54:	6959      	ldr	r1, [r3, #20]
 8008c56:	8b1b      	ldrh	r3, [r3, #24]
 8008c58:	440b      	add	r3, r1
 8008c5a:	68ea      	ldr	r2, [r5, #12]
 8008c5c:	6852      	ldr	r2, [r2, #4]
 8008c5e:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc01      	bgt.n	8008c68 <tcp_receive+0x5a8>
            pcb->ooseq = next;
 8008c64:	6765      	str	r5, [r4, #116]	; 0x74
 8008c66:	e785      	b.n	8008b74 <tcp_receive+0x4b4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008c68:	1a52      	subs	r2, r2, r1
 8008c6a:	4b86      	ldr	r3, [pc, #536]	; (8008e84 <tcp_receive+0x7c4>)
 8008c6c:	859a      	strh	r2, [r3, #44]	; 0x2c
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	8998      	ldrh	r0, [r3, #12]
 8008c72:	f7fd fa23 	bl	80060bc <lwip_htons>
 8008c76:	f010 0f02 	tst.w	r0, #2
 8008c7a:	d003      	beq.n	8008c84 <tcp_receive+0x5c4>
                inseg.len -= 1;
 8008c7c:	4a81      	ldr	r2, [pc, #516]	; (8008e84 <tcp_receive+0x7c4>)
 8008c7e:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8008c80:	3b01      	subs	r3, #1
 8008c82:	8593      	strh	r3, [r2, #44]	; 0x2c
              pbuf_realloc(inseg.p, inseg.len);
 8008c84:	4f7f      	ldr	r7, [pc, #508]	; (8008e84 <tcp_receive+0x7c4>)
 8008c86:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8008c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8a:	f7fe f94b 	bl	8006f24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008c8e:	8dbe      	ldrh	r6, [r7, #44]	; 0x2c
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	8998      	ldrh	r0, [r3, #12]
 8008c94:	f7fd fa12 	bl	80060bc <lwip_htons>
 8008c98:	f010 0f03 	tst.w	r0, #3
 8008c9c:	d012      	beq.n	8008cc4 <tcp_receive+0x604>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4433      	add	r3, r6
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4a77      	ldr	r2, [pc, #476]	; (8008e84 <tcp_receive+0x7c4>)
 8008ca6:	8313      	strh	r3, [r2, #24]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008ca8:	6952      	ldr	r2, [r2, #20]
 8008caa:	4413      	add	r3, r2
 8008cac:	68ea      	ldr	r2, [r5, #12]
 8008cae:	6852      	ldr	r2, [r2, #4]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d0d7      	beq.n	8008c64 <tcp_receive+0x5a4>
 8008cb4:	4b74      	ldr	r3, [pc, #464]	; (8008e88 <tcp_receive+0x7c8>)
 8008cb6:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008cba:	4974      	ldr	r1, [pc, #464]	; (8008e8c <tcp_receive+0x7cc>)
 8008cbc:	4874      	ldr	r0, [pc, #464]	; (8008e90 <tcp_receive+0x7d0>)
 8008cbe:	f009 ff09 	bl	8012ad4 <printf>
 8008cc2:	e7cf      	b.n	8008c64 <tcp_receive+0x5a4>
              tcplen = TCP_TCPLEN(&inseg);
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e7eb      	b.n	8008ca0 <tcp_receive+0x5e0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008cc8:	4b6f      	ldr	r3, [pc, #444]	; (8008e88 <tcp_receive+0x7c8>)
 8008cca:	f240 6207 	movw	r2, #1543	; 0x607
 8008cce:	4971      	ldr	r1, [pc, #452]	; (8008e94 <tcp_receive+0x7d4>)
 8008cd0:	486f      	ldr	r0, [pc, #444]	; (8008e90 <tcp_receive+0x7d0>)
 8008cd2:	f009 feff 	bl	8012ad4 <printf>
 8008cd6:	e756      	b.n	8008b86 <tcp_receive+0x4c6>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008cd8:	2300      	movs	r3, #0
 8008cda:	e035      	b.n	8008d48 <tcp_receive+0x688>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e041      	b.n	8008d64 <tcp_receive+0x6a4>
 8008ce0:	4b69      	ldr	r3, [pc, #420]	; (8008e88 <tcp_receive+0x7c8>)
 8008ce2:	f240 622b 	movw	r2, #1579	; 0x62b
 8008ce6:	496c      	ldr	r1, [pc, #432]	; (8008e98 <tcp_receive+0x7d8>)
 8008ce8:	4869      	ldr	r0, [pc, #420]	; (8008e90 <tcp_receive+0x7d0>)
 8008cea:	f009 fef3 	bl	8012ad4 <printf>
 8008cee:	e03c      	b.n	8008d6a <tcp_receive+0x6aa>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e043      	b.n	8008d7c <tcp_receive+0x6bc>
              pbuf_cat(recv_data, cseg->p);
 8008cf4:	f7fe f98a 	bl	800700c <pbuf_cat>
            cseg->p = NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008cfc:	68eb      	ldr	r3, [r5, #12]
 8008cfe:	8998      	ldrh	r0, [r3, #12]
 8008d00:	f7fd f9dc 	bl	80060bc <lwip_htons>
 8008d04:	f010 0f01 	tst.w	r0, #1
 8008d08:	d007      	beq.n	8008d1a <tcp_receive+0x65a>
            recv_flags |= TF_GOT_FIN;
 8008d0a:	4a5e      	ldr	r2, [pc, #376]	; (8008e84 <tcp_receive+0x7c4>)
 8008d0c:	7c93      	ldrb	r3, [r2, #18]
 8008d0e:	f043 0320 	orr.w	r3, r3, #32
 8008d12:	7493      	strb	r3, [r2, #18]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008d14:	7d23      	ldrb	r3, [r4, #20]
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d042      	beq.n	8008da0 <tcp_receive+0x6e0>
          pcb->ooseq = cseg->next;
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f7fe fbf6 	bl	8007510 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008d24:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	d03d      	beq.n	8008da6 <tcp_receive+0x6e6>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008d2a:	68ea      	ldr	r2, [r5, #12]
 8008d2c:	6853      	ldr	r3, [r2, #4]
 8008d2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008d30:	428b      	cmp	r3, r1
 8008d32:	d138      	bne.n	8008da6 <tcp_receive+0x6e6>
          seqno = pcb->ooseq->tcphdr->seqno;
 8008d34:	4953      	ldr	r1, [pc, #332]	; (8008e84 <tcp_receive+0x7c4>)
 8008d36:	614b      	str	r3, [r1, #20]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008d38:	892e      	ldrh	r6, [r5, #8]
 8008d3a:	8990      	ldrh	r0, [r2, #12]
 8008d3c:	f7fd f9be 	bl	80060bc <lwip_htons>
 8008d40:	f010 0f03 	tst.w	r0, #3
 8008d44:	d0c8      	beq.n	8008cd8 <tcp_receive+0x618>
 8008d46:	2301      	movs	r3, #1
 8008d48:	441e      	add	r6, r3
 8008d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d4c:	4433      	add	r3, r6
 8008d4e:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d50:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8008d52:	892e      	ldrh	r6, [r5, #8]
 8008d54:	68eb      	ldr	r3, [r5, #12]
 8008d56:	8998      	ldrh	r0, [r3, #12]
 8008d58:	f7fd f9b0 	bl	80060bc <lwip_htons>
 8008d5c:	f010 0f03 	tst.w	r0, #3
 8008d60:	d0bc      	beq.n	8008cdc <tcp_receive+0x61c>
 8008d62:	2301      	movs	r3, #1
 8008d64:	441e      	add	r6, r3
 8008d66:	42b7      	cmp	r7, r6
 8008d68:	d3ba      	bcc.n	8008ce0 <tcp_receive+0x620>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008d6a:	892e      	ldrh	r6, [r5, #8]
 8008d6c:	68eb      	ldr	r3, [r5, #12]
 8008d6e:	8998      	ldrh	r0, [r3, #12]
 8008d70:	f7fd f9a4 	bl	80060bc <lwip_htons>
 8008d74:	f010 0f03 	tst.w	r0, #3
 8008d78:	d0ba      	beq.n	8008cf0 <tcp_receive+0x630>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	441e      	add	r6, r3
 8008d7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d80:	1b9b      	subs	r3, r3, r6
 8008d82:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8008d84:	4620      	mov	r0, r4
 8008d86:	f7fe fb4d 	bl	8007424 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8008d8a:	6869      	ldr	r1, [r5, #4]
 8008d8c:	890b      	ldrh	r3, [r1, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0b4      	beq.n	8008cfc <tcp_receive+0x63c>
            if (recv_data) {
 8008d92:	4b3c      	ldr	r3, [pc, #240]	; (8008e84 <tcp_receive+0x7c4>)
 8008d94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d1ac      	bne.n	8008cf4 <tcp_receive+0x634>
              recv_data = cseg->p;
 8008d9a:	4b3a      	ldr	r3, [pc, #232]	; (8008e84 <tcp_receive+0x7c4>)
 8008d9c:	6359      	str	r1, [r3, #52]	; 0x34
 8008d9e:	e7ab      	b.n	8008cf8 <tcp_receive+0x638>
              pcb->state = CLOSE_WAIT;
 8008da0:	2307      	movs	r3, #7
 8008da2:	7523      	strb	r3, [r4, #20]
 8008da4:	e7b9      	b.n	8008d1a <tcp_receive+0x65a>
        tcp_ack(pcb);
 8008da6:	8b63      	ldrh	r3, [r4, #26]
 8008da8:	f013 0f01 	tst.w	r3, #1
 8008dac:	d005      	beq.n	8008dba <tcp_receive+0x6fa>
 8008dae:	f023 0301 	bic.w	r3, r3, #1
 8008db2:	f043 0302 	orr.w	r3, r3, #2
 8008db6:	8363      	strh	r3, [r4, #26]
 8008db8:	e0f2      	b.n	8008fa0 <tcp_receive+0x8e0>
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	8363      	strh	r3, [r4, #26]
 8008dc0:	e0ee      	b.n	8008fa0 <tcp_receive+0x8e0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008dc2:	4836      	ldr	r0, [pc, #216]	; (8008e9c <tcp_receive+0x7dc>)
 8008dc4:	f7fe fbbc 	bl	8007540 <tcp_seg_copy>
 8008dc8:	6760      	str	r0, [r4, #116]	; 0x74
 8008dca:	e004      	b.n	8008dd6 <tcp_receive+0x716>
              if (inseg.len > next->len) {
 8008dcc:	4b2d      	ldr	r3, [pc, #180]	; (8008e84 <tcp_receive+0x7c4>)
 8008dce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dd0:	892b      	ldrh	r3, [r5, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d803      	bhi.n	8008dde <tcp_receive+0x71e>
        tcp_send_empty_ack(pcb);
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f001 fb14 	bl	800a404 <tcp_send_empty_ack>
 8008ddc:	e0e0      	b.n	8008fa0 <tcp_receive+0x8e0>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008dde:	482f      	ldr	r0, [pc, #188]	; (8008e9c <tcp_receive+0x7dc>)
 8008de0:	f7fe fbae 	bl	8007540 <tcp_seg_copy>
                if (cseg != NULL) {
 8008de4:	4603      	mov	r3, r0
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d0f5      	beq.n	8008dd6 <tcp_receive+0x716>
                  if (prev != NULL) {
 8008dea:	b12e      	cbz	r6, 8008df8 <tcp_receive+0x738>
                    prev->next = cseg;
 8008dec:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8008dee:	4629      	mov	r1, r5
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fc11 	bl	8008618 <tcp_oos_insert_segment>
 8008df6:	e7ee      	b.n	8008dd6 <tcp_receive+0x716>
                    pcb->ooseq = cseg;
 8008df8:	6760      	str	r0, [r4, #116]	; 0x74
 8008dfa:	e7f8      	b.n	8008dee <tcp_receive+0x72e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008dfc:	1a99      	subs	r1, r3, r2
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	db2a      	blt.n	8008e58 <tcp_receive+0x798>
              if (next->next == NULL &&
 8008e02:	6829      	ldr	r1, [r5, #0]
 8008e04:	462e      	mov	r6, r5
 8008e06:	2900      	cmp	r1, #0
 8008e08:	d037      	beq.n	8008e7a <tcp_receive+0x7ba>
 8008e0a:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	d0e2      	beq.n	8008dd6 <tcp_receive+0x716>
            if (seqno == next->tcphdr->seqno) {
 8008e10:	68e8      	ldr	r0, [r5, #12]
 8008e12:	6842      	ldr	r2, [r0, #4]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d0d9      	beq.n	8008dcc <tcp_receive+0x70c>
              if (prev == NULL) {
 8008e18:	2e00      	cmp	r6, #0
 8008e1a:	d0ef      	beq.n	8008dfc <tcp_receive+0x73c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008e1c:	68f1      	ldr	r1, [r6, #12]
 8008e1e:	6849      	ldr	r1, [r1, #4]
 8008e20:	1a59      	subs	r1, r3, r1
 8008e22:	2901      	cmp	r1, #1
 8008e24:	d4ed      	bmi.n	8008e02 <tcp_receive+0x742>
 8008e26:	1a99      	subs	r1, r3, r2
 8008e28:	3101      	adds	r1, #1
 8008e2a:	2900      	cmp	r1, #0
 8008e2c:	dce9      	bgt.n	8008e02 <tcp_receive+0x742>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008e2e:	481b      	ldr	r0, [pc, #108]	; (8008e9c <tcp_receive+0x7dc>)
 8008e30:	f7fe fb86 	bl	8007540 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008e34:	4607      	mov	r7, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0cd      	beq.n	8008dd6 <tcp_receive+0x716>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008e3a:	68f3      	ldr	r3, [r6, #12]
 8008e3c:	6859      	ldr	r1, [r3, #4]
 8008e3e:	8933      	ldrh	r3, [r6, #8]
 8008e40:	440b      	add	r3, r1
 8008e42:	4a10      	ldr	r2, [pc, #64]	; (8008e84 <tcp_receive+0x7c4>)
 8008e44:	6952      	ldr	r2, [r2, #20]
 8008e46:	1a9b      	subs	r3, r3, r2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc0f      	bgt.n	8008e6c <tcp_receive+0x7ac>
                    prev->next = cseg;
 8008e4c:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff fbe1 	bl	8008618 <tcp_oos_insert_segment>
 8008e56:	e7be      	b.n	8008dd6 <tcp_receive+0x716>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008e58:	4810      	ldr	r0, [pc, #64]	; (8008e9c <tcp_receive+0x7dc>)
 8008e5a:	f7fe fb71 	bl	8007540 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0b9      	beq.n	8008dd6 <tcp_receive+0x716>
                    pcb->ooseq = cseg;
 8008e62:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7ff fbd7 	bl	8008618 <tcp_oos_insert_segment>
 8008e6a:	e7b4      	b.n	8008dd6 <tcp_receive+0x716>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008e6c:	1a52      	subs	r2, r2, r1
 8008e6e:	b291      	uxth	r1, r2
 8008e70:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008e72:	6870      	ldr	r0, [r6, #4]
 8008e74:	f7fe f856 	bl	8006f24 <pbuf_realloc>
 8008e78:	e7e8      	b.n	8008e4c <tcp_receive+0x78c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008e7a:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 8008e7c:	2a00      	cmp	r2, #0
 8008e7e:	dc0f      	bgt.n	8008ea0 <tcp_receive+0x7e0>
 8008e80:	460d      	mov	r5, r1
 8008e82:	e7c3      	b.n	8008e0c <tcp_receive+0x74c>
 8008e84:	200033bc 	.word	0x200033bc
 8008e88:	0801b054 	.word	0x0801b054
 8008e8c:	0801b22c 	.word	0x0801b22c
 8008e90:	08019f6c 	.word	0x08019f6c
 8008e94:	0801b268 	.word	0x0801b268
 8008e98:	0801b288 	.word	0x0801b288
 8008e9c:	200033e0 	.word	0x200033e0
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008ea0:	8980      	ldrh	r0, [r0, #12]
 8008ea2:	f7fd f90b 	bl	80060bc <lwip_htons>
 8008ea6:	f010 0f01 	tst.w	r0, #1
 8008eaa:	d194      	bne.n	8008dd6 <tcp_receive+0x716>
                next->next = tcp_seg_copy(&inseg);
 8008eac:	483d      	ldr	r0, [pc, #244]	; (8008fa4 <tcp_receive+0x8e4>)
 8008eae:	f7fe fb47 	bl	8007540 <tcp_seg_copy>
 8008eb2:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d08e      	beq.n	8008dd6 <tcp_receive+0x716>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008eb8:	68eb      	ldr	r3, [r5, #12]
 8008eba:	6859      	ldr	r1, [r3, #4]
 8008ebc:	892a      	ldrh	r2, [r5, #8]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	4b39      	ldr	r3, [pc, #228]	; (8008fa8 <tcp_receive+0x8e8>)
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	1ad2      	subs	r2, r2, r3
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	dc3e      	bgt.n	8008f48 <tcp_receive+0x888>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008eca:	4a37      	ldr	r2, [pc, #220]	; (8008fa8 <tcp_receive+0x8e8>)
 8008ecc:	8b13      	ldrh	r3, [r2, #24]
 8008ece:	6952      	ldr	r2, [r2, #20]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ed4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008ed6:	440a      	add	r2, r1
 8008ed8:	1a9b      	subs	r3, r3, r2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f77f af7b 	ble.w	8008dd6 <tcp_receive+0x716>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	8998      	ldrh	r0, [r3, #12]
 8008ee6:	f7fd f8e9 	bl	80060bc <lwip_htons>
 8008eea:	f010 0f01 	tst.w	r0, #1
 8008eee:	d132      	bne.n	8008f56 <tcp_receive+0x896>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008ef0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ef2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ef4:	4413      	add	r3, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	682a      	ldr	r2, [r5, #0]
 8008efa:	492b      	ldr	r1, [pc, #172]	; (8008fa8 <tcp_receive+0x8e8>)
 8008efc:	6949      	ldr	r1, [r1, #20]
 8008efe:	1a5b      	subs	r3, r3, r1
 8008f00:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	8919      	ldrh	r1, [r3, #8]
 8008f06:	6858      	ldr	r0, [r3, #4]
 8008f08:	f7fe f80c 	bl	8006f24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	891d      	ldrh	r5, [r3, #8]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	8998      	ldrh	r0, [r3, #12]
 8008f14:	f7fd f8d2 	bl	80060bc <lwip_htons>
 8008f18:	f010 0f03 	tst.w	r0, #3
 8008f1c:	d02e      	beq.n	8008f7c <tcp_receive+0x8bc>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	442b      	add	r3, r5
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	4a20      	ldr	r2, [pc, #128]	; (8008fa8 <tcp_receive+0x8e8>)
 8008f26:	8313      	strh	r3, [r2, #24]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008f28:	6952      	ldr	r2, [r2, #20]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f2e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008f30:	440a      	add	r2, r1
 8008f32:	4293      	cmp	r3, r2
 8008f34:	f43f af4f 	beq.w	8008dd6 <tcp_receive+0x716>
 8008f38:	4b1c      	ldr	r3, [pc, #112]	; (8008fac <tcp_receive+0x8ec>)
 8008f3a:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008f3e:	491c      	ldr	r1, [pc, #112]	; (8008fb0 <tcp_receive+0x8f0>)
 8008f40:	481c      	ldr	r0, [pc, #112]	; (8008fb4 <tcp_receive+0x8f4>)
 8008f42:	f009 fdc7 	bl	8012ad4 <printf>
 8008f46:	e746      	b.n	8008dd6 <tcp_receive+0x716>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008f48:	1a5b      	subs	r3, r3, r1
 8008f4a:	b299      	uxth	r1, r3
 8008f4c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008f4e:	6868      	ldr	r0, [r5, #4]
 8008f50:	f7fd ffe8 	bl	8006f24 <pbuf_realloc>
 8008f54:	e7b9      	b.n	8008eca <tcp_receive+0x80a>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008f56:	682b      	ldr	r3, [r5, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	8998      	ldrh	r0, [r3, #12]
 8008f5c:	b206      	sxth	r6, r0
 8008f5e:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8008f62:	b280      	uxth	r0, r0
 8008f64:	f7fd f8aa 	bl	80060bc <lwip_htons>
 8008f68:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008f6c:	f7fd f8a6 	bl	80060bc <lwip_htons>
 8008f70:	b203      	sxth	r3, r0
 8008f72:	682a      	ldr	r2, [r5, #0]
 8008f74:	68d2      	ldr	r2, [r2, #12]
 8008f76:	431e      	orrs	r6, r3
 8008f78:	8196      	strh	r6, [r2, #12]
 8008f7a:	e7b9      	b.n	8008ef0 <tcp_receive+0x830>
                    tcplen = TCP_TCPLEN(next->next);
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e7cf      	b.n	8008f20 <tcp_receive+0x860>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008f80:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <tcp_receive+0x8e8>)
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f86:	1a99      	subs	r1, r3, r2
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	db05      	blt.n	8008f98 <tcp_receive+0x8d8>
 8008f8c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008f8e:	440a      	add	r2, r1
 8008f90:	1a9b      	subs	r3, r3, r2
 8008f92:	3301      	adds	r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dd03      	ble.n	8008fa0 <tcp_receive+0x8e0>
      tcp_ack_now(pcb);
 8008f98:	8b63      	ldrh	r3, [r4, #26]
 8008f9a:	f043 0302 	orr.w	r3, r3, #2
 8008f9e:	8363      	strh	r3, [r4, #26]
}
 8008fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200033e0 	.word	0x200033e0
 8008fa8:	200033bc 	.word	0x200033bc
 8008fac:	0801b054 	.word	0x0801b054
 8008fb0:	0801b1f4 	.word	0x0801b1f4
 8008fb4:	08019f6c 	.word	0x08019f6c

08008fb8 <tcp_process>:
{
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	b1c8      	cbz	r0, 8008ff4 <tcp_process+0x3c>
  if (flags & TCP_RST) {
 8008fc0:	4b96      	ldr	r3, [pc, #600]	; (800921c <tcp_process+0x264>)
 8008fc2:	7cdb      	ldrb	r3, [r3, #19]
 8008fc4:	f013 0f04 	tst.w	r3, #4
 8008fc8:	d03a      	beq.n	8009040 <tcp_process+0x88>
    if (pcb->state == SYN_SENT) {
 8008fca:	7d21      	ldrb	r1, [r4, #20]
 8008fcc:	2902      	cmp	r1, #2
 8008fce:	d019      	beq.n	8009004 <tcp_process+0x4c>
      if (seqno == pcb->rcv_nxt) {
 8008fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008fd2:	4b92      	ldr	r3, [pc, #584]	; (800921c <tcp_process+0x264>)
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d01d      	beq.n	8009016 <tcp_process+0x5e>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fda:	1a99      	subs	r1, r3, r2
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	db16      	blt.n	800900e <tcp_process+0x56>
 8008fe0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008fe2:	440a      	add	r2, r1
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dc11      	bgt.n	800900e <tcp_process+0x56>
        tcp_ack_now(pcb);
 8008fea:	8b63      	ldrh	r3, [r4, #26]
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 8008ff2:	e00c      	b.n	800900e <tcp_process+0x56>
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008ff4:	4b8a      	ldr	r3, [pc, #552]	; (8009220 <tcp_process+0x268>)
 8008ff6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008ffa:	498a      	ldr	r1, [pc, #552]	; (8009224 <tcp_process+0x26c>)
 8008ffc:	488a      	ldr	r0, [pc, #552]	; (8009228 <tcp_process+0x270>)
 8008ffe:	f009 fd69 	bl	8012ad4 <printf>
 8009002:	e7dd      	b.n	8008fc0 <tcp_process+0x8>
      if (ackno == pcb->snd_nxt) {
 8009004:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009006:	4b85      	ldr	r3, [pc, #532]	; (800921c <tcp_process+0x264>)
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	429a      	cmp	r2, r3
 800900c:	d003      	beq.n	8009016 <tcp_process+0x5e>
      return ERR_OK;
 800900e:	2500      	movs	r5, #0
}
 8009010:	4628      	mov	r0, r5
 8009012:	b004      	add	sp, #16
 8009014:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009016:	b159      	cbz	r1, 8009030 <tcp_process+0x78>
      recv_flags |= TF_RESET;
 8009018:	4a80      	ldr	r2, [pc, #512]	; (800921c <tcp_process+0x264>)
 800901a:	7c93      	ldrb	r3, [r2, #18]
 800901c:	f043 0308 	orr.w	r3, r3, #8
 8009020:	7493      	strb	r3, [r2, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009022:	8b63      	ldrh	r3, [r4, #26]
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800902a:	f06f 050d 	mvn.w	r5, #13
 800902e:	e7ef      	b.n	8009010 <tcp_process+0x58>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009030:	4b7b      	ldr	r3, [pc, #492]	; (8009220 <tcp_process+0x268>)
 8009032:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009036:	497d      	ldr	r1, [pc, #500]	; (800922c <tcp_process+0x274>)
 8009038:	487b      	ldr	r0, [pc, #492]	; (8009228 <tcp_process+0x270>)
 800903a:	f009 fd4b 	bl	8012ad4 <printf>
 800903e:	e7eb      	b.n	8009018 <tcp_process+0x60>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009040:	f013 0f02 	tst.w	r3, #2
 8009044:	d004      	beq.n	8009050 <tcp_process+0x98>
 8009046:	7d23      	ldrb	r3, [r4, #20]
 8009048:	3b02      	subs	r3, #2
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b01      	cmp	r3, #1
 800904e:	d81d      	bhi.n	800908c <tcp_process+0xd4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009050:	8b63      	ldrh	r3, [r4, #26]
 8009052:	f013 0f10 	tst.w	r3, #16
 8009056:	d102      	bne.n	800905e <tcp_process+0xa6>
    pcb->tmr = tcp_ticks;
 8009058:	4b75      	ldr	r3, [pc, #468]	; (8009230 <tcp_process+0x278>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009064:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 8009068:	4620      	mov	r0, r4
 800906a:	f7ff f90b 	bl	8008284 <tcp_parseopt>
  switch (pcb->state) {
 800906e:	7d23      	ldrb	r3, [r4, #20]
 8009070:	3b02      	subs	r3, #2
 8009072:	2b07      	cmp	r3, #7
 8009074:	f200 822d 	bhi.w	80094d2 <tcp_process+0x51a>
 8009078:	e8df f013 	tbh	[pc, r3, lsl #1]
 800907c:	00ae000e 	.word	0x00ae000e
 8009080:	015a0149 	.word	0x015a0149
 8009084:	014901b0 	.word	0x014901b0
 8009088:	021101de 	.word	0x021101de
    tcp_ack_now(pcb);
 800908c:	8b63      	ldrh	r3, [r4, #26]
 800908e:	f043 0302 	orr.w	r3, r3, #2
 8009092:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8009094:	2500      	movs	r5, #0
 8009096:	e7bb      	b.n	8009010 <tcp_process+0x58>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009098:	4b60      	ldr	r3, [pc, #384]	; (800921c <tcp_process+0x264>)
 800909a:	7cdb      	ldrb	r3, [r3, #19]
 800909c:	f003 0212 	and.w	r2, r3, #18
 80090a0:	2a12      	cmp	r2, #18
 80090a2:	d004      	beq.n	80090ae <tcp_process+0xf6>
      else if (flags & TCP_ACK) {
 80090a4:	f013 0f10 	tst.w	r3, #16
 80090a8:	d17a      	bne.n	80091a0 <tcp_process+0x1e8>
  return ERR_OK;
 80090aa:	2500      	movs	r5, #0
 80090ac:	e7b0      	b.n	8009010 <tcp_process+0x58>
          && (ackno == pcb->lastack + 1)) {
 80090ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80090b0:	3201      	adds	r2, #1
 80090b2:	495a      	ldr	r1, [pc, #360]	; (800921c <tcp_process+0x264>)
 80090b4:	69c9      	ldr	r1, [r1, #28]
 80090b6:	428a      	cmp	r2, r1
 80090b8:	d1f4      	bne.n	80090a4 <tcp_process+0xec>
        pcb->rcv_nxt = seqno + 1;
 80090ba:	4a58      	ldr	r2, [pc, #352]	; (800921c <tcp_process+0x264>)
 80090bc:	6953      	ldr	r3, [r2, #20]
 80090be:	1c58      	adds	r0, r3, #1
 80090c0:	6260      	str	r0, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80090c2:	62e0      	str	r0, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 80090c4:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80090c6:	68d2      	ldr	r2, [r2, #12]
 80090c8:	89d2      	ldrh	r2, [r2, #14]
 80090ca:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80090ce:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80090d2:	3b01      	subs	r3, #1
 80090d4:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80090d6:	2304      	movs	r3, #4
 80090d8:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80090da:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 80090dc:	18e5      	adds	r5, r4, r3
 80090de:	4628      	mov	r0, r5
 80090e0:	f002 fbc6 	bl	800b870 <ip4_route>
 80090e4:	4601      	mov	r1, r0
 80090e6:	462a      	mov	r2, r5
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7fe fa69 	bl	80075c0 <tcp_eff_send_mss_netif>
 80090ee:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090f0:	0042      	lsls	r2, r0, #1
 80090f2:	f241 131c 	movw	r3, #4380	; 0x111c
 80090f6:	4293      	cmp	r3, r2
 80090f8:	bf38      	it	cc
 80090fa:	4613      	movcc	r3, r2
 80090fc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 8009100:	d92b      	bls.n	800915a <tcp_process+0x1a2>
 8009102:	0083      	lsls	r3, r0, #2
 8009104:	b29b      	uxth	r3, r3
 8009106:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800910a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800910e:	b373      	cbz	r3, 800916e <tcp_process+0x1b6>
        --pcb->snd_queuelen;
 8009110:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8009114:	3b01      	subs	r3, #1
 8009116:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800911a:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800911c:	b37d      	cbz	r5, 800917e <tcp_process+0x1c6>
          pcb->unacked = rseg->next;
 800911e:	682b      	ldr	r3, [r5, #0]
 8009120:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 8009122:	4628      	mov	r0, r5
 8009124:	f7fe f9f4 	bl	8007510 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8009128:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800912a:	2b00      	cmp	r3, #0
 800912c:	d034      	beq.n	8009198 <tcp_process+0x1e0>
          pcb->rtime = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 8009132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009136:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800913a:	b143      	cbz	r3, 800914e <tcp_process+0x196>
 800913c:	2200      	movs	r2, #0
 800913e:	4621      	mov	r1, r4
 8009140:	6920      	ldr	r0, [r4, #16]
 8009142:	4798      	blx	r3
 8009144:	4605      	mov	r5, r0
        if (err == ERR_ABRT) {
 8009146:	f110 0f0d 	cmn.w	r0, #13
 800914a:	f43f af61 	beq.w	8009010 <tcp_process+0x58>
        tcp_ack_now(pcb);
 800914e:	8b63      	ldrh	r3, [r4, #26]
 8009150:	f043 0302 	orr.w	r3, r3, #2
 8009154:	8363      	strh	r3, [r4, #26]
  return ERR_OK;
 8009156:	2500      	movs	r5, #0
        tcp_ack_now(pcb);
 8009158:	e75a      	b.n	8009010 <tcp_process+0x58>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800915a:	f241 131c 	movw	r3, #4380	; 0x111c
 800915e:	429a      	cmp	r2, r3
 8009160:	d902      	bls.n	8009168 <tcp_process+0x1b0>
 8009162:	0043      	lsls	r3, r0, #1
 8009164:	b29b      	uxth	r3, r3
 8009166:	e7ce      	b.n	8009106 <tcp_process+0x14e>
 8009168:	f241 131c 	movw	r3, #4380	; 0x111c
 800916c:	e7cb      	b.n	8009106 <tcp_process+0x14e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800916e:	4b2c      	ldr	r3, [pc, #176]	; (8009220 <tcp_process+0x268>)
 8009170:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009174:	492f      	ldr	r1, [pc, #188]	; (8009234 <tcp_process+0x27c>)
 8009176:	482c      	ldr	r0, [pc, #176]	; (8009228 <tcp_process+0x270>)
 8009178:	f009 fcac 	bl	8012ad4 <printf>
 800917c:	e7c8      	b.n	8009110 <tcp_process+0x158>
          rseg = pcb->unsent;
 800917e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009180:	b115      	cbz	r5, 8009188 <tcp_process+0x1d0>
          pcb->unsent = rseg->next;
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009186:	e7cc      	b.n	8009122 <tcp_process+0x16a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009188:	4b25      	ldr	r3, [pc, #148]	; (8009220 <tcp_process+0x268>)
 800918a:	f44f 725d 	mov.w	r2, #884	; 0x374
 800918e:	492a      	ldr	r1, [pc, #168]	; (8009238 <tcp_process+0x280>)
 8009190:	4825      	ldr	r0, [pc, #148]	; (8009228 <tcp_process+0x270>)
 8009192:	f009 fc9f 	bl	8012ad4 <printf>
 8009196:	e7f4      	b.n	8009182 <tcp_process+0x1ca>
          pcb->rtime = -1;
 8009198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800919c:	8623      	strh	r3, [r4, #48]	; 0x30
 800919e:	e7ca      	b.n	8009136 <tcp_process+0x17e>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091a0:	491e      	ldr	r1, [pc, #120]	; (800921c <tcp_process+0x264>)
 80091a2:	68c8      	ldr	r0, [r1, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091a4:	4b25      	ldr	r3, [pc, #148]	; (800923c <tcp_process+0x284>)
 80091a6:	8b0d      	ldrh	r5, [r1, #24]
 80091a8:	694a      	ldr	r2, [r1, #20]
 80091aa:	8806      	ldrh	r6, [r0, #0]
 80091ac:	9602      	str	r6, [sp, #8]
 80091ae:	8840      	ldrh	r0, [r0, #2]
 80091b0:	9001      	str	r0, [sp, #4]
 80091b2:	1f18      	subs	r0, r3, #4
 80091b4:	9000      	str	r0, [sp, #0]
 80091b6:	442a      	add	r2, r5
 80091b8:	69c9      	ldr	r1, [r1, #28]
 80091ba:	4620      	mov	r0, r4
 80091bc:	f001 f8da 	bl	800a374 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80091c0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80091c4:	2b05      	cmp	r3, #5
 80091c6:	d901      	bls.n	80091cc <tcp_process+0x214>
  return ERR_OK;
 80091c8:	2500      	movs	r5, #0
 80091ca:	e721      	b.n	8009010 <tcp_process+0x58>
          pcb->rtime = 0;
 80091cc:	2500      	movs	r5, #0
 80091ce:	8625      	strh	r5, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80091d0:	4620      	mov	r0, r4
 80091d2:	f001 fac3 	bl	800a75c <tcp_rexmit_rto>
 80091d6:	e71b      	b.n	8009010 <tcp_process+0x58>
      if (flags & TCP_ACK) {
 80091d8:	4b10      	ldr	r3, [pc, #64]	; (800921c <tcp_process+0x264>)
 80091da:	7cdb      	ldrb	r3, [r3, #19]
 80091dc:	f013 0f10 	tst.w	r3, #16
 80091e0:	f000 8084 	beq.w	80092ec <tcp_process+0x334>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80091e4:	4b0d      	ldr	r3, [pc, #52]	; (800921c <tcp_process+0x264>)
 80091e6:	69d9      	ldr	r1, [r3, #28]
 80091e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091ea:	1acb      	subs	r3, r1, r3
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d403      	bmi.n	80091f8 <tcp_process+0x240>
 80091f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80091f2:	1acb      	subs	r3, r1, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dd23      	ble.n	8009240 <tcp_process+0x288>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091f8:	4808      	ldr	r0, [pc, #32]	; (800921c <tcp_process+0x264>)
 80091fa:	68c5      	ldr	r5, [r0, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091fc:	4b0f      	ldr	r3, [pc, #60]	; (800923c <tcp_process+0x284>)
 80091fe:	8b06      	ldrh	r6, [r0, #24]
 8009200:	6942      	ldr	r2, [r0, #20]
 8009202:	8828      	ldrh	r0, [r5, #0]
 8009204:	9002      	str	r0, [sp, #8]
 8009206:	8868      	ldrh	r0, [r5, #2]
 8009208:	9001      	str	r0, [sp, #4]
 800920a:	1f18      	subs	r0, r3, #4
 800920c:	9000      	str	r0, [sp, #0]
 800920e:	4432      	add	r2, r6
 8009210:	4620      	mov	r0, r4
 8009212:	f001 f8af 	bl	800a374 <tcp_rst>
  return ERR_OK;
 8009216:	2500      	movs	r5, #0
 8009218:	e6fa      	b.n	8009010 <tcp_process+0x58>
 800921a:	bf00      	nop
 800921c:	200033bc 	.word	0x200033bc
 8009220:	0801b054 	.word	0x0801b054
 8009224:	0801b2b0 	.word	0x0801b2b0
 8009228:	08019f6c 	.word	0x08019f6c
 800922c:	0801b2cc 	.word	0x0801b2cc
 8009230:	200073cc 	.word	0x200073cc
 8009234:	0801b2ec 	.word	0x0801b2ec
 8009238:	0801b304 	.word	0x0801b304
 800923c:	200044ec 	.word	0x200044ec
          pcb->state = ESTABLISHED;
 8009240:	2304      	movs	r3, #4
 8009242:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8009244:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d037      	beq.n	80092ba <tcp_process+0x302>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	b36b      	cbz	r3, 80092aa <tcp_process+0x2f2>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800924e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d039      	beq.n	80092ca <tcp_process+0x312>
 8009256:	2200      	movs	r2, #0
 8009258:	4621      	mov	r1, r4
 800925a:	6920      	ldr	r0, [r4, #16]
 800925c:	4798      	blx	r3
          if (err != ERR_OK) {
 800925e:	4605      	mov	r5, r0
 8009260:	bb68      	cbnz	r0, 80092be <tcp_process+0x306>
          tcp_receive(pcb);
 8009262:	4620      	mov	r0, r4
 8009264:	f7ff fa2c 	bl	80086c0 <tcp_receive>
          if (recv_acked != 0) {
 8009268:	4ba0      	ldr	r3, [pc, #640]	; (80094ec <tcp_process+0x534>)
 800926a:	8c1b      	ldrh	r3, [r3, #32]
 800926c:	b113      	cbz	r3, 8009274 <tcp_process+0x2bc>
            recv_acked--;
 800926e:	3b01      	subs	r3, #1
 8009270:	4a9e      	ldr	r2, [pc, #632]	; (80094ec <tcp_process+0x534>)
 8009272:	8413      	strh	r3, [r2, #32]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009274:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009276:	0059      	lsls	r1, r3, #1
 8009278:	f241 121c 	movw	r2, #4380	; 0x111c
 800927c:	428a      	cmp	r2, r1
 800927e:	bf38      	it	cc
 8009280:	460a      	movcc	r2, r1
 8009282:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8009286:	d927      	bls.n	80092d8 <tcp_process+0x320>
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	b29b      	uxth	r3, r3
 800928c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8009290:	4b96      	ldr	r3, [pc, #600]	; (80094ec <tcp_process+0x534>)
 8009292:	7c9b      	ldrb	r3, [r3, #18]
 8009294:	f013 0f20 	tst.w	r3, #32
 8009298:	f43f aeba 	beq.w	8009010 <tcp_process+0x58>
            tcp_ack_now(pcb);
 800929c:	8b63      	ldrh	r3, [r4, #26]
 800929e:	f043 0302 	orr.w	r3, r3, #2
 80092a2:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 80092a4:	2307      	movs	r3, #7
 80092a6:	7523      	strb	r3, [r4, #20]
 80092a8:	e6b2      	b.n	8009010 <tcp_process+0x58>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80092aa:	4b91      	ldr	r3, [pc, #580]	; (80094f0 <tcp_process+0x538>)
 80092ac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80092b0:	4990      	ldr	r1, [pc, #576]	; (80094f4 <tcp_process+0x53c>)
 80092b2:	4891      	ldr	r0, [pc, #580]	; (80094f8 <tcp_process+0x540>)
 80092b4:	f009 fc0e 	bl	8012ad4 <printf>
 80092b8:	e7c9      	b.n	800924e <tcp_process+0x296>
            err = ERR_VAL;
 80092ba:	f06f 0505 	mvn.w	r5, #5
            if (err != ERR_ABRT) {
 80092be:	f115 0f0d 	cmn.w	r5, #13
 80092c2:	d105      	bne.n	80092d0 <tcp_process+0x318>
            return ERR_ABRT;
 80092c4:	f06f 050c 	mvn.w	r5, #12
 80092c8:	e6a2      	b.n	8009010 <tcp_process+0x58>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80092ca:	f06f 050f 	mvn.w	r5, #15
 80092ce:	e7f6      	b.n	80092be <tcp_process+0x306>
              tcp_abort(pcb);
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7fe fabf 	bl	8007854 <tcp_abort>
 80092d6:	e7f5      	b.n	80092c4 <tcp_process+0x30c>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092d8:	f241 121c 	movw	r2, #4380	; 0x111c
 80092dc:	4291      	cmp	r1, r2
 80092de:	d902      	bls.n	80092e6 <tcp_process+0x32e>
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	e7d2      	b.n	800928c <tcp_process+0x2d4>
 80092e6:	f241 131c 	movw	r3, #4380	; 0x111c
 80092ea:	e7cf      	b.n	800928c <tcp_process+0x2d4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80092ec:	f013 0f02 	tst.w	r3, #2
 80092f0:	f000 80f1 	beq.w	80094d6 <tcp_process+0x51e>
 80092f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f6:	3b01      	subs	r3, #1
 80092f8:	4a7c      	ldr	r2, [pc, #496]	; (80094ec <tcp_process+0x534>)
 80092fa:	6952      	ldr	r2, [r2, #20]
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d001      	beq.n	8009304 <tcp_process+0x34c>
  return ERR_OK;
 8009300:	2500      	movs	r5, #0
 8009302:	e685      	b.n	8009010 <tcp_process+0x58>
        tcp_rexmit(pcb);
 8009304:	4620      	mov	r0, r4
 8009306:	f000 ffb5 	bl	800a274 <tcp_rexmit>
  return ERR_OK;
 800930a:	2500      	movs	r5, #0
 800930c:	e680      	b.n	8009010 <tcp_process+0x58>
      tcp_receive(pcb);
 800930e:	4620      	mov	r0, r4
 8009310:	f7ff f9d6 	bl	80086c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009314:	4b75      	ldr	r3, [pc, #468]	; (80094ec <tcp_process+0x534>)
 8009316:	7c9b      	ldrb	r3, [r3, #18]
 8009318:	f013 0f20 	tst.w	r3, #32
 800931c:	f000 80dd 	beq.w	80094da <tcp_process+0x522>
        tcp_ack_now(pcb);
 8009320:	8b63      	ldrh	r3, [r4, #26]
 8009322:	f043 0302 	orr.w	r3, r3, #2
 8009326:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8009328:	2307      	movs	r3, #7
 800932a:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800932c:	2500      	movs	r5, #0
 800932e:	e66f      	b.n	8009010 <tcp_process+0x58>
      tcp_receive(pcb);
 8009330:	4620      	mov	r0, r4
 8009332:	f7ff f9c5 	bl	80086c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009336:	4b6d      	ldr	r3, [pc, #436]	; (80094ec <tcp_process+0x534>)
 8009338:	7c9b      	ldrb	r3, [r3, #18]
 800933a:	f013 0f20 	tst.w	r3, #32
 800933e:	d038      	beq.n	80093b2 <tcp_process+0x3fa>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009340:	4b6a      	ldr	r3, [pc, #424]	; (80094ec <tcp_process+0x534>)
 8009342:	7cdb      	ldrb	r3, [r3, #19]
 8009344:	f013 0f10 	tst.w	r3, #16
 8009348:	d004      	beq.n	8009354 <tcp_process+0x39c>
 800934a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800934c:	4b67      	ldr	r3, [pc, #412]	; (80094ec <tcp_process+0x534>)
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	429a      	cmp	r2, r3
 8009352:	d007      	beq.n	8009364 <tcp_process+0x3ac>
          tcp_ack_now(pcb);
 8009354:	8b63      	ldrh	r3, [r4, #26]
 8009356:	f043 0302 	orr.w	r3, r3, #2
 800935a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800935c:	2308      	movs	r3, #8
 800935e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009360:	2500      	movs	r5, #0
 8009362:	e655      	b.n	8009010 <tcp_process+0x58>
            pcb->unsent == NULL) {
 8009364:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f4      	bne.n	8009354 <tcp_process+0x39c>
          tcp_ack_now(pcb);
 800936a:	8b63      	ldrh	r3, [r4, #26]
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8009372:	4620      	mov	r0, r4
 8009374:	f7fe f94e 	bl	8007614 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009378:	4b60      	ldr	r3, [pc, #384]	; (80094fc <tcp_process+0x544>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	42a3      	cmp	r3, r4
 800937e:	d005      	beq.n	800938c <tcp_process+0x3d4>
 8009380:	b153      	cbz	r3, 8009398 <tcp_process+0x3e0>
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	42a2      	cmp	r2, r4
 8009386:	d005      	beq.n	8009394 <tcp_process+0x3dc>
 8009388:	4613      	mov	r3, r2
 800938a:	e7f9      	b.n	8009380 <tcp_process+0x3c8>
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	4b5b      	ldr	r3, [pc, #364]	; (80094fc <tcp_process+0x544>)
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	e001      	b.n	8009398 <tcp_process+0x3e0>
 8009394:	68e2      	ldr	r2, [r4, #12]
 8009396:	60da      	str	r2, [r3, #12]
 8009398:	4b59      	ldr	r3, [pc, #356]	; (8009500 <tcp_process+0x548>)
 800939a:	2201      	movs	r2, #1
 800939c:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800939e:	230a      	movs	r3, #10
 80093a0:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80093a2:	4b58      	ldr	r3, [pc, #352]	; (8009504 <tcp_process+0x54c>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	60e2      	str	r2, [r4, #12]
 80093a8:	601c      	str	r4, [r3, #0]
 80093aa:	f001 fb01 	bl	800a9b0 <tcp_timer_needed>
  return ERR_OK;
 80093ae:	2500      	movs	r5, #0
          TCP_REG(&tcp_tw_pcbs, pcb);
 80093b0:	e62e      	b.n	8009010 <tcp_process+0x58>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093b2:	4b4e      	ldr	r3, [pc, #312]	; (80094ec <tcp_process+0x534>)
 80093b4:	7cdb      	ldrb	r3, [r3, #19]
 80093b6:	f013 0f10 	tst.w	r3, #16
 80093ba:	f000 8090 	beq.w	80094de <tcp_process+0x526>
 80093be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80093c0:	4b4a      	ldr	r3, [pc, #296]	; (80094ec <tcp_process+0x534>)
 80093c2:	69db      	ldr	r3, [r3, #28]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d001      	beq.n	80093cc <tcp_process+0x414>
  return ERR_OK;
 80093c8:	2500      	movs	r5, #0
 80093ca:	e621      	b.n	8009010 <tcp_process+0x58>
                 pcb->unsent == NULL) {
 80093cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093ce:	b10b      	cbz	r3, 80093d4 <tcp_process+0x41c>
  return ERR_OK;
 80093d0:	2500      	movs	r5, #0
 80093d2:	e61d      	b.n	8009010 <tcp_process+0x58>
        pcb->state = FIN_WAIT_2;
 80093d4:	2306      	movs	r3, #6
 80093d6:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 80093d8:	2500      	movs	r5, #0
 80093da:	e619      	b.n	8009010 <tcp_process+0x58>
      tcp_receive(pcb);
 80093dc:	4620      	mov	r0, r4
 80093de:	f7ff f96f 	bl	80086c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80093e2:	4b42      	ldr	r3, [pc, #264]	; (80094ec <tcp_process+0x534>)
 80093e4:	7c9b      	ldrb	r3, [r3, #18]
 80093e6:	f013 0f20 	tst.w	r3, #32
 80093ea:	d101      	bne.n	80093f0 <tcp_process+0x438>
  return ERR_OK;
 80093ec:	2500      	movs	r5, #0
 80093ee:	e60f      	b.n	8009010 <tcp_process+0x58>
        tcp_ack_now(pcb);
 80093f0:	8b63      	ldrh	r3, [r4, #26]
 80093f2:	f043 0302 	orr.w	r3, r3, #2
 80093f6:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80093f8:	4620      	mov	r0, r4
 80093fa:	f7fe f90b 	bl	8007614 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80093fe:	4b3f      	ldr	r3, [pc, #252]	; (80094fc <tcp_process+0x544>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	42a3      	cmp	r3, r4
 8009404:	d005      	beq.n	8009412 <tcp_process+0x45a>
 8009406:	b153      	cbz	r3, 800941e <tcp_process+0x466>
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	42a2      	cmp	r2, r4
 800940c:	d005      	beq.n	800941a <tcp_process+0x462>
 800940e:	4613      	mov	r3, r2
 8009410:	e7f9      	b.n	8009406 <tcp_process+0x44e>
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	4b39      	ldr	r3, [pc, #228]	; (80094fc <tcp_process+0x544>)
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	e001      	b.n	800941e <tcp_process+0x466>
 800941a:	68e2      	ldr	r2, [r4, #12]
 800941c:	60da      	str	r2, [r3, #12]
 800941e:	4b38      	ldr	r3, [pc, #224]	; (8009500 <tcp_process+0x548>)
 8009420:	2201      	movs	r2, #1
 8009422:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009424:	230a      	movs	r3, #10
 8009426:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009428:	4b36      	ldr	r3, [pc, #216]	; (8009504 <tcp_process+0x54c>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	60e2      	str	r2, [r4, #12]
 800942e:	601c      	str	r4, [r3, #0]
 8009430:	f001 fabe 	bl	800a9b0 <tcp_timer_needed>
  return ERR_OK;
 8009434:	2500      	movs	r5, #0
 8009436:	e5eb      	b.n	8009010 <tcp_process+0x58>
      tcp_receive(pcb);
 8009438:	4620      	mov	r0, r4
 800943a:	f7ff f941 	bl	80086c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800943e:	4b2b      	ldr	r3, [pc, #172]	; (80094ec <tcp_process+0x534>)
 8009440:	7cdb      	ldrb	r3, [r3, #19]
 8009442:	f013 0f10 	tst.w	r3, #16
 8009446:	d04c      	beq.n	80094e2 <tcp_process+0x52a>
 8009448:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800944a:	4b28      	ldr	r3, [pc, #160]	; (80094ec <tcp_process+0x534>)
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	429a      	cmp	r2, r3
 8009450:	d001      	beq.n	8009456 <tcp_process+0x49e>
  return ERR_OK;
 8009452:	2500      	movs	r5, #0
 8009454:	e5dc      	b.n	8009010 <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009456:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009458:	b10b      	cbz	r3, 800945e <tcp_process+0x4a6>
  return ERR_OK;
 800945a:	2500      	movs	r5, #0
 800945c:	e5d8      	b.n	8009010 <tcp_process+0x58>
        tcp_pcb_purge(pcb);
 800945e:	4620      	mov	r0, r4
 8009460:	f7fe f8d8 	bl	8007614 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009464:	4b25      	ldr	r3, [pc, #148]	; (80094fc <tcp_process+0x544>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	42a3      	cmp	r3, r4
 800946a:	d005      	beq.n	8009478 <tcp_process+0x4c0>
 800946c:	b153      	cbz	r3, 8009484 <tcp_process+0x4cc>
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	42a2      	cmp	r2, r4
 8009472:	d005      	beq.n	8009480 <tcp_process+0x4c8>
 8009474:	4613      	mov	r3, r2
 8009476:	e7f9      	b.n	800946c <tcp_process+0x4b4>
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	4b20      	ldr	r3, [pc, #128]	; (80094fc <tcp_process+0x544>)
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	e001      	b.n	8009484 <tcp_process+0x4cc>
 8009480:	68e2      	ldr	r2, [r4, #12]
 8009482:	60da      	str	r2, [r3, #12]
 8009484:	4b1e      	ldr	r3, [pc, #120]	; (8009500 <tcp_process+0x548>)
 8009486:	2201      	movs	r2, #1
 8009488:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800948a:	230a      	movs	r3, #10
 800948c:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800948e:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <tcp_process+0x54c>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	60e2      	str	r2, [r4, #12]
 8009494:	601c      	str	r4, [r3, #0]
 8009496:	f001 fa8b 	bl	800a9b0 <tcp_timer_needed>
  return ERR_OK;
 800949a:	2500      	movs	r5, #0
 800949c:	e5b8      	b.n	8009010 <tcp_process+0x58>
      tcp_receive(pcb);
 800949e:	4620      	mov	r0, r4
 80094a0:	f7ff f90e 	bl	80086c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80094a4:	4b11      	ldr	r3, [pc, #68]	; (80094ec <tcp_process+0x534>)
 80094a6:	7cdb      	ldrb	r3, [r3, #19]
 80094a8:	f013 0f10 	tst.w	r3, #16
 80094ac:	d01b      	beq.n	80094e6 <tcp_process+0x52e>
 80094ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <tcp_process+0x534>)
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d001      	beq.n	80094bc <tcp_process+0x504>
  return ERR_OK;
 80094b8:	2500      	movs	r5, #0
 80094ba:	e5a9      	b.n	8009010 <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80094bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80094be:	b10b      	cbz	r3, 80094c4 <tcp_process+0x50c>
  return ERR_OK;
 80094c0:	2500      	movs	r5, #0
 80094c2:	e5a5      	b.n	8009010 <tcp_process+0x58>
        recv_flags |= TF_CLOSED;
 80094c4:	4a09      	ldr	r2, [pc, #36]	; (80094ec <tcp_process+0x534>)
 80094c6:	7c93      	ldrb	r3, [r2, #18]
 80094c8:	f043 0310 	orr.w	r3, r3, #16
 80094cc:	7493      	strb	r3, [r2, #18]
  return ERR_OK;
 80094ce:	2500      	movs	r5, #0
 80094d0:	e59e      	b.n	8009010 <tcp_process+0x58>
  switch (pcb->state) {
 80094d2:	2500      	movs	r5, #0
 80094d4:	e59c      	b.n	8009010 <tcp_process+0x58>
  return ERR_OK;
 80094d6:	2500      	movs	r5, #0
 80094d8:	e59a      	b.n	8009010 <tcp_process+0x58>
 80094da:	2500      	movs	r5, #0
 80094dc:	e598      	b.n	8009010 <tcp_process+0x58>
 80094de:	2500      	movs	r5, #0
 80094e0:	e596      	b.n	8009010 <tcp_process+0x58>
 80094e2:	2500      	movs	r5, #0
 80094e4:	e594      	b.n	8009010 <tcp_process+0x58>
 80094e6:	2500      	movs	r5, #0
 80094e8:	e592      	b.n	8009010 <tcp_process+0x58>
 80094ea:	bf00      	nop
 80094ec:	200033bc 	.word	0x200033bc
 80094f0:	0801b054 	.word	0x0801b054
 80094f4:	0801b318 	.word	0x0801b318
 80094f8:	08019f6c 	.word	0x08019f6c
 80094fc:	200073c8 	.word	0x200073c8
 8009500:	200073c4 	.word	0x200073c4
 8009504:	200073d8 	.word	0x200073d8

08009508 <tcp_input>:
{
 8009508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800950c:	4605      	mov	r5, r0
 800950e:	b150      	cbz	r0, 8009526 <tcp_input+0x1e>
  tcphdr = (struct tcp_hdr *)p->payload;
 8009510:	686a      	ldr	r2, [r5, #4]
 8009512:	4b6f      	ldr	r3, [pc, #444]	; (80096d0 <tcp_input+0x1c8>)
 8009514:	60da      	str	r2, [r3, #12]
  if (p->len < TCP_HLEN) {
 8009516:	896b      	ldrh	r3, [r5, #10]
 8009518:	2b13      	cmp	r3, #19
 800951a:	d80b      	bhi.n	8009534 <tcp_input+0x2c>
  pbuf_free(p);
 800951c:	4628      	mov	r0, r5
 800951e:	f7fd fbf1 	bl	8006d04 <pbuf_free>
}
 8009522:	b005      	add	sp, #20
 8009524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009526:	4b6b      	ldr	r3, [pc, #428]	; (80096d4 <tcp_input+0x1cc>)
 8009528:	2283      	movs	r2, #131	; 0x83
 800952a:	496b      	ldr	r1, [pc, #428]	; (80096d8 <tcp_input+0x1d0>)
 800952c:	486b      	ldr	r0, [pc, #428]	; (80096dc <tcp_input+0x1d4>)
 800952e:	f009 fad1 	bl	8012ad4 <printf>
 8009532:	e7ed      	b.n	8009510 <tcp_input+0x8>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009534:	4b6a      	ldr	r3, [pc, #424]	; (80096e0 <tcp_input+0x1d8>)
 8009536:	6819      	ldr	r1, [r3, #0]
 8009538:	6958      	ldr	r0, [r3, #20]
 800953a:	f002 fb32 	bl	800bba2 <ip4_addr_isbroadcast_u32>
 800953e:	2800      	cmp	r0, #0
 8009540:	d1ec      	bne.n	800951c <tcp_input+0x14>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009542:	4b67      	ldr	r3, [pc, #412]	; (80096e0 <tcp_input+0x1d8>)
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800954a:	2be0      	cmp	r3, #224	; 0xe0
 800954c:	d0e6      	beq.n	800951c <tcp_input+0x14>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800954e:	4b60      	ldr	r3, [pc, #384]	; (80096d0 <tcp_input+0x1c8>)
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	8998      	ldrh	r0, [r3, #12]
 8009554:	f7fc fdb2 	bl	80060bc <lwip_htons>
 8009558:	f3c0 3107 	ubfx	r1, r0, #12, #8
 800955c:	0089      	lsls	r1, r1, #2
 800955e:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009560:	2913      	cmp	r1, #19
 8009562:	d9db      	bls.n	800951c <tcp_input+0x14>
 8009564:	b28b      	uxth	r3, r1
 8009566:	892a      	ldrh	r2, [r5, #8]
 8009568:	4293      	cmp	r3, r2
 800956a:	d8d7      	bhi.n	800951c <tcp_input+0x14>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800956c:	f1a3 0214 	sub.w	r2, r3, #20
 8009570:	b292      	uxth	r2, r2
 8009572:	4857      	ldr	r0, [pc, #348]	; (80096d0 <tcp_input+0x1c8>)
 8009574:	8202      	strh	r2, [r0, #16]
  tcphdr_opt2 = NULL;
 8009576:	2400      	movs	r4, #0
 8009578:	6044      	str	r4, [r0, #4]
  if (p->len >= hdrlen_bytes) {
 800957a:	8968      	ldrh	r0, [r5, #10]
 800957c:	4283      	cmp	r3, r0
 800957e:	d92d      	bls.n	80095dc <tcp_input+0xd4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d061      	beq.n	800964a <tcp_input+0x142>
    pbuf_remove_header(p, TCP_HLEN);
 8009586:	2114      	movs	r1, #20
 8009588:	4628      	mov	r0, r5
 800958a:	f7fd fb75 	bl	8006c78 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800958e:	896c      	ldrh	r4, [r5, #10]
 8009590:	4b4f      	ldr	r3, [pc, #316]	; (80096d0 <tcp_input+0x1c8>)
 8009592:	811c      	strh	r4, [r3, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009594:	8a1f      	ldrh	r7, [r3, #16]
 8009596:	1b3e      	subs	r6, r7, r4
 8009598:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800959a:	4621      	mov	r1, r4
 800959c:	4628      	mov	r0, r5
 800959e:	f7fd fb6b 	bl	8006c78 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 80095a2:	6828      	ldr	r0, [r5, #0]
 80095a4:	8943      	ldrh	r3, [r0, #10]
 80095a6:	42b3      	cmp	r3, r6
 80095a8:	d3b8      	bcc.n	800951c <tcp_input+0x14>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80095aa:	6842      	ldr	r2, [r0, #4]
 80095ac:	4b48      	ldr	r3, [pc, #288]	; (80096d0 <tcp_input+0x1c8>)
 80095ae:	605a      	str	r2, [r3, #4]
    pbuf_remove_header(p->next, opt2len);
 80095b0:	4631      	mov	r1, r6
 80095b2:	f7fd fb61 	bl	8006c78 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80095b6:	892b      	ldrh	r3, [r5, #8]
 80095b8:	1be4      	subs	r4, r4, r7
 80095ba:	441c      	add	r4, r3
 80095bc:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80095be:	896b      	ldrh	r3, [r5, #10]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d149      	bne.n	8009658 <tcp_input+0x150>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80095c4:	892a      	ldrh	r2, [r5, #8]
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	891b      	ldrh	r3, [r3, #8]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d00b      	beq.n	80095e6 <tcp_input+0xde>
 80095ce:	4b41      	ldr	r3, [pc, #260]	; (80096d4 <tcp_input+0x1cc>)
 80095d0:	22e0      	movs	r2, #224	; 0xe0
 80095d2:	4944      	ldr	r1, [pc, #272]	; (80096e4 <tcp_input+0x1dc>)
 80095d4:	4841      	ldr	r0, [pc, #260]	; (80096dc <tcp_input+0x1d4>)
 80095d6:	f009 fa7d 	bl	8012ad4 <printf>
 80095da:	e004      	b.n	80095e6 <tcp_input+0xde>
    tcphdr_opt1len = tcphdr_optlen;
 80095dc:	4b3c      	ldr	r3, [pc, #240]	; (80096d0 <tcp_input+0x1c8>)
 80095de:	811a      	strh	r2, [r3, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80095e0:	4628      	mov	r0, r5
 80095e2:	f7fd fb49 	bl	8006c78 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80095e6:	4c3a      	ldr	r4, [pc, #232]	; (80096d0 <tcp_input+0x1c8>)
 80095e8:	68e6      	ldr	r6, [r4, #12]
 80095ea:	8830      	ldrh	r0, [r6, #0]
 80095ec:	f7fc fd66 	bl	80060bc <lwip_htons>
 80095f0:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80095f2:	68e6      	ldr	r6, [r4, #12]
 80095f4:	8870      	ldrh	r0, [r6, #2]
 80095f6:	f7fc fd61 	bl	80060bc <lwip_htons>
 80095fa:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80095fc:	68e6      	ldr	r6, [r4, #12]
 80095fe:	6870      	ldr	r0, [r6, #4]
 8009600:	f7fc fd61 	bl	80060c6 <lwip_htonl>
 8009604:	6070      	str	r0, [r6, #4]
 8009606:	6160      	str	r0, [r4, #20]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009608:	68e6      	ldr	r6, [r4, #12]
 800960a:	68b0      	ldr	r0, [r6, #8]
 800960c:	f7fc fd5b 	bl	80060c6 <lwip_htonl>
 8009610:	60b0      	str	r0, [r6, #8]
 8009612:	61e0      	str	r0, [r4, #28]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009614:	68e6      	ldr	r6, [r4, #12]
 8009616:	89f0      	ldrh	r0, [r6, #14]
 8009618:	f7fc fd50 	bl	80060bc <lwip_htons>
 800961c:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800961e:	68e3      	ldr	r3, [r4, #12]
 8009620:	8998      	ldrh	r0, [r3, #12]
 8009622:	f7fc fd4b 	bl	80060bc <lwip_htons>
 8009626:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800962a:	74e0      	strb	r0, [r4, #19]
  tcplen = p->tot_len;
 800962c:	892b      	ldrh	r3, [r5, #8]
 800962e:	8323      	strh	r3, [r4, #24]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009630:	f010 0f03 	tst.w	r0, #3
 8009634:	d005      	beq.n	8009642 <tcp_input+0x13a>
    tcplen++;
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	b292      	uxth	r2, r2
 800963a:	8322      	strh	r2, [r4, #24]
    if (tcplen < p->tot_len) {
 800963c:	4293      	cmp	r3, r2
 800963e:	f63f af6d 	bhi.w	800951c <tcp_input+0x14>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009642:	4b29      	ldr	r3, [pc, #164]	; (80096e8 <tcp_input+0x1e0>)
 8009644:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8009646:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009648:	e02a      	b.n	80096a0 <tcp_input+0x198>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800964a:	4b22      	ldr	r3, [pc, #136]	; (80096d4 <tcp_input+0x1cc>)
 800964c:	22c2      	movs	r2, #194	; 0xc2
 800964e:	4927      	ldr	r1, [pc, #156]	; (80096ec <tcp_input+0x1e4>)
 8009650:	4822      	ldr	r0, [pc, #136]	; (80096dc <tcp_input+0x1d4>)
 8009652:	f009 fa3f 	bl	8012ad4 <printf>
 8009656:	e796      	b.n	8009586 <tcp_input+0x7e>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <tcp_input+0x1cc>)
 800965a:	22df      	movs	r2, #223	; 0xdf
 800965c:	4924      	ldr	r1, [pc, #144]	; (80096f0 <tcp_input+0x1e8>)
 800965e:	481f      	ldr	r0, [pc, #124]	; (80096dc <tcp_input+0x1d4>)
 8009660:	f009 fa38 	bl	8012ad4 <printf>
 8009664:	e7ae      	b.n	80095c4 <tcp_input+0xbc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009666:	4b1b      	ldr	r3, [pc, #108]	; (80096d4 <tcp_input+0x1cc>)
 8009668:	22fb      	movs	r2, #251	; 0xfb
 800966a:	4922      	ldr	r1, [pc, #136]	; (80096f4 <tcp_input+0x1ec>)
 800966c:	481b      	ldr	r0, [pc, #108]	; (80096dc <tcp_input+0x1d4>)
 800966e:	f009 fa31 	bl	8012ad4 <printf>
 8009672:	e01a      	b.n	80096aa <tcp_input+0x1a2>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009674:	4b17      	ldr	r3, [pc, #92]	; (80096d4 <tcp_input+0x1cc>)
 8009676:	22fc      	movs	r2, #252	; 0xfc
 8009678:	491f      	ldr	r1, [pc, #124]	; (80096f8 <tcp_input+0x1f0>)
 800967a:	4818      	ldr	r0, [pc, #96]	; (80096dc <tcp_input+0x1d4>)
 800967c:	f009 fa2a 	bl	8012ad4 <printf>
 8009680:	e016      	b.n	80096b0 <tcp_input+0x1a8>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009682:	4b14      	ldr	r3, [pc, #80]	; (80096d4 <tcp_input+0x1cc>)
 8009684:	22fd      	movs	r2, #253	; 0xfd
 8009686:	491d      	ldr	r1, [pc, #116]	; (80096fc <tcp_input+0x1f4>)
 8009688:	4814      	ldr	r0, [pc, #80]	; (80096dc <tcp_input+0x1d4>)
 800968a:	f009 fa23 	bl	8012ad4 <printf>
 800968e:	e012      	b.n	80096b6 <tcp_input+0x1ae>
    if (pcb->remote_port == tcphdr->src &&
 8009690:	8b21      	ldrh	r1, [r4, #24]
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <tcp_input+0x1c8>)
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	881a      	ldrh	r2, [r3, #0]
 8009698:	4291      	cmp	r1, r2
 800969a:	d031      	beq.n	8009700 <tcp_input+0x1f8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800969c:	4626      	mov	r6, r4
 800969e:	68e4      	ldr	r4, [r4, #12]
 80096a0:	2c00      	cmp	r4, #0
 80096a2:	d048      	beq.n	8009736 <tcp_input+0x22e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80096a4:	7d23      	ldrb	r3, [r4, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0dd      	beq.n	8009666 <tcp_input+0x15e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80096aa:	7d23      	ldrb	r3, [r4, #20]
 80096ac:	2b0a      	cmp	r3, #10
 80096ae:	d0e1      	beq.n	8009674 <tcp_input+0x16c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80096b0:	7d23      	ldrb	r3, [r4, #20]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d0e5      	beq.n	8009682 <tcp_input+0x17a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096b6:	7a22      	ldrb	r2, [r4, #8]
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	d0e9      	beq.n	8009690 <tcp_input+0x188>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80096bc:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <tcp_input+0x1d8>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096c4:	3301      	adds	r3, #1
 80096c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d0e1      	beq.n	8009690 <tcp_input+0x188>
 80096cc:	e7e6      	b.n	800969c <tcp_input+0x194>
 80096ce:	bf00      	nop
 80096d0:	200033bc 	.word	0x200033bc
 80096d4:	0801b054 	.word	0x0801b054
 80096d8:	0801b338 	.word	0x0801b338
 80096dc:	08019f6c 	.word	0x08019f6c
 80096e0:	200044d8 	.word	0x200044d8
 80096e4:	0801b36c 	.word	0x0801b36c
 80096e8:	200073c8 	.word	0x200073c8
 80096ec:	0801b350 	.word	0x0801b350
 80096f0:	0801b360 	.word	0x0801b360
 80096f4:	0801b38c 	.word	0x0801b38c
 80096f8:	0801b3b4 	.word	0x0801b3b4
 80096fc:	0801b3e0 	.word	0x0801b3e0
        pcb->local_port == tcphdr->dest &&
 8009700:	8ae2      	ldrh	r2, [r4, #22]
 8009702:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 8009704:	429a      	cmp	r2, r3
 8009706:	d1c9      	bne.n	800969c <tcp_input+0x194>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009708:	6862      	ldr	r2, [r4, #4]
 800970a:	4b74      	ldr	r3, [pc, #464]	; (80098dc <tcp_input+0x3d4>)
 800970c:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800970e:	429a      	cmp	r2, r3
 8009710:	d1c4      	bne.n	800969c <tcp_input+0x194>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009712:	6822      	ldr	r2, [r4, #0]
 8009714:	4b71      	ldr	r3, [pc, #452]	; (80098dc <tcp_input+0x3d4>)
 8009716:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009718:	429a      	cmp	r2, r3
 800971a:	d1bf      	bne.n	800969c <tcp_input+0x194>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800971c:	68e3      	ldr	r3, [r4, #12]
 800971e:	42a3      	cmp	r3, r4
 8009720:	d05c      	beq.n	80097dc <tcp_input+0x2d4>
      if (prev != NULL) {
 8009722:	b12e      	cbz	r6, 8009730 <tcp_input+0x228>
        prev->next = pcb->next;
 8009724:	68e3      	ldr	r3, [r4, #12]
 8009726:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8009728:	4b6d      	ldr	r3, [pc, #436]	; (80098e0 <tcp_input+0x3d8>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800972e:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009730:	68e3      	ldr	r3, [r4, #12]
 8009732:	42a3      	cmp	r3, r4
 8009734:	d05a      	beq.n	80097ec <tcp_input+0x2e4>
  if (pcb == NULL) {
 8009736:	2c00      	cmp	r4, #0
 8009738:	d060      	beq.n	80097fc <tcp_input+0x2f4>
  if (pcb != NULL) {
 800973a:	2c00      	cmp	r4, #0
 800973c:	f000 8156 	beq.w	80099ec <tcp_input+0x4e4>
    inseg.next = NULL;
 8009740:	4b68      	ldr	r3, [pc, #416]	; (80098e4 <tcp_input+0x3dc>)
 8009742:	2200      	movs	r2, #0
 8009744:	625a      	str	r2, [r3, #36]	; 0x24
    inseg.len = p->tot_len;
 8009746:	8929      	ldrh	r1, [r5, #8]
 8009748:	8599      	strh	r1, [r3, #44]	; 0x2c
    inseg.p = p;
 800974a:	629d      	str	r5, [r3, #40]	; 0x28
    inseg.tcphdr = tcphdr;
 800974c:	68d9      	ldr	r1, [r3, #12]
 800974e:	6319      	str	r1, [r3, #48]	; 0x30
    recv_data = NULL;
 8009750:	635a      	str	r2, [r3, #52]	; 0x34
    recv_flags = 0;
 8009752:	749a      	strb	r2, [r3, #18]
    recv_acked = 0;
 8009754:	841a      	strh	r2, [r3, #32]
    if (flags & TCP_PSH) {
 8009756:	7cdb      	ldrb	r3, [r3, #19]
 8009758:	f013 0f08 	tst.w	r3, #8
 800975c:	d003      	beq.n	8009766 <tcp_input+0x25e>
      p->flags |= PBUF_FLAG_PUSH;
 800975e:	7b6b      	ldrb	r3, [r5, #13]
 8009760:	f043 0301 	orr.w	r3, r3, #1
 8009764:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8009766:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009768:	b16b      	cbz	r3, 8009786 <tcp_input+0x27e>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800976a:	4620      	mov	r0, r4
 800976c:	f7fe fa84 	bl	8007c78 <tcp_process_refused_data>
 8009770:	f110 0f0d 	cmn.w	r0, #13
 8009774:	f000 80aa 	beq.w	80098cc <tcp_input+0x3c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009778:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800977a:	b123      	cbz	r3, 8009786 <tcp_input+0x27e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800977c:	4b59      	ldr	r3, [pc, #356]	; (80098e4 <tcp_input+0x3dc>)
 800977e:	8b1b      	ldrh	r3, [r3, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	f040 80a3 	bne.w	80098cc <tcp_input+0x3c4>
    tcp_input_pcb = pcb;
 8009786:	4b58      	ldr	r3, [pc, #352]	; (80098e8 <tcp_input+0x3e0>)
 8009788:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 800978a:	4620      	mov	r0, r4
 800978c:	f7ff fc14 	bl	8008fb8 <tcp_process>
    if (err != ERR_ABRT) {
 8009790:	f110 0f0d 	cmn.w	r0, #13
 8009794:	d013      	beq.n	80097be <tcp_input+0x2b6>
      if (recv_flags & TF_RESET) {
 8009796:	4b53      	ldr	r3, [pc, #332]	; (80098e4 <tcp_input+0x3dc>)
 8009798:	7c9b      	ldrb	r3, [r3, #18]
 800979a:	f013 0f08 	tst.w	r3, #8
 800979e:	f000 80b3 	beq.w	8009908 <tcp_input+0x400>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80097a2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80097a6:	b11b      	cbz	r3, 80097b0 <tcp_input+0x2a8>
 80097a8:	f06f 010d 	mvn.w	r1, #13
 80097ac:	6920      	ldr	r0, [r4, #16]
 80097ae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80097b0:	4621      	mov	r1, r4
 80097b2:	484b      	ldr	r0, [pc, #300]	; (80098e0 <tcp_input+0x3d8>)
 80097b4:	f7fd ff60 	bl	8007678 <tcp_pcb_remove>
        tcp_free(pcb);
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7fd fe1b 	bl	80073f4 <tcp_free>
    tcp_input_pcb = NULL;
 80097be:	2200      	movs	r2, #0
 80097c0:	4b49      	ldr	r3, [pc, #292]	; (80098e8 <tcp_input+0x3e0>)
 80097c2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80097c4:	4b47      	ldr	r3, [pc, #284]	; (80098e4 <tcp_input+0x3dc>)
 80097c6:	635a      	str	r2, [r3, #52]	; 0x34
    if (inseg.p != NULL) {
 80097c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f43f aea9 	beq.w	8009522 <tcp_input+0x1a>
      pbuf_free(inseg.p);
 80097d0:	f7fd fa98 	bl	8006d04 <pbuf_free>
      inseg.p = NULL;
 80097d4:	4b43      	ldr	r3, [pc, #268]	; (80098e4 <tcp_input+0x3dc>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	629a      	str	r2, [r3, #40]	; 0x28
 80097da:	e6a2      	b.n	8009522 <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80097dc:	4b43      	ldr	r3, [pc, #268]	; (80098ec <tcp_input+0x3e4>)
 80097de:	f240 120d 	movw	r2, #269	; 0x10d
 80097e2:	4943      	ldr	r1, [pc, #268]	; (80098f0 <tcp_input+0x3e8>)
 80097e4:	4843      	ldr	r0, [pc, #268]	; (80098f4 <tcp_input+0x3ec>)
 80097e6:	f009 f975 	bl	8012ad4 <printf>
 80097ea:	e79a      	b.n	8009722 <tcp_input+0x21a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80097ec:	4b3f      	ldr	r3, [pc, #252]	; (80098ec <tcp_input+0x3e4>)
 80097ee:	f240 1215 	movw	r2, #277	; 0x115
 80097f2:	4941      	ldr	r1, [pc, #260]	; (80098f8 <tcp_input+0x3f0>)
 80097f4:	483f      	ldr	r0, [pc, #252]	; (80098f4 <tcp_input+0x3ec>)
 80097f6:	f009 f96d 	bl	8012ad4 <printf>
 80097fa:	e79c      	b.n	8009736 <tcp_input+0x22e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80097fc:	4b3f      	ldr	r3, [pc, #252]	; (80098fc <tcp_input+0x3f4>)
 80097fe:	681c      	ldr	r4, [r3, #0]
 8009800:	e00e      	b.n	8009820 <tcp_input+0x318>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009802:	4b3a      	ldr	r3, [pc, #232]	; (80098ec <tcp_input+0x3e4>)
 8009804:	f240 121f 	movw	r2, #287	; 0x11f
 8009808:	493d      	ldr	r1, [pc, #244]	; (8009900 <tcp_input+0x3f8>)
 800980a:	483a      	ldr	r0, [pc, #232]	; (80098f4 <tcp_input+0x3ec>)
 800980c:	f009 f962 	bl	8012ad4 <printf>
 8009810:	e00a      	b.n	8009828 <tcp_input+0x320>
      if (pcb->remote_port == tcphdr->src &&
 8009812:	8b21      	ldrh	r1, [r4, #24]
 8009814:	4b33      	ldr	r3, [pc, #204]	; (80098e4 <tcp_input+0x3dc>)
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	881a      	ldrh	r2, [r3, #0]
 800981a:	4291      	cmp	r1, r2
 800981c:	d010      	beq.n	8009840 <tcp_input+0x338>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800981e:	68e4      	ldr	r4, [r4, #12]
 8009820:	b31c      	cbz	r4, 800986a <tcp_input+0x362>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009822:	7d23      	ldrb	r3, [r4, #20]
 8009824:	2b0a      	cmp	r3, #10
 8009826:	d1ec      	bne.n	8009802 <tcp_input+0x2fa>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009828:	7a22      	ldrb	r2, [r4, #8]
 800982a:	2a00      	cmp	r2, #0
 800982c:	d0f1      	beq.n	8009812 <tcp_input+0x30a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800982e:	4b2b      	ldr	r3, [pc, #172]	; (80098dc <tcp_input+0x3d4>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009836:	3301      	adds	r3, #1
 8009838:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800983a:	429a      	cmp	r2, r3
 800983c:	d0e9      	beq.n	8009812 <tcp_input+0x30a>
 800983e:	e7ee      	b.n	800981e <tcp_input+0x316>
          pcb->local_port == tcphdr->dest &&
 8009840:	8ae2      	ldrh	r2, [r4, #22]
 8009842:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8009844:	429a      	cmp	r2, r3
 8009846:	d1ea      	bne.n	800981e <tcp_input+0x316>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009848:	6862      	ldr	r2, [r4, #4]
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <tcp_input+0x3d4>)
 800984c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800984e:	429a      	cmp	r2, r3
 8009850:	d1e5      	bne.n	800981e <tcp_input+0x316>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009852:	6822      	ldr	r2, [r4, #0]
 8009854:	4b21      	ldr	r3, [pc, #132]	; (80098dc <tcp_input+0x3d4>)
 8009856:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009858:	429a      	cmp	r2, r3
 800985a:	d1e0      	bne.n	800981e <tcp_input+0x316>
          tcp_timewait_input(pcb);
 800985c:	4620      	mov	r0, r4
 800985e:	f7fe fd8f 	bl	8008380 <tcp_timewait_input>
        pbuf_free(p);
 8009862:	4628      	mov	r0, r5
 8009864:	f7fd fa4e 	bl	8006d04 <pbuf_free>
        return;
 8009868:	e65b      	b.n	8009522 <tcp_input+0x1a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800986a:	4b26      	ldr	r3, [pc, #152]	; (8009904 <tcp_input+0x3fc>)
 800986c:	681e      	ldr	r6, [r3, #0]
 800986e:	4630      	mov	r0, r6
    prev = NULL;
 8009870:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009872:	e007      	b.n	8009884 <tcp_input+0x37c>
      if (lpcb->local_port == tcphdr->dest) {
 8009874:	8ac2      	ldrh	r2, [r0, #22]
 8009876:	4b1b      	ldr	r3, [pc, #108]	; (80098e4 <tcp_input+0x3dc>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	885b      	ldrh	r3, [r3, #2]
 800987c:	429a      	cmp	r2, r3
 800987e:	d00e      	beq.n	800989e <tcp_input+0x396>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009880:	4601      	mov	r1, r0
 8009882:	68c0      	ldr	r0, [r0, #12]
 8009884:	b198      	cbz	r0, 80098ae <tcp_input+0x3a6>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009886:	7a02      	ldrb	r2, [r0, #8]
 8009888:	2a00      	cmp	r2, #0
 800988a:	d0f3      	beq.n	8009874 <tcp_input+0x36c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800988c:	4b13      	ldr	r3, [pc, #76]	; (80098dc <tcp_input+0x3d4>)
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009894:	3301      	adds	r3, #1
 8009896:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009898:	429a      	cmp	r2, r3
 800989a:	d0eb      	beq.n	8009874 <tcp_input+0x36c>
 800989c:	e7f0      	b.n	8009880 <tcp_input+0x378>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800989e:	6803      	ldr	r3, [r0, #0]
 80098a0:	4a0e      	ldr	r2, [pc, #56]	; (80098dc <tcp_input+0x3d4>)
 80098a2:	6952      	ldr	r2, [r2, #20]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d002      	beq.n	80098ae <tcp_input+0x3a6>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80098a8:	b108      	cbz	r0, 80098ae <tcp_input+0x3a6>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e8      	bne.n	8009880 <tcp_input+0x378>
    if (lpcb != NULL) {
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f af43 	beq.w	800973a <tcp_input+0x232>
      if (prev != NULL) {
 80098b4:	b121      	cbz	r1, 80098c0 <tcp_input+0x3b8>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80098b6:	68c3      	ldr	r3, [r0, #12]
 80098b8:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80098ba:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80098bc:	4b11      	ldr	r3, [pc, #68]	; (8009904 <tcp_input+0x3fc>)
 80098be:	6018      	str	r0, [r3, #0]
        tcp_listen_input(lpcb);
 80098c0:	f7fe fdb0 	bl	8008424 <tcp_listen_input>
      pbuf_free(p);
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7fd fa1d 	bl	8006d04 <pbuf_free>
      return;
 80098ca:	e62a      	b.n	8009522 <tcp_input+0x1a>
        if (pcb->rcv_ann_wnd == 0) {
 80098cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f af75 	bne.w	80097be <tcp_input+0x2b6>
          tcp_send_empty_ack(pcb);
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 fd95 	bl	800a404 <tcp_send_empty_ack>
        goto aborted;
 80098da:	e770      	b.n	80097be <tcp_input+0x2b6>
 80098dc:	200044d8 	.word	0x200044d8
 80098e0:	200073c8 	.word	0x200073c8
 80098e4:	200033bc 	.word	0x200033bc
 80098e8:	200073dc 	.word	0x200073dc
 80098ec:	0801b054 	.word	0x0801b054
 80098f0:	0801b408 	.word	0x0801b408
 80098f4:	08019f6c 	.word	0x08019f6c
 80098f8:	0801b434 	.word	0x0801b434
 80098fc:	200073d8 	.word	0x200073d8
 8009900:	0801b460 	.word	0x0801b460
 8009904:	200073d0 	.word	0x200073d0
        if (recv_acked > 0) {
 8009908:	4b47      	ldr	r3, [pc, #284]	; (8009a28 <tcp_input+0x520>)
 800990a:	8c1a      	ldrh	r2, [r3, #32]
 800990c:	b162      	cbz	r2, 8009928 <tcp_input+0x420>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800990e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009912:	b133      	cbz	r3, 8009922 <tcp_input+0x41a>
 8009914:	4621      	mov	r1, r4
 8009916:	6920      	ldr	r0, [r4, #16]
 8009918:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800991a:	f110 0f0d 	cmn.w	r0, #13
 800991e:	f43f af4e 	beq.w	80097be <tcp_input+0x2b6>
          recv_acked = 0;
 8009922:	4b41      	ldr	r3, [pc, #260]	; (8009a28 <tcp_input+0x520>)
 8009924:	2200      	movs	r2, #0
 8009926:	841a      	strh	r2, [r3, #32]
        if (tcp_input_delayed_close(pcb)) {
 8009928:	4620      	mov	r0, r4
 800992a:	f7fe fcf9 	bl	8008320 <tcp_input_delayed_close>
 800992e:	2800      	cmp	r0, #0
 8009930:	f47f af45 	bne.w	80097be <tcp_input+0x2b6>
        if (recv_data != NULL) {
 8009934:	4b3c      	ldr	r3, [pc, #240]	; (8009a28 <tcp_input+0x520>)
 8009936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009938:	b1eb      	cbz	r3, 8009976 <tcp_input+0x46e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800993a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800993c:	b133      	cbz	r3, 800994c <tcp_input+0x444>
 800993e:	4b3b      	ldr	r3, [pc, #236]	; (8009a2c <tcp_input+0x524>)
 8009940:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009944:	493a      	ldr	r1, [pc, #232]	; (8009a30 <tcp_input+0x528>)
 8009946:	483b      	ldr	r0, [pc, #236]	; (8009a34 <tcp_input+0x52c>)
 8009948:	f009 f8c4 	bl	8012ad4 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 800994c:	8b63      	ldrh	r3, [r4, #26]
 800994e:	f013 0f10 	tst.w	r3, #16
 8009952:	d128      	bne.n	80099a6 <tcp_input+0x49e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009954:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8009958:	b36d      	cbz	r5, 80099b6 <tcp_input+0x4ae>
 800995a:	2300      	movs	r3, #0
 800995c:	4a32      	ldr	r2, [pc, #200]	; (8009a28 <tcp_input+0x520>)
 800995e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009960:	4621      	mov	r1, r4
 8009962:	6920      	ldr	r0, [r4, #16]
 8009964:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8009966:	f110 0f0d 	cmn.w	r0, #13
 800996a:	f43f af28 	beq.w	80097be <tcp_input+0x2b6>
          if (err != ERR_OK) {
 800996e:	b110      	cbz	r0, 8009976 <tcp_input+0x46e>
            pcb->refused_data = recv_data;
 8009970:	4b2d      	ldr	r3, [pc, #180]	; (8009a28 <tcp_input+0x520>)
 8009972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009974:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8009976:	4b2c      	ldr	r3, [pc, #176]	; (8009a28 <tcp_input+0x520>)
 8009978:	7c9b      	ldrb	r3, [r3, #18]
 800997a:	f013 0f20 	tst.w	r3, #32
 800997e:	d005      	beq.n	800998c <tcp_input+0x484>
          if (pcb->refused_data != NULL) {
 8009980:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009982:	b303      	cbz	r3, 80099c6 <tcp_input+0x4be>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009984:	7b5a      	ldrb	r2, [r3, #13]
 8009986:	f042 0220 	orr.w	r2, r2, #32
 800998a:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800998c:	4b2a      	ldr	r3, [pc, #168]	; (8009a38 <tcp_input+0x530>)
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009992:	4620      	mov	r0, r4
 8009994:	f7fe fcc4 	bl	8008320 <tcp_input_delayed_close>
 8009998:	2800      	cmp	r0, #0
 800999a:	f47f af10 	bne.w	80097be <tcp_input+0x2b6>
        tcp_output(pcb);
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 fd6a 	bl	800a478 <tcp_output>
 80099a4:	e70b      	b.n	80097be <tcp_input+0x2b6>
            pbuf_free(recv_data);
 80099a6:	4b20      	ldr	r3, [pc, #128]	; (8009a28 <tcp_input+0x520>)
 80099a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80099aa:	f7fd f9ab 	bl	8006d04 <pbuf_free>
            tcp_abort(pcb);
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7fd ff50 	bl	8007854 <tcp_abort>
            goto aborted;
 80099b4:	e703      	b.n	80097be <tcp_input+0x2b6>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80099b6:	2300      	movs	r3, #0
 80099b8:	4a1b      	ldr	r2, [pc, #108]	; (8009a28 <tcp_input+0x520>)
 80099ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80099bc:	4621      	mov	r1, r4
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe f936 	bl	8007c30 <tcp_recv_null>
 80099c4:	e7cf      	b.n	8009966 <tcp_input+0x45e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80099c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80099cc:	d001      	beq.n	80099d2 <tcp_input+0x4ca>
              pcb->rcv_wnd++;
 80099ce:	3301      	adds	r3, #1
 80099d0:	8523      	strh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80099d2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	d0d8      	beq.n	800998c <tcp_input+0x484>
 80099da:	2300      	movs	r3, #0
 80099dc:	461a      	mov	r2, r3
 80099de:	4621      	mov	r1, r4
 80099e0:	6920      	ldr	r0, [r4, #16]
 80099e2:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 80099e4:	f110 0f0d 	cmn.w	r0, #13
 80099e8:	d1d0      	bne.n	800998c <tcp_input+0x484>
 80099ea:	e6e8      	b.n	80097be <tcp_input+0x2b6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80099ec:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <tcp_input+0x520>)
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	8998      	ldrh	r0, [r3, #12]
 80099f2:	f7fc fb63 	bl	80060bc <lwip_htons>
 80099f6:	f010 0f04 	tst.w	r0, #4
 80099fa:	d003      	beq.n	8009a04 <tcp_input+0x4fc>
    pbuf_free(p);
 80099fc:	4628      	mov	r0, r5
 80099fe:	f7fd f981 	bl	8006d04 <pbuf_free>
 8009a02:	e58e      	b.n	8009522 <tcp_input+0x1a>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a04:	4908      	ldr	r1, [pc, #32]	; (8009a28 <tcp_input+0x520>)
 8009a06:	68c8      	ldr	r0, [r1, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a08:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <tcp_input+0x534>)
 8009a0a:	8b0c      	ldrh	r4, [r1, #24]
 8009a0c:	694a      	ldr	r2, [r1, #20]
 8009a0e:	8806      	ldrh	r6, [r0, #0]
 8009a10:	9602      	str	r6, [sp, #8]
 8009a12:	8840      	ldrh	r0, [r0, #2]
 8009a14:	9001      	str	r0, [sp, #4]
 8009a16:	1f18      	subs	r0, r3, #4
 8009a18:	9000      	str	r0, [sp, #0]
 8009a1a:	4422      	add	r2, r4
 8009a1c:	69c9      	ldr	r1, [r1, #28]
 8009a1e:	2000      	movs	r0, #0
 8009a20:	f000 fca8 	bl	800a374 <tcp_rst>
 8009a24:	e7ea      	b.n	80099fc <tcp_input+0x4f4>
 8009a26:	bf00      	nop
 8009a28:	200033bc 	.word	0x200033bc
 8009a2c:	0801b054 	.word	0x0801b054
 8009a30:	0801b490 	.word	0x0801b490
 8009a34:	08019f6c 	.word	0x08019f6c
 8009a38:	200073dc 	.word	0x200073dc
 8009a3c:	200044ec 	.word	0x200044ec

08009a40 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009a40:	4a02      	ldr	r2, [pc, #8]	; (8009a4c <tcp_trigger_input_pcb_close+0xc>)
 8009a42:	7c93      	ldrb	r3, [r2, #18]
 8009a44:	f043 0310 	orr.w	r3, r3, #16
 8009a48:	7493      	strb	r3, [r2, #18]
}
 8009a4a:	4770      	bx	lr
 8009a4c:	200033bc 	.word	0x200033bc

08009a50 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009a50:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009a52:	4604      	mov	r4, r0
 8009a54:	b128      	cbz	r0, 8009a62 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	7b9b      	ldrb	r3, [r3, #14]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d109      	bne.n	8009a72 <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
 8009a5e:	2000      	movs	r0, #0
}
 8009a60:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <tcp_output_segment_busy+0x28>)
 8009a64:	f240 529a 	movw	r2, #1434	; 0x59a
 8009a68:	4904      	ldr	r1, [pc, #16]	; (8009a7c <tcp_output_segment_busy+0x2c>)
 8009a6a:	4805      	ldr	r0, [pc, #20]	; (8009a80 <tcp_output_segment_busy+0x30>)
 8009a6c:	f009 f832 	bl	8012ad4 <printf>
 8009a70:	e7f1      	b.n	8009a56 <tcp_output_segment_busy+0x6>
    return 1;
 8009a72:	2001      	movs	r0, #1
 8009a74:	e7f4      	b.n	8009a60 <tcp_output_segment_busy+0x10>
 8009a76:	bf00      	nop
 8009a78:	0801b4ac 	.word	0x0801b4ac
 8009a7c:	0801b570 	.word	0x0801b570
 8009a80:	08019f6c 	.word	0x08019f6c

08009a84 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009a88:	460d      	mov	r5, r1
 8009a8a:	b189      	cbz	r1, 8009ab0 <tcp_output_fill_options+0x2c>

  tcphdr = (struct tcp_hdr *)p->payload;
 8009a8c:	686b      	ldr	r3, [r5, #4]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8009a8e:	f103 0214 	add.w	r2, r3, #20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8009a92:	00a4      	lsls	r4, r4, #2
 8009a94:	f004 0404 	and.w	r4, r4, #4
 8009a98:	3414      	adds	r4, #20
 8009a9a:	441c      	add	r4, r3
 8009a9c:	4294      	cmp	r4, r2
 8009a9e:	d006      	beq.n	8009aae <tcp_output_fill_options+0x2a>
 8009aa0:	4b07      	ldr	r3, [pc, #28]	; (8009ac0 <tcp_output_fill_options+0x3c>)
 8009aa2:	f240 7275 	movw	r2, #1909	; 0x775
 8009aa6:	4907      	ldr	r1, [pc, #28]	; (8009ac4 <tcp_output_fill_options+0x40>)
 8009aa8:	4807      	ldr	r0, [pc, #28]	; (8009ac8 <tcp_output_fill_options+0x44>)
 8009aaa:	f009 f813 	bl	8012ad4 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009ab0:	4b03      	ldr	r3, [pc, #12]	; (8009ac0 <tcp_output_fill_options+0x3c>)
 8009ab2:	f240 7256 	movw	r2, #1878	; 0x756
 8009ab6:	4905      	ldr	r1, [pc, #20]	; (8009acc <tcp_output_fill_options+0x48>)
 8009ab8:	4803      	ldr	r0, [pc, #12]	; (8009ac8 <tcp_output_fill_options+0x44>)
 8009aba:	f009 f80b 	bl	8012ad4 <printf>
 8009abe:	e7e5      	b.n	8009a8c <tcp_output_fill_options+0x8>
 8009ac0:	0801b4ac 	.word	0x0801b4ac
 8009ac4:	0801b5c0 	.word	0x0801b5c0
 8009ac8:	08019f6c 	.word	0x08019f6c
 8009acc:	0801b598 	.word	0x0801b598

08009ad0 <tcp_create_segment>:
{
 8009ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	460e      	mov	r6, r1
 8009ad6:	4617      	mov	r7, r2
 8009ad8:	4698      	mov	r8, r3
 8009ada:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009ade:	4681      	mov	r9, r0
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d041      	beq.n	8009b68 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009ae4:	2e00      	cmp	r6, #0
 8009ae6:	d046      	beq.n	8009b76 <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009ae8:	ea4f 058a 	mov.w	r5, sl, lsl #2
 8009aec:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009af0:	2003      	movs	r0, #3
 8009af2:	f7fc fe47 	bl	8006784 <memp_malloc>
 8009af6:	4604      	mov	r4, r0
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d043      	beq.n	8009b84 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 8009afc:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	6003      	str	r3, [r0, #0]
  seg->p = p;
 8009b04:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009b06:	8933      	ldrh	r3, [r6, #8]
 8009b08:	fa1f fa85 	uxth.w	sl, r5
 8009b0c:	4553      	cmp	r3, sl
 8009b0e:	d33d      	bcc.n	8009b8c <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 8009b10:	8931      	ldrh	r1, [r6, #8]
 8009b12:	eba1 010a 	sub.w	r1, r1, sl
 8009b16:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009b18:	2114      	movs	r1, #20
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f7fd f8a7 	bl	8006c6e <pbuf_add_header>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d13a      	bne.n	8009b9a <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009b24:	6863      	ldr	r3, [r4, #4]
 8009b26:	685e      	ldr	r6, [r3, #4]
 8009b28:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009b2a:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8009b2e:	f7fc fac5 	bl	80060bc <lwip_htons>
 8009b32:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009b34:	68e6      	ldr	r6, [r4, #12]
 8009b36:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 8009b3a:	f7fc fabf 	bl	80060bc <lwip_htons>
 8009b3e:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009b40:	68e6      	ldr	r6, [r4, #12]
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7fc fabf 	bl	80060c6 <lwip_htonl>
 8009b48:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009b4a:	08a8      	lsrs	r0, r5, #2
 8009b4c:	3005      	adds	r0, #5
 8009b4e:	68e5      	ldr	r5, [r4, #12]
 8009b50:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 8009b54:	f7fc fab2 	bl	80060bc <lwip_htons>
 8009b58:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	749a      	strb	r2, [r3, #18]
 8009b60:	74da      	strb	r2, [r3, #19]
}
 8009b62:	4620      	mov	r0, r4
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009b68:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <tcp_create_segment+0xd4>)
 8009b6a:	22a3      	movs	r2, #163	; 0xa3
 8009b6c:	490e      	ldr	r1, [pc, #56]	; (8009ba8 <tcp_create_segment+0xd8>)
 8009b6e:	480f      	ldr	r0, [pc, #60]	; (8009bac <tcp_create_segment+0xdc>)
 8009b70:	f008 ffb0 	bl	8012ad4 <printf>
 8009b74:	e7b6      	b.n	8009ae4 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <tcp_create_segment+0xd4>)
 8009b78:	22a4      	movs	r2, #164	; 0xa4
 8009b7a:	490d      	ldr	r1, [pc, #52]	; (8009bb0 <tcp_create_segment+0xe0>)
 8009b7c:	480b      	ldr	r0, [pc, #44]	; (8009bac <tcp_create_segment+0xdc>)
 8009b7e:	f008 ffa9 	bl	8012ad4 <printf>
 8009b82:	e7b1      	b.n	8009ae8 <tcp_create_segment+0x18>
    pbuf_free(p);
 8009b84:	4630      	mov	r0, r6
 8009b86:	f7fd f8bd 	bl	8006d04 <pbuf_free>
    return NULL;
 8009b8a:	e7ea      	b.n	8009b62 <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <tcp_create_segment+0xd4>)
 8009b8e:	22b0      	movs	r2, #176	; 0xb0
 8009b90:	4908      	ldr	r1, [pc, #32]	; (8009bb4 <tcp_create_segment+0xe4>)
 8009b92:	4806      	ldr	r0, [pc, #24]	; (8009bac <tcp_create_segment+0xdc>)
 8009b94:	f008 ff9e 	bl	8012ad4 <printf>
 8009b98:	e7ba      	b.n	8009b10 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7fd fcb8 	bl	8007510 <tcp_seg_free>
    return NULL;
 8009ba0:	2400      	movs	r4, #0
 8009ba2:	e7de      	b.n	8009b62 <tcp_create_segment+0x92>
 8009ba4:	0801b4ac 	.word	0x0801b4ac
 8009ba8:	0801b62c 	.word	0x0801b62c
 8009bac:	08019f6c 	.word	0x08019f6c
 8009bb0:	0801b64c 	.word	0x0801b64c
 8009bb4:	0801b670 	.word	0x0801b670

08009bb8 <tcp_output_alloc_header_common>:
{
 8009bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009bc2:	4411      	add	r1, r2
 8009bc4:	b289      	uxth	r1, r1
 8009bc6:	3114      	adds	r1, #20
 8009bc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009bcc:	b289      	uxth	r1, r1
 8009bce:	2022      	movs	r0, #34	; 0x22
 8009bd0:	f7fd f8fa 	bl	8006dc8 <pbuf_alloc>
  if (p != NULL) {
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	b348      	cbz	r0, 8009c2c <tcp_output_alloc_header_common+0x74>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009bd8:	f104 0313 	add.w	r3, r4, #19
 8009bdc:	8942      	ldrh	r2, [r0, #10]
 8009bde:	4293      	cmp	r3, r2
 8009be0:	da27      	bge.n	8009c32 <tcp_output_alloc_header_common+0x7a>
    tcphdr = (struct tcp_hdr *)p->payload;
 8009be2:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(src_port);
 8009be4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8009be8:	f7fc fa68 	bl	80060bc <lwip_htons>
 8009bec:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009bee:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8009bf2:	f7fc fa63 	bl	80060bc <lwip_htons>
 8009bf6:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 8009bf8:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7fc fa62 	bl	80060c6 <lwip_htonl>
 8009c02:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009c04:	08a4      	lsrs	r4, r4, #2
 8009c06:	3405      	adds	r4, #5
 8009c08:	0324      	lsls	r4, r4, #12
 8009c0a:	b2a4      	uxth	r4, r4
 8009c0c:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8009c10:	4320      	orrs	r0, r4
 8009c12:	f7fc fa53 	bl	80060bc <lwip_htons>
 8009c16:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009c18:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8009c1c:	f7fc fa4e 	bl	80060bc <lwip_htons>
 8009c20:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	742b      	strb	r3, [r5, #16]
 8009c26:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 8009c28:	74ab      	strb	r3, [r5, #18]
 8009c2a:	74eb      	strb	r3, [r5, #19]
}
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009c32:	4b04      	ldr	r3, [pc, #16]	; (8009c44 <tcp_output_alloc_header_common+0x8c>)
 8009c34:	f240 7223 	movw	r2, #1827	; 0x723
 8009c38:	4903      	ldr	r1, [pc, #12]	; (8009c48 <tcp_output_alloc_header_common+0x90>)
 8009c3a:	4804      	ldr	r0, [pc, #16]	; (8009c4c <tcp_output_alloc_header_common+0x94>)
 8009c3c:	f008 ff4a 	bl	8012ad4 <printf>
 8009c40:	e7cf      	b.n	8009be2 <tcp_output_alloc_header_common+0x2a>
 8009c42:	bf00      	nop
 8009c44:	0801b4ac 	.word	0x0801b4ac
 8009c48:	0801b688 	.word	0x0801b688
 8009c4c:	08019f6c 	.word	0x08019f6c

08009c50 <tcp_output_alloc_header>:
{
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c52:	b085      	sub	sp, #20
 8009c54:	460d      	mov	r5, r1
 8009c56:	4616      	mov	r6, r2
 8009c58:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	b1a0      	cbz	r0, 8009c88 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009c5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	2310      	movs	r3, #16
 8009c64:	9302      	str	r3, [sp, #8]
 8009c66:	8b23      	ldrh	r3, [r4, #24]
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	8ae3      	ldrh	r3, [r4, #22]
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	463b      	mov	r3, r7
 8009c70:	4632      	mov	r2, r6
 8009c72:	4629      	mov	r1, r5
 8009c74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c76:	f7ff ff9f 	bl	8009bb8 <tcp_output_alloc_header_common>
  if (p != NULL) {
 8009c7a:	b118      	cbz	r0, 8009c84 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009c80:	4413      	add	r3, r2
 8009c82:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8009c84:	b005      	add	sp, #20
 8009c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009c88:	4b03      	ldr	r3, [pc, #12]	; (8009c98 <tcp_output_alloc_header+0x48>)
 8009c8a:	f240 7242 	movw	r2, #1858	; 0x742
 8009c8e:	4903      	ldr	r1, [pc, #12]	; (8009c9c <tcp_output_alloc_header+0x4c>)
 8009c90:	4803      	ldr	r0, [pc, #12]	; (8009ca0 <tcp_output_alloc_header+0x50>)
 8009c92:	f008 ff1f 	bl	8012ad4 <printf>
 8009c96:	e7e2      	b.n	8009c5e <tcp_output_alloc_header+0xe>
 8009c98:	0801b4ac 	.word	0x0801b4ac
 8009c9c:	0801b6b8 	.word	0x0801b6b8
 8009ca0:	08019f6c 	.word	0x08019f6c

08009ca4 <tcp_route>:
{
 8009ca4:	b508      	push	{r3, lr}
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009ca6:	b108      	cbz	r0, 8009cac <tcp_route+0x8>
 8009ca8:	7a00      	ldrb	r0, [r0, #8]
 8009caa:	b918      	cbnz	r0, 8009cb4 <tcp_route+0x10>
    return ip_route(src, dst);
 8009cac:	4610      	mov	r0, r2
 8009cae:	f001 fddf 	bl	800b870 <ip4_route>
}
 8009cb2:	bd08      	pop	{r3, pc}
    return netif_get_by_index(pcb->netif_idx);
 8009cb4:	f7fc ff2e 	bl	8006b14 <netif_get_by_index>
 8009cb8:	e7fb      	b.n	8009cb2 <tcp_route+0xe>
	...

08009cbc <tcp_output_segment>:
{
 8009cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	b148      	cbz	r0, 8009cde <tcp_output_segment+0x22>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009cca:	b184      	cbz	r4, 8009cee <tcp_output_segment+0x32>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009ccc:	b1be      	cbz	r6, 8009cfe <tcp_output_segment+0x42>
  if (tcp_output_segment_busy(seg)) {
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f7ff febe 	bl	8009a50 <tcp_output_segment_busy>
 8009cd4:	b1d8      	cbz	r0, 8009d0e <tcp_output_segment+0x52>
    return ERR_OK;
 8009cd6:	2000      	movs	r0, #0
}
 8009cd8:	b004      	add	sp, #16
 8009cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009cde:	4b3f      	ldr	r3, [pc, #252]	; (8009ddc <tcp_output_segment+0x120>)
 8009ce0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009ce4:	493e      	ldr	r1, [pc, #248]	; (8009de0 <tcp_output_segment+0x124>)
 8009ce6:	483f      	ldr	r0, [pc, #252]	; (8009de4 <tcp_output_segment+0x128>)
 8009ce8:	f008 fef4 	bl	8012ad4 <printf>
 8009cec:	e7ed      	b.n	8009cca <tcp_output_segment+0xe>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009cee:	4b3b      	ldr	r3, [pc, #236]	; (8009ddc <tcp_output_segment+0x120>)
 8009cf0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009cf4:	493c      	ldr	r1, [pc, #240]	; (8009de8 <tcp_output_segment+0x12c>)
 8009cf6:	483b      	ldr	r0, [pc, #236]	; (8009de4 <tcp_output_segment+0x128>)
 8009cf8:	f008 feec 	bl	8012ad4 <printf>
 8009cfc:	e7e6      	b.n	8009ccc <tcp_output_segment+0x10>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009cfe:	4b37      	ldr	r3, [pc, #220]	; (8009ddc <tcp_output_segment+0x120>)
 8009d00:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009d04:	4939      	ldr	r1, [pc, #228]	; (8009dec <tcp_output_segment+0x130>)
 8009d06:	4837      	ldr	r0, [pc, #220]	; (8009de4 <tcp_output_segment+0x128>)
 8009d08:	f008 fee4 	bl	8012ad4 <printf>
 8009d0c:	e7df      	b.n	8009cce <tcp_output_segment+0x12>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009d0e:	68ef      	ldr	r7, [r5, #12]
 8009d10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009d12:	f7fc f9d8 	bl	80060c6 <lwip_htonl>
 8009d16:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009d18:	68ef      	ldr	r7, [r5, #12]
 8009d1a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009d1c:	f7fc f9ce 	bl	80060bc <lwip_htons>
 8009d20:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009d26:	4413      	add	r3, r2
 8009d28:	62e3      	str	r3, [r4, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009d2a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8009d2e:	f108 0714 	add.w	r7, r8, #20
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009d32:	7aab      	ldrb	r3, [r5, #10]
 8009d34:	f013 0f01 	tst.w	r3, #1
 8009d38:	d134      	bne.n	8009da4 <tcp_output_segment+0xe8>
  if (pcb->rtime < 0) {
 8009d3a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	db3f      	blt.n	8009dc2 <tcp_output_segment+0x106>
  if (pcb->rttest == 0) {
 8009d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d03f      	beq.n	8009dc8 <tcp_output_segment+0x10c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009d48:	68eb      	ldr	r3, [r5, #12]
 8009d4a:	686a      	ldr	r2, [r5, #4]
 8009d4c:	6851      	ldr	r1, [r2, #4]
 8009d4e:	1a5b      	subs	r3, r3, r1
 8009d50:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8009d52:	8951      	ldrh	r1, [r2, #10]
 8009d54:	1ac9      	subs	r1, r1, r3
 8009d56:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8009d58:	6869      	ldr	r1, [r5, #4]
 8009d5a:	890a      	ldrh	r2, [r1, #8]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 8009d60:	686a      	ldr	r2, [r5, #4]
 8009d62:	68eb      	ldr	r3, [r5, #12]
 8009d64:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 8009d66:	2200      	movs	r2, #0
 8009d68:	741a      	strb	r2, [r3, #16]
 8009d6a:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009d6c:	68ea      	ldr	r2, [r5, #12]
 8009d6e:	7aab      	ldrb	r3, [r5, #10]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	f003 0304 	and.w	r3, r3, #4
 8009d76:	3314      	adds	r3, #20
 8009d78:	4413      	add	r3, r2
 8009d7a:	42bb      	cmp	r3, r7
 8009d7c:	d006      	beq.n	8009d8c <tcp_output_segment+0xd0>
 8009d7e:	4b17      	ldr	r3, [pc, #92]	; (8009ddc <tcp_output_segment+0x120>)
 8009d80:	f240 621c 	movw	r2, #1564	; 0x61c
 8009d84:	491a      	ldr	r1, [pc, #104]	; (8009df0 <tcp_output_segment+0x134>)
 8009d86:	4817      	ldr	r0, [pc, #92]	; (8009de4 <tcp_output_segment+0x128>)
 8009d88:	f008 fea4 	bl	8012ad4 <printf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009d8c:	9602      	str	r6, [sp, #8]
 8009d8e:	2306      	movs	r3, #6
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	7aa3      	ldrb	r3, [r4, #10]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	7ae3      	ldrb	r3, [r4, #11]
 8009d98:	1d22      	adds	r2, r4, #4
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	6868      	ldr	r0, [r5, #4]
 8009d9e:	f001 feeb 	bl	800bb78 <ip4_output_if>
  return err;
 8009da2:	e799      	b.n	8009cd8 <tcp_output_segment+0x1c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009da4:	1d22      	adds	r2, r4, #4
 8009da6:	4631      	mov	r1, r6
 8009da8:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009dac:	f7fd fc08 	bl	80075c0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009db0:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8009db4:	f7fc f987 	bl	80060c6 <lwip_htonl>
 8009db8:	f8c8 0014 	str.w	r0, [r8, #20]
    opts += 1;
 8009dbc:	f108 0718 	add.w	r7, r8, #24
 8009dc0:	e7bb      	b.n	8009d3a <tcp_output_segment+0x7e>
    pcb->rtime = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	8623      	strh	r3, [r4, #48]	; 0x30
 8009dc6:	e7bc      	b.n	8009d42 <tcp_output_segment+0x86>
    pcb->rttest = tcp_ticks;
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <tcp_output_segment+0x138>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009dce:	68eb      	ldr	r3, [r5, #12]
 8009dd0:	6858      	ldr	r0, [r3, #4]
 8009dd2:	f7fc f978 	bl	80060c6 <lwip_htonl>
 8009dd6:	63a0      	str	r0, [r4, #56]	; 0x38
 8009dd8:	e7b6      	b.n	8009d48 <tcp_output_segment+0x8c>
 8009dda:	bf00      	nop
 8009ddc:	0801b4ac 	.word	0x0801b4ac
 8009de0:	0801b6e0 	.word	0x0801b6e0
 8009de4:	08019f6c 	.word	0x08019f6c
 8009de8:	0801b700 	.word	0x0801b700
 8009dec:	0801b720 	.word	0x0801b720
 8009df0:	0801b5c0 	.word	0x0801b5c0
 8009df4:	200073cc 	.word	0x200073cc

08009df8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	4615      	mov	r5, r2
 8009e00:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009e02:	460f      	mov	r7, r1
 8009e04:	b1c9      	cbz	r1, 8009e3a <tcp_output_control_segment+0x42>

  netif = tcp_route(pcb, src, dst);
 8009e06:	4632      	mov	r2, r6
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff ff4a 	bl	8009ca4 <tcp_route>
  if (netif == NULL) {
 8009e10:	4602      	mov	r2, r0
 8009e12:	b1e8      	cbz	r0, 8009e50 <tcp_output_control_segment+0x58>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8009e14:	b1cc      	cbz	r4, 8009e4a <tcp_output_control_segment+0x52>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8009e16:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 8009e18:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8009e1a:	9202      	str	r2, [sp, #8]
 8009e1c:	2206      	movs	r2, #6
 8009e1e:	9201      	str	r2, [sp, #4]
 8009e20:	9100      	str	r1, [sp, #0]
 8009e22:	4632      	mov	r2, r6
 8009e24:	4629      	mov	r1, r5
 8009e26:	4638      	mov	r0, r7
 8009e28:	f001 fea6 	bl	800bb78 <ip4_output_if>
 8009e2c:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8009e2e:	4638      	mov	r0, r7
 8009e30:	f7fc ff68 	bl	8006d04 <pbuf_free>
  return err;
}
 8009e34:	4620      	mov	r0, r4
 8009e36:	b005      	add	sp, #20
 8009e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009e3a:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <tcp_output_control_segment+0x60>)
 8009e3c:	f240 7287 	movw	r2, #1927	; 0x787
 8009e40:	4906      	ldr	r1, [pc, #24]	; (8009e5c <tcp_output_control_segment+0x64>)
 8009e42:	4807      	ldr	r0, [pc, #28]	; (8009e60 <tcp_output_control_segment+0x68>)
 8009e44:	f008 fe46 	bl	8012ad4 <printf>
 8009e48:	e7dd      	b.n	8009e06 <tcp_output_control_segment+0xe>
      tos = 0;
 8009e4a:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 8009e4c:	23ff      	movs	r3, #255	; 0xff
 8009e4e:	e7e4      	b.n	8009e1a <tcp_output_control_segment+0x22>
    err = ERR_RTE;
 8009e50:	f06f 0403 	mvn.w	r4, #3
 8009e54:	e7eb      	b.n	8009e2e <tcp_output_control_segment+0x36>
 8009e56:	bf00      	nop
 8009e58:	0801b4ac 	.word	0x0801b4ac
 8009e5c:	0801b744 	.word	0x0801b744
 8009e60:	08019f6c 	.word	0x08019f6c

08009e64 <tcp_split_unsent_seg>:
{
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d03d      	beq.n	8009eee <tcp_split_unsent_seg+0x8a>
  useg = pcb->unsent;
 8009e72:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 8009e74:	2d00      	cmp	r5, #0
 8009e76:	f000 80bb 	beq.w	8009ff0 <tcp_split_unsent_seg+0x18c>
  if (split == 0) {
 8009e7a:	2c00      	cmp	r4, #0
 8009e7c:	d03f      	beq.n	8009efe <tcp_split_unsent_seg+0x9a>
  if (useg->len <= split) {
 8009e7e:	892b      	ldrh	r3, [r5, #8]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	f240 80b8 	bls.w	8009ff6 <tcp_split_unsent_seg+0x192>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009e86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	d342      	bcc.n	8009f12 <tcp_split_unsent_seg+0xae>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009e8c:	892b      	ldrh	r3, [r5, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d047      	beq.n	8009f22 <tcp_split_unsent_seg+0xbe>
  optflags = useg->flags;
 8009e92:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009e96:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8009e9a:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 8009e9e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009ea2:	ebaa 0604 	sub.w	r6, sl, r4
 8009ea6:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009ea8:	eb06 010b 	add.w	r1, r6, fp
 8009eac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009eb0:	b289      	uxth	r1, r1
 8009eb2:	2036      	movs	r0, #54	; 0x36
 8009eb4:	f7fc ff88 	bl	8006dc8 <pbuf_alloc>
  if (p == NULL) {
 8009eb8:	4680      	mov	r8, r0
 8009eba:	b170      	cbz	r0, 8009eda <tcp_split_unsent_seg+0x76>
  offset = useg->p->tot_len - useg->len + split;
 8009ebc:	6868      	ldr	r0, [r5, #4]
 8009ebe:	8903      	ldrh	r3, [r0, #8]
 8009ec0:	892a      	ldrh	r2, [r5, #8]
 8009ec2:	1a9b      	subs	r3, r3, r2
 8009ec4:	fa14 f383 	uxtah	r3, r4, r3
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009ec8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	4632      	mov	r2, r6
 8009ed0:	4459      	add	r1, fp
 8009ed2:	f7fd f965 	bl	80071a0 <pbuf_copy_partial>
 8009ed6:	42b0      	cmp	r0, r6
 8009ed8:	d02b      	beq.n	8009f32 <tcp_split_unsent_seg+0xce>
  if (p != NULL) {
 8009eda:	f1b8 0f00 	cmp.w	r8, #0
 8009ede:	f000 808e 	beq.w	8009ffe <tcp_split_unsent_seg+0x19a>
    pbuf_free(p);
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	f7fc ff0e 	bl	8006d04 <pbuf_free>
  return ERR_MEM;
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	e084      	b.n	8009ff8 <tcp_split_unsent_seg+0x194>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009eee:	4b45      	ldr	r3, [pc, #276]	; (800a004 <tcp_split_unsent_seg+0x1a0>)
 8009ef0:	f240 324b 	movw	r2, #843	; 0x34b
 8009ef4:	4944      	ldr	r1, [pc, #272]	; (800a008 <tcp_split_unsent_seg+0x1a4>)
 8009ef6:	4845      	ldr	r0, [pc, #276]	; (800a00c <tcp_split_unsent_seg+0x1a8>)
 8009ef8:	f008 fdec 	bl	8012ad4 <printf>
 8009efc:	e7b9      	b.n	8009e72 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009efe:	4b41      	ldr	r3, [pc, #260]	; (800a004 <tcp_split_unsent_seg+0x1a0>)
 8009f00:	f240 3253 	movw	r2, #851	; 0x353
 8009f04:	4942      	ldr	r1, [pc, #264]	; (800a010 <tcp_split_unsent_seg+0x1ac>)
 8009f06:	4841      	ldr	r0, [pc, #260]	; (800a00c <tcp_split_unsent_seg+0x1a8>)
 8009f08:	f008 fde4 	bl	8012ad4 <printf>
    return ERR_VAL;
 8009f0c:	f06f 0005 	mvn.w	r0, #5
 8009f10:	e072      	b.n	8009ff8 <tcp_split_unsent_seg+0x194>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009f12:	4b3c      	ldr	r3, [pc, #240]	; (800a004 <tcp_split_unsent_seg+0x1a0>)
 8009f14:	f240 325b 	movw	r2, #859	; 0x35b
 8009f18:	493e      	ldr	r1, [pc, #248]	; (800a014 <tcp_split_unsent_seg+0x1b0>)
 8009f1a:	483c      	ldr	r0, [pc, #240]	; (800a00c <tcp_split_unsent_seg+0x1a8>)
 8009f1c:	f008 fdda 	bl	8012ad4 <printf>
 8009f20:	e7b4      	b.n	8009e8c <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009f22:	4b38      	ldr	r3, [pc, #224]	; (800a004 <tcp_split_unsent_seg+0x1a0>)
 8009f24:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009f28:	493b      	ldr	r1, [pc, #236]	; (800a018 <tcp_split_unsent_seg+0x1b4>)
 8009f2a:	4838      	ldr	r0, [pc, #224]	; (800a00c <tcp_split_unsent_seg+0x1a8>)
 8009f2c:	f008 fdd2 	bl	8012ad4 <printf>
 8009f30:	e7af      	b.n	8009e92 <tcp_split_unsent_seg+0x2e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009f32:	68eb      	ldr	r3, [r5, #12]
 8009f34:	8998      	ldrh	r0, [r3, #12]
 8009f36:	f7fc f8c1 	bl	80060bc <lwip_htons>
 8009f3a:	b2c3      	uxtb	r3, r0
 8009f3c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  if (split_flags & TCP_PSH) {
 8009f40:	f010 0b08 	ands.w	fp, r0, #8
 8009f44:	d003      	beq.n	8009f4e <tcp_split_unsent_seg+0xea>
    split_flags &= ~TCP_PSH;
 8009f46:	f003 0637 	and.w	r6, r3, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8009f4a:	f04f 0b08 	mov.w	fp, #8
  if (split_flags & TCP_FIN) {
 8009f4e:	f016 0f01 	tst.w	r6, #1
 8009f52:	d003      	beq.n	8009f5c <tcp_split_unsent_seg+0xf8>
    split_flags &= ~TCP_FIN;
 8009f54:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8009f58:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009f5c:	68eb      	ldr	r3, [r5, #12]
 8009f5e:	6858      	ldr	r0, [r3, #4]
 8009f60:	f7fc f8b1 	bl	80060c6 <lwip_htonl>
 8009f64:	f8cd 9000 	str.w	r9, [sp]
 8009f68:	1823      	adds	r3, r4, r0
 8009f6a:	465a      	mov	r2, fp
 8009f6c:	4641      	mov	r1, r8
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f7ff fdae 	bl	8009ad0 <tcp_create_segment>
  if (seg == NULL) {
 8009f74:	4681      	mov	r9, r0
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0af      	beq.n	8009eda <tcp_split_unsent_seg+0x76>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009f7a:	6868      	ldr	r0, [r5, #4]
 8009f7c:	f7fd f826 	bl	8006fcc <pbuf_clen>
 8009f80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009f84:	1a1b      	subs	r3, r3, r0
 8009f86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009f8a:	6868      	ldr	r0, [r5, #4]
 8009f8c:	8901      	ldrh	r1, [r0, #8]
 8009f8e:	eba4 040a 	sub.w	r4, r4, sl
 8009f92:	b2a4      	uxth	r4, r4
 8009f94:	4421      	add	r1, r4
 8009f96:	b289      	uxth	r1, r1
 8009f98:	f7fc ffc4 	bl	8006f24 <pbuf_realloc>
  useg->len -= remainder;
 8009f9c:	892b      	ldrh	r3, [r5, #8]
 8009f9e:	441c      	add	r4, r3
 8009fa0:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009fa2:	68eb      	ldr	r3, [r5, #12]
 8009fa4:	899c      	ldrh	r4, [r3, #12]
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7fc f888 	bl	80060bc <lwip_htons>
 8009fac:	68eb      	ldr	r3, [r5, #12]
 8009fae:	4304      	orrs	r4, r0
 8009fb0:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009fb2:	6868      	ldr	r0, [r5, #4]
 8009fb4:	f7fd f80a 	bl	8006fcc <pbuf_clen>
 8009fb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009fbc:	4418      	add	r0, r3
 8009fbe:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009fc2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009fc6:	f7fd f801 	bl	8006fcc <pbuf_clen>
 8009fca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009fce:	4418      	add	r0, r3
 8009fd0:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 8009fda:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 8009fde:	f8d9 3000 	ldr.w	r3, [r9]
 8009fe2:	b10b      	cbz	r3, 8009fe8 <tcp_split_unsent_seg+0x184>
  return ERR_OK;
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e007      	b.n	8009ff8 <tcp_split_unsent_seg+0x194>
    pcb->unsent_oversize = 0;
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 8009fee:	e003      	b.n	8009ff8 <tcp_split_unsent_seg+0x194>
    return ERR_MEM;
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	e000      	b.n	8009ff8 <tcp_split_unsent_seg+0x194>
    return ERR_OK;
 8009ff6:	2000      	movs	r0, #0
}
 8009ff8:	b003      	add	sp, #12
 8009ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8009ffe:	f04f 30ff 	mov.w	r0, #4294967295
 800a002:	e7f9      	b.n	8009ff8 <tcp_split_unsent_seg+0x194>
 800a004:	0801b4ac 	.word	0x0801b4ac
 800a008:	0801b964 	.word	0x0801b964
 800a00c:	08019f6c 	.word	0x08019f6c
 800a010:	0801b988 	.word	0x0801b988
 800a014:	0801b9ac 	.word	0x0801b9ac
 800a018:	0801b9bc 	.word	0x0801b9bc

0800a01c <tcp_enqueue_flags>:
{
 800a01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a020:	b083      	sub	sp, #12
 800a022:	4604      	mov	r4, r0
 800a024:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a026:	f011 0703 	ands.w	r7, r1, #3
 800a02a:	d04e      	beq.n	800a0ca <tcp_enqueue_flags+0xae>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a02c:	2c00      	cmp	r4, #0
 800a02e:	d054      	beq.n	800a0da <tcp_enqueue_flags+0xbe>
  if (flags & TCP_SYN) {
 800a030:	f015 0802 	ands.w	r8, r5, #2
 800a034:	d001      	beq.n	800a03a <tcp_enqueue_flags+0x1e>
    optflags = TF_SEG_OPTS_MSS;
 800a036:	f04f 0801 	mov.w	r8, #1
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a03a:	ea4f 0688 	mov.w	r6, r8, lsl #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a03e:	f006 0604 	and.w	r6, r6, #4
 800a042:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a046:	4631      	mov	r1, r6
 800a048:	2036      	movs	r0, #54	; 0x36
 800a04a:	f7fc febd 	bl	8006dc8 <pbuf_alloc>
 800a04e:	4681      	mov	r9, r0
 800a050:	2800      	cmp	r0, #0
 800a052:	d04a      	beq.n	800a0ea <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a054:	8943      	ldrh	r3, [r0, #10]
 800a056:	429e      	cmp	r6, r3
 800a058:	d84e      	bhi.n	800a0f8 <tcp_enqueue_flags+0xdc>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a05a:	f8cd 8000 	str.w	r8, [sp]
 800a05e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a060:	462a      	mov	r2, r5
 800a062:	4649      	mov	r1, r9
 800a064:	4620      	mov	r0, r4
 800a066:	f7ff fd33 	bl	8009ad0 <tcp_create_segment>
 800a06a:	4606      	mov	r6, r0
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d04b      	beq.n	800a108 <tcp_enqueue_flags+0xec>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a070:	68c3      	ldr	r3, [r0, #12]
 800a072:	f013 0f03 	tst.w	r3, #3
 800a076:	d14e      	bne.n	800a116 <tcp_enqueue_flags+0xfa>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a078:	8933      	ldrh	r3, [r6, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d153      	bne.n	800a126 <tcp_enqueue_flags+0x10a>
  if (pcb->unsent == NULL) {
 800a07e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d058      	beq.n	800a136 <tcp_enqueue_flags+0x11a>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a084:	461a      	mov	r2, r3
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1fb      	bne.n	800a084 <tcp_enqueue_flags+0x68>
    useg->next = seg;
 800a08c:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a094:	b117      	cbz	r7, 800a09c <tcp_enqueue_flags+0x80>
    pcb->snd_lbb++;
 800a096:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a098:	3301      	adds	r3, #1
 800a09a:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800a09c:	f015 0f01 	tst.w	r5, #1
 800a0a0:	d003      	beq.n	800a0aa <tcp_enqueue_flags+0x8e>
    tcp_set_flags(pcb, TF_FIN);
 800a0a2:	8b63      	ldrh	r3, [r4, #26]
 800a0a4:	f043 0320 	orr.w	r3, r3, #32
 800a0a8:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a0aa:	6870      	ldr	r0, [r6, #4]
 800a0ac:	f7fc ff8e 	bl	8006fcc <pbuf_clen>
 800a0b0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a0b4:	4418      	add	r0, r3
 800a0b6:	b280      	uxth	r0, r0
 800a0b8:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d049      	beq.n	800a154 <tcp_enqueue_flags+0x138>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a0c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d039      	beq.n	800a13a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e045      	b.n	800a156 <tcp_enqueue_flags+0x13a>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <tcp_enqueue_flags+0x140>)
 800a0cc:	f240 4211 	movw	r2, #1041	; 0x411
 800a0d0:	4923      	ldr	r1, [pc, #140]	; (800a160 <tcp_enqueue_flags+0x144>)
 800a0d2:	4824      	ldr	r0, [pc, #144]	; (800a164 <tcp_enqueue_flags+0x148>)
 800a0d4:	f008 fcfe 	bl	8012ad4 <printf>
 800a0d8:	e7a8      	b.n	800a02c <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a0da:	4b20      	ldr	r3, [pc, #128]	; (800a15c <tcp_enqueue_flags+0x140>)
 800a0dc:	f240 4213 	movw	r2, #1043	; 0x413
 800a0e0:	4921      	ldr	r1, [pc, #132]	; (800a168 <tcp_enqueue_flags+0x14c>)
 800a0e2:	4820      	ldr	r0, [pc, #128]	; (800a164 <tcp_enqueue_flags+0x148>)
 800a0e4:	f008 fcf6 	bl	8012ad4 <printf>
 800a0e8:	e7a2      	b.n	800a030 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a0ea:	8b63      	ldrh	r3, [r4, #26]
 800a0ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f0:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f6:	e02e      	b.n	800a156 <tcp_enqueue_flags+0x13a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a0f8:	4b18      	ldr	r3, [pc, #96]	; (800a15c <tcp_enqueue_flags+0x140>)
 800a0fa:	f240 4239 	movw	r2, #1081	; 0x439
 800a0fe:	491b      	ldr	r1, [pc, #108]	; (800a16c <tcp_enqueue_flags+0x150>)
 800a100:	4818      	ldr	r0, [pc, #96]	; (800a164 <tcp_enqueue_flags+0x148>)
 800a102:	f008 fce7 	bl	8012ad4 <printf>
 800a106:	e7a8      	b.n	800a05a <tcp_enqueue_flags+0x3e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a108:	8b63      	ldrh	r3, [r4, #26]
 800a10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10e:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e01f      	b.n	800a156 <tcp_enqueue_flags+0x13a>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a116:	4b11      	ldr	r3, [pc, #68]	; (800a15c <tcp_enqueue_flags+0x140>)
 800a118:	f240 4242 	movw	r2, #1090	; 0x442
 800a11c:	4914      	ldr	r1, [pc, #80]	; (800a170 <tcp_enqueue_flags+0x154>)
 800a11e:	4811      	ldr	r0, [pc, #68]	; (800a164 <tcp_enqueue_flags+0x148>)
 800a120:	f008 fcd8 	bl	8012ad4 <printf>
 800a124:	e7a8      	b.n	800a078 <tcp_enqueue_flags+0x5c>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a126:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <tcp_enqueue_flags+0x140>)
 800a128:	f240 4243 	movw	r2, #1091	; 0x443
 800a12c:	4911      	ldr	r1, [pc, #68]	; (800a174 <tcp_enqueue_flags+0x158>)
 800a12e:	480d      	ldr	r0, [pc, #52]	; (800a164 <tcp_enqueue_flags+0x148>)
 800a130:	f008 fcd0 	bl	8012ad4 <printf>
 800a134:	e7a3      	b.n	800a07e <tcp_enqueue_flags+0x62>
    pcb->unsent = seg;
 800a136:	66e6      	str	r6, [r4, #108]	; 0x6c
 800a138:	e7a9      	b.n	800a08e <tcp_enqueue_flags+0x72>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a13a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a13c:	b10b      	cbz	r3, 800a142 <tcp_enqueue_flags+0x126>
  return ERR_OK;
 800a13e:	2000      	movs	r0, #0
 800a140:	e009      	b.n	800a156 <tcp_enqueue_flags+0x13a>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a142:	4b06      	ldr	r3, [pc, #24]	; (800a15c <tcp_enqueue_flags+0x140>)
 800a144:	f240 4265 	movw	r2, #1125	; 0x465
 800a148:	490b      	ldr	r1, [pc, #44]	; (800a178 <tcp_enqueue_flags+0x15c>)
 800a14a:	4806      	ldr	r0, [pc, #24]	; (800a164 <tcp_enqueue_flags+0x148>)
 800a14c:	f008 fcc2 	bl	8012ad4 <printf>
  return ERR_OK;
 800a150:	2000      	movs	r0, #0
 800a152:	e000      	b.n	800a156 <tcp_enqueue_flags+0x13a>
 800a154:	2000      	movs	r0, #0
}
 800a156:	b003      	add	sp, #12
 800a158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a15c:	0801b4ac 	.word	0x0801b4ac
 800a160:	0801b9cc 	.word	0x0801b9cc
 800a164:	08019f6c 	.word	0x08019f6c
 800a168:	0801ba24 	.word	0x0801ba24
 800a16c:	0801ba44 	.word	0x0801ba44
 800a170:	0801ba80 	.word	0x0801ba80
 800a174:	0801ba98 	.word	0x0801ba98
 800a178:	0801bac4 	.word	0x0801bac4

0800a17c <tcp_send_fin>:
{
 800a17c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a17e:	4605      	mov	r5, r0
 800a180:	b188      	cbz	r0, 800a1a6 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800a182:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a184:	b153      	cbz	r3, 800a19c <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a186:	461c      	mov	r4, r3
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1fb      	bne.n	800a186 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a18e:	68e3      	ldr	r3, [r4, #12]
 800a190:	8998      	ldrh	r0, [r3, #12]
 800a192:	f7fb ff93 	bl	80060bc <lwip_htons>
 800a196:	f010 0f07 	tst.w	r0, #7
 800a19a:	d00c      	beq.n	800a1b6 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a19c:	2101      	movs	r1, #1
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f7ff ff3c 	bl	800a01c <tcp_enqueue_flags>
}
 800a1a4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <tcp_send_fin+0x58>)
 800a1a8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a1ac:	490a      	ldr	r1, [pc, #40]	; (800a1d8 <tcp_send_fin+0x5c>)
 800a1ae:	480b      	ldr	r0, [pc, #44]	; (800a1dc <tcp_send_fin+0x60>)
 800a1b0:	f008 fc90 	bl	8012ad4 <printf>
 800a1b4:	e7e5      	b.n	800a182 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a1b6:	68e3      	ldr	r3, [r4, #12]
 800a1b8:	899e      	ldrh	r6, [r3, #12]
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	f7fb ff7e 	bl	80060bc <lwip_htons>
 800a1c0:	68e3      	ldr	r3, [r4, #12]
 800a1c2:	4306      	orrs	r6, r0
 800a1c4:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a1c6:	8b6b      	ldrh	r3, [r5, #26]
 800a1c8:	f043 0320 	orr.w	r3, r3, #32
 800a1cc:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7e8      	b.n	800a1a4 <tcp_send_fin+0x28>
 800a1d2:	bf00      	nop
 800a1d4:	0801b4ac 	.word	0x0801b4ac
 800a1d8:	0801baec 	.word	0x0801baec
 800a1dc:	08019f6c 	.word	0x08019f6c

0800a1e0 <tcp_rexmit_rto_prepare>:
{
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b158      	cbz	r0, 800a1fe <tcp_rexmit_rto_prepare+0x1e>
  if (pcb->unacked == NULL) {
 800a1e6:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d034      	beq.n	800a256 <tcp_rexmit_rto_prepare+0x76>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	b173      	cbz	r3, 800a20e <tcp_rexmit_rto_prepare+0x2e>
    if (tcp_output_segment_busy(seg)) {
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f7ff fc2d 	bl	8009a50 <tcp_output_segment_busy>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d130      	bne.n	800a25c <tcp_rexmit_rto_prepare+0x7c>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a1fa:	6824      	ldr	r4, [r4, #0]
 800a1fc:	e7f6      	b.n	800a1ec <tcp_rexmit_rto_prepare+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a1fe:	4b1a      	ldr	r3, [pc, #104]	; (800a268 <tcp_rexmit_rto_prepare+0x88>)
 800a200:	f240 6263 	movw	r2, #1635	; 0x663
 800a204:	4919      	ldr	r1, [pc, #100]	; (800a26c <tcp_rexmit_rto_prepare+0x8c>)
 800a206:	481a      	ldr	r0, [pc, #104]	; (800a270 <tcp_rexmit_rto_prepare+0x90>)
 800a208:	f008 fc64 	bl	8012ad4 <printf>
 800a20c:	e7eb      	b.n	800a1e6 <tcp_rexmit_rto_prepare+0x6>
  if (tcp_output_segment_busy(seg)) {
 800a20e:	4620      	mov	r0, r4
 800a210:	f7ff fc1e 	bl	8009a50 <tcp_output_segment_busy>
 800a214:	bb28      	cbnz	r0, 800a262 <tcp_rexmit_rto_prepare+0x82>
  seg->next = pcb->unsent;
 800a216:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a218:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800a21a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a21c:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	672b      	str	r3, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 800a222:	8b6b      	ldrh	r3, [r5, #26]
 800a224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a228:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a22a:	68e3      	ldr	r3, [r4, #12]
 800a22c:	6858      	ldr	r0, [r3, #4]
 800a22e:	f7fb ff4a 	bl	80060c6 <lwip_htonl>
 800a232:	4606      	mov	r6, r0
 800a234:	8927      	ldrh	r7, [r4, #8]
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	8998      	ldrh	r0, [r3, #12]
 800a23a:	f7fb ff3f 	bl	80060bc <lwip_htons>
 800a23e:	f010 0f03 	tst.w	r0, #3
 800a242:	d006      	beq.n	800a252 <tcp_rexmit_rto_prepare+0x72>
 800a244:	2301      	movs	r3, #1
 800a246:	441f      	add	r7, r3
 800a248:	443e      	add	r6, r7
 800a24a:	64ee      	str	r6, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800a24c:	2000      	movs	r0, #0
 800a24e:	6368      	str	r0, [r5, #52]	; 0x34
}
 800a250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a252:	2300      	movs	r3, #0
 800a254:	e7f7      	b.n	800a246 <tcp_rexmit_rto_prepare+0x66>
    return ERR_VAL;
 800a256:	f06f 0005 	mvn.w	r0, #5
 800a25a:	e7f9      	b.n	800a250 <tcp_rexmit_rto_prepare+0x70>
      return ERR_VAL;
 800a25c:	f06f 0005 	mvn.w	r0, #5
 800a260:	e7f6      	b.n	800a250 <tcp_rexmit_rto_prepare+0x70>
    return ERR_VAL;
 800a262:	f06f 0005 	mvn.w	r0, #5
 800a266:	e7f3      	b.n	800a250 <tcp_rexmit_rto_prepare+0x70>
 800a268:	0801b4ac 	.word	0x0801b4ac
 800a26c:	0801bb08 	.word	0x0801bb08
 800a270:	08019f6c 	.word	0x08019f6c

0800a274 <tcp_rexmit>:
{
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a276:	4607      	mov	r7, r0
 800a278:	b1c8      	cbz	r0, 800a2ae <tcp_rexmit+0x3a>
  if (pcb->unacked == NULL) {
 800a27a:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800a27c:	b38e      	cbz	r6, 800a2e2 <tcp_rexmit+0x6e>
  if (tcp_output_segment_busy(seg)) {
 800a27e:	4630      	mov	r0, r6
 800a280:	f7ff fbe6 	bl	8009a50 <tcp_output_segment_busy>
 800a284:	bb80      	cbnz	r0, 800a2e8 <tcp_rexmit+0x74>
  pcb->unacked = seg->next;
 800a286:	6833      	ldr	r3, [r6, #0]
 800a288:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800a28a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	b1ab      	cbz	r3, 800a2be <tcp_rexmit+0x4a>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	6858      	ldr	r0, [r3, #4]
 800a296:	f7fb ff16 	bl	80060c6 <lwip_htonl>
 800a29a:	4604      	mov	r4, r0
 800a29c:	68f3      	ldr	r3, [r6, #12]
 800a29e:	6858      	ldr	r0, [r3, #4]
 800a2a0:	f7fb ff11 	bl	80060c6 <lwip_htonl>
 800a2a4:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800a2a6:	2c00      	cmp	r4, #0
 800a2a8:	da09      	bge.n	800a2be <tcp_rexmit+0x4a>
    cur_seg = &((*cur_seg)->next );
 800a2aa:	682d      	ldr	r5, [r5, #0]
 800a2ac:	e7ef      	b.n	800a28e <tcp_rexmit+0x1a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a2ae:	4b10      	ldr	r3, [pc, #64]	; (800a2f0 <tcp_rexmit+0x7c>)
 800a2b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a2b4:	490f      	ldr	r1, [pc, #60]	; (800a2f4 <tcp_rexmit+0x80>)
 800a2b6:	4810      	ldr	r0, [pc, #64]	; (800a2f8 <tcp_rexmit+0x84>)
 800a2b8:	f008 fc0c 	bl	8012ad4 <printf>
 800a2bc:	e7dd      	b.n	800a27a <tcp_rexmit+0x6>
  seg->next = *cur_seg;
 800a2be:	682b      	ldr	r3, [r5, #0]
 800a2c0:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800a2c2:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800a2c4:	6833      	ldr	r3, [r6, #0]
 800a2c6:	b14b      	cbz	r3, 800a2dc <tcp_rexmit+0x68>
  if (pcb->nrtx < 0xFF) {
 800a2c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a2cc:	2bff      	cmp	r3, #255	; 0xff
 800a2ce:	d002      	beq.n	800a2d6 <tcp_rexmit+0x62>
    ++pcb->nrtx;
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	6378      	str	r0, [r7, #52]	; 0x34
}
 800a2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800a2dc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a2e0:	e7f2      	b.n	800a2c8 <tcp_rexmit+0x54>
    return ERR_VAL;
 800a2e2:	f06f 0005 	mvn.w	r0, #5
 800a2e6:	e7f8      	b.n	800a2da <tcp_rexmit+0x66>
    return ERR_VAL;
 800a2e8:	f06f 0005 	mvn.w	r0, #5
 800a2ec:	e7f5      	b.n	800a2da <tcp_rexmit+0x66>
 800a2ee:	bf00      	nop
 800a2f0:	0801b4ac 	.word	0x0801b4ac
 800a2f4:	0801bb2c 	.word	0x0801bb2c
 800a2f8:	08019f6c 	.word	0x08019f6c

0800a2fc <tcp_rexmit_fast>:
{
 800a2fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a2fe:	4604      	mov	r4, r0
 800a300:	b130      	cbz	r0, 800a310 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a302:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a304:	b11b      	cbz	r3, 800a30e <tcp_rexmit_fast+0x12>
 800a306:	8b63      	ldrh	r3, [r4, #26]
 800a308:	f013 0f04 	tst.w	r3, #4
 800a30c:	d008      	beq.n	800a320 <tcp_rexmit_fast+0x24>
}
 800a30e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a310:	4b15      	ldr	r3, [pc, #84]	; (800a368 <tcp_rexmit_fast+0x6c>)
 800a312:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a316:	4915      	ldr	r1, [pc, #84]	; (800a36c <tcp_rexmit_fast+0x70>)
 800a318:	4815      	ldr	r0, [pc, #84]	; (800a370 <tcp_rexmit_fast+0x74>)
 800a31a:	f008 fbdb 	bl	8012ad4 <printf>
 800a31e:	e7f0      	b.n	800a302 <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff ffa7 	bl	800a274 <tcp_rexmit>
 800a326:	2800      	cmp	r0, #0
 800a328:	d1f1      	bne.n	800a30e <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a32a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a32e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a332:	4293      	cmp	r3, r2
 800a334:	bf28      	it	cs
 800a336:	4613      	movcs	r3, r2
 800a338:	085b      	lsrs	r3, r3, #1
 800a33a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a33e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800a340:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a344:	d202      	bcs.n	800a34c <tcp_rexmit_fast+0x50>
        pcb->ssthresh = 2 * pcb->mss;
 800a346:	0053      	lsls	r3, r2, #1
 800a348:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a34c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800a350:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a354:	441a      	add	r2, r3
 800a356:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a35a:	8b63      	ldrh	r3, [r4, #26]
 800a35c:	f043 0304 	orr.w	r3, r3, #4
 800a360:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800a366:	e7d2      	b.n	800a30e <tcp_rexmit_fast+0x12>
 800a368:	0801b4ac 	.word	0x0801b4ac
 800a36c:	0801bb44 	.word	0x0801bb44
 800a370:	08019f6c 	.word	0x08019f6c

0800a374 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	4604      	mov	r4, r0
 800a37c:	460e      	mov	r6, r1
 800a37e:	4615      	mov	r5, r2
 800a380:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a382:	4698      	mov	r8, r3
 800a384:	b32b      	cbz	r3, 800a3d2 <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a386:	b367      	cbz	r7, 800a3e2 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a388:	4630      	mov	r0, r6
 800a38a:	f7fb fe9c 	bl	80060c6 <lwip_htonl>
 800a38e:	4603      	mov	r3, r0
 800a390:	f246 0208 	movw	r2, #24584	; 0x6008
 800a394:	9203      	str	r2, [sp, #12]
 800a396:	2214      	movs	r2, #20
 800a398:	9202      	str	r2, [sp, #8]
 800a39a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800a39e:	9201      	str	r2, [sp, #4]
 800a3a0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800a3a4:	9200      	str	r2, [sp, #0]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f7ff fc04 	bl	8009bb8 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	b158      	cbz	r0, 800a3cc <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f7ff fb62 	bl	8009a84 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a3c0:	463b      	mov	r3, r7
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7ff fd16 	bl	8009df8 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a3cc:	b004      	add	sp, #16
 800a3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a3d2:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <tcp_rst+0x80>)
 800a3d4:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a3d8:	4907      	ldr	r1, [pc, #28]	; (800a3f8 <tcp_rst+0x84>)
 800a3da:	4808      	ldr	r0, [pc, #32]	; (800a3fc <tcp_rst+0x88>)
 800a3dc:	f008 fb7a 	bl	8012ad4 <printf>
 800a3e0:	e7d1      	b.n	800a386 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a3e2:	4b04      	ldr	r3, [pc, #16]	; (800a3f4 <tcp_rst+0x80>)
 800a3e4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a3e8:	4905      	ldr	r1, [pc, #20]	; (800a400 <tcp_rst+0x8c>)
 800a3ea:	4804      	ldr	r0, [pc, #16]	; (800a3fc <tcp_rst+0x88>)
 800a3ec:	f008 fb72 	bl	8012ad4 <printf>
 800a3f0:	e7ca      	b.n	800a388 <tcp_rst+0x14>
 800a3f2:	bf00      	nop
 800a3f4:	0801b4ac 	.word	0x0801b4ac
 800a3f8:	0801bb64 	.word	0x0801bb64
 800a3fc:	08019f6c 	.word	0x08019f6c
 800a400:	0801bb80 	.word	0x0801bb80

0800a404 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a404:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a406:	4604      	mov	r4, r0
 800a408:	b1e0      	cbz	r0, 800a444 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a40a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a40c:	f7fb fe5b 	bl	80060c6 <lwip_htonl>
 800a410:	4603      	mov	r3, r0
 800a412:	2200      	movs	r2, #0
 800a414:	4611      	mov	r1, r2
 800a416:	4620      	mov	r0, r4
 800a418:	f7ff fc1a 	bl	8009c50 <tcp_output_alloc_header>
  if (p == NULL) {
 800a41c:	4605      	mov	r5, r0
 800a41e:	b1c8      	cbz	r0, 800a454 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a420:	2300      	movs	r3, #0
 800a422:	461a      	mov	r2, r3
 800a424:	4601      	mov	r1, r0
 800a426:	4620      	mov	r0, r4
 800a428:	f7ff fb2c 	bl	8009a84 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a42c:	1d23      	adds	r3, r4, #4
 800a42e:	4622      	mov	r2, r4
 800a430:	4629      	mov	r1, r5
 800a432:	4620      	mov	r0, r4
 800a434:	f7ff fce0 	bl	8009df8 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800a438:	b198      	cbz	r0, 800a462 <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a43a:	8b63      	ldrh	r3, [r4, #26]
 800a43c:	f043 0303 	orr.w	r3, r3, #3
 800a440:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800a442:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a444:	4b09      	ldr	r3, [pc, #36]	; (800a46c <tcp_send_empty_ack+0x68>)
 800a446:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a44a:	4909      	ldr	r1, [pc, #36]	; (800a470 <tcp_send_empty_ack+0x6c>)
 800a44c:	4809      	ldr	r0, [pc, #36]	; (800a474 <tcp_send_empty_ack+0x70>)
 800a44e:	f008 fb41 	bl	8012ad4 <printf>
 800a452:	e7da      	b.n	800a40a <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a454:	8b63      	ldrh	r3, [r4, #26]
 800a456:	f043 0303 	orr.w	r3, r3, #3
 800a45a:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800a45c:	f06f 0001 	mvn.w	r0, #1
 800a460:	e7ef      	b.n	800a442 <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a462:	8b63      	ldrh	r3, [r4, #26]
 800a464:	f023 0303 	bic.w	r3, r3, #3
 800a468:	8363      	strh	r3, [r4, #26]
 800a46a:	e7ea      	b.n	800a442 <tcp_send_empty_ack+0x3e>
 800a46c:	0801b4ac 	.word	0x0801b4ac
 800a470:	0801bb9c 	.word	0x0801bb9c
 800a474:	08019f6c 	.word	0x08019f6c

0800a478 <tcp_output>:
{
 800a478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a47c:	4605      	mov	r5, r0
 800a47e:	2800      	cmp	r0, #0
 800a480:	d03b      	beq.n	800a4fa <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a482:	7d2b      	ldrb	r3, [r5, #20]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d040      	beq.n	800a50a <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 800a488:	4ba0      	ldr	r3, [pc, #640]	; (800a70c <tcp_output+0x294>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	42ab      	cmp	r3, r5
 800a48e:	f000 8135 	beq.w	800a6fc <tcp_output+0x284>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a492:	f8b5 6048 	ldrh.w	r6, [r5, #72]	; 0x48
 800a496:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800a49a:	429e      	cmp	r6, r3
 800a49c:	bf28      	it	cs
 800a49e:	461e      	movcs	r6, r3
 800a4a0:	46b0      	mov	r8, r6
  seg = pcb->unsent;
 800a4a2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800a4a4:	2c00      	cmp	r4, #0
 800a4a6:	d038      	beq.n	800a51a <tcp_output+0xa2>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a4a8:	1d2a      	adds	r2, r5, #4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f7ff fbf9 	bl	8009ca4 <tcp_route>
  if (netif == NULL) {
 800a4b2:	4607      	mov	r7, r0
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f000 8123 	beq.w	800a700 <tcp_output+0x288>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a4ba:	b10d      	cbz	r5, 800a4c0 <tcp_output+0x48>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b92b      	cbnz	r3, 800a4cc <tcp_output+0x54>
    if (local_ip == NULL) {
 800a4c0:	f117 0f04 	cmn.w	r7, #4
 800a4c4:	f000 811f 	beq.w	800a706 <tcp_output+0x28e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	602b      	str	r3, [r5, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a4cc:	68e3      	ldr	r3, [r4, #12]
 800a4ce:	6858      	ldr	r0, [r3, #4]
 800a4d0:	f7fb fdf9 	bl	80060c6 <lwip_htonl>
 800a4d4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a4d6:	1ac0      	subs	r0, r0, r3
 800a4d8:	8923      	ldrh	r3, [r4, #8]
 800a4da:	4418      	add	r0, r3
 800a4dc:	42b0      	cmp	r0, r6
 800a4de:	d93c      	bls.n	800a55a <tcp_output+0xe2>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a4e0:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800a4e4:	429e      	cmp	r6, r3
 800a4e6:	d029      	beq.n	800a53c <tcp_output+0xc4>
    if (pcb->flags & TF_ACK_NOW) {
 800a4e8:	8b6b      	ldrh	r3, [r5, #26]
 800a4ea:	f013 0f02 	tst.w	r3, #2
 800a4ee:	d018      	beq.n	800a522 <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f7ff ff87 	bl	800a404 <tcp_send_empty_ack>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	e018      	b.n	800a52c <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a4fa:	4b85      	ldr	r3, [pc, #532]	; (800a710 <tcp_output+0x298>)
 800a4fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a500:	4984      	ldr	r1, [pc, #528]	; (800a714 <tcp_output+0x29c>)
 800a502:	4885      	ldr	r0, [pc, #532]	; (800a718 <tcp_output+0x2a0>)
 800a504:	f008 fae6 	bl	8012ad4 <printf>
 800a508:	e7bb      	b.n	800a482 <tcp_output+0xa>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a50a:	4b81      	ldr	r3, [pc, #516]	; (800a710 <tcp_output+0x298>)
 800a50c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a510:	4982      	ldr	r1, [pc, #520]	; (800a71c <tcp_output+0x2a4>)
 800a512:	4881      	ldr	r0, [pc, #516]	; (800a718 <tcp_output+0x2a0>)
 800a514:	f008 fade 	bl	8012ad4 <printf>
 800a518:	e7b6      	b.n	800a488 <tcp_output+0x10>
    if (pcb->flags & TF_ACK_NOW) {
 800a51a:	8b6b      	ldrh	r3, [r5, #26]
 800a51c:	f013 0f02 	tst.w	r3, #2
 800a520:	d107      	bne.n	800a532 <tcp_output+0xba>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a522:	8b6b      	ldrh	r3, [r5, #26]
 800a524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a528:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return tcp_send_empty_ack(pcb);
 800a532:	4628      	mov	r0, r5
 800a534:	f7ff ff66 	bl	800a404 <tcp_send_empty_ack>
 800a538:	4603      	mov	r3, r0
 800a53a:	e7f7      	b.n	800a52c <tcp_output+0xb4>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a53c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1d2      	bne.n	800a4e8 <tcp_output+0x70>
 800a542:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1ce      	bne.n	800a4e8 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 800a54a:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a54e:	2201      	movs	r2, #1
 800a550:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 800a554:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800a558:	e7c6      	b.n	800a4e8 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 800a560:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 80c8 	beq.w	800a6f8 <tcp_output+0x280>
    for (; useg->next != NULL; useg = useg->next);
 800a568:	461e      	mov	r6, r3
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1fb      	bne.n	800a568 <tcp_output+0xf0>
 800a570:	e056      	b.n	800a620 <tcp_output+0x1a8>
    LWIP_ASSERT("RST not expected here!",
 800a572:	4b67      	ldr	r3, [pc, #412]	; (800a710 <tcp_output+0x298>)
 800a574:	f240 5236 	movw	r2, #1334	; 0x536
 800a578:	4969      	ldr	r1, [pc, #420]	; (800a720 <tcp_output+0x2a8>)
 800a57a:	4867      	ldr	r0, [pc, #412]	; (800a718 <tcp_output+0x2a0>)
 800a57c:	f008 faaa 	bl	8012ad4 <printf>
 800a580:	e061      	b.n	800a646 <tcp_output+0x1ce>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a582:	8911      	ldrh	r1, [r2, #8]
 800a584:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800a586:	4291      	cmp	r1, r2
 800a588:	d269      	bcs.n	800a65e <tcp_output+0x1e6>
 800a58a:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800a58e:	2a00      	cmp	r2, #0
 800a590:	d065      	beq.n	800a65e <tcp_output+0x1e6>
 800a592:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800a596:	2a08      	cmp	r2, #8
 800a598:	d861      	bhi.n	800a65e <tcp_output+0x1e6>
 800a59a:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800a59e:	d15e      	bne.n	800a65e <tcp_output+0x1e6>
  if (pcb->unsent == NULL) {
 800a5a0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1bd      	bne.n	800a522 <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 800a5a6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800a5aa:	e7ba      	b.n	800a522 <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a5ac:	68e3      	ldr	r3, [r4, #12]
 800a5ae:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800a5b2:	2010      	movs	r0, #16
 800a5b4:	f7fb fd82 	bl	80060bc <lwip_htons>
 800a5b8:	68e3      	ldr	r3, [r4, #12]
 800a5ba:	ea49 0900 	orr.w	r9, r9, r0
 800a5be:	f8a3 900c 	strh.w	r9, [r3, #12]
 800a5c2:	e04f      	b.n	800a664 <tcp_output+0x1ec>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a5c4:	8b6a      	ldrh	r2, [r5, #26]
 800a5c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5ca:	836a      	strh	r2, [r5, #26]
      return err;
 800a5cc:	e7ae      	b.n	800a52c <tcp_output+0xb4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	e068      	b.n	800a6a4 <tcp_output+0x22c>
      pcb->snd_nxt = snd_nxt;
 800a5d2:	6528      	str	r0, [r5, #80]	; 0x50
 800a5d4:	e06c      	b.n	800a6b0 <tcp_output+0x238>
    if (TCP_TCPLEN(seg) > 0) {
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e074      	b.n	800a6c4 <tcp_output+0x24c>
        pcb->unacked = seg;
 800a5da:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 800a5dc:	4626      	mov	r6, r4
 800a5de:	e01e      	b.n	800a61e <tcp_output+0x1a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a5e0:	f105 0a70 	add.w	sl, r5, #112	; 0x70
          while (*cur_seg &&
 800a5e4:	e001      	b.n	800a5ea <tcp_output+0x172>
            cur_seg = &((*cur_seg)->next );
 800a5e6:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 800a5ea:	f8da 3000 	ldr.w	r3, [sl]
 800a5ee:	b16b      	cbz	r3, 800a60c <tcp_output+0x194>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	6858      	ldr	r0, [r3, #4]
 800a5f4:	f7fb fd67 	bl	80060c6 <lwip_htonl>
 800a5f8:	4681      	mov	r9, r0
 800a5fa:	68e3      	ldr	r3, [r4, #12]
 800a5fc:	6858      	ldr	r0, [r3, #4]
 800a5fe:	f7fb fd62 	bl	80060c6 <lwip_htonl>
 800a602:	eba9 0900 	sub.w	r9, r9, r0
          while (*cur_seg &&
 800a606:	f1b9 0f00 	cmp.w	r9, #0
 800a60a:	dbec      	blt.n	800a5e6 <tcp_output+0x16e>
          seg->next = (*cur_seg);
 800a60c:	f8da 3000 	ldr.w	r3, [sl]
 800a610:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800a612:	f8ca 4000 	str.w	r4, [sl]
 800a616:	e002      	b.n	800a61e <tcp_output+0x1a6>
      tcp_seg_free(seg);
 800a618:	4620      	mov	r0, r4
 800a61a:	f7fc ff79 	bl	8007510 <tcp_seg_free>
    seg = pcb->unsent;
 800a61e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 800a620:	2c00      	cmp	r4, #0
 800a622:	d0bd      	beq.n	800a5a0 <tcp_output+0x128>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a624:	68e3      	ldr	r3, [r4, #12]
 800a626:	6858      	ldr	r0, [r3, #4]
 800a628:	f7fb fd4d 	bl	80060c6 <lwip_htonl>
 800a62c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a62e:	1ac0      	subs	r0, r0, r3
 800a630:	8923      	ldrh	r3, [r4, #8]
 800a632:	4418      	add	r0, r3
  while (seg != NULL &&
 800a634:	4540      	cmp	r0, r8
 800a636:	d8b3      	bhi.n	800a5a0 <tcp_output+0x128>
    LWIP_ASSERT("RST not expected here!",
 800a638:	68e3      	ldr	r3, [r4, #12]
 800a63a:	8998      	ldrh	r0, [r3, #12]
 800a63c:	f7fb fd3e 	bl	80060bc <lwip_htons>
 800a640:	f010 0f04 	tst.w	r0, #4
 800a644:	d195      	bne.n	800a572 <tcp_output+0xfa>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a646:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a648:	b14b      	cbz	r3, 800a65e <tcp_output+0x1e6>
 800a64a:	8b6b      	ldrh	r3, [r5, #26]
 800a64c:	f013 0f44 	tst.w	r3, #68	; 0x44
 800a650:	d105      	bne.n	800a65e <tcp_output+0x1e6>
 800a652:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800a654:	2a00      	cmp	r2, #0
 800a656:	d098      	beq.n	800a58a <tcp_output+0x112>
 800a658:	6811      	ldr	r1, [r2, #0]
 800a65a:	2900      	cmp	r1, #0
 800a65c:	d091      	beq.n	800a582 <tcp_output+0x10a>
    if (pcb->state != SYN_SENT) {
 800a65e:	7d2b      	ldrb	r3, [r5, #20]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d1a3      	bne.n	800a5ac <tcp_output+0x134>
    err = tcp_output_segment(seg, pcb, netif);
 800a664:	463a      	mov	r2, r7
 800a666:	4629      	mov	r1, r5
 800a668:	4620      	mov	r0, r4
 800a66a:	f7ff fb27 	bl	8009cbc <tcp_output_segment>
    if (err != ERR_OK) {
 800a66e:	4603      	mov	r3, r0
 800a670:	2800      	cmp	r0, #0
 800a672:	d1a7      	bne.n	800a5c4 <tcp_output+0x14c>
    pcb->unsent = seg->next;
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a678:	7d2b      	ldrb	r3, [r5, #20]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d003      	beq.n	800a686 <tcp_output+0x20e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a67e:	8b6b      	ldrh	r3, [r5, #26]
 800a680:	f023 0303 	bic.w	r3, r3, #3
 800a684:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	6858      	ldr	r0, [r3, #4]
 800a68a:	f7fb fd1c 	bl	80060c6 <lwip_htonl>
 800a68e:	4681      	mov	r9, r0
 800a690:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800a694:	68e3      	ldr	r3, [r4, #12]
 800a696:	8998      	ldrh	r0, [r3, #12]
 800a698:	f7fb fd10 	bl	80060bc <lwip_htons>
 800a69c:	f010 0f03 	tst.w	r0, #3
 800a6a0:	d095      	beq.n	800a5ce <tcp_output+0x156>
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	4450      	add	r0, sl
 800a6a6:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a6a8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a6aa:	1a1b      	subs	r3, r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	db90      	blt.n	800a5d2 <tcp_output+0x15a>
    if (TCP_TCPLEN(seg) > 0) {
 800a6b0:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800a6b4:	68e3      	ldr	r3, [r4, #12]
 800a6b6:	8998      	ldrh	r0, [r3, #12]
 800a6b8:	f7fb fd00 	bl	80060bc <lwip_htons>
 800a6bc:	f010 0f03 	tst.w	r0, #3
 800a6c0:	d089      	beq.n	800a5d6 <tcp_output+0x15e>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	eb19 0f03 	cmn.w	r9, r3
 800a6c8:	d0a6      	beq.n	800a618 <tcp_output+0x1a0>
      seg->next = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800a6ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d082      	beq.n	800a5da <tcp_output+0x162>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a6d4:	68e3      	ldr	r3, [r4, #12]
 800a6d6:	6858      	ldr	r0, [r3, #4]
 800a6d8:	f7fb fcf5 	bl	80060c6 <lwip_htonl>
 800a6dc:	4681      	mov	r9, r0
 800a6de:	68f3      	ldr	r3, [r6, #12]
 800a6e0:	6858      	ldr	r0, [r3, #4]
 800a6e2:	f7fb fcf0 	bl	80060c6 <lwip_htonl>
 800a6e6:	eba9 0900 	sub.w	r9, r9, r0
 800a6ea:	f1b9 0f00 	cmp.w	r9, #0
 800a6ee:	f6ff af77 	blt.w	800a5e0 <tcp_output+0x168>
          useg->next = seg;
 800a6f2:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800a6f4:	4626      	mov	r6, r4
 800a6f6:	e792      	b.n	800a61e <tcp_output+0x1a6>
  useg = pcb->unacked;
 800a6f8:	461e      	mov	r6, r3
 800a6fa:	e791      	b.n	800a620 <tcp_output+0x1a8>
    return ERR_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e715      	b.n	800a52c <tcp_output+0xb4>
    return ERR_RTE;
 800a700:	f06f 0303 	mvn.w	r3, #3
 800a704:	e712      	b.n	800a52c <tcp_output+0xb4>
      return ERR_RTE;
 800a706:	f06f 0303 	mvn.w	r3, #3
 800a70a:	e70f      	b.n	800a52c <tcp_output+0xb4>
 800a70c:	200073dc 	.word	0x200073dc
 800a710:	0801b4ac 	.word	0x0801b4ac
 800a714:	0801bbbc 	.word	0x0801bbbc
 800a718:	08019f6c 	.word	0x08019f6c
 800a71c:	0801bbd4 	.word	0x0801bbd4
 800a720:	0801bbfc 	.word	0x0801bbfc

0800a724 <tcp_rexmit_rto_commit>:
{
 800a724:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a726:	4604      	mov	r4, r0
 800a728:	b150      	cbz	r0, 800a740 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800a72a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a72e:	2bff      	cmp	r3, #255	; 0xff
 800a730:	d002      	beq.n	800a738 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800a732:	3301      	adds	r3, #1
 800a734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800a738:	4620      	mov	r0, r4
 800a73a:	f7ff fe9d 	bl	800a478 <tcp_output>
}
 800a73e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a740:	4b03      	ldr	r3, [pc, #12]	; (800a750 <tcp_rexmit_rto_commit+0x2c>)
 800a742:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a746:	4903      	ldr	r1, [pc, #12]	; (800a754 <tcp_rexmit_rto_commit+0x30>)
 800a748:	4803      	ldr	r0, [pc, #12]	; (800a758 <tcp_rexmit_rto_commit+0x34>)
 800a74a:	f008 f9c3 	bl	8012ad4 <printf>
 800a74e:	e7ec      	b.n	800a72a <tcp_rexmit_rto_commit+0x6>
 800a750:	0801b4ac 	.word	0x0801b4ac
 800a754:	0801bc14 	.word	0x0801bc14
 800a758:	08019f6c 	.word	0x08019f6c

0800a75c <tcp_rexmit_rto>:
{
 800a75c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a75e:	4604      	mov	r4, r0
 800a760:	b120      	cbz	r0, 800a76c <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a762:	4620      	mov	r0, r4
 800a764:	f7ff fd3c 	bl	800a1e0 <tcp_rexmit_rto_prepare>
 800a768:	b140      	cbz	r0, 800a77c <tcp_rexmit_rto+0x20>
}
 800a76a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a76c:	4b05      	ldr	r3, [pc, #20]	; (800a784 <tcp_rexmit_rto+0x28>)
 800a76e:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a772:	4905      	ldr	r1, [pc, #20]	; (800a788 <tcp_rexmit_rto+0x2c>)
 800a774:	4805      	ldr	r0, [pc, #20]	; (800a78c <tcp_rexmit_rto+0x30>)
 800a776:	f008 f9ad 	bl	8012ad4 <printf>
 800a77a:	e7f2      	b.n	800a762 <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800a77c:	4620      	mov	r0, r4
 800a77e:	f7ff ffd1 	bl	800a724 <tcp_rexmit_rto_commit>
}
 800a782:	e7f2      	b.n	800a76a <tcp_rexmit_rto+0xe>
 800a784:	0801b4ac 	.word	0x0801b4ac
 800a788:	0801bc38 	.word	0x0801bc38
 800a78c:	08019f6c 	.word	0x08019f6c

0800a790 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a790:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a792:	4604      	mov	r4, r0
 800a794:	b1c0      	cbz	r0, 800a7c8 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a796:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a798:	3801      	subs	r0, #1
 800a79a:	f7fb fc94 	bl	80060c6 <lwip_htonl>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f7ff fa53 	bl	8009c50 <tcp_output_alloc_header>
  if (p == NULL) {
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	b1a0      	cbz	r0, 800a7d8 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f7ff f965 	bl	8009a84 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a7ba:	1d23      	adds	r3, r4, #4
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f7ff fb19 	bl	8009df8 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <tcp_keepalive+0x50>)
 800a7ca:	f640 0224 	movw	r2, #2084	; 0x824
 800a7ce:	4905      	ldr	r1, [pc, #20]	; (800a7e4 <tcp_keepalive+0x54>)
 800a7d0:	4805      	ldr	r0, [pc, #20]	; (800a7e8 <tcp_keepalive+0x58>)
 800a7d2:	f008 f97f 	bl	8012ad4 <printf>
 800a7d6:	e7de      	b.n	800a796 <tcp_keepalive+0x6>
    return ERR_MEM;
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	e7f3      	b.n	800a7c6 <tcp_keepalive+0x36>
 800a7de:	bf00      	nop
 800a7e0:	0801b4ac 	.word	0x0801b4ac
 800a7e4:	0801bc54 	.word	0x0801bc54
 800a7e8:	08019f6c 	.word	0x08019f6c

0800a7ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	b1a8      	cbz	r0, 800a820 <tcp_zero_window_probe+0x34>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a7f4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	d05b      	beq.n	800a8b2 <tcp_zero_window_probe+0xc6>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a7fa:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a7fe:	2bff      	cmp	r3, #255	; 0xff
 800a800:	d002      	beq.n	800a808 <tcp_zero_window_probe+0x1c>
    ++pcb->persist_probe;
 800a802:	3301      	adds	r3, #1
 800a804:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a808:	68eb      	ldr	r3, [r5, #12]
 800a80a:	8998      	ldrh	r0, [r3, #12]
 800a80c:	f7fb fc56 	bl	80060bc <lwip_htons>
 800a810:	f010 0f01 	tst.w	r0, #1
 800a814:	d00c      	beq.n	800a830 <tcp_zero_window_probe+0x44>
 800a816:	892b      	ldrh	r3, [r5, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d03b      	beq.n	800a894 <tcp_zero_window_probe+0xa8>
 800a81c:	2200      	movs	r2, #0
 800a81e:	e008      	b.n	800a832 <tcp_zero_window_probe+0x46>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a820:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <tcp_zero_window_probe+0xd0>)
 800a822:	f640 024f 	movw	r2, #2127	; 0x84f
 800a826:	4926      	ldr	r1, [pc, #152]	; (800a8c0 <tcp_zero_window_probe+0xd4>)
 800a828:	4826      	ldr	r0, [pc, #152]	; (800a8c4 <tcp_zero_window_probe+0xd8>)
 800a82a:	f008 f953 	bl	8012ad4 <printf>
 800a82e:	e7e1      	b.n	800a7f4 <tcp_zero_window_probe+0x8>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a830:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a832:	f002 07ff 	and.w	r7, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a836:	68eb      	ldr	r3, [r5, #12]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f082 0201 	eor.w	r2, r2, #1
 800a83e:	2100      	movs	r1, #0
 800a840:	4620      	mov	r0, r4
 800a842:	f7ff fa05 	bl	8009c50 <tcp_output_alloc_header>
  if (p == NULL) {
 800a846:	4606      	mov	r6, r0
 800a848:	b3a8      	cbz	r0, 800a8b6 <tcp_zero_window_probe+0xca>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a84a:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a84e:	b31f      	cbz	r7, 800a898 <tcp_zero_window_probe+0xac>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a850:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800a854:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800a858:	2011      	movs	r0, #17
 800a85a:	f7fb fc2f 	bl	80060bc <lwip_htons>
 800a85e:	b200      	sxth	r0, r0
 800a860:	4307      	orrs	r7, r0
 800a862:	f8a8 700c 	strh.w	r7, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a866:	68eb      	ldr	r3, [r5, #12]
 800a868:	6858      	ldr	r0, [r3, #4]
 800a86a:	f7fb fc2c 	bl	80060c6 <lwip_htonl>
 800a86e:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a870:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a872:	1a1b      	subs	r3, r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	db1a      	blt.n	800a8ae <tcp_zero_window_probe+0xc2>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a878:	2300      	movs	r3, #0
 800a87a:	461a      	mov	r2, r3
 800a87c:	4631      	mov	r1, r6
 800a87e:	4620      	mov	r0, r4
 800a880:	f7ff f900 	bl	8009a84 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a884:	1d23      	adds	r3, r4, #4
 800a886:	4622      	mov	r2, r4
 800a888:	4631      	mov	r1, r6
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff fab4 	bl	8009df8 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a894:	2201      	movs	r2, #1
 800a896:	e7cc      	b.n	800a832 <tcp_zero_window_probe+0x46>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a898:	6868      	ldr	r0, [r5, #4]
 800a89a:	8903      	ldrh	r3, [r0, #8]
 800a89c:	892a      	ldrh	r2, [r5, #8]
 800a89e:	1a9b      	subs	r3, r3, r2
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f108 0114 	add.w	r1, r8, #20
 800a8a8:	f7fc fc7a 	bl	80071a0 <pbuf_copy_partial>
 800a8ac:	e7db      	b.n	800a866 <tcp_zero_window_probe+0x7a>
    pcb->snd_nxt = snd_nxt;
 800a8ae:	6520      	str	r0, [r4, #80]	; 0x50
 800a8b0:	e7e2      	b.n	800a878 <tcp_zero_window_probe+0x8c>
    return ERR_OK;
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e7ec      	b.n	800a890 <tcp_zero_window_probe+0xa4>
    return ERR_MEM;
 800a8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ba:	e7e9      	b.n	800a890 <tcp_zero_window_probe+0xa4>
 800a8bc:	0801b4ac 	.word	0x0801b4ac
 800a8c0:	0801bc70 	.word	0x0801bc70
 800a8c4:	08019f6c 	.word	0x08019f6c

0800a8c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	460f      	mov	r7, r1
 800a8ce:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a8d0:	2006      	movs	r0, #6
 800a8d2:	f7fb ff57 	bl	8006784 <memp_malloc>
  if (timeout == NULL) {
 800a8d6:	b180      	cbz	r0, 800a8fa <sys_timeout_abs+0x32>
 800a8d8:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800a8de:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800a8e0:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800a8e2:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a8e4:	4b10      	ldr	r3, [pc, #64]	; (800a928 <sys_timeout_abs+0x60>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	b172      	cbz	r2, 800a908 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a8ea:	6853      	ldr	r3, [r2, #4]
 800a8ec:	1ae3      	subs	r3, r4, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	da0f      	bge.n	800a912 <sys_timeout_abs+0x4a>
    timeout->next = next_timeout;
 800a8f2:	6002      	str	r2, [r0, #0]
    next_timeout = timeout;
 800a8f4:	4b0c      	ldr	r3, [pc, #48]	; (800a928 <sys_timeout_abs+0x60>)
 800a8f6:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <sys_timeout_abs+0x64>)
 800a8fc:	22be      	movs	r2, #190	; 0xbe
 800a8fe:	490c      	ldr	r1, [pc, #48]	; (800a930 <sys_timeout_abs+0x68>)
 800a900:	480c      	ldr	r0, [pc, #48]	; (800a934 <sys_timeout_abs+0x6c>)
 800a902:	f008 f8e7 	bl	8012ad4 <printf>
    return;
 800a906:	e7f7      	b.n	800a8f8 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800a908:	6018      	str	r0, [r3, #0]
    return;
 800a90a:	e7f5      	b.n	800a8f8 <sys_timeout_abs+0x30>
        timeout->next = t->next;
 800a90c:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800a90e:	6015      	str	r5, [r2, #0]
        break;
 800a910:	e7f2      	b.n	800a8f8 <sys_timeout_abs+0x30>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a912:	2a00      	cmp	r2, #0
 800a914:	d0f0      	beq.n	800a8f8 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a916:	6813      	ldr	r3, [r2, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0f7      	beq.n	800a90c <sys_timeout_abs+0x44>
 800a91c:	6859      	ldr	r1, [r3, #4]
 800a91e:	1a61      	subs	r1, r4, r1
 800a920:	2900      	cmp	r1, #0
 800a922:	dbf3      	blt.n	800a90c <sys_timeout_abs+0x44>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a924:	461a      	mov	r2, r3
 800a926:	e7f4      	b.n	800a912 <sys_timeout_abs+0x4a>
 800a928:	200033f4 	.word	0x200033f4
 800a92c:	0801bc94 	.word	0x0801bc94
 800a930:	0801bcc8 	.word	0x0801bcc8
 800a934:	08019f6c 	.word	0x08019f6c

0800a938 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a93c:	6843      	ldr	r3, [r0, #4]
 800a93e:	4798      	blx	r3

  now = sys_now();
 800a940:	f002 f8aa 	bl	800ca98 <sys_now>
 800a944:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a946:	6826      	ldr	r6, [r4, #0]
 800a948:	4b08      	ldr	r3, [pc, #32]	; (800a96c <lwip_cyclic_timer+0x34>)
 800a94a:	6858      	ldr	r0, [r3, #4]
 800a94c:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a94e:	1b43      	subs	r3, r0, r5
 800a950:	2b00      	cmp	r3, #0
 800a952:	da05      	bge.n	800a960 <lwip_cyclic_timer+0x28>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a954:	4622      	mov	r2, r4
 800a956:	4906      	ldr	r1, [pc, #24]	; (800a970 <lwip_cyclic_timer+0x38>)
 800a958:	1970      	adds	r0, r6, r5
 800a95a:	f7ff ffb5 	bl	800a8c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a960:	4622      	mov	r2, r4
 800a962:	4903      	ldr	r1, [pc, #12]	; (800a970 <lwip_cyclic_timer+0x38>)
 800a964:	f7ff ffb0 	bl	800a8c8 <sys_timeout_abs>
}
 800a968:	e7f9      	b.n	800a95e <lwip_cyclic_timer+0x26>
 800a96a:	bf00      	nop
 800a96c:	200033f4 	.word	0x200033f4
 800a970:	0800a939 	.word	0x0800a939

0800a974 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a97c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a980:	d207      	bcs.n	800a992 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a982:	f002 f889 	bl	800ca98 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a986:	4632      	mov	r2, r6
 800a988:	4629      	mov	r1, r5
 800a98a:	4420      	add	r0, r4
 800a98c:	f7ff ff9c 	bl	800a8c8 <sys_timeout_abs>
#endif
}
 800a990:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a992:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <sys_timeout+0x30>)
 800a994:	f240 1229 	movw	r2, #297	; 0x129
 800a998:	4903      	ldr	r1, [pc, #12]	; (800a9a8 <sys_timeout+0x34>)
 800a99a:	4804      	ldr	r0, [pc, #16]	; (800a9ac <sys_timeout+0x38>)
 800a99c:	f008 f89a 	bl	8012ad4 <printf>
 800a9a0:	e7ef      	b.n	800a982 <sys_timeout+0xe>
 800a9a2:	bf00      	nop
 800a9a4:	0801bc94 	.word	0x0801bc94
 800a9a8:	0801bd08 	.word	0x0801bd08
 800a9ac:	08019f6c 	.word	0x08019f6c

0800a9b0 <tcp_timer_needed>:
{
 800a9b0:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <tcp_timer_needed+0x2c>)
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	b953      	cbnz	r3, 800a9ce <tcp_timer_needed+0x1e>
 800a9b8:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <tcp_timer_needed+0x30>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	b143      	cbz	r3, 800a9d0 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a9be:	4b07      	ldr	r3, [pc, #28]	; (800a9dc <tcp_timer_needed+0x2c>)
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4907      	ldr	r1, [pc, #28]	; (800a9e4 <tcp_timer_needed+0x34>)
 800a9c8:	20fa      	movs	r0, #250	; 0xfa
 800a9ca:	f7ff ffd3 	bl	800a974 <sys_timeout>
}
 800a9ce:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <tcp_timer_needed+0x38>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1f2      	bne.n	800a9be <tcp_timer_needed+0xe>
 800a9d8:	e7f9      	b.n	800a9ce <tcp_timer_needed+0x1e>
 800a9da:	bf00      	nop
 800a9dc:	200033f4 	.word	0x200033f4
 800a9e0:	200073c8 	.word	0x200073c8
 800a9e4:	0800a9ed 	.word	0x0800a9ed
 800a9e8:	200073d8 	.word	0x200073d8

0800a9ec <tcpip_tcp_timer>:
{
 800a9ec:	b508      	push	{r3, lr}
  tcp_tmr();
 800a9ee:	f7fd fc21 	bl	8008234 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a9f2:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <tcpip_tcp_timer+0x28>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	b12b      	cbz	r3, 800aa04 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4907      	ldr	r1, [pc, #28]	; (800aa18 <tcpip_tcp_timer+0x2c>)
 800a9fc:	20fa      	movs	r0, #250	; 0xfa
 800a9fe:	f7ff ffb9 	bl	800a974 <sys_timeout>
}
 800aa02:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <tcpip_tcp_timer+0x30>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1f5      	bne.n	800a9f8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800aa0c:	4b04      	ldr	r3, [pc, #16]	; (800aa20 <tcpip_tcp_timer+0x34>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	609a      	str	r2, [r3, #8]
}
 800aa12:	e7f6      	b.n	800aa02 <tcpip_tcp_timer+0x16>
 800aa14:	200073c8 	.word	0x200073c8
 800aa18:	0800a9ed 	.word	0x0800a9ed
 800aa1c:	200073d8 	.word	0x200073d8
 800aa20:	200033f4 	.word	0x200033f4

0800aa24 <sys_timeouts_init>:
{
 800aa24:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aa26:	2401      	movs	r4, #1
 800aa28:	e008      	b.n	800aa3c <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aa2a:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <sys_timeouts_init+0x20>)
 800aa2c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800aa30:	4905      	ldr	r1, [pc, #20]	; (800aa48 <sys_timeouts_init+0x24>)
 800aa32:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800aa36:	f7ff ff9d 	bl	800a974 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aa3a:	3401      	adds	r4, #1
 800aa3c:	2c02      	cmp	r4, #2
 800aa3e:	d9f4      	bls.n	800aa2a <sys_timeouts_init+0x6>
}
 800aa40:	bd10      	pop	{r4, pc}
 800aa42:	bf00      	nop
 800aa44:	08019ecc 	.word	0x08019ecc
 800aa48:	0800a939 	.word	0x0800a939

0800aa4c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4e:	460e      	mov	r6, r1
 800aa50:	4615      	mov	r5, r2
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800aa52:	4607      	mov	r7, r0
 800aa54:	b1c8      	cbz	r0, 800aa8a <udp_input_local_match+0x3e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800aa56:	b1fe      	cbz	r6, 800aa98 <udp_input_local_match+0x4c>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aa58:	7a3c      	ldrb	r4, [r7, #8]
 800aa5a:	b13c      	cbz	r4, 800aa6c <udp_input_local_match+0x20>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa5c:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <udp_input_local_match+0x8c>)
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa64:	3301      	adds	r3, #1
 800aa66:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	d125      	bne.n	800aab8 <udp_input_local_match+0x6c>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800aa6c:	b1dd      	cbz	r5, 800aaa6 <udp_input_local_match+0x5a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aa6e:	b32f      	cbz	r7, 800aabc <udp_input_local_match+0x70>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	b32b      	cbz	r3, 800aac0 <udp_input_local_match+0x74>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aa74:	4a18      	ldr	r2, [pc, #96]	; (800aad8 <udp_input_local_match+0x8c>)
 800aa76:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aa78:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa7c:	d022      	beq.n	800aac4 <udp_input_local_match+0x78>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800aa7e:	68b1      	ldr	r1, [r6, #8]
 800aa80:	4053      	eors	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aa82:	420b      	tst	r3, r1
 800aa84:	d020      	beq.n	800aac8 <udp_input_local_match+0x7c>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
 800aa86:	2000      	movs	r0, #0
 800aa88:	e017      	b.n	800aaba <udp_input_local_match+0x6e>
  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <udp_input_local_match+0x90>)
 800aa8c:	2287      	movs	r2, #135	; 0x87
 800aa8e:	4914      	ldr	r1, [pc, #80]	; (800aae0 <udp_input_local_match+0x94>)
 800aa90:	4814      	ldr	r0, [pc, #80]	; (800aae4 <udp_input_local_match+0x98>)
 800aa92:	f008 f81f 	bl	8012ad4 <printf>
 800aa96:	e7de      	b.n	800aa56 <udp_input_local_match+0xa>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800aa98:	4b10      	ldr	r3, [pc, #64]	; (800aadc <udp_input_local_match+0x90>)
 800aa9a:	2288      	movs	r2, #136	; 0x88
 800aa9c:	4912      	ldr	r1, [pc, #72]	; (800aae8 <udp_input_local_match+0x9c>)
 800aa9e:	4811      	ldr	r0, [pc, #68]	; (800aae4 <udp_input_local_match+0x98>)
 800aaa0:	f008 f818 	bl	8012ad4 <printf>
 800aaa4:	e7d8      	b.n	800aa58 <udp_input_local_match+0xc>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aaa6:	b18f      	cbz	r7, 800aacc <udp_input_local_match+0x80>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	b18b      	cbz	r3, 800aad0 <udp_input_local_match+0x84>
 800aaac:	4a0a      	ldr	r2, [pc, #40]	; (800aad8 <udp_input_local_match+0x8c>)
 800aaae:	6952      	ldr	r2, [r2, #20]
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d00f      	beq.n	800aad4 <udp_input_local_match+0x88>
  return 0;
 800aab4:	4628      	mov	r0, r5
 800aab6:	e000      	b.n	800aaba <udp_input_local_match+0x6e>
    return 0;
 800aab8:	2000      	movs	r0, #0
}
 800aaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return 1;
 800aabc:	2001      	movs	r0, #1
 800aabe:	e7fc      	b.n	800aaba <udp_input_local_match+0x6e>
 800aac0:	2001      	movs	r0, #1
 800aac2:	e7fa      	b.n	800aaba <udp_input_local_match+0x6e>
 800aac4:	2001      	movs	r0, #1
 800aac6:	e7f8      	b.n	800aaba <udp_input_local_match+0x6e>
 800aac8:	2001      	movs	r0, #1
 800aaca:	e7f6      	b.n	800aaba <udp_input_local_match+0x6e>
        return 1;
 800aacc:	2001      	movs	r0, #1
 800aace:	e7f4      	b.n	800aaba <udp_input_local_match+0x6e>
 800aad0:	2001      	movs	r0, #1
 800aad2:	e7f2      	b.n	800aaba <udp_input_local_match+0x6e>
 800aad4:	2001      	movs	r0, #1
 800aad6:	e7f0      	b.n	800aaba <udp_input_local_match+0x6e>
 800aad8:	200044d8 	.word	0x200044d8
 800aadc:	0801bd54 	.word	0x0801bd54
 800aae0:	0801bd84 	.word	0x0801bd84
 800aae4:	08019f6c 	.word	0x08019f6c
 800aae8:	0801bda8 	.word	0x0801bda8

0800aaec <udp_init>:
{
 800aaec:	b508      	push	{r3, lr}
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800aaee:	f008 f803 	bl	8012af8 <rand>
 800aaf2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800aaf6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800aafa:	4b01      	ldr	r3, [pc, #4]	; (800ab00 <udp_init+0x14>)
 800aafc:	8018      	strh	r0, [r3, #0]
}
 800aafe:	bd08      	pop	{r3, pc}
 800ab00:	20000010 	.word	0x20000010

0800ab04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	460f      	mov	r7, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ab0c:	4681      	mov	r9, r0
 800ab0e:	b1d0      	cbz	r0, 800ab46 <udp_input+0x42>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ab10:	b307      	cbz	r7, 800ab54 <udp_input+0x50>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ab12:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800ab16:	2b07      	cmp	r3, #7
 800ab18:	d923      	bls.n	800ab62 <udp_input+0x5e>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ab1a:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ab1e:	4b52      	ldr	r3, [pc, #328]	; (800ac68 <udp_input+0x164>)
 800ab20:	6819      	ldr	r1, [r3, #0]
 800ab22:	6958      	ldr	r0, [r3, #20]
 800ab24:	f001 f83d 	bl	800bba2 <ip4_addr_isbroadcast_u32>
 800ab28:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ab2a:	8820      	ldrh	r0, [r4, #0]
 800ab2c:	f7fb fac6 	bl	80060bc <lwip_htons>
 800ab30:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800ab32:	8860      	ldrh	r0, [r4, #2]
 800ab34:	f7fb fac2 	bl	80060bc <lwip_htons>
 800ab38:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab3a:	4b4c      	ldr	r3, [pc, #304]	; (800ac6c <udp_input+0x168>)
 800ab3c:	681c      	ldr	r4, [r3, #0]
  uncon_pcb = NULL;
 800ab3e:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800ab42:	465e      	mov	r6, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab44:	e019      	b.n	800ab7a <udp_input+0x76>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ab46:	4b4a      	ldr	r3, [pc, #296]	; (800ac70 <udp_input+0x16c>)
 800ab48:	22cf      	movs	r2, #207	; 0xcf
 800ab4a:	494a      	ldr	r1, [pc, #296]	; (800ac74 <udp_input+0x170>)
 800ab4c:	484a      	ldr	r0, [pc, #296]	; (800ac78 <udp_input+0x174>)
 800ab4e:	f007 ffc1 	bl	8012ad4 <printf>
 800ab52:	e7dd      	b.n	800ab10 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ab54:	4b46      	ldr	r3, [pc, #280]	; (800ac70 <udp_input+0x16c>)
 800ab56:	22d0      	movs	r2, #208	; 0xd0
 800ab58:	4948      	ldr	r1, [pc, #288]	; (800ac7c <udp_input+0x178>)
 800ab5a:	4847      	ldr	r0, [pc, #284]	; (800ac78 <udp_input+0x174>)
 800ab5c:	f007 ffba 	bl	8012ad4 <printf>
 800ab60:	e7d7      	b.n	800ab12 <udp_input+0xe>
    pbuf_free(p);
 800ab62:	4648      	mov	r0, r9
 800ab64:	f7fc f8ce 	bl	8006d04 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ab68:	b003      	add	sp, #12
 800ab6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          uncon_pcb = pcb;
 800ab6e:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 800ab70:	8aa3      	ldrh	r3, [r4, #20]
 800ab72:	4553      	cmp	r3, sl
 800ab74:	d026      	beq.n	800abc4 <udp_input+0xc0>
    prev = pcb;
 800ab76:	4626      	mov	r6, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab78:	68e4      	ldr	r4, [r4, #12]
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	d02f      	beq.n	800abde <udp_input+0xda>
    if ((pcb->local_port == dest) &&
 800ab7e:	8a63      	ldrh	r3, [r4, #18]
 800ab80:	42ab      	cmp	r3, r5
 800ab82:	d1f8      	bne.n	800ab76 <udp_input+0x72>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ab84:	4642      	mov	r2, r8
 800ab86:	4639      	mov	r1, r7
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f7ff ff5f 	bl	800aa4c <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d0f1      	beq.n	800ab76 <udp_input+0x72>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ab92:	7c23      	ldrb	r3, [r4, #16]
 800ab94:	f013 0f04 	tst.w	r3, #4
 800ab98:	d1ea      	bne.n	800ab70 <udp_input+0x6c>
        if (uncon_pcb == NULL) {
 800ab9a:	f1bb 0f00 	cmp.w	fp, #0
 800ab9e:	d0e6      	beq.n	800ab6e <udp_input+0x6a>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800aba0:	f1b8 0f00 	cmp.w	r8, #0
 800aba4:	d0e4      	beq.n	800ab70 <udp_input+0x6c>
 800aba6:	4b30      	ldr	r3, [pc, #192]	; (800ac68 <udp_input+0x164>)
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d1df      	bne.n	800ab70 <udp_input+0x6c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800abb0:	f8db 2000 	ldr.w	r2, [fp]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d0da      	beq.n	800ab70 <udp_input+0x6c>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800abba:	6822      	ldr	r2, [r4, #0]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d1d7      	bne.n	800ab70 <udp_input+0x6c>
              uncon_pcb = pcb;
 800abc0:	46a3      	mov	fp, r4
 800abc2:	e7d5      	b.n	800ab70 <udp_input+0x6c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800abc4:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800abc6:	b11b      	cbz	r3, 800abd0 <udp_input+0xcc>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800abc8:	4a27      	ldr	r2, [pc, #156]	; (800ac68 <udp_input+0x164>)
 800abca:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800abcc:	4293      	cmp	r3, r2
 800abce:	d1d2      	bne.n	800ab76 <udp_input+0x72>
        if (prev != NULL) {
 800abd0:	b12e      	cbz	r6, 800abde <udp_input+0xda>
          prev->next = pcb->next;
 800abd2:	68e3      	ldr	r3, [r4, #12]
 800abd4:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800abd6:	4b25      	ldr	r3, [pc, #148]	; (800ac6c <udp_input+0x168>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 800abdc:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800abde:	b184      	cbz	r4, 800ac02 <udp_input+0xfe>
  if (pcb != NULL) {
 800abe0:	b18c      	cbz	r4, 800ac06 <udp_input+0x102>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800abe2:	2108      	movs	r1, #8
 800abe4:	4648      	mov	r0, r9
 800abe6:	f7fc f847 	bl	8006c78 <pbuf_remove_header>
 800abea:	b9a8      	cbnz	r0, 800ac18 <udp_input+0x114>
    if (pcb != NULL) {
 800abec:	b31c      	cbz	r4, 800ac36 <udp_input+0x132>
      if (pcb->recv != NULL) {
 800abee:	69a5      	ldr	r5, [r4, #24]
 800abf0:	b1ed      	cbz	r5, 800ac2e <udp_input+0x12a>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800abf2:	69e0      	ldr	r0, [r4, #28]
 800abf4:	f8cd a000 	str.w	sl, [sp]
 800abf8:	4b21      	ldr	r3, [pc, #132]	; (800ac80 <udp_input+0x17c>)
 800abfa:	464a      	mov	r2, r9
 800abfc:	4621      	mov	r1, r4
 800abfe:	47a8      	blx	r5
 800ac00:	e7b2      	b.n	800ab68 <udp_input+0x64>
    pcb = uncon_pcb;
 800ac02:	465c      	mov	r4, fp
 800ac04:	e7ec      	b.n	800abe0 <udp_input+0xdc>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	4b17      	ldr	r3, [pc, #92]	; (800ac68 <udp_input+0x164>)
 800ac0a:	695b      	ldr	r3, [r3, #20]
  if (for_us) {
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d0e8      	beq.n	800abe2 <udp_input+0xde>
    pbuf_free(p);
 800ac10:	4648      	mov	r0, r9
 800ac12:	f7fc f877 	bl	8006d04 <pbuf_free>
  return;
 800ac16:	e7a7      	b.n	800ab68 <udp_input+0x64>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ac18:	4b15      	ldr	r3, [pc, #84]	; (800ac70 <udp_input+0x16c>)
 800ac1a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ac1e:	4919      	ldr	r1, [pc, #100]	; (800ac84 <udp_input+0x180>)
 800ac20:	4815      	ldr	r0, [pc, #84]	; (800ac78 <udp_input+0x174>)
 800ac22:	f007 ff57 	bl	8012ad4 <printf>
      pbuf_free(p);
 800ac26:	4648      	mov	r0, r9
 800ac28:	f7fc f86c 	bl	8006d04 <pbuf_free>
      goto end;
 800ac2c:	e79c      	b.n	800ab68 <udp_input+0x64>
        pbuf_free(p);
 800ac2e:	4648      	mov	r0, r9
 800ac30:	f7fc f868 	bl	8006d04 <pbuf_free>
        goto end;
 800ac34:	e798      	b.n	800ab68 <udp_input+0x64>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ac36:	f1b8 0f00 	cmp.w	r8, #0
 800ac3a:	d105      	bne.n	800ac48 <udp_input+0x144>
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <udp_input+0x164>)
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac44:	2be0      	cmp	r3, #224	; 0xe0
 800ac46:	d103      	bne.n	800ac50 <udp_input+0x14c>
      pbuf_free(p);
 800ac48:	4648      	mov	r0, r9
 800ac4a:	f7fc f85b 	bl	8006d04 <pbuf_free>
 800ac4e:	e78b      	b.n	800ab68 <udp_input+0x64>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <udp_input+0x164>)
 800ac52:	8999      	ldrh	r1, [r3, #12]
 800ac54:	3108      	adds	r1, #8
 800ac56:	b209      	sxth	r1, r1
 800ac58:	4648      	mov	r0, r9
 800ac5a:	f7fc f84d 	bl	8006cf8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ac5e:	2103      	movs	r1, #3
 800ac60:	4648      	mov	r0, r9
 800ac62:	f000 fddf 	bl	800b824 <icmp_dest_unreach>
 800ac66:	e7ef      	b.n	800ac48 <udp_input+0x144>
 800ac68:	200044d8 	.word	0x200044d8
 800ac6c:	200073e0 	.word	0x200073e0
 800ac70:	0801bd54 	.word	0x0801bd54
 800ac74:	0801bdd0 	.word	0x0801bdd0
 800ac78:	08019f6c 	.word	0x08019f6c
 800ac7c:	0801bde8 	.word	0x0801bde8
 800ac80:	200044e8 	.word	0x200044e8
 800ac84:	0801be04 	.word	0x0801be04

0800ac88 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ac88:	b1b8      	cbz	r0, 800acba <udp_netif_ip_addr_changed+0x32>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	6803      	ldr	r3, [r0, #0]
 800ac8e:	b1a3      	cbz	r3, 800acba <udp_netif_ip_addr_changed+0x32>
 800ac90:	b199      	cbz	r1, 800acba <udp_netif_ip_addr_changed+0x32>
 800ac92:	680b      	ldr	r3, [r1, #0]
 800ac94:	b18b      	cbz	r3, 800acba <udp_netif_ip_addr_changed+0x32>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac96:	4b09      	ldr	r3, [pc, #36]	; (800acbc <udp_netif_ip_addr_changed+0x34>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	b16b      	cbz	r3, 800acb8 <udp_netif_ip_addr_changed+0x30>
{
 800ac9c:	b410      	push	{r4}
 800ac9e:	e001      	b.n	800aca4 <udp_netif_ip_addr_changed+0x1c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	b133      	cbz	r3, 800acb2 <udp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800aca4:	681c      	ldr	r4, [r3, #0]
 800aca6:	6810      	ldr	r0, [r2, #0]
 800aca8:	4284      	cmp	r4, r0
 800acaa:	d1f9      	bne.n	800aca0 <udp_netif_ip_addr_changed+0x18>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800acac:	6808      	ldr	r0, [r1, #0]
 800acae:	6018      	str	r0, [r3, #0]
 800acb0:	e7f6      	b.n	800aca0 <udp_netif_ip_addr_changed+0x18>
      }
    }
  }
}
 800acb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	4770      	bx	lr
 800acba:	4770      	bx	lr
 800acbc:	200073e0 	.word	0x200073e0

0800acc0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800acc0:	b510      	push	{r4, lr}
 800acc2:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800acc4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800acc8:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <etharp_free_entry+0x30>)
 800acca:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800acce:	b138      	cbz	r0, 800ace0 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800acd0:	f7fc f818 	bl	8006d04 <pbuf_free>
    arp_table[i].q = NULL;
 800acd4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	4a05      	ldr	r2, [pc, #20]	; (800acf0 <etharp_free_entry+0x30>)
 800acdc:	2100      	movs	r1, #0
 800acde:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ace0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ace4:	4802      	ldr	r0, [pc, #8]	; (800acf0 <etharp_free_entry+0x30>)
 800ace6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800acea:	2300      	movs	r3, #0
 800acec:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800acee:	bd10      	pop	{r4, pc}
 800acf0:	20003400 	.word	0x20003400

0800acf4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	b083      	sub	sp, #12
 800acfa:	4607      	mov	r7, r0
 800acfc:	4690      	mov	r8, r2
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800acfe:	f04f 0e00 	mov.w	lr, #0
 800ad02:	f8cd e000 	str.w	lr, [sp]
 800ad06:	46f3      	mov	fp, lr
  s16_t old_queue = ARP_TABLE_SIZE;
 800ad08:	f04f 0a0a 	mov.w	sl, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad0c:	4673      	mov	r3, lr
  s16_t empty = ARP_TABLE_SIZE;
 800ad0e:	4656      	mov	r6, sl
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ad10:	46d1      	mov	r9, sl
 800ad12:	f8cd a004 	str.w	sl, [sp, #4]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad16:	e003      	b.n	800ad20 <etharp_find_entry+0x2c>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ad18:	b968      	cbnz	r0, 800ad36 <etharp_find_entry+0x42>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ad1a:	461e      	mov	r6, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	b21b      	sxth	r3, r3
 800ad20:	2b09      	cmp	r3, #9
 800ad22:	dc4b      	bgt.n	800adbc <etharp_find_entry+0xc8>
    u8_t state = arp_table[i].state;
 800ad24:	461c      	mov	r4, r3
 800ad26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ad2a:	485c      	ldr	r0, [pc, #368]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ad2c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800ad30:	7d10      	ldrb	r0, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ad32:	2e0a      	cmp	r6, #10
 800ad34:	d0f0      	beq.n	800ad18 <etharp_find_entry+0x24>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d0f0      	beq.n	800ad1c <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ad3a:	b147      	cbz	r7, 800ad4e <etharp_find_entry+0x5a>
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800ad42:	4d56      	ldr	r5, [pc, #344]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ad44:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
 800ad48:	686d      	ldr	r5, [r5, #4]
 800ad4a:	42aa      	cmp	r2, r5
 800ad4c:	d00e      	beq.n	800ad6c <etharp_find_entry+0x78>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ad4e:	2801      	cmp	r0, #1
 800ad50:	d018      	beq.n	800ad84 <etharp_find_entry+0x90>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ad52:	2801      	cmp	r0, #1
 800ad54:	d9e2      	bls.n	800ad1c <etharp_find_entry+0x28>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ad56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ad5a:	4a50      	ldr	r2, [pc, #320]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ad5c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800ad60:	8a62      	ldrh	r2, [r4, #18]
 800ad62:	4572      	cmp	r2, lr
 800ad64:	d3da      	bcc.n	800ad1c <etharp_find_entry+0x28>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800ad66:	4696      	mov	lr, r2
            old_stable = i;
 800ad68:	4699      	mov	r9, r3
 800ad6a:	e7d7      	b.n	800ad1c <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ad6c:	f1b8 0f00 	cmp.w	r8, #0
 800ad70:	f000 808c 	beq.w	800ae8c <etharp_find_entry+0x198>
 800ad74:	4d49      	ldr	r5, [pc, #292]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ad76:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 800ad7a:	6892      	ldr	r2, [r2, #8]
 800ad7c:	4542      	cmp	r2, r8
 800ad7e:	d1e6      	bne.n	800ad4e <etharp_find_entry+0x5a>
        return i;
 800ad80:	461e      	mov	r6, r3
 800ad82:	e055      	b.n	800ae30 <etharp_find_entry+0x13c>
        if (arp_table[i].q != NULL) {
 800ad84:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ad88:	4844      	ldr	r0, [pc, #272]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ad8a:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
 800ad8e:	b14a      	cbz	r2, 800ada4 <etharp_find_entry+0xb0>
          if (arp_table[i].ctime >= age_queue) {
 800ad90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ad94:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ad98:	8a62      	ldrh	r2, [r4, #18]
 800ad9a:	455a      	cmp	r2, fp
 800ad9c:	d3be      	bcc.n	800ad1c <etharp_find_entry+0x28>
            age_queue = arp_table[i].ctime;
 800ad9e:	4693      	mov	fp, r2
            old_queue = i;
 800ada0:	469a      	mov	sl, r3
 800ada2:	e7bb      	b.n	800ad1c <etharp_find_entry+0x28>
          if (arp_table[i].ctime >= age_pending) {
 800ada4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ada8:	4a3c      	ldr	r2, [pc, #240]	; (800ae9c <etharp_find_entry+0x1a8>)
 800adaa:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800adae:	8a62      	ldrh	r2, [r4, #18]
 800adb0:	9800      	ldr	r0, [sp, #0]
 800adb2:	4282      	cmp	r2, r0
 800adb4:	d3b2      	bcc.n	800ad1c <etharp_find_entry+0x28>
            age_pending = arp_table[i].ctime;
 800adb6:	9200      	str	r2, [sp, #0]
            old_pending = i;
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	e7af      	b.n	800ad1c <etharp_find_entry+0x28>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800adbc:	f011 0f02 	tst.w	r1, #2
 800adc0:	d166      	bne.n	800ae90 <etharp_find_entry+0x19c>
 800adc2:	2e0a      	cmp	r6, #10
 800adc4:	d038      	beq.n	800ae38 <etharp_find_entry+0x144>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800adc6:	2e09      	cmp	r6, #9
 800adc8:	dd16      	ble.n	800adf8 <etharp_find_entry+0x104>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800adca:	f1b9 0f09 	cmp.w	r9, #9
 800adce:	dc39      	bgt.n	800ae44 <etharp_find_entry+0x150>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800add0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800add4:	4a31      	ldr	r2, [pc, #196]	; (800ae9c <etharp_find_entry+0x1a8>)
 800add6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d03a      	beq.n	800ae54 <etharp_find_entry+0x160>
 800adde:	4b30      	ldr	r3, [pc, #192]	; (800aea0 <etharp_find_entry+0x1ac>)
 800ade0:	f240 126d 	movw	r2, #365	; 0x16d
 800ade4:	492f      	ldr	r1, [pc, #188]	; (800aea4 <etharp_find_entry+0x1b0>)
 800ade6:	4830      	ldr	r0, [pc, #192]	; (800aea8 <etharp_find_entry+0x1b4>)
 800ade8:	f007 fe74 	bl	8012ad4 <printf>
      i = old_stable;
 800adec:	464e      	mov	r6, r9
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800adee:	2e09      	cmp	r6, #9
 800adf0:	dc34      	bgt.n	800ae5c <etharp_find_entry+0x168>
    etharp_free_entry(i);
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7ff ff64 	bl	800acc0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800adf8:	2e09      	cmp	r6, #9
 800adfa:	dc37      	bgt.n	800ae6c <etharp_find_entry+0x178>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800adfc:	4634      	mov	r4, r6
 800adfe:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ae02:	4a26      	ldr	r2, [pc, #152]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ae04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae08:	7d1b      	ldrb	r3, [r3, #20]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d136      	bne.n	800ae7c <etharp_find_entry+0x188>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ae0e:	b137      	cbz	r7, 800ae1e <etharp_find_entry+0x12a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ae16:	4a21      	ldr	r2, [pc, #132]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ae18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae1c:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800ae1e:	4b1f      	ldr	r3, [pc, #124]	; (800ae9c <etharp_find_entry+0x1a8>)
 800ae20:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ae24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ae28:	2100      	movs	r1, #0
 800ae2a:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ae2c:	f8c2 8008 	str.w	r8, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800ae30:	4630      	mov	r0, r6
 800ae32:	b003      	add	sp, #12
 800ae34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ae38:	f011 0f01 	tst.w	r1, #1
 800ae3c:	d1c3      	bne.n	800adc6 <etharp_find_entry+0xd2>
    return (s16_t)ERR_MEM;
 800ae3e:	f04f 36ff 	mov.w	r6, #4294967295
 800ae42:	e7f5      	b.n	800ae30 <etharp_find_entry+0x13c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	2b09      	cmp	r3, #9
 800ae48:	dd06      	ble.n	800ae58 <etharp_find_entry+0x164>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ae4a:	f1ba 0f09 	cmp.w	sl, #9
 800ae4e:	dc22      	bgt.n	800ae96 <etharp_find_entry+0x1a2>
      i = old_queue;
 800ae50:	4656      	mov	r6, sl
 800ae52:	e7cc      	b.n	800adee <etharp_find_entry+0xfa>
      i = old_stable;
 800ae54:	464e      	mov	r6, r9
 800ae56:	e7ca      	b.n	800adee <etharp_find_entry+0xfa>
      i = old_pending;
 800ae58:	9e01      	ldr	r6, [sp, #4]
 800ae5a:	e7c8      	b.n	800adee <etharp_find_entry+0xfa>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ae5c:	4b10      	ldr	r3, [pc, #64]	; (800aea0 <etharp_find_entry+0x1ac>)
 800ae5e:	f240 127f 	movw	r2, #383	; 0x17f
 800ae62:	4912      	ldr	r1, [pc, #72]	; (800aeac <etharp_find_entry+0x1b8>)
 800ae64:	4810      	ldr	r0, [pc, #64]	; (800aea8 <etharp_find_entry+0x1b4>)
 800ae66:	f007 fe35 	bl	8012ad4 <printf>
 800ae6a:	e7c2      	b.n	800adf2 <etharp_find_entry+0xfe>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ae6c:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <etharp_find_entry+0x1ac>)
 800ae6e:	f240 1283 	movw	r2, #387	; 0x183
 800ae72:	490e      	ldr	r1, [pc, #56]	; (800aeac <etharp_find_entry+0x1b8>)
 800ae74:	480c      	ldr	r0, [pc, #48]	; (800aea8 <etharp_find_entry+0x1b4>)
 800ae76:	f007 fe2d 	bl	8012ad4 <printf>
 800ae7a:	e7bf      	b.n	800adfc <etharp_find_entry+0x108>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ae7c:	4b08      	ldr	r3, [pc, #32]	; (800aea0 <etharp_find_entry+0x1ac>)
 800ae7e:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ae82:	490b      	ldr	r1, [pc, #44]	; (800aeb0 <etharp_find_entry+0x1bc>)
 800ae84:	4808      	ldr	r0, [pc, #32]	; (800aea8 <etharp_find_entry+0x1b4>)
 800ae86:	f007 fe25 	bl	8012ad4 <printf>
 800ae8a:	e7c0      	b.n	800ae0e <etharp_find_entry+0x11a>
        return i;
 800ae8c:	461e      	mov	r6, r3
 800ae8e:	e7cf      	b.n	800ae30 <etharp_find_entry+0x13c>
    return (s16_t)ERR_MEM;
 800ae90:	f04f 36ff 	mov.w	r6, #4294967295
 800ae94:	e7cc      	b.n	800ae30 <etharp_find_entry+0x13c>
      return (s16_t)ERR_MEM;
 800ae96:	f04f 36ff 	mov.w	r6, #4294967295
 800ae9a:	e7c9      	b.n	800ae30 <etharp_find_entry+0x13c>
 800ae9c:	20003400 	.word	0x20003400
 800aea0:	0801c090 	.word	0x0801c090
 800aea4:	0801c0c8 	.word	0x0801c0c8
 800aea8:	08019f6c 	.word	0x08019f6c
 800aeac:	0801c0e0 	.word	0x0801c0e0
 800aeb0:	0801c0f4 	.word	0x0801c0f4

0800aeb4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800aeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	4605      	mov	r5, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	4616      	mov	r6, r2
 800aebe:	461f      	mov	r7, r3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800aec0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800aec4:	2a06      	cmp	r2, #6
 800aec6:	d13b      	bne.n	800af40 <etharp_update_arp_entry+0x8c>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800aec8:	2c00      	cmp	r4, #0
 800aeca:	d041      	beq.n	800af50 <etharp_update_arp_entry+0x9c>
 800aecc:	6820      	ldr	r0, [r4, #0]
 800aece:	2800      	cmp	r0, #0
 800aed0:	d03e      	beq.n	800af50 <etharp_update_arp_entry+0x9c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800aed2:	4629      	mov	r1, r5
 800aed4:	f000 fe65 	bl	800bba2 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d139      	bne.n	800af50 <etharp_update_arp_entry+0x9c>
      ip4_addr_ismulticast(ipaddr)) {
 800aedc:	6822      	ldr	r2, [r4, #0]
 800aede:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800aee2:	2ae0      	cmp	r2, #224	; 0xe0
 800aee4:	d034      	beq.n	800af50 <etharp_update_arp_entry+0x9c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800aee6:	462a      	mov	r2, r5
 800aee8:	4639      	mov	r1, r7
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff ff02 	bl	800acf4 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800aef0:	1e03      	subs	r3, r0, #0
 800aef2:	db30      	blt.n	800af56 <etharp_update_arp_entry+0xa2>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800aef4:	4a1a      	ldr	r2, [pc, #104]	; (800af60 <etharp_update_arp_entry+0xac>)
 800aef6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800aefa:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 800aefe:	2102      	movs	r1, #2
 800af00:	7501      	strb	r1, [r0, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800af02:	6085      	str	r5, [r0, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800af04:	00e1      	lsls	r1, r4, #3
 800af06:	3108      	adds	r1, #8
 800af08:	4411      	add	r1, r2
 800af0a:	6837      	ldr	r7, [r6, #0]
 800af0c:	604f      	str	r7, [r1, #4]
 800af0e:	88b7      	ldrh	r7, [r6, #4]
 800af10:	810f      	strh	r7, [r1, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800af12:	2100      	movs	r1, #0
 800af14:	8241      	strh	r1, [r0, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800af16:	f852 7034 	ldr.w	r7, [r2, r4, lsl #3]
 800af1a:	b1ff      	cbz	r7, 800af5c <etharp_update_arp_entry+0xa8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800af1c:	00e3      	lsls	r3, r4, #3
 800af1e:	460c      	mov	r4, r1
 800af20:	50d1      	str	r1, [r2, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800af22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4633      	mov	r3, r6
 800af2a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800af2e:	4639      	mov	r1, r7
 800af30:	4628      	mov	r0, r5
 800af32:	f001 fb95 	bl	800c660 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800af36:	4638      	mov	r0, r7
 800af38:	f7fb fee4 	bl	8006d04 <pbuf_free>
  }
  return ERR_OK;
 800af3c:	4620      	mov	r0, r4
 800af3e:	e00b      	b.n	800af58 <etharp_update_arp_entry+0xa4>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800af40:	4b08      	ldr	r3, [pc, #32]	; (800af64 <etharp_update_arp_entry+0xb0>)
 800af42:	f240 12a9 	movw	r2, #425	; 0x1a9
 800af46:	4908      	ldr	r1, [pc, #32]	; (800af68 <etharp_update_arp_entry+0xb4>)
 800af48:	4808      	ldr	r0, [pc, #32]	; (800af6c <etharp_update_arp_entry+0xb8>)
 800af4a:	f007 fdc3 	bl	8012ad4 <printf>
 800af4e:	e7bb      	b.n	800aec8 <etharp_update_arp_entry+0x14>
    return ERR_ARG;
 800af50:	f06f 000f 	mvn.w	r0, #15
 800af54:	e000      	b.n	800af58 <etharp_update_arp_entry+0xa4>
    return (err_t)i;
 800af56:	b258      	sxtb	r0, r3
}
 800af58:	b003      	add	sp, #12
 800af5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ERR_OK;
 800af5c:	2000      	movs	r0, #0
 800af5e:	e7fb      	b.n	800af58 <etharp_update_arp_entry+0xa4>
 800af60:	20003400 	.word	0x20003400
 800af64:	0801c090 	.word	0x0801c090
 800af68:	0801c120 	.word	0x0801c120
 800af6c:	08019f6c 	.word	0x08019f6c

0800af70 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800af70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	460f      	mov	r7, r1
 800af78:	4690      	mov	r8, r2
 800af7a:	461d      	mov	r5, r3
 800af7c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800af80:	4681      	mov	r9, r0
 800af82:	2800      	cmp	r0, #0
 800af84:	d042      	beq.n	800b00c <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800af86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af8a:	211c      	movs	r1, #28
 800af8c:	200e      	movs	r0, #14
 800af8e:	f7fb ff1b 	bl	8006dc8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800af92:	4606      	mov	r6, r0
 800af94:	2800      	cmp	r0, #0
 800af96:	d051      	beq.n	800b03c <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800af98:	8943      	ldrh	r3, [r0, #10]
 800af9a:	2b1b      	cmp	r3, #27
 800af9c:	d93e      	bls.n	800b01c <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800af9e:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800afa0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800afa4:	f7fb f88a 	bl	80060bc <lwip_htons>
 800afa8:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800afaa:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 800afae:	2b06      	cmp	r3, #6
 800afb0:	d13c      	bne.n	800b02c <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800afb2:	682b      	ldr	r3, [r5, #0]
 800afb4:	60a3      	str	r3, [r4, #8]
 800afb6:	88ab      	ldrh	r3, [r5, #4]
 800afb8:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800afba:	f8da 3000 	ldr.w	r3, [sl]
 800afbe:	f8c4 3012 	str.w	r3, [r4, #18]
 800afc2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800afc6:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800afc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800afd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800afd6:	2500      	movs	r5, #0
 800afd8:	7025      	strb	r5, [r4, #0]
 800afda:	2301      	movs	r3, #1
 800afdc:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800afde:	2308      	movs	r3, #8
 800afe0:	70a3      	strb	r3, [r4, #2]
 800afe2:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800afe4:	2306      	movs	r3, #6
 800afe6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800afe8:	2304      	movs	r3, #4
 800afea:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800afec:	f640 0306 	movw	r3, #2054	; 0x806
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	4643      	mov	r3, r8
 800aff4:	463a      	mov	r2, r7
 800aff6:	4631      	mov	r1, r6
 800aff8:	4648      	mov	r0, r9
 800affa:	f001 fb31 	bl	800c660 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800affe:	4630      	mov	r0, r6
 800b000:	f7fb fe80 	bl	8006d04 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800b004:	4628      	mov	r0, r5
}
 800b006:	b002      	add	sp, #8
 800b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <etharp_raw+0xd4>)
 800b00e:	f240 4257 	movw	r2, #1111	; 0x457
 800b012:	490d      	ldr	r1, [pc, #52]	; (800b048 <etharp_raw+0xd8>)
 800b014:	480d      	ldr	r0, [pc, #52]	; (800b04c <etharp_raw+0xdc>)
 800b016:	f007 fd5d 	bl	8012ad4 <printf>
 800b01a:	e7b4      	b.n	800af86 <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b01c:	4b09      	ldr	r3, [pc, #36]	; (800b044 <etharp_raw+0xd4>)
 800b01e:	f240 4262 	movw	r2, #1122	; 0x462
 800b022:	490b      	ldr	r1, [pc, #44]	; (800b050 <etharp_raw+0xe0>)
 800b024:	4809      	ldr	r0, [pc, #36]	; (800b04c <etharp_raw+0xdc>)
 800b026:	f007 fd55 	bl	8012ad4 <printf>
 800b02a:	e7b8      	b.n	800af9e <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <etharp_raw+0xd4>)
 800b02e:	f240 4269 	movw	r2, #1129	; 0x469
 800b032:	4908      	ldr	r1, [pc, #32]	; (800b054 <etharp_raw+0xe4>)
 800b034:	4805      	ldr	r0, [pc, #20]	; (800b04c <etharp_raw+0xdc>)
 800b036:	f007 fd4d 	bl	8012ad4 <printf>
 800b03a:	e7ba      	b.n	800afb2 <etharp_raw+0x42>
    return ERR_MEM;
 800b03c:	f04f 30ff 	mov.w	r0, #4294967295
 800b040:	e7e1      	b.n	800b006 <etharp_raw+0x96>
 800b042:	bf00      	nop
 800b044:	0801c090 	.word	0x0801c090
 800b048:	0801c144 	.word	0x0801c144
 800b04c:	08019f6c 	.word	0x08019f6c
 800b050:	0801c154 	.word	0x0801c154
 800b054:	0801c188 	.word	0x0801c188

0800b058 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b058:	b530      	push	{r4, r5, lr}
 800b05a:	b085      	sub	sp, #20
 800b05c:	4604      	mov	r4, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b05e:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b062:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b064:	2501      	movs	r5, #1
 800b066:	9503      	str	r5, [sp, #12]
 800b068:	9102      	str	r1, [sp, #8]
 800b06a:	4904      	ldr	r1, [pc, #16]	; (800b07c <etharp_request_dst+0x24>)
 800b06c:	9101      	str	r1, [sp, #4]
 800b06e:	9400      	str	r4, [sp, #0]
 800b070:	4619      	mov	r1, r3
 800b072:	f7ff ff7d 	bl	800af70 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800b076:	b005      	add	sp, #20
 800b078:	bd30      	pop	{r4, r5, pc}
 800b07a:	bf00      	nop
 800b07c:	08019ef8 	.word	0x08019ef8

0800b080 <etharp_cleanup_netif>:
{
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b084:	2400      	movs	r4, #0
 800b086:	e000      	b.n	800b08a <etharp_cleanup_netif+0xa>
 800b088:	3401      	adds	r4, #1
 800b08a:	2c09      	cmp	r4, #9
 800b08c:	dc12      	bgt.n	800b0b4 <etharp_cleanup_netif+0x34>
    u8_t state = arp_table[i].state;
 800b08e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b092:	4a09      	ldr	r2, [pc, #36]	; (800b0b8 <etharp_cleanup_netif+0x38>)
 800b094:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b098:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0f4      	beq.n	800b088 <etharp_cleanup_netif+0x8>
 800b09e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b0a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	42ab      	cmp	r3, r5
 800b0aa:	d1ed      	bne.n	800b088 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f7ff fe07 	bl	800acc0 <etharp_free_entry>
 800b0b2:	e7e9      	b.n	800b088 <etharp_cleanup_netif+0x8>
}
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20003400 	.word	0x20003400

0800b0bc <etharp_input>:
{
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c0:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b0c2:	b1a9      	cbz	r1, 800b0f0 <etharp_input+0x34>
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800b0c8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b0ca:	882b      	ldrh	r3, [r5, #0]
 800b0cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d0:	d108      	bne.n	800b0e4 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b0d2:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b0d4:	2b06      	cmp	r3, #6
 800b0d6:	d105      	bne.n	800b0e4 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b0d8:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	d102      	bne.n	800b0e4 <etharp_input+0x28>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b0de:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b0e0:	2b08      	cmp	r3, #8
 800b0e2:	d00d      	beq.n	800b100 <etharp_input+0x44>
    pbuf_free(p);
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f7fb fe0d 	bl	8006d04 <pbuf_free>
}
 800b0ea:	b006      	add	sp, #24
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b0f0:	4b1d      	ldr	r3, [pc, #116]	; (800b168 <etharp_input+0xac>)
 800b0f2:	f240 228a 	movw	r2, #650	; 0x28a
 800b0f6:	491d      	ldr	r1, [pc, #116]	; (800b16c <etharp_input+0xb0>)
 800b0f8:	481d      	ldr	r0, [pc, #116]	; (800b170 <etharp_input+0xb4>)
 800b0fa:	f007 fceb 	bl	8012ad4 <printf>
 800b0fe:	e7f4      	b.n	800b0ea <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b100:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800b104:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b106:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b108:	684b      	ldr	r3, [r1, #4]
 800b10a:	b983      	cbnz	r3, 800b12e <etharp_input+0x72>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b10c:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 800b110:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b112:	2302      	movs	r3, #2
 800b114:	4642      	mov	r2, r8
 800b116:	a905      	add	r1, sp, #20
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff fecb 	bl	800aeb4 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800b11e:	88eb      	ldrh	r3, [r5, #6]
 800b120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b124:	d00e      	beq.n	800b144 <etharp_input+0x88>
  pbuf_free(p);
 800b126:	4620      	mov	r0, r4
 800b128:	f7fb fdec 	bl	8006d04 <pbuf_free>
 800b12c:	e7dd      	b.n	800b0ea <etharp_input+0x2e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b12e:	42bb      	cmp	r3, r7
 800b130:	bf14      	ite	ne
 800b132:	2700      	movne	r7, #0
 800b134:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b136:	f105 0808 	add.w	r8, r5, #8
 800b13a:	b10f      	cbz	r7, 800b140 <etharp_input+0x84>
 800b13c:	2301      	movs	r3, #1
 800b13e:	e7e9      	b.n	800b114 <etharp_input+0x58>
 800b140:	2302      	movs	r3, #2
 800b142:	e7e7      	b.n	800b114 <etharp_input+0x58>
      if (for_us) {
 800b144:	2f00      	cmp	r7, #0
 800b146:	d0ee      	beq.n	800b126 <etharp_input+0x6a>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b148:	f106 0126 	add.w	r1, r6, #38	; 0x26
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b14c:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800b14e:	2202      	movs	r2, #2
 800b150:	9203      	str	r2, [sp, #12]
 800b152:	aa05      	add	r2, sp, #20
 800b154:	9202      	str	r2, [sp, #8]
 800b156:	f8cd 8004 	str.w	r8, [sp, #4]
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	460b      	mov	r3, r1
 800b15e:	4642      	mov	r2, r8
 800b160:	4630      	mov	r0, r6
 800b162:	f7ff ff05 	bl	800af70 <etharp_raw>
 800b166:	e7de      	b.n	800b126 <etharp_input+0x6a>
 800b168:	0801c090 	.word	0x0801c090
 800b16c:	0801c144 	.word	0x0801c144
 800b170:	08019f6c 	.word	0x08019f6c

0800b174 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b174:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b176:	4a02      	ldr	r2, [pc, #8]	; (800b180 <etharp_request+0xc>)
 800b178:	f7ff ff6e 	bl	800b058 <etharp_request_dst>
}
 800b17c:	bd08      	pop	{r3, pc}
 800b17e:	bf00      	nop
 800b180:	08019ef0 	.word	0x08019ef0

0800b184 <etharp_tmr>:
{
 800b184:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b186:	2400      	movs	r4, #0
 800b188:	e005      	b.n	800b196 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d91b      	bls.n	800b1c6 <etharp_tmr+0x42>
        etharp_free_entry(i);
 800b18e:	4620      	mov	r0, r4
 800b190:	f7ff fd96 	bl	800acc0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b194:	3401      	adds	r4, #1
 800b196:	2c09      	cmp	r4, #9
 800b198:	dc35      	bgt.n	800b206 <etharp_tmr+0x82>
    u8_t state = arp_table[i].state;
 800b19a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b19e:	00da      	lsls	r2, r3, #3
 800b1a0:	4b19      	ldr	r3, [pc, #100]	; (800b208 <etharp_tmr+0x84>)
 800b1a2:	4413      	add	r3, r2
 800b1a4:	7d1a      	ldrb	r2, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	d0f4      	beq.n	800b194 <etharp_tmr+0x10>
      arp_table[i].ctime++;
 800b1aa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b1ae:	00cb      	lsls	r3, r1, #3
 800b1b0:	4915      	ldr	r1, [pc, #84]	; (800b208 <etharp_tmr+0x84>)
 800b1b2:	4419      	add	r1, r3
 800b1b4:	8a4b      	ldrh	r3, [r1, #18]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	824b      	strh	r3, [r1, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b1bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b1c0:	d2e5      	bcs.n	800b18e <etharp_tmr+0xa>
 800b1c2:	2a01      	cmp	r2, #1
 800b1c4:	d0e1      	beq.n	800b18a <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b1c6:	2a03      	cmp	r2, #3
 800b1c8:	d00d      	beq.n	800b1e6 <etharp_tmr+0x62>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b1ca:	2a04      	cmp	r2, #4
 800b1cc:	d013      	beq.n	800b1f6 <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b1ce:	2a01      	cmp	r2, #1
 800b1d0:	d1e0      	bne.n	800b194 <etharp_tmr+0x10>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b1d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b1d6:	00da      	lsls	r2, r3, #3
 800b1d8:	4b0b      	ldr	r3, [pc, #44]	; (800b208 <etharp_tmr+0x84>)
 800b1da:	4413      	add	r3, r2
 800b1dc:	1d19      	adds	r1, r3, #4
 800b1de:	6898      	ldr	r0, [r3, #8]
 800b1e0:	f7ff ffc8 	bl	800b174 <etharp_request>
 800b1e4:	e7d6      	b.n	800b194 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b1e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b1ea:	00da      	lsls	r2, r3, #3
 800b1ec:	4b06      	ldr	r3, [pc, #24]	; (800b208 <etharp_tmr+0x84>)
 800b1ee:	4413      	add	r3, r2
 800b1f0:	2204      	movs	r2, #4
 800b1f2:	751a      	strb	r2, [r3, #20]
 800b1f4:	e7ce      	b.n	800b194 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b1f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b1fa:	00da      	lsls	r2, r3, #3
 800b1fc:	4b02      	ldr	r3, [pc, #8]	; (800b208 <etharp_tmr+0x84>)
 800b1fe:	4413      	add	r3, r2
 800b200:	2202      	movs	r2, #2
 800b202:	751a      	strb	r2, [r3, #20]
 800b204:	e7c6      	b.n	800b194 <etharp_tmr+0x10>
}
 800b206:	bd10      	pop	{r4, pc}
 800b208:	20003400 	.word	0x20003400

0800b20c <etharp_output_to_arp_index>:
{
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	4605      	mov	r5, r0
 800b212:	460e      	mov	r6, r1
 800b214:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b216:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b21a:	4b2f      	ldr	r3, [pc, #188]	; (800b2d8 <etharp_output_to_arp_index+0xcc>)
 800b21c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b220:	7d1b      	ldrb	r3, [r3, #20]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d919      	bls.n	800b25a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b226:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b22a:	4a2b      	ldr	r2, [pc, #172]	; (800b2d8 <etharp_output_to_arp_index+0xcc>)
 800b22c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b230:	7d1b      	ldrb	r3, [r3, #20]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d019      	beq.n	800b26a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b236:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	3308      	adds	r3, #8
 800b23e:	4c26      	ldr	r4, [pc, #152]	; (800b2d8 <etharp_output_to_arp_index+0xcc>)
 800b240:	4423      	add	r3, r4
 800b242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b246:	9200      	str	r2, [sp, #0]
 800b248:	3304      	adds	r3, #4
 800b24a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	f001 fa05 	bl	800c660 <ethernet_output>
}
 800b256:	b002      	add	sp, #8
 800b258:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b25a:	4b20      	ldr	r3, [pc, #128]	; (800b2dc <etharp_output_to_arp_index+0xd0>)
 800b25c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b260:	491f      	ldr	r1, [pc, #124]	; (800b2e0 <etharp_output_to_arp_index+0xd4>)
 800b262:	4820      	ldr	r0, [pc, #128]	; (800b2e4 <etharp_output_to_arp_index+0xd8>)
 800b264:	f007 fc36 	bl	8012ad4 <printf>
 800b268:	e7dd      	b.n	800b226 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b26a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b26e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b272:	8a5b      	ldrh	r3, [r3, #18]
 800b274:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b278:	d81b      	bhi.n	800b2b2 <etharp_output_to_arp_index+0xa6>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b27a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b27e:	d3da      	bcc.n	800b236 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b280:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <etharp_output_to_arp_index+0xcc>)
 800b282:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b286:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b28a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b28e:	00d2      	lsls	r2, r2, #3
 800b290:	3208      	adds	r2, #8
 800b292:	441a      	add	r2, r3
 800b294:	3204      	adds	r2, #4
 800b296:	3104      	adds	r1, #4
 800b298:	4628      	mov	r0, r5
 800b29a:	f7ff fedd 	bl	800b058 <etharp_request_dst>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d1c9      	bne.n	800b236 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b2a2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	; (800b2d8 <etharp_output_to_arp_index+0xcc>)
 800b2a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	751a      	strb	r2, [r3, #20]
 800b2b0:	e7c1      	b.n	800b236 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b2b2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b2b6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800b2ba:	3104      	adds	r1, #4
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f7ff ff59 	bl	800b174 <etharp_request>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d1b7      	bne.n	800b236 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b2c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b2ca:	4a03      	ldr	r2, [pc, #12]	; (800b2d8 <etharp_output_to_arp_index+0xcc>)
 800b2cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2d0:	2203      	movs	r2, #3
 800b2d2:	751a      	strb	r2, [r3, #20]
 800b2d4:	e7af      	b.n	800b236 <etharp_output_to_arp_index+0x2a>
 800b2d6:	bf00      	nop
 800b2d8:	20003400 	.word	0x20003400
 800b2dc:	0801c090 	.word	0x0801c090
 800b2e0:	0801c210 	.word	0x0801c210
 800b2e4:	08019f6c 	.word	0x08019f6c

0800b2e8 <etharp_query>:
{
 800b2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	4680      	mov	r8, r0
 800b2f0:	460e      	mov	r6, r1
 800b2f2:	4617      	mov	r7, r2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b2f4:	f100 0926 	add.w	r9, r0, #38	; 0x26
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	6830      	ldr	r0, [r6, #0]
 800b2fc:	f000 fc51 	bl	800bba2 <ip4_addr_isbroadcast_u32>
 800b300:	2800      	cmp	r0, #0
 800b302:	f040 80ab 	bne.w	800b45c <etharp_query+0x174>
      ip4_addr_ismulticast(ipaddr) ||
 800b306:	6833      	ldr	r3, [r6, #0]
 800b308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b30c:	2ae0      	cmp	r2, #224	; 0xe0
 800b30e:	f000 80a8 	beq.w	800b462 <etharp_query+0x17a>
      ip4_addr_ismulticast(ipaddr) ||
 800b312:	2e00      	cmp	r6, #0
 800b314:	f000 80a8 	beq.w	800b468 <etharp_query+0x180>
      ip4_addr_isany(ipaddr)) {
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 80a8 	beq.w	800b46e <etharp_query+0x186>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b31e:	4642      	mov	r2, r8
 800b320:	2101      	movs	r1, #1
 800b322:	4630      	mov	r0, r6
 800b324:	f7ff fce6 	bl	800acf4 <etharp_find_entry>
  if (i_err < 0) {
 800b328:	1e05      	subs	r5, r0, #0
 800b32a:	db13      	blt.n	800b354 <etharp_query+0x6c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b32c:	b2ab      	uxth	r3, r5
 800b32e:	2b7e      	cmp	r3, #126	; 0x7e
 800b330:	d812      	bhi.n	800b358 <etharp_query+0x70>
  i = (netif_addr_idx_t)i_err;
 800b332:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b334:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800b338:	4b50      	ldr	r3, [pc, #320]	; (800b47c <etharp_query+0x194>)
 800b33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b33e:	7d1b      	ldrb	r3, [r3, #20]
 800b340:	b993      	cbnz	r3, 800b368 <etharp_query+0x80>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b342:	4613      	mov	r3, r2
 800b344:	4a4d      	ldr	r2, [pc, #308]	; (800b47c <etharp_query+0x194>)
 800b346:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b34a:	2401      	movs	r4, #1
 800b34c:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 800b34e:	f8c3 8008 	str.w	r8, [r3, #8]
 800b352:	e00a      	b.n	800b36a <etharp_query+0x82>
    return (err_t)i_err;
 800b354:	b26c      	sxtb	r4, r5
 800b356:	e049      	b.n	800b3ec <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b358:	4b49      	ldr	r3, [pc, #292]	; (800b480 <etharp_query+0x198>)
 800b35a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b35e:	4949      	ldr	r1, [pc, #292]	; (800b484 <etharp_query+0x19c>)
 800b360:	4849      	ldr	r0, [pc, #292]	; (800b488 <etharp_query+0x1a0>)
 800b362:	f007 fbb7 	bl	8012ad4 <printf>
 800b366:	e7e4      	b.n	800b332 <etharp_query+0x4a>
  int is_new_entry = 0;
 800b368:	2400      	movs	r4, #0
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b36a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b36e:	4a43      	ldr	r2, [pc, #268]	; (800b47c <etharp_query+0x194>)
 800b370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b374:	7d1b      	ldrb	r3, [r3, #20]
 800b376:	b183      	cbz	r3, 800b39a <etharp_query+0xb2>
  if (is_new_entry || (q == NULL)) {
 800b378:	b9bc      	cbnz	r4, 800b3aa <etharp_query+0xc2>
 800b37a:	b1b7      	cbz	r7, 800b3aa <etharp_query+0xc2>
  err_t result = ERR_MEM;
 800b37c:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 800b380:	b1df      	cbz	r7, 800b3ba <etharp_query+0xd2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b382:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b386:	4a3d      	ldr	r2, [pc, #244]	; (800b47c <etharp_query+0x194>)
 800b388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b38c:	7d1b      	ldrb	r3, [r3, #20]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d81b      	bhi.n	800b3ca <etharp_query+0xe2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b392:	2b01      	cmp	r3, #1
 800b394:	d12a      	bne.n	800b3ec <etharp_query+0x104>
    p = q;
 800b396:	463c      	mov	r4, r7
 800b398:	e038      	b.n	800b40c <etharp_query+0x124>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b39a:	4b39      	ldr	r3, [pc, #228]	; (800b480 <etharp_query+0x198>)
 800b39c:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b3a0:	493a      	ldr	r1, [pc, #232]	; (800b48c <etharp_query+0x1a4>)
 800b3a2:	4839      	ldr	r0, [pc, #228]	; (800b488 <etharp_query+0x1a0>)
 800b3a4:	f007 fb96 	bl	8012ad4 <printf>
 800b3a8:	e7e6      	b.n	800b378 <etharp_query+0x90>
    result = etharp_request(netif, ipaddr);
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	f7ff fee1 	bl	800b174 <etharp_request>
 800b3b2:	4604      	mov	r4, r0
    if (q == NULL) {
 800b3b4:	2f00      	cmp	r7, #0
 800b3b6:	d1e3      	bne.n	800b380 <etharp_query+0x98>
 800b3b8:	e018      	b.n	800b3ec <etharp_query+0x104>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b3ba:	4b31      	ldr	r3, [pc, #196]	; (800b480 <etharp_query+0x198>)
 800b3bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b3c0:	4933      	ldr	r1, [pc, #204]	; (800b490 <etharp_query+0x1a8>)
 800b3c2:	4831      	ldr	r0, [pc, #196]	; (800b488 <etharp_query+0x1a0>)
 800b3c4:	f007 fb86 	bl	8012ad4 <printf>
 800b3c8:	e7db      	b.n	800b382 <etharp_query+0x9a>
    ETHARP_SET_ADDRHINT(netif, i);
 800b3ca:	f882 50f0 	strb.w	r5, [r2, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b3ce:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3dc:	9200      	str	r2, [sp, #0]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	464a      	mov	r2, r9
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	f001 f93b 	bl	800c660 <ethernet_output>
 800b3ea:	4604      	mov	r4, r0
}
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	b003      	add	sp, #12
 800b3f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b3f4:	4b22      	ldr	r3, [pc, #136]	; (800b480 <etharp_query+0x198>)
 800b3f6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b3fa:	4926      	ldr	r1, [pc, #152]	; (800b494 <etharp_query+0x1ac>)
 800b3fc:	4822      	ldr	r0, [pc, #136]	; (800b488 <etharp_query+0x1a0>)
 800b3fe:	f007 fb69 	bl	8012ad4 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 800b402:	7b23      	ldrb	r3, [r4, #12]
 800b404:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b408:	d122      	bne.n	800b450 <etharp_query+0x168>
      p = p->next;
 800b40a:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800b40c:	b13c      	cbz	r4, 800b41e <etharp_query+0x136>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b40e:	8962      	ldrh	r2, [r4, #10]
 800b410:	8923      	ldrh	r3, [r4, #8]
 800b412:	429a      	cmp	r2, r3
 800b414:	d1f5      	bne.n	800b402 <etharp_query+0x11a>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1eb      	bne.n	800b3f4 <etharp_query+0x10c>
 800b41c:	e7f1      	b.n	800b402 <etharp_query+0x11a>
    int copy_needed = 0;
 800b41e:	2300      	movs	r3, #0
    if (copy_needed) {
 800b420:	b1c3      	cbz	r3, 800b454 <etharp_query+0x16c>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b422:	463a      	mov	r2, r7
 800b424:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b428:	200e      	movs	r0, #14
 800b42a:	f7fb ff03 	bl	8007234 <pbuf_clone>
 800b42e:	4607      	mov	r7, r0
    if (p != NULL) {
 800b430:	b307      	cbz	r7, 800b474 <etharp_query+0x18c>
      if (arp_table[i].q != NULL) {
 800b432:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b436:	4a11      	ldr	r2, [pc, #68]	; (800b47c <etharp_query+0x194>)
 800b438:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b43c:	b108      	cbz	r0, 800b442 <etharp_query+0x15a>
        pbuf_free(arp_table[i].q);
 800b43e:	f7fb fc61 	bl	8006d04 <pbuf_free>
      arp_table[i].q = p;
 800b442:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b446:	4a0d      	ldr	r2, [pc, #52]	; (800b47c <etharp_query+0x194>)
 800b448:	f842 7033 	str.w	r7, [r2, r3, lsl #3]
      result = ERR_OK;
 800b44c:	2400      	movs	r4, #0
 800b44e:	e7cd      	b.n	800b3ec <etharp_query+0x104>
        copy_needed = 1;
 800b450:	2301      	movs	r3, #1
 800b452:	e7e5      	b.n	800b420 <etharp_query+0x138>
      pbuf_ref(p);
 800b454:	4638      	mov	r0, r7
 800b456:	f7fb fdc1 	bl	8006fdc <pbuf_ref>
 800b45a:	e7e9      	b.n	800b430 <etharp_query+0x148>
    return ERR_ARG;
 800b45c:	f06f 040f 	mvn.w	r4, #15
 800b460:	e7c4      	b.n	800b3ec <etharp_query+0x104>
 800b462:	f06f 040f 	mvn.w	r4, #15
 800b466:	e7c1      	b.n	800b3ec <etharp_query+0x104>
 800b468:	f06f 040f 	mvn.w	r4, #15
 800b46c:	e7be      	b.n	800b3ec <etharp_query+0x104>
 800b46e:	f06f 040f 	mvn.w	r4, #15
 800b472:	e7bb      	b.n	800b3ec <etharp_query+0x104>
      result = ERR_MEM;
 800b474:	f04f 34ff 	mov.w	r4, #4294967295
 800b478:	e7b8      	b.n	800b3ec <etharp_query+0x104>
 800b47a:	bf00      	nop
 800b47c:	20003400 	.word	0x20003400
 800b480:	0801c090 	.word	0x0801c090
 800b484:	0801c240 	.word	0x0801c240
 800b488:	08019f6c 	.word	0x08019f6c
 800b48c:	0801c250 	.word	0x0801c250
 800b490:	0801c278 	.word	0x0801c278
 800b494:	0801c284 	.word	0x0801c284

0800b498 <etharp_output>:
{
 800b498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b49a:	b085      	sub	sp, #20
 800b49c:	460f      	mov	r7, r1
 800b49e:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d03d      	beq.n	800b522 <etharp_output+0x8a>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b4a6:	2f00      	cmp	r7, #0
 800b4a8:	d043      	beq.n	800b532 <etharp_output+0x9a>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b4aa:	2d00      	cmp	r5, #0
 800b4ac:	d049      	beq.n	800b542 <etharp_output+0xaa>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	6828      	ldr	r0, [r5, #0]
 800b4b2:	f000 fb76 	bl	800bba2 <ip4_addr_isbroadcast_u32>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	f040 8081 	bne.w	800b5c0 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b4be:	682a      	ldr	r2, [r5, #0]
 800b4c0:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800b4c4:	29e0      	cmp	r1, #224	; 0xe0
 800b4c6:	d044      	beq.n	800b552 <etharp_output+0xba>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b4c8:	6871      	ldr	r1, [r6, #4]
 800b4ca:	68b0      	ldr	r0, [r6, #8]
 800b4cc:	4051      	eors	r1, r2
 800b4ce:	4201      	tst	r1, r0
 800b4d0:	d009      	beq.n	800b4e6 <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 800b4d2:	b292      	uxth	r2, r2
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b4d4:	f64f 61a9 	movw	r1, #65193	; 0xfea9
 800b4d8:	428a      	cmp	r2, r1
 800b4da:	d004      	beq.n	800b4e6 <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b4dc:	68f2      	ldr	r2, [r6, #12]
 800b4de:	2a00      	cmp	r2, #0
 800b4e0:	d07a      	beq.n	800b5d8 <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 800b4e2:	f106 050c 	add.w	r5, r6, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b4e6:	493e      	ldr	r1, [pc, #248]	; (800b5e0 <etharp_output+0x148>)
 800b4e8:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 800b4ec:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800b4f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b4f4:	7d09      	ldrb	r1, [r1, #20]
 800b4f6:	2901      	cmp	r1, #1
 800b4f8:	d943      	bls.n	800b582 <etharp_output+0xea>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	4838      	ldr	r0, [pc, #224]	; (800b5e0 <etharp_output+0x148>)
 800b4fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b502:	6889      	ldr	r1, [r1, #8]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b504:	42b1      	cmp	r1, r6
 800b506:	d13c      	bne.n	800b582 <etharp_output+0xea>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b508:	682c      	ldr	r4, [r5, #0]
 800b50a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800b50e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b512:	6849      	ldr	r1, [r1, #4]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b514:	428c      	cmp	r4, r1
 800b516:	d134      	bne.n	800b582 <etharp_output+0xea>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b518:	4639      	mov	r1, r7
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7ff fe76 	bl	800b20c <etharp_output_to_arp_index>
 800b520:	e058      	b.n	800b5d4 <etharp_output+0x13c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b522:	4b30      	ldr	r3, [pc, #192]	; (800b5e4 <etharp_output+0x14c>)
 800b524:	f240 321e 	movw	r2, #798	; 0x31e
 800b528:	492f      	ldr	r1, [pc, #188]	; (800b5e8 <etharp_output+0x150>)
 800b52a:	4830      	ldr	r0, [pc, #192]	; (800b5ec <etharp_output+0x154>)
 800b52c:	f007 fad2 	bl	8012ad4 <printf>
 800b530:	e7b9      	b.n	800b4a6 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b532:	4b2c      	ldr	r3, [pc, #176]	; (800b5e4 <etharp_output+0x14c>)
 800b534:	f240 321f 	movw	r2, #799	; 0x31f
 800b538:	492d      	ldr	r1, [pc, #180]	; (800b5f0 <etharp_output+0x158>)
 800b53a:	482c      	ldr	r0, [pc, #176]	; (800b5ec <etharp_output+0x154>)
 800b53c:	f007 faca 	bl	8012ad4 <printf>
 800b540:	e7b3      	b.n	800b4aa <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b542:	4b28      	ldr	r3, [pc, #160]	; (800b5e4 <etharp_output+0x14c>)
 800b544:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b548:	492a      	ldr	r1, [pc, #168]	; (800b5f4 <etharp_output+0x15c>)
 800b54a:	4828      	ldr	r0, [pc, #160]	; (800b5ec <etharp_output+0x154>)
 800b54c:	f007 fac2 	bl	8012ad4 <printf>
 800b550:	e7ad      	b.n	800b4ae <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b552:	2301      	movs	r3, #1
 800b554:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b558:	2300      	movs	r3, #0
 800b55a:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b55e:	235e      	movs	r3, #94	; 0x5e
 800b560:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b564:	786b      	ldrb	r3, [r5, #1]
 800b566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b56a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b56e:	78ab      	ldrb	r3, [r5, #2]
 800b570:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b574:	78eb      	ldrb	r3, [r5, #3]
 800b576:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800b57a:	ab02      	add	r3, sp, #8
 800b57c:	e021      	b.n	800b5c2 <etharp_output+0x12a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b57e:	3301      	adds	r3, #1
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b09      	cmp	r3, #9
 800b584:	d816      	bhi.n	800b5b4 <etharp_output+0x11c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b586:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800b58a:	4c15      	ldr	r4, [pc, #84]	; (800b5e0 <etharp_output+0x148>)
 800b58c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800b590:	7d02      	ldrb	r2, [r0, #20]
 800b592:	2a01      	cmp	r2, #1
 800b594:	d9f3      	bls.n	800b57e <etharp_output+0xe6>
          (arp_table[i].netif == netif) &&
 800b596:	6882      	ldr	r2, [r0, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b598:	42b2      	cmp	r2, r6
 800b59a:	d1f0      	bne.n	800b57e <etharp_output+0xe6>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b59c:	682a      	ldr	r2, [r5, #0]
 800b59e:	6841      	ldr	r1, [r0, #4]
          (arp_table[i].netif == netif) &&
 800b5a0:	428a      	cmp	r2, r1
 800b5a2:	d1ec      	bne.n	800b57e <etharp_output+0xe6>
        ETHARP_SET_ADDRHINT(netif, i);
 800b5a4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7ff fe2d 	bl	800b20c <etharp_output_to_arp_index>
 800b5b2:	e00f      	b.n	800b5d4 <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 800b5b4:	463a      	mov	r2, r7
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff fe95 	bl	800b2e8 <etharp_query>
 800b5be:	e009      	b.n	800b5d4 <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <etharp_output+0x160>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b5c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5c6:	9200      	str	r2, [sp, #0]
 800b5c8:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f001 f846 	bl	800c660 <ethernet_output>
}
 800b5d4:	b005      	add	sp, #20
 800b5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800b5d8:	f06f 0003 	mvn.w	r0, #3
 800b5dc:	e7fa      	b.n	800b5d4 <etharp_output+0x13c>
 800b5de:	bf00      	nop
 800b5e0:	20003400 	.word	0x20003400
 800b5e4:	0801c090 	.word	0x0801c090
 800b5e8:	0801c144 	.word	0x0801c144
 800b5ec:	08019f6c 	.word	0x08019f6c
 800b5f0:	0801c278 	.word	0x0801c278
 800b5f4:	0801c1f0 	.word	0x0801c1f0
 800b5f8:	08019ef0 	.word	0x08019ef0

0800b5fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	4606      	mov	r6, r0
 800b604:	4688      	mov	r8, r1
 800b606:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b608:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b60c:	2124      	movs	r1, #36	; 0x24
 800b60e:	2022      	movs	r0, #34	; 0x22
 800b610:	f7fb fbda 	bl	8006dc8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800b614:	2800      	cmp	r0, #0
 800b616:	d03b      	beq.n	800b690 <icmp_send_response+0x94>
 800b618:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b61a:	8943      	ldrh	r3, [r0, #10]
 800b61c:	2b23      	cmp	r3, #35	; 0x23
 800b61e:	d93a      	bls.n	800b696 <icmp_send_response+0x9a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b620:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b624:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800b626:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800b62a:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	7123      	strb	r3, [r4, #4]
 800b630:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800b632:	71a3      	strb	r3, [r4, #6]
 800b634:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b636:	686b      	ldr	r3, [r5, #4]
 800b638:	6872      	ldr	r2, [r6, #4]
 800b63a:	6816      	ldr	r6, [r2, #0]
 800b63c:	6850      	ldr	r0, [r2, #4]
 800b63e:	6891      	ldr	r1, [r2, #8]
 800b640:	68d7      	ldr	r7, [r2, #12]
 800b642:	609e      	str	r6, [r3, #8]
 800b644:	60d8      	str	r0, [r3, #12]
 800b646:	6119      	str	r1, [r3, #16]
 800b648:	615f      	str	r7, [r3, #20]
 800b64a:	6916      	ldr	r6, [r2, #16]
 800b64c:	6950      	ldr	r0, [r2, #20]
 800b64e:	6991      	ldr	r1, [r2, #24]
 800b650:	619e      	str	r6, [r3, #24]
 800b652:	61d8      	str	r0, [r3, #28]
 800b654:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b656:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800b65a:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b65c:	a805      	add	r0, sp, #20
 800b65e:	f000 f907 	bl	800b870 <ip4_route>
#endif
  if (netif != NULL) {
 800b662:	4607      	mov	r7, r0
 800b664:	b188      	cbz	r0, 800b68a <icmp_send_response+0x8e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b666:	2600      	movs	r6, #0
 800b668:	70a6      	strb	r6, [r4, #2]
 800b66a:	70e6      	strb	r6, [r4, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800b66c:	8969      	ldrh	r1, [r5, #10]
 800b66e:	4620      	mov	r0, r4
 800b670:	f7fa fd65 	bl	800613e <inet_chksum>
 800b674:	8060      	strh	r0, [r4, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b676:	9702      	str	r7, [sp, #8]
 800b678:	2301      	movs	r3, #1
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	9600      	str	r6, [sp, #0]
 800b67e:	23ff      	movs	r3, #255	; 0xff
 800b680:	aa05      	add	r2, sp, #20
 800b682:	4631      	mov	r1, r6
 800b684:	4628      	mov	r0, r5
 800b686:	f000 fa77 	bl	800bb78 <ip4_output_if>
  }
  pbuf_free(q);
 800b68a:	4628      	mov	r0, r5
 800b68c:	f7fb fb3a 	bl	8006d04 <pbuf_free>
}
 800b690:	b006      	add	sp, #24
 800b692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b696:	4b04      	ldr	r3, [pc, #16]	; (800b6a8 <icmp_send_response+0xac>)
 800b698:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b69c:	4903      	ldr	r1, [pc, #12]	; (800b6ac <icmp_send_response+0xb0>)
 800b69e:	4804      	ldr	r0, [pc, #16]	; (800b6b0 <icmp_send_response+0xb4>)
 800b6a0:	f007 fa18 	bl	8012ad4 <printf>
 800b6a4:	e7bc      	b.n	800b620 <icmp_send_response+0x24>
 800b6a6:	bf00      	nop
 800b6a8:	0801c2a0 	.word	0x0801c2a0
 800b6ac:	0801c2d8 	.word	0x0801c2d8
 800b6b0:	08019f6c 	.word	0x08019f6c

0800b6b4 <icmp_input>:
{
 800b6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800b6bc:	4b53      	ldr	r3, [pc, #332]	; (800b80c <icmp_input+0x158>)
 800b6be:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800b6c0:	783b      	ldrb	r3, [r7, #0]
 800b6c2:	f003 030f 	and.w	r3, r3, #15
 800b6c6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800b6ca:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800b6cc:	2c13      	cmp	r4, #19
 800b6ce:	d916      	bls.n	800b6fe <icmp_input+0x4a>
 800b6d0:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800b6d2:	8943      	ldrh	r3, [r0, #10]
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d912      	bls.n	800b6fe <icmp_input+0x4a>
  type = *((u8_t *)p->payload);
 800b6d8:	6843      	ldr	r3, [r0, #4]
 800b6da:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	f040 8086 	bne.w	800b7ee <icmp_input+0x13a>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b6e2:	4b4a      	ldr	r3, [pc, #296]	; (800b80c <icmp_input+0x158>)
 800b6e4:	6958      	ldr	r0, [r3, #20]
 800b6e6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800b6ea:	2be0      	cmp	r3, #224	; 0xe0
 800b6ec:	d01e      	beq.n	800b72c <icmp_input+0x78>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b6ee:	4b47      	ldr	r3, [pc, #284]	; (800b80c <icmp_input+0x158>)
 800b6f0:	6819      	ldr	r1, [r3, #0]
 800b6f2:	f000 fa56 	bl	800bba2 <ip4_addr_isbroadcast_u32>
 800b6f6:	b9c8      	cbnz	r0, 800b72c <icmp_input+0x78>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b6f8:	892b      	ldrh	r3, [r5, #8]
 800b6fa:	2b07      	cmp	r3, #7
 800b6fc:	d805      	bhi.n	800b70a <icmp_input+0x56>
  pbuf_free(p);
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7fb fb00 	bl	8006d04 <pbuf_free>
}
 800b704:	b005      	add	sp, #20
 800b706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (inet_chksum_pbuf(p) != 0) {
 800b70a:	4628      	mov	r0, r5
 800b70c:	f7fa fd1d 	bl	800614a <inet_chksum_pbuf>
 800b710:	b980      	cbnz	r0, 800b734 <icmp_input+0x80>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b712:	f108 090e 	add.w	r9, r8, #14
 800b716:	4649      	mov	r1, r9
 800b718:	4628      	mov	r0, r5
 800b71a:	f7fb faa8 	bl	8006c6e <pbuf_add_header>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d03e      	beq.n	800b7a0 <icmp_input+0xec>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b722:	892a      	ldrh	r2, [r5, #8]
 800b724:	1913      	adds	r3, r2, r4
 800b726:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800b728:	428a      	cmp	r2, r1
 800b72a:	d907      	bls.n	800b73c <icmp_input+0x88>
  pbuf_free(p);
 800b72c:	4628      	mov	r0, r5
 800b72e:	f7fb fae9 	bl	8006d04 <pbuf_free>
  return;
 800b732:	e7e7      	b.n	800b704 <icmp_input+0x50>
          pbuf_free(p);
 800b734:	4628      	mov	r0, r5
 800b736:	f7fb fae5 	bl	8006d04 <pbuf_free>
          return;
 800b73a:	e7e3      	b.n	800b704 <icmp_input+0x50>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b73c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b740:	200e      	movs	r0, #14
 800b742:	f7fb fb41 	bl	8006dc8 <pbuf_alloc>
        if (r == NULL) {
 800b746:	4604      	mov	r4, r0
 800b748:	2800      	cmp	r0, #0
 800b74a:	d0ef      	beq.n	800b72c <icmp_input+0x78>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b74c:	8942      	ldrh	r2, [r0, #10]
 800b74e:	f108 0308 	add.w	r3, r8, #8
 800b752:	429a      	cmp	r2, r3
 800b754:	d313      	bcc.n	800b77e <icmp_input+0xca>
        MEMCPY(r->payload, iphdr_in, hlen);
 800b756:	4642      	mov	r2, r8
 800b758:	4639      	mov	r1, r7
 800b75a:	6840      	ldr	r0, [r0, #4]
 800b75c:	f007 f97e 	bl	8012a5c <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800b760:	4641      	mov	r1, r8
 800b762:	4620      	mov	r0, r4
 800b764:	f7fb fa88 	bl	8006c78 <pbuf_remove_header>
 800b768:	b960      	cbnz	r0, 800b784 <icmp_input+0xd0>
        if (pbuf_copy(r, p) != ERR_OK) {
 800b76a:	4629      	mov	r1, r5
 800b76c:	4620      	mov	r0, r4
 800b76e:	f7fb fc87 	bl	8007080 <pbuf_copy>
 800b772:	b988      	cbnz	r0, 800b798 <icmp_input+0xe4>
        pbuf_free(p);
 800b774:	4628      	mov	r0, r5
 800b776:	f7fb fac5 	bl	8006d04 <pbuf_free>
        p = r;
 800b77a:	4625      	mov	r5, r4
 800b77c:	e015      	b.n	800b7aa <icmp_input+0xf6>
          pbuf_free(r);
 800b77e:	f7fb fac1 	bl	8006d04 <pbuf_free>
          goto icmperr;
 800b782:	e7d3      	b.n	800b72c <icmp_input+0x78>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b784:	4b22      	ldr	r3, [pc, #136]	; (800b810 <icmp_input+0x15c>)
 800b786:	22b6      	movs	r2, #182	; 0xb6
 800b788:	4922      	ldr	r1, [pc, #136]	; (800b814 <icmp_input+0x160>)
 800b78a:	4823      	ldr	r0, [pc, #140]	; (800b818 <icmp_input+0x164>)
 800b78c:	f007 f9a2 	bl	8012ad4 <printf>
          pbuf_free(r);
 800b790:	4620      	mov	r0, r4
 800b792:	f7fb fab7 	bl	8006d04 <pbuf_free>
          goto icmperr;
 800b796:	e7c9      	b.n	800b72c <icmp_input+0x78>
          pbuf_free(r);
 800b798:	4620      	mov	r0, r4
 800b79a:	f7fb fab3 	bl	8006d04 <pbuf_free>
          goto icmperr;
 800b79e:	e7c5      	b.n	800b72c <icmp_input+0x78>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f7fb fa68 	bl	8006c78 <pbuf_remove_header>
 800b7a8:	bb28      	cbnz	r0, 800b7f6 <icmp_input+0x142>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b7aa:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800b7ac:	4641      	mov	r1, r8
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f7fb fa5d 	bl	8006c6e <pbuf_add_header>
 800b7b4:	b9d8      	cbnz	r0, 800b7ee <icmp_input+0x13a>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b7b6:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800b7b8:	4b14      	ldr	r3, [pc, #80]	; (800b80c <icmp_input+0x158>)
 800b7ba:	695a      	ldr	r2, [r3, #20]
 800b7bc:	60ca      	str	r2, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	610b      	str	r3, [r1, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	7023      	strb	r3, [r4, #0]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800b7c6:	8863      	ldrh	r3, [r4, #2]
 800b7c8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d919      	bls.n	800b804 <icmp_input+0x150>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800b7d0:	3309      	adds	r3, #9
 800b7d2:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b7d4:	23ff      	movs	r3, #255	; 0xff
 800b7d6:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b7d8:	2200      	movs	r2, #0
 800b7da:	728a      	strb	r2, [r1, #10]
 800b7dc:	72ca      	strb	r2, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b7de:	9602      	str	r6, [sp, #8]
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	9101      	str	r1, [sp, #4]
 800b7e4:	9200      	str	r2, [sp, #0]
 800b7e6:	490d      	ldr	r1, [pc, #52]	; (800b81c <icmp_input+0x168>)
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f000 f9c5 	bl	800bb78 <ip4_output_if>
  pbuf_free(p);
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f7fb fa88 	bl	8006d04 <pbuf_free>
  return;
 800b7f4:	e786      	b.n	800b704 <icmp_input+0x50>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b7f6:	4b06      	ldr	r3, [pc, #24]	; (800b810 <icmp_input+0x15c>)
 800b7f8:	22c7      	movs	r2, #199	; 0xc7
 800b7fa:	4909      	ldr	r1, [pc, #36]	; (800b820 <icmp_input+0x16c>)
 800b7fc:	4806      	ldr	r0, [pc, #24]	; (800b818 <icmp_input+0x164>)
 800b7fe:	f007 f969 	bl	8012ad4 <printf>
          goto icmperr;
 800b802:	e793      	b.n	800b72c <icmp_input+0x78>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800b804:	3308      	adds	r3, #8
 800b806:	8063      	strh	r3, [r4, #2]
 800b808:	e7e4      	b.n	800b7d4 <icmp_input+0x120>
 800b80a:	bf00      	nop
 800b80c:	200044d8 	.word	0x200044d8
 800b810:	0801c2a0 	.word	0x0801c2a0
 800b814:	0801c304 	.word	0x0801c304
 800b818:	08019f6c 	.word	0x08019f6c
 800b81c:	200044ec 	.word	0x200044ec
 800b820:	0801c33c 	.word	0x0801c33c

0800b824 <icmp_dest_unreach>:
{
 800b824:	b508      	push	{r3, lr}
 800b826:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800b828:	2103      	movs	r1, #3
 800b82a:	f7ff fee7 	bl	800b5fc <icmp_send_response>
}
 800b82e:	bd08      	pop	{r3, pc}

0800b830 <icmp_time_exceeded>:
{
 800b830:	b508      	push	{r3, lr}
 800b832:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800b834:	210b      	movs	r1, #11
 800b836:	f7ff fee1 	bl	800b5fc <icmp_send_response>
}
 800b83a:	bd08      	pop	{r3, pc}

0800b83c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b83c:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b83e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800b842:	f013 0f01 	tst.w	r3, #1
 800b846:	d00d      	beq.n	800b864 <ip4_input_accept+0x28>
 800b848:	4601      	mov	r1, r0
 800b84a:	6843      	ldr	r3, [r0, #4]
 800b84c:	b163      	cbz	r3, 800b868 <ip4_input_accept+0x2c>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b84e:	4a07      	ldr	r2, [pc, #28]	; (800b86c <ip4_input_accept+0x30>)
 800b850:	6950      	ldr	r0, [r2, #20]
 800b852:	4283      	cmp	r3, r0
 800b854:	d004      	beq.n	800b860 <ip4_input_accept+0x24>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b856:	f000 f9a4 	bl	800bba2 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b85a:	b908      	cbnz	r0, 800b860 <ip4_input_accept+0x24>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b85c:	2000      	movs	r0, #0
 800b85e:	e002      	b.n	800b866 <ip4_input_accept+0x2a>
      return 1;
 800b860:	2001      	movs	r0, #1
 800b862:	e000      	b.n	800b866 <ip4_input_accept+0x2a>
  return 0;
 800b864:	2000      	movs	r0, #0
}
 800b866:	bd08      	pop	{r3, pc}
  return 0;
 800b868:	2000      	movs	r0, #0
 800b86a:	e7fc      	b.n	800b866 <ip4_input_accept+0x2a>
 800b86c:	200044d8 	.word	0x200044d8

0800b870 <ip4_route>:
{
 800b870:	b430      	push	{r4, r5}
 800b872:	4604      	mov	r4, r0
  NETIF_FOREACH(netif) {
 800b874:	4b16      	ldr	r3, [pc, #88]	; (800b8d0 <ip4_route+0x60>)
 800b876:	6818      	ldr	r0, [r3, #0]
 800b878:	e000      	b.n	800b87c <ip4_route+0xc>
 800b87a:	6800      	ldr	r0, [r0, #0]
 800b87c:	b1b0      	cbz	r0, 800b8ac <ip4_route+0x3c>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b87e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800b882:	f013 0f01 	tst.w	r3, #1
 800b886:	d0f8      	beq.n	800b87a <ip4_route+0xa>
 800b888:	f013 0f04 	tst.w	r3, #4
 800b88c:	d0f5      	beq.n	800b87a <ip4_route+0xa>
 800b88e:	6842      	ldr	r2, [r0, #4]
 800b890:	2a00      	cmp	r2, #0
 800b892:	d0f2      	beq.n	800b87a <ip4_route+0xa>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b894:	6821      	ldr	r1, [r4, #0]
 800b896:	6885      	ldr	r5, [r0, #8]
 800b898:	404a      	eors	r2, r1
 800b89a:	422a      	tst	r2, r5
 800b89c:	d015      	beq.n	800b8ca <ip4_route+0x5a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b89e:	f013 0f02 	tst.w	r3, #2
 800b8a2:	d1ea      	bne.n	800b87a <ip4_route+0xa>
 800b8a4:	68c3      	ldr	r3, [r0, #12]
 800b8a6:	4299      	cmp	r1, r3
 800b8a8:	d1e7      	bne.n	800b87a <ip4_route+0xa>
 800b8aa:	e00e      	b.n	800b8ca <ip4_route+0x5a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b8ac:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <ip4_route+0x64>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	b15b      	cbz	r3, 800b8ca <ip4_route+0x5a>
 800b8b2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800b8b6:	f002 0205 	and.w	r2, r2, #5
 800b8ba:	2a05      	cmp	r2, #5
 800b8bc:	d105      	bne.n	800b8ca <ip4_route+0x5a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b8be:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b8c0:	b11a      	cbz	r2, 800b8ca <ip4_route+0x5a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b8c2:	7822      	ldrb	r2, [r4, #0]
 800b8c4:	2a7f      	cmp	r2, #127	; 0x7f
 800b8c6:	d000      	beq.n	800b8ca <ip4_route+0x5a>
  return netif_default;
 800b8c8:	4618      	mov	r0, r3
}
 800b8ca:	bc30      	pop	{r4, r5}
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	200073b8 	.word	0x200073b8
 800b8d4:	200073bc 	.word	0x200073bc

0800b8d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b8de:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800b8e2:	f898 3000 	ldrb.w	r3, [r8]
 800b8e6:	091a      	lsrs	r2, r3, #4
 800b8e8:	2a04      	cmp	r2, #4
 800b8ea:	d004      	beq.n	800b8f6 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b8ec:	f7fb fa0a 	bl	8006d04 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f6:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b8f8:	f003 030f 	and.w	r3, r3, #15
 800b8fc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800b900:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b902:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800b906:	f7fa fbd9 	bl	80060bc <lwip_htons>
 800b90a:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800b90c:	8923      	ldrh	r3, [r4, #8]
 800b90e:	4283      	cmp	r3, r0
 800b910:	d81c      	bhi.n	800b94c <ip4_input+0x74>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b912:	8963      	ldrh	r3, [r4, #10]
 800b914:	42ab      	cmp	r3, r5
 800b916:	d31e      	bcc.n	800b956 <ip4_input+0x7e>
 800b918:	8923      	ldrh	r3, [r4, #8]
 800b91a:	42b3      	cmp	r3, r6
 800b91c:	d31b      	bcc.n	800b956 <ip4_input+0x7e>
 800b91e:	2d13      	cmp	r5, #19
 800b920:	d919      	bls.n	800b956 <ip4_input+0x7e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b922:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b926:	4a52      	ldr	r2, [pc, #328]	; (800ba70 <ip4_input+0x198>)
 800b928:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b92a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b92e:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b934:	2be0      	cmp	r3, #224	; 0xe0
 800b936:	d112      	bne.n	800b95e <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b938:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b93c:	f013 0f01 	tst.w	r3, #1
 800b940:	d023      	beq.n	800b98a <ip4_input+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d165      	bne.n	800ba14 <ip4_input+0x13c>
      netif = NULL;
 800b948:	2500      	movs	r5, #0
 800b94a:	e01f      	b.n	800b98c <ip4_input+0xb4>
    pbuf_realloc(p, iphdr_len);
 800b94c:	4601      	mov	r1, r0
 800b94e:	4620      	mov	r0, r4
 800b950:	f7fb fae8 	bl	8006f24 <pbuf_realloc>
 800b954:	e7dd      	b.n	800b912 <ip4_input+0x3a>
    pbuf_free(p);
 800b956:	4620      	mov	r0, r4
 800b958:	f7fb f9d4 	bl	8006d04 <pbuf_free>
    return ERR_OK;
 800b95c:	e7c8      	b.n	800b8f0 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800b95e:	4638      	mov	r0, r7
 800b960:	f7ff ff6c 	bl	800b83c <ip4_input_accept>
 800b964:	2800      	cmp	r0, #0
 800b966:	d157      	bne.n	800ba18 <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b968:	4b41      	ldr	r3, [pc, #260]	; (800ba70 <ip4_input+0x198>)
 800b96a:	7d1b      	ldrb	r3, [r3, #20]
 800b96c:	2b7f      	cmp	r3, #127	; 0x7f
 800b96e:	d055      	beq.n	800ba1c <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800b970:	4b40      	ldr	r3, [pc, #256]	; (800ba74 <ip4_input+0x19c>)
 800b972:	681d      	ldr	r5, [r3, #0]
 800b974:	e000      	b.n	800b978 <ip4_input+0xa0>
 800b976:	682d      	ldr	r5, [r5, #0]
 800b978:	b145      	cbz	r5, 800b98c <ip4_input+0xb4>
          if (netif == inp) {
 800b97a:	42bd      	cmp	r5, r7
 800b97c:	d0fb      	beq.n	800b976 <ip4_input+0x9e>
          if (ip4_input_accept(netif)) {
 800b97e:	4628      	mov	r0, r5
 800b980:	f7ff ff5c 	bl	800b83c <ip4_input_accept>
 800b984:	2800      	cmp	r0, #0
 800b986:	d0f6      	beq.n	800b976 <ip4_input+0x9e>
 800b988:	e000      	b.n	800b98c <ip4_input+0xb4>
      netif = NULL;
 800b98a:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b98c:	4639      	mov	r1, r7
 800b98e:	4b38      	ldr	r3, [pc, #224]	; (800ba70 <ip4_input+0x198>)
 800b990:	6918      	ldr	r0, [r3, #16]
 800b992:	f000 f906 	bl	800bba2 <ip4_addr_isbroadcast_u32>
 800b996:	2800      	cmp	r0, #0
 800b998:	d142      	bne.n	800ba20 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b99a:	4b35      	ldr	r3, [pc, #212]	; (800ba70 <ip4_input+0x198>)
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b9a2:	2be0      	cmp	r3, #224	; 0xe0
 800b9a4:	d03c      	beq.n	800ba20 <ip4_input+0x148>
  if (netif == NULL) {
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	d03e      	beq.n	800ba28 <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b9aa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800b9ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	b13b      	cbz	r3, 800b9c6 <ip4_input+0xee>
    p = ip4_reass(p);
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 fbfa 	bl	800c1b0 <ip4_reass>
    if (p == NULL) {
 800b9bc:	4604      	mov	r4, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d096      	beq.n	800b8f0 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800b9c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800b9c6:	4a2a      	ldr	r2, [pc, #168]	; (800ba70 <ip4_input+0x198>)
 800b9c8:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800b9ca:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b9cc:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b9d0:	f898 3000 	ldrb.w	r3, [r8]
 800b9d4:	f003 030f 	and.w	r3, r3, #15
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b9dc:	4649      	mov	r1, r9
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f7fb f94a 	bl	8006c78 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800b9e4:	f898 3009 	ldrb.w	r3, [r8, #9]
 800b9e8:	2b06      	cmp	r3, #6
 800b9ea:	d02e      	beq.n	800ba4a <ip4_input+0x172>
 800b9ec:	2b11      	cmp	r3, #17
 800b9ee:	d01f      	beq.n	800ba30 <ip4_input+0x158>
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d02f      	beq.n	800ba54 <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4b1e      	ldr	r3, [pc, #120]	; (800ba70 <ip4_input+0x198>)
 800b9f8:	6958      	ldr	r0, [r3, #20]
 800b9fa:	f000 f8d2 	bl	800bba2 <ip4_addr_isbroadcast_u32>
 800b9fe:	b928      	cbnz	r0, 800ba0c <ip4_input+0x134>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ba00:	4b1b      	ldr	r3, [pc, #108]	; (800ba70 <ip4_input+0x198>)
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ba08:	2be0      	cmp	r3, #224	; 0xe0
 800ba0a:	d128      	bne.n	800ba5e <ip4_input+0x186>
        pbuf_free(p);
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f7fb f979 	bl	8006d04 <pbuf_free>
        break;
 800ba12:	e011      	b.n	800ba38 <ip4_input+0x160>
      netif = inp;
 800ba14:	463d      	mov	r5, r7
 800ba16:	e7b9      	b.n	800b98c <ip4_input+0xb4>
      netif = inp;
 800ba18:	463d      	mov	r5, r7
 800ba1a:	e7b7      	b.n	800b98c <ip4_input+0xb4>
      netif = NULL;
 800ba1c:	2500      	movs	r5, #0
 800ba1e:	e7b5      	b.n	800b98c <ip4_input+0xb4>
      pbuf_free(p);
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7fb f96f 	bl	8006d04 <pbuf_free>
      return ERR_OK;
 800ba26:	e763      	b.n	800b8f0 <ip4_input+0x18>
    pbuf_free(p);
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f7fb f96b 	bl	8006d04 <pbuf_free>
    return ERR_OK;
 800ba2e:	e75f      	b.n	800b8f0 <ip4_input+0x18>
        udp_input(p, inp);
 800ba30:	4639      	mov	r1, r7
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7ff f866 	bl	800ab04 <udp_input>
  ip_data.current_netif = NULL;
 800ba38:	4b0d      	ldr	r3, [pc, #52]	; (800ba70 <ip4_input+0x198>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ba3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ba40:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ba42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ba44:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ba46:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800ba48:	e752      	b.n	800b8f0 <ip4_input+0x18>
        tcp_input(p, inp);
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f7fd fd5b 	bl	8009508 <tcp_input>
        break;
 800ba52:	e7f1      	b.n	800ba38 <ip4_input+0x160>
        icmp_input(p, inp);
 800ba54:	4639      	mov	r1, r7
 800ba56:	4620      	mov	r0, r4
 800ba58:	f7ff fe2c 	bl	800b6b4 <icmp_input>
        break;
 800ba5c:	e7ec      	b.n	800ba38 <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ba5e:	4649      	mov	r1, r9
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7fb f949 	bl	8006cf8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ba66:	2102      	movs	r1, #2
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f7ff fedb 	bl	800b824 <icmp_dest_unreach>
 800ba6e:	e7cd      	b.n	800ba0c <ip4_input+0x134>
 800ba70:	200044d8 	.word	0x200044d8
 800ba74:	200073b8 	.word	0x200073b8

0800ba78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ba78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	4604      	mov	r4, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	4616      	mov	r6, r2
 800ba84:	4699      	mov	r9, r3
 800ba86:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ba8a:	7b82      	ldrb	r2, [r0, #14]
 800ba8c:	2a01      	cmp	r2, #1
 800ba8e:	d13f      	bne.n	800bb10 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ba90:	2e00      	cmp	r6, #0
 800ba92:	d051      	beq.n	800bb38 <ip4_output_if_src+0xc0>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ba94:	2114      	movs	r1, #20
 800ba96:	4620      	mov	r0, r4
 800ba98:	f7fb f8e9 	bl	8006c6e <pbuf_add_header>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d159      	bne.n	800bb54 <ip4_output_if_src+0xdc>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800baa0:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800baa2:	8963      	ldrh	r3, [r4, #10]
 800baa4:	2b13      	cmp	r3, #19
 800baa6:	d93b      	bls.n	800bb20 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800baa8:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800baac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800bab0:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bab2:	6833      	ldr	r3, [r6, #0]
 800bab4:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bab6:	2345      	movs	r3, #69	; 0x45
 800bab8:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800baba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800babe:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bac0:	8920      	ldrh	r0, [r4, #8]
 800bac2:	f7fa fafb 	bl	80060bc <lwip_htons>
 800bac6:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bac8:	2300      	movs	r3, #0
 800baca:	71ab      	strb	r3, [r5, #6]
 800bacc:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bace:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800bb74 <ip4_output_if_src+0xfc>
 800bad2:	f8b9 0000 	ldrh.w	r0, [r9]
 800bad6:	f7fa faf1 	bl	80060bc <lwip_htons>
 800bada:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800badc:	f8b9 3000 	ldrh.w	r3, [r9]
 800bae0:	3301      	adds	r3, #1
 800bae2:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800bae6:	b31f      	cbz	r7, 800bb30 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800baec:	2300      	movs	r3, #0
 800baee:	72ab      	strb	r3, [r5, #10]
 800baf0:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800baf2:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800baf6:	b113      	cbz	r3, 800bafe <ip4_output_if_src+0x86>
 800baf8:	8922      	ldrh	r2, [r4, #8]
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d324      	bcc.n	800bb48 <ip4_output_if_src+0xd0>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800bafe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bb02:	4632      	mov	r2, r6
 800bb04:	4621      	mov	r1, r4
 800bb06:	4640      	mov	r0, r8
 800bb08:	4798      	blx	r3
}
 800bb0a:	b003      	add	sp, #12
 800bb0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bb10:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <ip4_output_if_src+0xe8>)
 800bb12:	f44f 7255 	mov.w	r2, #852	; 0x354
 800bb16:	4913      	ldr	r1, [pc, #76]	; (800bb64 <ip4_output_if_src+0xec>)
 800bb18:	4813      	ldr	r0, [pc, #76]	; (800bb68 <ip4_output_if_src+0xf0>)
 800bb1a:	f006 ffdb 	bl	8012ad4 <printf>
 800bb1e:	e7b7      	b.n	800ba90 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <ip4_output_if_src+0xe8>)
 800bb22:	f44f 7262 	mov.w	r2, #904	; 0x388
 800bb26:	4911      	ldr	r1, [pc, #68]	; (800bb6c <ip4_output_if_src+0xf4>)
 800bb28:	480f      	ldr	r0, [pc, #60]	; (800bb68 <ip4_output_if_src+0xf0>)
 800bb2a:	f006 ffd3 	bl	8012ad4 <printf>
 800bb2e:	e7bb      	b.n	800baa8 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bb30:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <ip4_output_if_src+0xf8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	60eb      	str	r3, [r5, #12]
 800bb36:	e7d9      	b.n	800baec <ip4_output_if_src+0x74>
    if (p->len < IP_HLEN) {
 800bb38:	8963      	ldrh	r3, [r4, #10]
 800bb3a:	2b13      	cmp	r3, #19
 800bb3c:	d90d      	bls.n	800bb5a <ip4_output_if_src+0xe2>
    iphdr = (struct ip_hdr *)p->payload;
 800bb3e:	6863      	ldr	r3, [r4, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800bb44:	ae01      	add	r6, sp, #4
 800bb46:	e7d4      	b.n	800baf2 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800bb48:	4632      	mov	r2, r6
 800bb4a:	4641      	mov	r1, r8
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f000 fc39 	bl	800c3c4 <ip4_frag>
 800bb52:	e7da      	b.n	800bb0a <ip4_output_if_src+0x92>
      return ERR_BUF;
 800bb54:	f06f 0001 	mvn.w	r0, #1
 800bb58:	e7d7      	b.n	800bb0a <ip4_output_if_src+0x92>
      return ERR_BUF;
 800bb5a:	f06f 0001 	mvn.w	r0, #1
 800bb5e:	e7d4      	b.n	800bb0a <ip4_output_if_src+0x92>
 800bb60:	0801c370 	.word	0x0801c370
 800bb64:	0801c3a4 	.word	0x0801c3a4
 800bb68:	08019f6c 	.word	0x08019f6c
 800bb6c:	0801c3b0 	.word	0x0801c3b0
 800bb70:	08019eec 	.word	0x08019eec
 800bb74:	200034f2 	.word	0x200034f2

0800bb78 <ip4_output_if>:
{
 800bb78:	b530      	push	{r4, r5, lr}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800bb7e:	4615      	mov	r5, r2
 800bb80:	b11a      	cbz	r2, 800bb8a <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800bb82:	b109      	cbz	r1, 800bb88 <ip4_output_if+0x10>
 800bb84:	680a      	ldr	r2, [r1, #0]
 800bb86:	b902      	cbnz	r2, 800bb8a <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800bb88:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bb8a:	9402      	str	r4, [sp, #8]
 800bb8c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800bb90:	9201      	str	r2, [sp, #4]
 800bb92:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800bb96:	9200      	str	r2, [sp, #0]
 800bb98:	462a      	mov	r2, r5
 800bb9a:	f7ff ff6d 	bl	800ba78 <ip4_output_if_src>
}
 800bb9e:	b005      	add	sp, #20
 800bba0:	bd30      	pop	{r4, r5, pc}

0800bba2 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bba2:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bba4:	1e42      	subs	r2, r0, #1
 800bba6:	f112 0f03 	cmn.w	r2, #3
 800bbaa:	d812      	bhi.n	800bbd2 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bbac:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 800bbb0:	f010 0002 	ands.w	r0, r0, #2
 800bbb4:	d014      	beq.n	800bbe0 <ip4_addr_isbroadcast_u32+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800bbb6:	684a      	ldr	r2, [r1, #4]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d00c      	beq.n	800bbd6 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bbbc:	6888      	ldr	r0, [r1, #8]
 800bbbe:	405a      	eors	r2, r3
 800bbc0:	4202      	tst	r2, r0
 800bbc2:	d10a      	bne.n	800bbda <ip4_addr_isbroadcast_u32+0x38>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bbc4:	43c2      	mvns	r2, r0
 800bbc6:	ea23 0300 	bic.w	r3, r3, r0
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d007      	beq.n	800bbde <ip4_addr_isbroadcast_u32+0x3c>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800bbce:	2000      	movs	r0, #0
 800bbd0:	4770      	bx	lr
    return 1;
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	4770      	bx	lr
    return 0;
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	4770      	bx	lr
    return 0;
 800bbda:	2000      	movs	r0, #0
 800bbdc:	4770      	bx	lr
    return 1;
 800bbde:	2001      	movs	r0, #1
  }
}
 800bbe0:	4770      	bx	lr
	...

0800bbe4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	460e      	mov	r6, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 800bbea:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 800bbec:	466f      	mov	r7, sp
 800bbee:	e035      	b.n	800bc5c <ip4addr_aton+0x78>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 800bbf0:	1c42      	adds	r2, r0, #1
 800bbf2:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 800bbf4:	2b78      	cmp	r3, #120	; 0x78
 800bbf6:	d004      	beq.n	800bc02 <ip4addr_aton+0x1e>
 800bbf8:	2b58      	cmp	r3, #88	; 0x58
 800bbfa:	d002      	beq.n	800bc02 <ip4addr_aton+0x1e>
      c = *++cp;
 800bbfc:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 800bbfe:	2108      	movs	r1, #8
 800bc00:	e034      	b.n	800bc6c <ip4addr_aton+0x88>
        c = *++cp;
 800bc02:	7883      	ldrb	r3, [r0, #2]
 800bc04:	3002      	adds	r0, #2
        base = 16;
 800bc06:	2110      	movs	r1, #16
        c = *++cp;
 800bc08:	e030      	b.n	800bc6c <ip4addr_aton+0x88>
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
 800bc0a:	fb05 3301 	mla	r3, r5, r1, r3
 800bc0e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
        c = *++cp;
 800bc12:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (lwip_isdigit(c)) {
 800bc16:	4a47      	ldr	r2, [pc, #284]	; (800bd34 <ip4addr_aton+0x150>)
 800bc18:	5c9c      	ldrb	r4, [r3, r2]
 800bc1a:	f014 0f04 	tst.w	r4, #4
 800bc1e:	d1f4      	bne.n	800bc0a <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800bc20:	2910      	cmp	r1, #16
 800bc22:	d110      	bne.n	800bc46 <ip4addr_aton+0x62>
 800bc24:	f014 0f44 	tst.w	r4, #68	; 0x44
 800bc28:	d00d      	beq.n	800bc46 <ip4addr_aton+0x62>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800bc2a:	012d      	lsls	r5, r5, #4
 800bc2c:	330a      	adds	r3, #10
 800bc2e:	f004 0403 	and.w	r4, r4, #3
 800bc32:	2c02      	cmp	r4, #2
 800bc34:	d005      	beq.n	800bc42 <ip4addr_aton+0x5e>
 800bc36:	2241      	movs	r2, #65	; 0x41
 800bc38:	1a9a      	subs	r2, r3, r2
 800bc3a:	4315      	orrs	r5, r2
        c = *++cp;
 800bc3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bc40:	e7e9      	b.n	800bc16 <ip4addr_aton+0x32>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800bc42:	2261      	movs	r2, #97	; 0x61
 800bc44:	e7f8      	b.n	800bc38 <ip4addr_aton+0x54>
      } else {
        break;
      }
    }
    if (c == '.') {
 800bc46:	2b2e      	cmp	r3, #46	; 0x2e
 800bc48:	d112      	bne.n	800bc70 <ip4addr_aton+0x8c>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800bc4a:	ab03      	add	r3, sp, #12
 800bc4c:	429f      	cmp	r7, r3
 800bc4e:	d257      	bcs.n	800bd00 <ip4addr_aton+0x11c>
        return 0;
      }
      *pp++ = val;
 800bc50:	463a      	mov	r2, r7
 800bc52:	f842 5b04 	str.w	r5, [r2], #4
      c = *++cp;
 800bc56:	7843      	ldrb	r3, [r0, #1]
      *pp++ = val;
 800bc58:	4617      	mov	r7, r2
      c = *++cp;
 800bc5a:	3001      	adds	r0, #1
    if (!lwip_isdigit(c)) {
 800bc5c:	4a35      	ldr	r2, [pc, #212]	; (800bd34 <ip4addr_aton+0x150>)
 800bc5e:	5c9a      	ldrb	r2, [r3, r2]
 800bc60:	f012 0f04 	tst.w	r2, #4
 800bc64:	d04a      	beq.n	800bcfc <ip4addr_aton+0x118>
    if (c == '0') {
 800bc66:	2b30      	cmp	r3, #48	; 0x30
 800bc68:	d0c2      	beq.n	800bbf0 <ip4addr_aton+0xc>
    base = 10;
 800bc6a:	210a      	movs	r1, #10
        base = 8;
 800bc6c:	2500      	movs	r5, #0
 800bc6e:	e7d2      	b.n	800bc16 <ip4addr_aton+0x32>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800bc70:	b113      	cbz	r3, 800bc78 <ip4addr_aton+0x94>
 800bc72:	f014 0f08 	tst.w	r4, #8
 800bc76:	d046      	beq.n	800bd06 <ip4addr_aton+0x122>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800bc78:	4668      	mov	r0, sp
 800bc7a:	1a38      	subs	r0, r7, r0
 800bc7c:	1080      	asrs	r0, r0, #2
 800bc7e:	3001      	adds	r0, #1
 800bc80:	2804      	cmp	r0, #4
 800bc82:	d834      	bhi.n	800bcee <ip4addr_aton+0x10a>
 800bc84:	e8df f000 	tbb	[pc, r0]
 800bc88:	13030b3d 	.word	0x13030b3d
 800bc8c:	21          	.byte	0x21
 800bc8d:	00          	.byte	0x00

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800bc8e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 800bc92:	d23a      	bcs.n	800bd0a <ip4addr_aton+0x126>
        return 0;
      }
      if (parts[0] > 0xff) {
 800bc94:	9b00      	ldr	r3, [sp, #0]
 800bc96:	2bff      	cmp	r3, #255	; 0xff
 800bc98:	d839      	bhi.n	800bd0e <ip4addr_aton+0x12a>
        return 0;
      }
      val |= parts[0] << 24;
 800bc9a:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      break;
    default:
      LWIP_ASSERT("unhandled", 0);
      break;
  }
  if (addr) {
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d045      	beq.n	800bd2e <ip4addr_aton+0x14a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800bca2:	4628      	mov	r0, r5
 800bca4:	f7fa fa0f 	bl	80060c6 <lwip_htonl>
 800bca8:	6030      	str	r0, [r6, #0]
  }
  return 1;
 800bcaa:	2001      	movs	r0, #1
 800bcac:	e029      	b.n	800bd02 <ip4addr_aton+0x11e>
      if (val > 0xffff) {
 800bcae:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800bcb2:	d22e      	bcs.n	800bd12 <ip4addr_aton+0x12e>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800bcb4:	9a00      	ldr	r2, [sp, #0]
 800bcb6:	2aff      	cmp	r2, #255	; 0xff
 800bcb8:	d82d      	bhi.n	800bd16 <ip4addr_aton+0x132>
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	2bff      	cmp	r3, #255	; 0xff
 800bcbe:	d82c      	bhi.n	800bd1a <ip4addr_aton+0x136>
      val |= (parts[0] << 24) | (parts[1] << 16);
 800bcc0:	041b      	lsls	r3, r3, #16
 800bcc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bcc6:	431d      	orrs	r5, r3
      break;
 800bcc8:	e7e9      	b.n	800bc9e <ip4addr_aton+0xba>
      if (val > 0xff) {
 800bcca:	2dff      	cmp	r5, #255	; 0xff
 800bccc:	d827      	bhi.n	800bd1e <ip4addr_aton+0x13a>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800bcce:	9900      	ldr	r1, [sp, #0]
 800bcd0:	29ff      	cmp	r1, #255	; 0xff
 800bcd2:	d826      	bhi.n	800bd22 <ip4addr_aton+0x13e>
 800bcd4:	9b01      	ldr	r3, [sp, #4]
 800bcd6:	2bff      	cmp	r3, #255	; 0xff
 800bcd8:	d825      	bhi.n	800bd26 <ip4addr_aton+0x142>
 800bcda:	9a02      	ldr	r2, [sp, #8]
 800bcdc:	2aff      	cmp	r2, #255	; 0xff
 800bcde:	d824      	bhi.n	800bd2a <ip4addr_aton+0x146>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800bce0:	041b      	lsls	r3, r3, #16
 800bce2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bcea:	431d      	orrs	r5, r3
      break;
 800bcec:	e7d7      	b.n	800bc9e <ip4addr_aton+0xba>
      LWIP_ASSERT("unhandled", 0);
 800bcee:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <ip4addr_aton+0x154>)
 800bcf0:	22f9      	movs	r2, #249	; 0xf9
 800bcf2:	4912      	ldr	r1, [pc, #72]	; (800bd3c <ip4addr_aton+0x158>)
 800bcf4:	4812      	ldr	r0, [pc, #72]	; (800bd40 <ip4addr_aton+0x15c>)
 800bcf6:	f006 feed 	bl	8012ad4 <printf>
      break;
 800bcfa:	e7d0      	b.n	800bc9e <ip4addr_aton+0xba>
      return 0;
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e000      	b.n	800bd02 <ip4addr_aton+0x11e>
        return 0;
 800bd00:	2000      	movs	r0, #0
}
 800bd02:	b005      	add	sp, #20
 800bd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 800bd06:	2000      	movs	r0, #0
 800bd08:	e7fb      	b.n	800bd02 <ip4addr_aton+0x11e>
        return 0;
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	e7f9      	b.n	800bd02 <ip4addr_aton+0x11e>
        return 0;
 800bd0e:	2000      	movs	r0, #0
 800bd10:	e7f7      	b.n	800bd02 <ip4addr_aton+0x11e>
        return 0;
 800bd12:	2000      	movs	r0, #0
 800bd14:	e7f5      	b.n	800bd02 <ip4addr_aton+0x11e>
        return 0;
 800bd16:	2000      	movs	r0, #0
 800bd18:	e7f3      	b.n	800bd02 <ip4addr_aton+0x11e>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e7f1      	b.n	800bd02 <ip4addr_aton+0x11e>
        return 0;
 800bd1e:	2000      	movs	r0, #0
 800bd20:	e7ef      	b.n	800bd02 <ip4addr_aton+0x11e>
        return 0;
 800bd22:	2000      	movs	r0, #0
 800bd24:	e7ed      	b.n	800bd02 <ip4addr_aton+0x11e>
 800bd26:	2000      	movs	r0, #0
 800bd28:	e7eb      	b.n	800bd02 <ip4addr_aton+0x11e>
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	e7e9      	b.n	800bd02 <ip4addr_aton+0x11e>
  return 1;
 800bd2e:	2001      	movs	r0, #1
 800bd30:	e7e7      	b.n	800bd02 <ip4addr_aton+0x11e>
 800bd32:	bf00      	nop
 800bd34:	0801c8e6 	.word	0x0801c8e6
 800bd38:	0801c3e0 	.word	0x0801c3e0
 800bd3c:	0801c41c 	.word	0x0801c41c
 800bd40:	08019f6c 	.word	0x08019f6c

0800bd44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800bd48:	4b0c      	ldr	r3, [pc, #48]	; (800bd7c <ip_reass_dequeue_datagram+0x38>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4283      	cmp	r3, r0
 800bd4e:	d008      	beq.n	800bd62 <ip_reass_dequeue_datagram+0x1e>
 800bd50:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800bd52:	b151      	cbz	r1, 800bd6a <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800bd58:	4621      	mov	r1, r4
 800bd5a:	2004      	movs	r0, #4
 800bd5c:	f7fa fd2c 	bl	80067b8 <memp_free>
}
 800bd60:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800bd62:	6802      	ldr	r2, [r0, #0]
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <ip_reass_dequeue_datagram+0x38>)
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	e7f6      	b.n	800bd58 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <ip_reass_dequeue_datagram+0x3c>)
 800bd6c:	f240 1245 	movw	r2, #325	; 0x145
 800bd70:	4904      	ldr	r1, [pc, #16]	; (800bd84 <ip_reass_dequeue_datagram+0x40>)
 800bd72:	4805      	ldr	r0, [pc, #20]	; (800bd88 <ip_reass_dequeue_datagram+0x44>)
 800bd74:	f006 feae 	bl	8012ad4 <printf>
 800bd78:	e7ec      	b.n	800bd54 <ip_reass_dequeue_datagram+0x10>
 800bd7a:	bf00      	nop
 800bd7c:	200034f4 	.word	0x200034f4
 800bd80:	0801c428 	.word	0x0801c428
 800bd84:	0801c464 	.word	0x0801c464
 800bd88:	08019f6c 	.word	0x08019f6c

0800bd8c <ip_reass_free_complete_datagram>:
{
 800bd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd90:	4680      	mov	r8, r0
 800bd92:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800bd94:	4281      	cmp	r1, r0
 800bd96:	d015      	beq.n	800bdc4 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800bd98:	f1b9 0f00 	cmp.w	r9, #0
 800bd9c:	d009      	beq.n	800bdb2 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800bd9e:	f8d9 3000 	ldr.w	r3, [r9]
 800bda2:	4543      	cmp	r3, r8
 800bda4:	d005      	beq.n	800bdb2 <ip_reass_free_complete_datagram+0x26>
 800bda6:	4b30      	ldr	r3, [pc, #192]	; (800be68 <ip_reass_free_complete_datagram+0xdc>)
 800bda8:	22ad      	movs	r2, #173	; 0xad
 800bdaa:	4930      	ldr	r1, [pc, #192]	; (800be6c <ip_reass_free_complete_datagram+0xe0>)
 800bdac:	4830      	ldr	r0, [pc, #192]	; (800be70 <ip_reass_free_complete_datagram+0xe4>)
 800bdae:	f006 fe91 	bl	8012ad4 <printf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800bdb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bdb6:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800bdb8:	889a      	ldrh	r2, [r3, #4]
 800bdba:	b152      	cbz	r2, 800bdd2 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 800bdbc:	2600      	movs	r6, #0
  p = ipr->p;
 800bdbe:	f8d8 5004 	ldr.w	r5, [r8, #4]
  while (p != NULL) {
 800bdc2:	e02e      	b.n	800be22 <ip_reass_free_complete_datagram+0x96>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800bdc4:	4b28      	ldr	r3, [pc, #160]	; (800be68 <ip_reass_free_complete_datagram+0xdc>)
 800bdc6:	22ab      	movs	r2, #171	; 0xab
 800bdc8:	492a      	ldr	r1, [pc, #168]	; (800be74 <ip_reass_free_complete_datagram+0xe8>)
 800bdca:	4829      	ldr	r0, [pc, #164]	; (800be70 <ip_reass_free_complete_datagram+0xe4>)
 800bdcc:	f006 fe82 	bl	8012ad4 <printf>
 800bdd0:	e7e2      	b.n	800bd98 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800bdd8:	4643      	mov	r3, r8
 800bdda:	686a      	ldr	r2, [r5, #4]
 800bddc:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800bde0:	685e      	ldr	r6, [r3, #4]
 800bde2:	689c      	ldr	r4, [r3, #8]
 800bde4:	68d8      	ldr	r0, [r3, #12]
 800bde6:	6011      	str	r1, [r2, #0]
 800bde8:	6056      	str	r6, [r2, #4]
 800bdea:	6094      	str	r4, [r2, #8]
 800bdec:	60d0      	str	r0, [r2, #12]
 800bdee:	6919      	ldr	r1, [r3, #16]
 800bdf0:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f7ff fd1b 	bl	800b830 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f7fb f8e6 	bl	8006fcc <pbuf_clen>
 800be00:	4606      	mov	r6, r0
    pbuf_free(p);
 800be02:	4628      	mov	r0, r5
 800be04:	f7fa ff7e 	bl	8006d04 <pbuf_free>
 800be08:	e7d9      	b.n	800bdbe <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800be0a:	4b17      	ldr	r3, [pc, #92]	; (800be68 <ip_reass_free_complete_datagram+0xdc>)
 800be0c:	22cc      	movs	r2, #204	; 0xcc
 800be0e:	491a      	ldr	r1, [pc, #104]	; (800be78 <ip_reass_free_complete_datagram+0xec>)
 800be10:	4817      	ldr	r0, [pc, #92]	; (800be70 <ip_reass_free_complete_datagram+0xe4>)
 800be12:	f006 fe5f 	bl	8012ad4 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800be16:	4434      	add	r4, r6
 800be18:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 800be1a:	4628      	mov	r0, r5
 800be1c:	f7fa ff72 	bl	8006d04 <pbuf_free>
    p = iprh->next_pbuf;
 800be20:	463d      	mov	r5, r7
  while (p != NULL) {
 800be22:	b155      	cbz	r5, 800be3a <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 800be24:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 800be26:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800be28:	4628      	mov	r0, r5
 800be2a:	f7fb f8cf 	bl	8006fcc <pbuf_clen>
 800be2e:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800be30:	1833      	adds	r3, r6, r0
 800be32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be36:	dbee      	blt.n	800be16 <ip_reass_free_complete_datagram+0x8a>
 800be38:	e7e7      	b.n	800be0a <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 800be3a:	4649      	mov	r1, r9
 800be3c:	4640      	mov	r0, r8
 800be3e:	f7ff ff81 	bl	800bd44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800be42:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <ip_reass_free_complete_datagram+0xf0>)
 800be44:	889b      	ldrh	r3, [r3, #4]
 800be46:	42b3      	cmp	r3, r6
 800be48:	d306      	bcc.n	800be58 <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800be4a:	4a0c      	ldr	r2, [pc, #48]	; (800be7c <ip_reass_free_complete_datagram+0xf0>)
 800be4c:	8893      	ldrh	r3, [r2, #4]
 800be4e:	1b9b      	subs	r3, r3, r6
 800be50:	8093      	strh	r3, [r2, #4]
}
 800be52:	4630      	mov	r0, r6
 800be54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800be58:	4b03      	ldr	r3, [pc, #12]	; (800be68 <ip_reass_free_complete_datagram+0xdc>)
 800be5a:	22d2      	movs	r2, #210	; 0xd2
 800be5c:	4908      	ldr	r1, [pc, #32]	; (800be80 <ip_reass_free_complete_datagram+0xf4>)
 800be5e:	4804      	ldr	r0, [pc, #16]	; (800be70 <ip_reass_free_complete_datagram+0xe4>)
 800be60:	f006 fe38 	bl	8012ad4 <printf>
 800be64:	e7f1      	b.n	800be4a <ip_reass_free_complete_datagram+0xbe>
 800be66:	bf00      	nop
 800be68:	0801c428 	.word	0x0801c428
 800be6c:	0801c48c 	.word	0x0801c48c
 800be70:	08019f6c 	.word	0x08019f6c
 800be74:	0801c480 	.word	0x0801c480
 800be78:	0801c4a0 	.word	0x0801c4a0
 800be7c:	200034f4 	.word	0x200034f4
 800be80:	0801c4c0 	.word	0x0801c4c0

0800be84 <ip_reass_remove_oldest_datagram>:
{
 800be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be88:	4606      	mov	r6, r0
 800be8a:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800be8c:	2700      	movs	r7, #0
 800be8e:	e02b      	b.n	800bee8 <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800be90:	699a      	ldr	r2, [r3, #24]
 800be92:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800be96:	4562      	cmp	r2, ip
 800be98:	d111      	bne.n	800bebe <ip_reass_remove_oldest_datagram+0x3a>
 800be9a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800be9e:	88b2      	ldrh	r2, [r6, #4]
 800bea0:	4594      	cmp	ip, r2
 800bea2:	d10c      	bne.n	800bebe <ip_reass_remove_oldest_datagram+0x3a>
 800bea4:	e001      	b.n	800beaa <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800bea6:	4629      	mov	r1, r5
          oldest = r;
 800bea8:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	b192      	cbz	r2, 800bed4 <ip_reass_remove_oldest_datagram+0x50>
 800beae:	461d      	mov	r5, r3
 800beb0:	4613      	mov	r3, r2
    while (r != NULL) {
 800beb2:	b18b      	cbz	r3, 800bed8 <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800beb4:	695a      	ldr	r2, [r3, #20]
 800beb6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800beba:	4562      	cmp	r2, ip
 800bebc:	d0e8      	beq.n	800be90 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800bebe:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d0f0      	beq.n	800bea6 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800bec4:	f893 c01f 	ldrb.w	ip, [r3, #31]
 800bec8:	7fc2      	ldrb	r2, [r0, #31]
 800beca:	4594      	cmp	ip, r2
 800becc:	d8ed      	bhi.n	800beaa <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800bece:	4629      	mov	r1, r5
          oldest = r;
 800bed0:	4618      	mov	r0, r3
 800bed2:	e7ea      	b.n	800beaa <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800bed4:	462b      	mov	r3, r5
 800bed6:	e7ea      	b.n	800beae <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 800bed8:	b110      	cbz	r0, 800bee0 <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800beda:	f7ff ff57 	bl	800bd8c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800bede:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800bee0:	4547      	cmp	r7, r8
 800bee2:	da08      	bge.n	800bef6 <ip_reass_remove_oldest_datagram+0x72>
 800bee4:	2c01      	cmp	r4, #1
 800bee6:	dd06      	ble.n	800bef6 <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 800bee8:	4b04      	ldr	r3, [pc, #16]	; (800befc <ip_reass_remove_oldest_datagram+0x78>)
 800beea:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800beec:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800beee:	4621      	mov	r1, r4
    prev = NULL;
 800bef0:	4625      	mov	r5, r4
    oldest = NULL;
 800bef2:	4620      	mov	r0, r4
    while (r != NULL) {
 800bef4:	e7dd      	b.n	800beb2 <ip_reass_remove_oldest_datagram+0x2e>
}
 800bef6:	4638      	mov	r0, r7
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befc:	200034f4 	.word	0x200034f4

0800bf00 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800bf00:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800bf02:	4604      	mov	r4, r0
 800bf04:	b120      	cbz	r0, 800bf10 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800bf06:	4621      	mov	r1, r4
 800bf08:	2005      	movs	r0, #5
 800bf0a:	f7fa fc55 	bl	80067b8 <memp_free>
}
 800bf0e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800bf10:	4b03      	ldr	r3, [pc, #12]	; (800bf20 <ip_frag_free_pbuf_custom_ref+0x20>)
 800bf12:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800bf16:	4903      	ldr	r1, [pc, #12]	; (800bf24 <ip_frag_free_pbuf_custom_ref+0x24>)
 800bf18:	4803      	ldr	r0, [pc, #12]	; (800bf28 <ip_frag_free_pbuf_custom_ref+0x28>)
 800bf1a:	f006 fddb 	bl	8012ad4 <printf>
 800bf1e:	e7f2      	b.n	800bf06 <ip_frag_free_pbuf_custom_ref+0x6>
 800bf20:	0801c428 	.word	0x0801c428
 800bf24:	0801a47c 	.word	0x0801a47c
 800bf28:	08019f6c 	.word	0x08019f6c

0800bf2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bf2c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bf2e:	4604      	mov	r4, r0
 800bf30:	b138      	cbz	r0, 800bf42 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800bf32:	6960      	ldr	r0, [r4, #20]
 800bf34:	b108      	cbz	r0, 800bf3a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800bf36:	f7fa fee5 	bl	8006d04 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7ff ffe0 	bl	800bf00 <ip_frag_free_pbuf_custom_ref>
}
 800bf40:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bf42:	4b04      	ldr	r3, [pc, #16]	; (800bf54 <ipfrag_free_pbuf_custom+0x28>)
 800bf44:	f240 22ce 	movw	r2, #718	; 0x2ce
 800bf48:	4903      	ldr	r1, [pc, #12]	; (800bf58 <ipfrag_free_pbuf_custom+0x2c>)
 800bf4a:	4804      	ldr	r0, [pc, #16]	; (800bf5c <ipfrag_free_pbuf_custom+0x30>)
 800bf4c:	f006 fdc2 	bl	8012ad4 <printf>
 800bf50:	e7ef      	b.n	800bf32 <ipfrag_free_pbuf_custom+0x6>
 800bf52:	bf00      	nop
 800bf54:	0801c428 	.word	0x0801c428
 800bf58:	0801c4e4 	.word	0x0801c4e4
 800bf5c:	08019f6c 	.word	0x08019f6c

0800bf60 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 800bf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf64:	4681      	mov	r9, r0
 800bf66:	460e      	mov	r6, r1
 800bf68:	4692      	mov	sl, r2
  fraghdr = (struct ip_hdr *)new_p->payload;
 800bf6a:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bf6c:	8860      	ldrh	r0, [r4, #2]
 800bf6e:	f7fa f8a5 	bl	80060bc <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800bf72:	7823      	ldrb	r3, [r4, #0]
 800bf74:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800bf78:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800bf7c:	d203      	bcs.n	800bf86 <ip_reass_chain_frag_into_datagram_and_validate+0x26>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bf7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bf82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf86:	009a      	lsls	r2, r3, #2
  len = (u16_t)(len - hlen);
 800bf88:	1a80      	subs	r0, r0, r2
 800bf8a:	b285      	uxth	r5, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800bf8c:	88e0      	ldrh	r0, [r4, #6]
 800bf8e:	f7fa f895 	bl	80060bc <lwip_htons>
 800bf92:	f3c0 040c 	ubfx	r4, r0, #0, #13
 800bf96:	00e4      	lsls	r4, r4, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800bf98:	6877      	ldr	r7, [r6, #4]
  iprh->next_pbuf = NULL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	703b      	strb	r3, [r7, #0]
 800bf9e:	707b      	strb	r3, [r7, #1]
 800bfa0:	70bb      	strb	r3, [r7, #2]
 800bfa2:	70fb      	strb	r3, [r7, #3]
  iprh->start = offset;
 800bfa4:	80bc      	strh	r4, [r7, #4]
  iprh->end = (u16_t)(offset + len);
 800bfa6:	1928      	adds	r0, r5, r4
 800bfa8:	fa1f fc80 	uxth.w	ip, r0
 800bfac:	80f8      	strh	r0, [r7, #6]
  if (iprh->end < offset) {
 800bfae:	45a4      	cmp	ip, r4
 800bfb0:	f0c0 8092 	bcc.w	800c0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>
  for (q = ipr->p; q != NULL;) {
 800bfb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
  int valid = 1;
 800bfb8:	f04f 0801 	mov.w	r8, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800bfbc:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 800bfbe:	e022      	b.n	800c006 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
      iprh->next_pbuf = q;
 800bfc0:	6039      	str	r1, [r7, #0]
      if (iprh_prev != NULL) {
 800bfc2:	b1c5      	cbz	r5, 800bff6 <ip_reass_chain_frag_into_datagram_and_validate+0x96>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bfc4:	88ea      	ldrh	r2, [r5, #6]
 800bfc6:	42a2      	cmp	r2, r4
 800bfc8:	f200 8089 	bhi.w	800c0de <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 800bfcc:	889b      	ldrh	r3, [r3, #4]
 800bfce:	459c      	cmp	ip, r3
 800bfd0:	f200 8088 	bhi.w	800c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
        iprh_prev->next_pbuf = new_p;
 800bfd4:	602e      	str	r6, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 800bfd6:	88bb      	ldrh	r3, [r7, #4]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d001      	beq.n	800bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
          valid = 0;
 800bfdc:	f04f 0800 	mov.w	r8, #0
  if (q == NULL) {
 800bfe0:	b321      	cbz	r1, 800c02c <ip_reass_chain_frag_into_datagram_and_validate+0xcc>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bfe2:	f1ba 0f00 	cmp.w	sl, #0
 800bfe6:	d143      	bne.n	800c070 <ip_reass_chain_frag_into_datagram_and_validate+0x110>
 800bfe8:	f899 301e 	ldrb.w	r3, [r9, #30]
 800bfec:	f013 0f01 	tst.w	r3, #1
 800bff0:	d13e      	bne.n	800c070 <ip_reass_chain_frag_into_datagram_and_validate+0x110>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bff2:	4650      	mov	r0, sl
 800bff4:	e7c5      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
        if (iprh->end > iprh_tmp->start) {
 800bff6:	889b      	ldrh	r3, [r3, #4]
 800bff8:	459c      	cmp	ip, r3
 800bffa:	d876      	bhi.n	800c0ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
        ipr->p = new_p;
 800bffc:	f8c9 6004 	str.w	r6, [r9, #4]
 800c000:	e7ee      	b.n	800bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    q = iprh_tmp->next_pbuf;
 800c002:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 800c004:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 800c006:	2900      	cmp	r1, #0
 800c008:	d0ea      	beq.n	800bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c00a:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800c00c:	889a      	ldrh	r2, [r3, #4]
 800c00e:	42a2      	cmp	r2, r4
 800c010:	d8d6      	bhi.n	800bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x60>
    } else if (iprh->start == iprh_tmp->start) {
 800c012:	42a2      	cmp	r2, r4
 800c014:	d06c      	beq.n	800c0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
    } else if (iprh->start < iprh_tmp->end) {
 800c016:	88d9      	ldrh	r1, [r3, #6]
 800c018:	42a1      	cmp	r1, r4
 800c01a:	d86c      	bhi.n	800c0f6 <ip_reass_chain_frag_into_datagram_and_validate+0x196>
      if (iprh_prev != NULL) {
 800c01c:	2d00      	cmp	r5, #0
 800c01e:	d0f0      	beq.n	800c002 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
        if (iprh_prev->end != iprh_tmp->start) {
 800c020:	88e9      	ldrh	r1, [r5, #6]
 800c022:	428a      	cmp	r2, r1
 800c024:	d0ed      	beq.n	800c002 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
          valid = 0;
 800c026:	f04f 0800 	mov.w	r8, #0
 800c02a:	e7ea      	b.n	800c002 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
    if (iprh_prev != NULL) {
 800c02c:	b19d      	cbz	r5, 800c056 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c02e:	88ea      	ldrh	r2, [r5, #6]
 800c030:	88bb      	ldrh	r3, [r7, #4]
 800c032:	429a      	cmp	r2, r3
 800c034:	d807      	bhi.n	800c046 <ip_reass_chain_frag_into_datagram_and_validate+0xe6>
      iprh_prev->next_pbuf = new_p;
 800c036:	602e      	str	r6, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800c038:	88ea      	ldrh	r2, [r5, #6]
 800c03a:	88bb      	ldrh	r3, [r7, #4]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d0d0      	beq.n	800bfe2 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
        valid = 0;
 800c040:	f04f 0800 	mov.w	r8, #0
 800c044:	e7cd      	b.n	800bfe2 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c046:	4b2d      	ldr	r3, [pc, #180]	; (800c0fc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800c048:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c04c:	492c      	ldr	r1, [pc, #176]	; (800c100 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 800c04e:	482d      	ldr	r0, [pc, #180]	; (800c104 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800c050:	f006 fd40 	bl	8012ad4 <printf>
 800c054:	e7ef      	b.n	800c036 <ip_reass_chain_frag_into_datagram_and_validate+0xd6>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c056:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c05a:	b133      	cbz	r3, 800c06a <ip_reass_chain_frag_into_datagram_and_validate+0x10a>
 800c05c:	4b27      	ldr	r3, [pc, #156]	; (800c0fc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800c05e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c062:	4929      	ldr	r1, [pc, #164]	; (800c108 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 800c064:	4827      	ldr	r0, [pc, #156]	; (800c104 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800c066:	f006 fd35 	bl	8012ad4 <printf>
      ipr->p = new_p;
 800c06a:	f8c9 6004 	str.w	r6, [r9, #4]
 800c06e:	e7b8      	b.n	800bfe2 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
    if (valid) {
 800c070:	f1b8 0f00 	cmp.w	r8, #0
 800c074:	d02e      	beq.n	800c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c076:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c07a:	b333      	cbz	r3, 800c0ca <ip_reass_chain_frag_into_datagram_and_validate+0x16a>
 800c07c:	6858      	ldr	r0, [r3, #4]
 800c07e:	8883      	ldrh	r3, [r0, #4]
 800c080:	bb33      	cbnz	r3, 800c0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
        q = iprh->next_pbuf;
 800c082:	683a      	ldr	r2, [r7, #0]
        while (q != NULL) {
 800c084:	b152      	cbz	r2, 800c09c <ip_reass_chain_frag_into_datagram_and_validate+0x13c>
          iprh = (struct ip_reass_helper *)q->payload;
 800c086:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800c088:	88f9      	ldrh	r1, [r7, #6]
 800c08a:	889a      	ldrh	r2, [r3, #4]
 800c08c:	4291      	cmp	r1, r2
 800c08e:	d102      	bne.n	800c096 <ip_reass_chain_frag_into_datagram_and_validate+0x136>
          q = iprh->next_pbuf;
 800c090:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 800c092:	461f      	mov	r7, r3
 800c094:	e7f6      	b.n	800c084 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
 800c096:	461f      	mov	r7, r3
            valid = 0;
 800c098:	f04f 0800 	mov.w	r8, #0
        if (valid) {
 800c09c:	f1b8 0f00 	cmp.w	r8, #0
 800c0a0:	d018      	beq.n	800c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 800c0a2:	42b8      	cmp	r0, r7
 800c0a4:	d009      	beq.n	800c0ba <ip_reass_chain_frag_into_datagram_and_validate+0x15a>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	b1a3      	cbz	r3, 800c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 800c0aa:	4b14      	ldr	r3, [pc, #80]	; (800c0fc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800c0ac:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c0b0:	4916      	ldr	r1, [pc, #88]	; (800c10c <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>)
 800c0b2:	4814      	ldr	r0, [pc, #80]	; (800c104 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800c0b4:	f006 fd0e 	bl	8012ad4 <printf>
 800c0b8:	e00c      	b.n	800c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 800c0ba:	4b10      	ldr	r3, [pc, #64]	; (800c0fc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800c0bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c0c0:	4913      	ldr	r1, [pc, #76]	; (800c110 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 800c0c2:	4810      	ldr	r0, [pc, #64]	; (800c104 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800c0c4:	f006 fd06 	bl	8012ad4 <printf>
 800c0c8:	e7ed      	b.n	800c0a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
        valid = 0;
 800c0ca:	f04f 0800 	mov.w	r8, #0
 800c0ce:	e001      	b.n	800c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 800c0d0:	f04f 0800 	mov.w	r8, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	e754      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0dc:	e751      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c0de:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e2:	e74e      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e8:	e74b      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ee:	e748      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e745      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fa:	e742      	b.n	800bf82 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 800c0fc:	0801c428 	.word	0x0801c428
 800c100:	0801c4f0 	.word	0x0801c4f0
 800c104:	08019f6c 	.word	0x08019f6c
 800c108:	0801c510 	.word	0x0801c510
 800c10c:	0801c558 	.word	0x0801c558
 800c110:	0801c548 	.word	0x0801c548

0800c114 <ip_frag_alloc_pbuf_custom_ref>:
{
 800c114:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c116:	2005      	movs	r0, #5
 800c118:	f7fa fb34 	bl	8006784 <memp_malloc>
}
 800c11c:	bd08      	pop	{r3, pc}
	...

0800c120 <ip_reass_enqueue_new_datagram>:
{
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	4605      	mov	r5, r0
 800c124:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c126:	2004      	movs	r0, #4
 800c128:	f7fa fb2c 	bl	8006784 <memp_malloc>
  if (ipr == NULL) {
 800c12c:	4604      	mov	r4, r0
 800c12e:	b1c8      	cbz	r0, 800c164 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c130:	2300      	movs	r3, #0
 800c132:	6063      	str	r3, [r4, #4]
 800c134:	60a3      	str	r3, [r4, #8]
 800c136:	60e3      	str	r3, [r4, #12]
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	6163      	str	r3, [r4, #20]
 800c13c:	61a3      	str	r3, [r4, #24]
 800c13e:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800c140:	230f      	movs	r3, #15
 800c142:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800c144:	4b0e      	ldr	r3, [pc, #56]	; (800c180 <ip_reass_enqueue_new_datagram+0x60>)
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800c14a:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	6868      	ldr	r0, [r5, #4]
 800c150:	68a9      	ldr	r1, [r5, #8]
 800c152:	68ea      	ldr	r2, [r5, #12]
 800c154:	60a3      	str	r3, [r4, #8]
 800c156:	60e0      	str	r0, [r4, #12]
 800c158:	6121      	str	r1, [r4, #16]
 800c15a:	6162      	str	r2, [r4, #20]
 800c15c:	692b      	ldr	r3, [r5, #16]
 800c15e:	61a3      	str	r3, [r4, #24]
}
 800c160:	4620      	mov	r0, r4
 800c162:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c164:	4631      	mov	r1, r6
 800c166:	4628      	mov	r0, r5
 800c168:	f7ff fe8c 	bl	800be84 <ip_reass_remove_oldest_datagram>
 800c16c:	42b0      	cmp	r0, r6
 800c16e:	da02      	bge.n	800c176 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 800c170:	2c00      	cmp	r4, #0
 800c172:	d1dd      	bne.n	800c130 <ip_reass_enqueue_new_datagram+0x10>
 800c174:	e7f4      	b.n	800c160 <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c176:	2004      	movs	r0, #4
 800c178:	f7fa fb04 	bl	8006784 <memp_malloc>
 800c17c:	4604      	mov	r4, r0
 800c17e:	e7f7      	b.n	800c170 <ip_reass_enqueue_new_datagram+0x50>
 800c180:	200034f4 	.word	0x200034f4

0800c184 <ip_reass_tmr>:
{
 800c184:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <ip_reass_tmr+0x28>)
 800c188:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800c18a:	2400      	movs	r4, #0
  while (r != NULL) {
 800c18c:	e004      	b.n	800c198 <ip_reass_tmr+0x14>
      r = r->next;
 800c18e:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800c190:	4621      	mov	r1, r4
 800c192:	f7ff fdfb 	bl	800bd8c <ip_reass_free_complete_datagram>
      r = r->next;
 800c196:	4628      	mov	r0, r5
  while (r != NULL) {
 800c198:	b138      	cbz	r0, 800c1aa <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800c19a:	7fc3      	ldrb	r3, [r0, #31]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d0f6      	beq.n	800c18e <ip_reass_tmr+0xa>
      r->timer--;
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	77c3      	strb	r3, [r0, #31]
      prev = r;
 800c1a4:	4604      	mov	r4, r0
      r = r->next;
 800c1a6:	6800      	ldr	r0, [r0, #0]
 800c1a8:	e7f6      	b.n	800c198 <ip_reass_tmr+0x14>
}
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	200034f4 	.word	0x200034f4

0800c1b0 <ip4_reass>:
{
 800c1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b4:	4606      	mov	r6, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800c1b6:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c1b8:	782b      	ldrb	r3, [r5, #0]
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	2b05      	cmp	r3, #5
 800c1c0:	f040 80d5 	bne.w	800c36e <ip4_reass+0x1be>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c1c4:	88e8      	ldrh	r0, [r5, #6]
 800c1c6:	f7f9 ff79 	bl	80060bc <lwip_htons>
 800c1ca:	f3c0 080c 	ubfx	r8, r0, #0, #13
 800c1ce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c1d2:	8868      	ldrh	r0, [r5, #2]
 800c1d4:	f7f9 ff72 	bl	80060bc <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800c1d8:	782b      	ldrb	r3, [r5, #0]
 800c1da:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800c1de:	009f      	lsls	r7, r3, #2
 800c1e0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800c1e4:	f0c0 80c3 	bcc.w	800c36e <ip4_reass+0x1be>
  len = (u16_t)(len - hlen);
 800c1e8:	1bc0      	subs	r0, r0, r7
 800c1ea:	b287      	uxth	r7, r0
  clen = pbuf_clen(p);
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7fa feed 	bl	8006fcc <pbuf_clen>
 800c1f2:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c1f4:	4b6d      	ldr	r3, [pc, #436]	; (800c3ac <ip4_reass+0x1fc>)
 800c1f6:	889b      	ldrh	r3, [r3, #4]
 800c1f8:	4403      	add	r3, r0
 800c1fa:	2b0a      	cmp	r3, #10
 800c1fc:	dc02      	bgt.n	800c204 <ip4_reass+0x54>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c1fe:	4b6b      	ldr	r3, [pc, #428]	; (800c3ac <ip4_reass+0x1fc>)
 800c200:	681c      	ldr	r4, [r3, #0]
 800c202:	e00d      	b.n	800c220 <ip4_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c204:	4601      	mov	r1, r0
 800c206:	4628      	mov	r0, r5
 800c208:	f7ff fe3c 	bl	800be84 <ip_reass_remove_oldest_datagram>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	f000 80ae 	beq.w	800c36e <ip4_reass+0x1be>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c212:	4b66      	ldr	r3, [pc, #408]	; (800c3ac <ip4_reass+0x1fc>)
 800c214:	889b      	ldrh	r3, [r3, #4]
 800c216:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c218:	2b0a      	cmp	r3, #10
 800c21a:	ddf0      	ble.n	800c1fe <ip4_reass+0x4e>
 800c21c:	e0a7      	b.n	800c36e <ip4_reass+0x1be>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c21e:	6824      	ldr	r4, [r4, #0]
 800c220:	b15c      	cbz	r4, 800c23a <ip4_reass+0x8a>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c222:	6962      	ldr	r2, [r4, #20]
 800c224:	68eb      	ldr	r3, [r5, #12]
 800c226:	429a      	cmp	r2, r3
 800c228:	d1f9      	bne.n	800c21e <ip4_reass+0x6e>
 800c22a:	69a2      	ldr	r2, [r4, #24]
 800c22c:	692b      	ldr	r3, [r5, #16]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d1f5      	bne.n	800c21e <ip4_reass+0x6e>
 800c232:	89a2      	ldrh	r2, [r4, #12]
 800c234:	88ab      	ldrh	r3, [r5, #4]
 800c236:	429a      	cmp	r2, r3
 800c238:	d1f1      	bne.n	800c21e <ip4_reass+0x6e>
  if (ipr == NULL) {
 800c23a:	b374      	cbz	r4, 800c29a <ip4_reass+0xea>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c23c:	88e8      	ldrh	r0, [r5, #6]
 800c23e:	f7f9 ff3d 	bl	80060bc <lwip_htons>
 800c242:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800c246:	b380      	cbz	r0, 800c2aa <ip4_reass+0xfa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c248:	88ed      	ldrh	r5, [r5, #6]
 800c24a:	f005 0520 	and.w	r5, r5, #32
 800c24e:	2d00      	cmp	r5, #0
 800c250:	bf0c      	ite	eq
 800c252:	2201      	moveq	r2, #1
 800c254:	2200      	movne	r2, #0
  if (is_last) {
 800c256:	d109      	bne.n	800c26c <ip4_reass+0xbc>
    u16_t datagram_len = (u16_t)(offset + len);
 800c258:	eb08 0307 	add.w	r3, r8, r7
 800c25c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c25e:	4598      	cmp	r8, r3
 800c260:	f200 8082 	bhi.w	800c368 <ip4_reass+0x1b8>
 800c264:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 800c268:	428b      	cmp	r3, r1
 800c26a:	d87d      	bhi.n	800c368 <ip4_reass+0x1b8>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c26c:	4631      	mov	r1, r6
 800c26e:	4620      	mov	r0, r4
 800c270:	f7ff fe76 	bl	800bf60 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c274:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c278:	d076      	beq.n	800c368 <ip4_reass+0x1b8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c27a:	4b4c      	ldr	r3, [pc, #304]	; (800c3ac <ip4_reass+0x1fc>)
 800c27c:	889a      	ldrh	r2, [r3, #4]
 800c27e:	4491      	add	r9, r2
 800c280:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 800c284:	b92d      	cbnz	r5, 800c292 <ip4_reass+0xe2>
    u16_t datagram_len = (u16_t)(offset + len);
 800c286:	4447      	add	r7, r8
    ipr->datagram_len = datagram_len;
 800c288:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c28a:	7fa3      	ldrb	r3, [r4, #30]
 800c28c:	f043 0301 	orr.w	r3, r3, #1
 800c290:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c292:	2801      	cmp	r0, #1
 800c294:	d01b      	beq.n	800c2ce <ip4_reass+0x11e>
  return NULL;
 800c296:	2500      	movs	r5, #0
 800c298:	e06d      	b.n	800c376 <ip4_reass+0x1c6>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c29a:	4649      	mov	r1, r9
 800c29c:	4628      	mov	r0, r5
 800c29e:	f7ff ff3f 	bl	800c120 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d1cf      	bne.n	800c248 <ip4_reass+0x98>
 800c2a8:	e061      	b.n	800c36e <ip4_reass+0x1be>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c2aa:	89e0      	ldrh	r0, [r4, #14]
 800c2ac:	f7f9 ff06 	bl	80060bc <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c2b0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d0c7      	beq.n	800c248 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	6868      	ldr	r0, [r5, #4]
 800c2bc:	68a9      	ldr	r1, [r5, #8]
 800c2be:	68ea      	ldr	r2, [r5, #12]
 800c2c0:	60a3      	str	r3, [r4, #8]
 800c2c2:	60e0      	str	r0, [r4, #12]
 800c2c4:	6121      	str	r1, [r4, #16]
 800c2c6:	6162      	str	r2, [r4, #20]
 800c2c8:	692b      	ldr	r3, [r5, #16]
 800c2ca:	61a3      	str	r3, [r4, #24]
 800c2cc:	e7bc      	b.n	800c248 <ip4_reass+0x98>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c2ce:	8ba0      	ldrh	r0, [r4, #28]
 800c2d0:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c2d2:	6863      	ldr	r3, [r4, #4]
 800c2d4:	685d      	ldr	r5, [r3, #4]
 800c2d6:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c2d8:	4623      	mov	r3, r4
 800c2da:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800c2de:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800c2e2:	689f      	ldr	r7, [r3, #8]
 800c2e4:	68d9      	ldr	r1, [r3, #12]
 800c2e6:	602a      	str	r2, [r5, #0]
 800c2e8:	f8c5 c004 	str.w	ip, [r5, #4]
 800c2ec:	60af      	str	r7, [r5, #8]
 800c2ee:	60e9      	str	r1, [r5, #12]
 800c2f0:	691a      	ldr	r2, [r3, #16]
 800c2f2:	612a      	str	r2, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c2f4:	b280      	uxth	r0, r0
 800c2f6:	f7f9 fee1 	bl	80060bc <lwip_htons>
 800c2fa:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	71ab      	strb	r3, [r5, #6]
 800c300:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c302:	72ab      	strb	r3, [r5, #10]
 800c304:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800c306:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800c308:	e009      	b.n	800c31e <ip4_reass+0x16e>
      iprh = (struct ip_reass_helper *)r->payload;
 800c30a:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800c30c:	2114      	movs	r1, #20
 800c30e:	4630      	mov	r0, r6
 800c310:	f7fa fcb2 	bl	8006c78 <pbuf_remove_header>
      pbuf_cat(p, r);
 800c314:	4631      	mov	r1, r6
 800c316:	4628      	mov	r0, r5
 800c318:	f7fa fe78 	bl	800700c <pbuf_cat>
      r = iprh->next_pbuf;
 800c31c:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800c31e:	2e00      	cmp	r6, #0
 800c320:	d1f3      	bne.n	800c30a <ip4_reass+0x15a>
    if (ipr == reassdatagrams) {
 800c322:	4b22      	ldr	r3, [pc, #136]	; (800c3ac <ip4_reass+0x1fc>)
 800c324:	6819      	ldr	r1, [r3, #0]
 800c326:	42a1      	cmp	r1, r4
 800c328:	d005      	beq.n	800c336 <ip4_reass+0x186>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c32a:	b129      	cbz	r1, 800c338 <ip4_reass+0x188>
        if (ipr_prev->next == ipr) {
 800c32c:	680b      	ldr	r3, [r1, #0]
 800c32e:	42a3      	cmp	r3, r4
 800c330:	d002      	beq.n	800c338 <ip4_reass+0x188>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c332:	4619      	mov	r1, r3
 800c334:	e7f9      	b.n	800c32a <ip4_reass+0x17a>
      ipr_prev = NULL;
 800c336:	4631      	mov	r1, r6
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c338:	4620      	mov	r0, r4
 800c33a:	f7ff fd03 	bl	800bd44 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800c33e:	4628      	mov	r0, r5
 800c340:	f7fa fe44 	bl	8006fcc <pbuf_clen>
 800c344:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c346:	4b19      	ldr	r3, [pc, #100]	; (800c3ac <ip4_reass+0x1fc>)
 800c348:	889b      	ldrh	r3, [r3, #4]
 800c34a:	4283      	cmp	r3, r0
 800c34c:	d304      	bcc.n	800c358 <ip4_reass+0x1a8>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c34e:	4a17      	ldr	r2, [pc, #92]	; (800c3ac <ip4_reass+0x1fc>)
 800c350:	8893      	ldrh	r3, [r2, #4]
 800c352:	1b1c      	subs	r4, r3, r4
 800c354:	8094      	strh	r4, [r2, #4]
    return p;
 800c356:	e00e      	b.n	800c376 <ip4_reass+0x1c6>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c358:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <ip4_reass+0x200>)
 800c35a:	f240 229b 	movw	r2, #667	; 0x29b
 800c35e:	4915      	ldr	r1, [pc, #84]	; (800c3b4 <ip4_reass+0x204>)
 800c360:	4815      	ldr	r0, [pc, #84]	; (800c3b8 <ip4_reass+0x208>)
 800c362:	f006 fbb7 	bl	8012ad4 <printf>
 800c366:	e7f2      	b.n	800c34e <ip4_reass+0x19e>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c368:	b144      	cbz	r4, 800c37c <ip4_reass+0x1cc>
  if (ipr->p == NULL) {
 800c36a:	6863      	ldr	r3, [r4, #4]
 800c36c:	b173      	cbz	r3, 800c38c <ip4_reass+0x1dc>
  pbuf_free(p);
 800c36e:	4630      	mov	r0, r6
 800c370:	f7fa fcc8 	bl	8006d04 <pbuf_free>
  return NULL;
 800c374:	2500      	movs	r5, #0
}
 800c376:	4628      	mov	r0, r5
 800c378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c37c:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <ip4_reass+0x200>)
 800c37e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c382:	490e      	ldr	r1, [pc, #56]	; (800c3bc <ip4_reass+0x20c>)
 800c384:	480c      	ldr	r0, [pc, #48]	; (800c3b8 <ip4_reass+0x208>)
 800c386:	f006 fba5 	bl	8012ad4 <printf>
 800c38a:	e7ee      	b.n	800c36a <ip4_reass+0x1ba>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c38c:	4b07      	ldr	r3, [pc, #28]	; (800c3ac <ip4_reass+0x1fc>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	42a3      	cmp	r3, r4
 800c392:	d006      	beq.n	800c3a2 <ip4_reass+0x1f2>
 800c394:	4b06      	ldr	r3, [pc, #24]	; (800c3b0 <ip4_reass+0x200>)
 800c396:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c39a:	4909      	ldr	r1, [pc, #36]	; (800c3c0 <ip4_reass+0x210>)
 800c39c:	4806      	ldr	r0, [pc, #24]	; (800c3b8 <ip4_reass+0x208>)
 800c39e:	f006 fb99 	bl	8012ad4 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f7ff fccd 	bl	800bd44 <ip_reass_dequeue_datagram>
 800c3aa:	e7e0      	b.n	800c36e <ip4_reass+0x1be>
 800c3ac:	200034f4 	.word	0x200034f4
 800c3b0:	0801c428 	.word	0x0801c428
 800c3b4:	0801c57c 	.word	0x0801c57c
 800c3b8:	08019f6c 	.word	0x08019f6c
 800c3bc:	0801c598 	.word	0x0801c598
 800c3c0:	0801c5a4 	.word	0x0801c5a4

0800c3c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c8:	b08b      	sub	sp, #44	; 0x2c
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	9106      	str	r1, [sp, #24]
 800c3ce:	9208      	str	r2, [sp, #32]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c3d0:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800c3d2:	3b14      	subs	r3, #20
 800c3d4:	d450      	bmi.n	800c478 <ip4_frag+0xb4>
 800c3d6:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800c3da:	9304      	str	r3, [sp, #16]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c3dc:	f8d6 b004 	ldr.w	fp, [r6, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c3e0:	f89b 3000 	ldrb.w	r3, [fp]
 800c3e4:	f003 030f 	and.w	r3, r3, #15
 800c3e8:	2b05      	cmp	r3, #5
 800c3ea:	f040 80d3 	bne.w	800c594 <ip4_frag+0x1d0>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c3ee:	8973      	ldrh	r3, [r6, #10]
 800c3f0:	2b13      	cmp	r3, #19
 800c3f2:	d943      	bls.n	800c47c <ip4_frag+0xb8>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c3f4:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c3f8:	f7f9 fe60 	bl	80060bc <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800c3fc:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800c400:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c402:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800c406:	9309      	str	r3, [sp, #36]	; 0x24

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c408:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 800c40c:	f1aa 0a14 	sub.w	sl, sl, #20
 800c410:	fa1f f38a 	uxth.w	r3, sl
 800c414:	9302      	str	r3, [sp, #8]
  u16_t poff = IP_HLEN;
 800c416:	2714      	movs	r7, #20
  u16_t newpbuflen = 0;
 800c418:	2400      	movs	r4, #0

  while (left) {
 800c41a:	9b02      	ldr	r3, [sp, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 80b7 	beq.w	800c590 <ip4_frag+0x1cc>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	b29b      	uxth	r3, r3
 800c428:	9a02      	ldr	r2, [sp, #8]
 800c42a:	4293      	cmp	r3, r2
 800c42c:	bf28      	it	cs
 800c42e:	4613      	movcs	r3, r2
 800c430:	9303      	str	r3, [sp, #12]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c432:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c436:	2114      	movs	r1, #20
 800c438:	200e      	movs	r0, #14
 800c43a:	f7fa fcc5 	bl	8006dc8 <pbuf_alloc>
    if (rambuf == NULL) {
 800c43e:	4682      	mov	sl, r0
 800c440:	2800      	cmp	r0, #0
 800c442:	f000 80aa 	beq.w	800c59a <ip4_frag+0x1d6>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c446:	8943      	ldrh	r3, [r0, #10]
 800c448:	2b13      	cmp	r3, #19
 800c44a:	d921      	bls.n	800c490 <ip4_frag+0xcc>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c44c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c450:	f8db 2000 	ldr.w	r2, [fp]
 800c454:	f8db 5004 	ldr.w	r5, [fp, #4]
 800c458:	f8db 0008 	ldr.w	r0, [fp, #8]
 800c45c:	f8db 100c 	ldr.w	r1, [fp, #12]
 800c460:	601a      	str	r2, [r3, #0]
 800c462:	605d      	str	r5, [r3, #4]
 800c464:	6098      	str	r0, [r3, #8]
 800c466:	60d9      	str	r1, [r3, #12]
 800c468:	f8db 2010 	ldr.w	r2, [fp, #16]
 800c46c:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c46e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c472:	9307      	str	r3, [sp, #28]

    left_to_copy = fragsize;
 800c474:	9d03      	ldr	r5, [sp, #12]
    while (left_to_copy) {
 800c476:	e03c      	b.n	800c4f2 <ip4_frag+0x12e>
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c478:	3307      	adds	r3, #7
 800c47a:	e7ac      	b.n	800c3d6 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c47c:	4b48      	ldr	r3, [pc, #288]	; (800c5a0 <ip4_frag+0x1dc>)
 800c47e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c482:	4948      	ldr	r1, [pc, #288]	; (800c5a4 <ip4_frag+0x1e0>)
 800c484:	4848      	ldr	r0, [pc, #288]	; (800c5a8 <ip4_frag+0x1e4>)
 800c486:	f006 fb25 	bl	8012ad4 <printf>
 800c48a:	f06f 0005 	mvn.w	r0, #5
 800c48e:	e043      	b.n	800c518 <ip4_frag+0x154>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c490:	4b43      	ldr	r3, [pc, #268]	; (800c5a0 <ip4_frag+0x1dc>)
 800c492:	f44f 7249 	mov.w	r2, #804	; 0x324
 800c496:	4945      	ldr	r1, [pc, #276]	; (800c5ac <ip4_frag+0x1e8>)
 800c498:	4843      	ldr	r0, [pc, #268]	; (800c5a8 <ip4_frag+0x1e4>)
 800c49a:	f006 fb1b 	bl	8012ad4 <printf>
 800c49e:	e7d5      	b.n	800c44c <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c4a0:	4b3f      	ldr	r3, [pc, #252]	; (800c5a0 <ip4_frag+0x1dc>)
 800c4a2:	f240 322d 	movw	r2, #813	; 0x32d
 800c4a6:	4942      	ldr	r1, [pc, #264]	; (800c5b0 <ip4_frag+0x1ec>)
 800c4a8:	483f      	ldr	r0, [pc, #252]	; (800c5a8 <ip4_frag+0x1e4>)
 800c4aa:	f006 fb13 	bl	8012ad4 <printf>
 800c4ae:	e026      	b.n	800c4fe <ip4_frag+0x13a>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c4b0:	f7ff fe30 	bl	800c114 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 800c4b4:	4680      	mov	r8, r0
 800c4b6:	b350      	cbz	r0, 800c50e <ip4_frag+0x14a>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c4b8:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c4ba:	9401      	str	r4, [sp, #4]
 800c4bc:	443b      	add	r3, r7
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2241      	movs	r2, #65	; 0x41
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	f7fa fbb4 	bl	8006c34 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800c4cc:	4681      	mov	r9, r0
 800c4ce:	b330      	cbz	r0, 800c51e <ip4_frag+0x15a>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7fa fd83 	bl	8006fdc <pbuf_ref>
      pcr->original = p;
 800c4d6:	f8c8 6014 	str.w	r6, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c4da:	4b36      	ldr	r3, [pc, #216]	; (800c5b4 <ip4_frag+0x1f0>)
 800c4dc:	f8c8 3010 	str.w	r3, [r8, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c4e0:	4649      	mov	r1, r9
 800c4e2:	4650      	mov	r0, sl
 800c4e4:	f7fa fd92 	bl	800700c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c4e8:	1b2d      	subs	r5, r5, r4
 800c4ea:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 800c4ec:	b10d      	cbz	r5, 800c4f2 <ip4_frag+0x12e>
        poff = 0;
        p = p->next;
 800c4ee:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800c4f0:	2700      	movs	r7, #0
    while (left_to_copy) {
 800c4f2:	b1ed      	cbz	r5, 800c530 <ip4_frag+0x16c>
      u16_t plen = (u16_t)(p->len - poff);
 800c4f4:	8973      	ldrh	r3, [r6, #10]
 800c4f6:	1bdc      	subs	r4, r3, r7
 800c4f8:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c4fa:	42bb      	cmp	r3, r7
 800c4fc:	d3d0      	bcc.n	800c4a0 <ip4_frag+0xdc>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c4fe:	42ac      	cmp	r4, r5
 800c500:	bf28      	it	cs
 800c502:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 800c504:	2c00      	cmp	r4, #0
 800c506:	d1d3      	bne.n	800c4b0 <ip4_frag+0xec>
        p = p->next;
 800c508:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800c50a:	4627      	mov	r7, r4
        continue;
 800c50c:	e7f1      	b.n	800c4f2 <ip4_frag+0x12e>
        pbuf_free(rambuf);
 800c50e:	4650      	mov	r0, sl
 800c510:	f7fa fbf8 	bl	8006d04 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c514:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c518:	b00b      	add	sp, #44	; 0x2c
 800c51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800c51e:	4640      	mov	r0, r8
 800c520:	f7ff fcee 	bl	800bf00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c524:	4650      	mov	r0, sl
 800c526:	f7fa fbed 	bl	8006d04 <pbuf_free>
  return ERR_MEM;
 800c52a:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800c52e:	e7f3      	b.n	800c518 <ip4_frag+0x154>
    poff = (u16_t)(poff + newpbuflen);
 800c530:	4427      	add	r7, r4
 800c532:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 800c534:	9b06      	ldr	r3, [sp, #24]
 800c536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c538:	3b13      	subs	r3, #19
    tmp = (IP_OFFMASK & (ofo));
 800c53a:	9a05      	ldr	r2, [sp, #20]
 800c53c:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800c540:	9a02      	ldr	r2, [sp, #8]
 800c542:	4293      	cmp	r3, r2
 800c544:	dd01      	ble.n	800c54a <ip4_frag+0x186>
 800c546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c548:	b10b      	cbz	r3, 800c54e <ip4_frag+0x18a>
      tmp = tmp | IP_MF;
 800c54a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c54e:	f7f9 fdb5 	bl	80060bc <lwip_htons>
 800c552:	9d07      	ldr	r5, [sp, #28]
 800c554:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c556:	9b03      	ldr	r3, [sp, #12]
 800c558:	f103 0014 	add.w	r0, r3, #20
 800c55c:	b280      	uxth	r0, r0
 800c55e:	f7f9 fdad 	bl	80060bc <lwip_htons>
 800c562:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c564:	2300      	movs	r3, #0
 800c566:	72ab      	strb	r3, [r5, #10]
 800c568:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 800c56a:	9806      	ldr	r0, [sp, #24]
 800c56c:	6943      	ldr	r3, [r0, #20]
 800c56e:	9a08      	ldr	r2, [sp, #32]
 800c570:	4651      	mov	r1, sl
 800c572:	4798      	blx	r3
    pbuf_free(rambuf);
 800c574:	4650      	mov	r0, sl
 800c576:	f7fa fbc5 	bl	8006d04 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c57a:	9a02      	ldr	r2, [sp, #8]
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	b29b      	uxth	r3, r3
 800c582:	9302      	str	r3, [sp, #8]
    ofo = (u16_t)(ofo + nfb);
 800c584:	9b05      	ldr	r3, [sp, #20]
 800c586:	9a04      	ldr	r2, [sp, #16]
 800c588:	4413      	add	r3, r2
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	9305      	str	r3, [sp, #20]
 800c58e:	e744      	b.n	800c41a <ip4_frag+0x56>
  return ERR_OK;
 800c590:	2000      	movs	r0, #0
 800c592:	e7c1      	b.n	800c518 <ip4_frag+0x154>
    return ERR_VAL;
 800c594:	f06f 0005 	mvn.w	r0, #5
 800c598:	e7be      	b.n	800c518 <ip4_frag+0x154>
  return ERR_MEM;
 800c59a:	f04f 30ff 	mov.w	r0, #4294967295
 800c59e:	e7bb      	b.n	800c518 <ip4_frag+0x154>
 800c5a0:	0801c428 	.word	0x0801c428
 800c5a4:	0801c5c4 	.word	0x0801c5c4
 800c5a8:	08019f6c 	.word	0x08019f6c
 800c5ac:	0801c5e0 	.word	0x0801c5e0
 800c5b0:	0801c600 	.word	0x0801c600
 800c5b4:	0800bf2d 	.word	0x0800bf2d

0800c5b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800c5bc:	8943      	ldrh	r3, [r0, #10]
 800c5be:	2b0e      	cmp	r3, #14
 800c5c0:	d91c      	bls.n	800c5fc <ethernet_input+0x44>
 800c5c2:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c5c4:	7bc3      	ldrb	r3, [r0, #15]
 800c5c6:	b91b      	cbnz	r3, 800c5d0 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800c5c8:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c5d0:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800c5d2:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c5d4:	7803      	ldrb	r3, [r0, #0]
 800c5d6:	f013 0f01 	tst.w	r3, #1
 800c5da:	d00a      	beq.n	800c5f2 <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d012      	beq.n	800c606 <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	491e      	ldr	r1, [pc, #120]	; (800c65c <ethernet_input+0xa4>)
 800c5e4:	f006 fa2c 	bl	8012a40 <memcmp>
 800c5e8:	b918      	cbnz	r0, 800c5f2 <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c5ea:	7b63      	ldrb	r3, [r4, #13]
 800c5ec:	f043 0308 	orr.w	r3, r3, #8
 800c5f0:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800c5f2:	2e08      	cmp	r6, #8
 800c5f4:	d012      	beq.n	800c61c <ethernet_input+0x64>
 800c5f6:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800c5fa:	d01f      	beq.n	800c63c <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f7fa fb81 	bl	8006d04 <pbuf_free>
  return ERR_OK;
}
 800c602:	2000      	movs	r0, #0
 800c604:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c606:	7843      	ldrb	r3, [r0, #1]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1f2      	bne.n	800c5f2 <ethernet_input+0x3a>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800c60c:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c60e:	2b5e      	cmp	r3, #94	; 0x5e
 800c610:	d1ef      	bne.n	800c5f2 <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800c612:	7b63      	ldrb	r3, [r4, #13]
 800c614:	f043 0310 	orr.w	r3, r3, #16
 800c618:	7363      	strb	r3, [r4, #13]
 800c61a:	e7ea      	b.n	800c5f2 <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c61c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800c620:	f013 0f08 	tst.w	r3, #8
 800c624:	d0ea      	beq.n	800c5fc <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c626:	210e      	movs	r1, #14
 800c628:	4620      	mov	r0, r4
 800c62a:	f7fa fb25 	bl	8006c78 <pbuf_remove_header>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d1e4      	bne.n	800c5fc <ethernet_input+0x44>
        ip4_input(p, netif);
 800c632:	4629      	mov	r1, r5
 800c634:	4620      	mov	r0, r4
 800c636:	f7ff f94f 	bl	800b8d8 <ip4_input>
      break;
 800c63a:	e7e2      	b.n	800c602 <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c63c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800c640:	f013 0f08 	tst.w	r3, #8
 800c644:	d0da      	beq.n	800c5fc <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c646:	210e      	movs	r1, #14
 800c648:	4620      	mov	r0, r4
 800c64a:	f7fa fb15 	bl	8006c78 <pbuf_remove_header>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d1d4      	bne.n	800c5fc <ethernet_input+0x44>
        etharp_input(p, netif);
 800c652:	4629      	mov	r1, r5
 800c654:	4620      	mov	r0, r4
 800c656:	f7fe fd31 	bl	800b0bc <etharp_input>
      break;
 800c65a:	e7d2      	b.n	800c602 <ethernet_input+0x4a>
 800c65c:	08019ef0 	.word	0x08019ef0

0800c660 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	4605      	mov	r5, r0
 800c666:	460c      	mov	r4, r1
 800c668:	4616      	mov	r6, r2
 800c66a:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c66c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800c670:	f7f9 fd24 	bl	80060bc <lwip_htons>
 800c674:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c676:	210e      	movs	r1, #14
 800c678:	4620      	mov	r0, r4
 800c67a:	f7fa faf8 	bl	8006c6e <pbuf_add_header>
 800c67e:	b9e8      	cbnz	r0, 800c6bc <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800c680:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800c682:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	600b      	str	r3, [r1, #0]
 800c68a:	88bb      	ldrh	r3, [r7, #4]
 800c68c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800c68e:	6833      	ldr	r3, [r6, #0]
 800c690:	f8c1 3006 	str.w	r3, [r1, #6]
 800c694:	88b3      	ldrh	r3, [r6, #4]
 800c696:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c698:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800c69c:	2b06      	cmp	r3, #6
 800c69e:	d105      	bne.n	800c6ac <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c6a0:	69ab      	ldr	r3, [r5, #24]
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800c6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <ethernet_output+0x64>)
 800c6ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c6b2:	4905      	ldr	r1, [pc, #20]	; (800c6c8 <ethernet_output+0x68>)
 800c6b4:	4805      	ldr	r0, [pc, #20]	; (800c6cc <ethernet_output+0x6c>)
 800c6b6:	f006 fa0d 	bl	8012ad4 <printf>
 800c6ba:	e7f1      	b.n	800c6a0 <ethernet_output+0x40>
  return ERR_BUF;
 800c6bc:	f06f 0001 	mvn.w	r0, #1
 800c6c0:	e7f2      	b.n	800c6a8 <ethernet_output+0x48>
 800c6c2:	bf00      	nop
 800c6c4:	0801c610 	.word	0x0801c610
 800c6c8:	0801c648 	.word	0x0801c648
 800c6cc:	08019f6c 	.word	0x08019f6c

0800c6d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800c6d0:	b500      	push	{lr}
 800c6d2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	9302      	str	r3, [sp, #8]
 800c6dc:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800c6de:	481c      	ldr	r0, [pc, #112]	; (800c750 <MX_ADC1_Init+0x80>)
 800c6e0:	4a1c      	ldr	r2, [pc, #112]	; (800c754 <MX_ADC1_Init+0x84>)
 800c6e2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800c6e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c6e8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c6ea:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c6f0:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c6f2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c6f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c6f8:	4917      	ldr	r1, [pc, #92]	; (800c758 <MX_ADC1_Init+0x88>)
 800c6fa:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c6fc:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 800c6fe:	2102      	movs	r1, #2
 800c700:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c702:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800c706:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c708:	f7f4 fd8e 	bl	8001228 <HAL_ADC_Init>
 800c70c:	b9b0      	cbnz	r0, 800c73c <MX_ADC1_Init+0x6c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800c70e:	2312      	movs	r3, #18
 800c710:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800c712:	2301      	movs	r3, #1
 800c714:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800c716:	2307      	movs	r3, #7
 800c718:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c71a:	4669      	mov	r1, sp
 800c71c:	480c      	ldr	r0, [pc, #48]	; (800c750 <MX_ADC1_Init+0x80>)
 800c71e:	f7f5 f84f 	bl	80017c0 <HAL_ADC_ConfigChannel>
 800c722:	b970      	cbnz	r0, 800c742 <MX_ADC1_Init+0x72>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800c724:	2303      	movs	r3, #3
 800c726:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800c728:	2302      	movs	r3, #2
 800c72a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c72c:	4669      	mov	r1, sp
 800c72e:	4808      	ldr	r0, [pc, #32]	; (800c750 <MX_ADC1_Init+0x80>)
 800c730:	f7f5 f846 	bl	80017c0 <HAL_ADC_ConfigChannel>
 800c734:	b940      	cbnz	r0, 800c748 <MX_ADC1_Init+0x78>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c736:	b005      	add	sp, #20
 800c738:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800c73c:	f002 f80c 	bl	800e758 <Error_Handler>
 800c740:	e7e5      	b.n	800c70e <MX_ADC1_Init+0x3e>
    Error_Handler();
 800c742:	f002 f809 	bl	800e758 <Error_Handler>
 800c746:	e7ed      	b.n	800c724 <MX_ADC1_Init+0x54>
    Error_Handler();
 800c748:	f002 f806 	bl	800e758 <Error_Handler>
}
 800c74c:	e7f3      	b.n	800c736 <MX_ADC1_Init+0x66>
 800c74e:	bf00      	nop
 800c750:	200073e4 	.word	0x200073e4
 800c754:	40012000 	.word	0x40012000
 800c758:	0f000001 	.word	0x0f000001

0800c75c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800c75c:	b530      	push	{r4, r5, lr}
 800c75e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c760:	2300      	movs	r3, #0
 800c762:	9303      	str	r3, [sp, #12]
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	9305      	str	r3, [sp, #20]
 800c768:	9306      	str	r3, [sp, #24]
 800c76a:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800c76c:	6802      	ldr	r2, [r0, #0]
 800c76e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c772:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800c776:	429a      	cmp	r2, r3
 800c778:	d001      	beq.n	800c77e <HAL_ADC_MspInit+0x22>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800c77a:	b009      	add	sp, #36	; 0x24
 800c77c:	bd30      	pop	{r4, r5, pc}
 800c77e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c780:	2500      	movs	r5, #0
 800c782:	9501      	str	r5, [sp, #4]
 800c784:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800c788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c78a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c78e:	645a      	str	r2, [r3, #68]	; 0x44
 800c790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c792:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800c796:	9201      	str	r2, [sp, #4]
 800c798:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c79a:	9502      	str	r5, [sp, #8]
 800c79c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c79e:	f042 0201 	orr.w	r2, r2, #1
 800c7a2:	631a      	str	r2, [r3, #48]	; 0x30
 800c7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	9302      	str	r3, [sp, #8]
 800c7ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VinSys_Pin;
 800c7ae:	2308      	movs	r3, #8
 800c7b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VinSys_GPIO_Port, &GPIO_InitStruct);
 800c7b8:	a903      	add	r1, sp, #12
 800c7ba:	4814      	ldr	r0, [pc, #80]	; (800c80c <HAL_ADC_MspInit+0xb0>)
 800c7bc:	f7f6 f956 	bl	8002a6c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800c7c0:	4813      	ldr	r0, [pc, #76]	; (800c810 <HAL_ADC_MspInit+0xb4>)
 800c7c2:	4b14      	ldr	r3, [pc, #80]	; (800c814 <HAL_ADC_MspInit+0xb8>)
 800c7c4:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c7c6:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c7c8:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c7ca:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c7cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7d0:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c7d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7d6:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c7d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7dc:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c7de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7e2:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c7e4:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c7e6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c7e8:	f7f5 f9a8 	bl	8001b3c <HAL_DMA_Init>
 800c7ec:	b958      	cbnz	r0, 800c806 <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800c7ee:	4b08      	ldr	r3, [pc, #32]	; (800c810 <HAL_ADC_MspInit+0xb4>)
 800c7f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7f2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2107      	movs	r1, #7
 800c7f8:	2012      	movs	r0, #18
 800c7fa:	f7f5 f8c7 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c7fe:	2012      	movs	r0, #18
 800c800:	f7f5 f8f8 	bl	80019f4 <HAL_NVIC_EnableIRQ>
}
 800c804:	e7b9      	b.n	800c77a <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800c806:	f001 ffa7 	bl	800e758 <Error_Handler>
 800c80a:	e7f0      	b.n	800c7ee <HAL_ADC_MspInit+0x92>
 800c80c:	40020000 	.word	0x40020000
 800c810:	2000742c 	.word	0x2000742c
 800c814:	40026470 	.word	0x40026470

0800c818 <updateDeviceSignature>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateDeviceSignature(void)
{
 800c818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	uint32_t u32UUID0 = 0;
	uint32_t u32UUID1 = 0;
	uint32_t u32UUID2 = 0;

	u32UUID0 = STM32_UUID[0];
 800c81c:	4f1a      	ldr	r7, [pc, #104]	; (800c888 <updateDeviceSignature+0x70>)
 800c81e:	683c      	ldr	r4, [r7, #0]
	u32UUID1 = STM32_UUID[1];
 800c820:	4e1a      	ldr	r6, [pc, #104]	; (800c88c <updateDeviceSignature+0x74>)
 800c822:	f8d6 8000 	ldr.w	r8, [r6]
	u32UUID2 = STM32_UUID[2];
 800c826:	4d1a      	ldr	r5, [pc, #104]	; (800c890 <updateDeviceSignature+0x78>)
 800c828:	6828      	ldr	r0, [r5, #0]

	/* Variable for production */
	gu32DeviceId = STM32_UUID[0];
 800c82a:	4b1a      	ldr	r3, [pc, #104]	; (800c894 <updateDeviceSignature+0x7c>)
 800c82c:	601c      	str	r4, [r3, #0]
	/*Integer to ASCII UUID 2 */
	itoa(u32UUID2,buffuuid2,10);
 800c82e:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c8a4 <updateDeviceSignature+0x8c>
 800c832:	220a      	movs	r2, #10
 800c834:	4651      	mov	r1, sl
 800c836:	f005 feaf 	bl	8012598 <itoa>
	/*Integer to ASCII UUID 1 */
	itoa(u32UUID1,buffuuid1,10);
 800c83a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800c8a8 <updateDeviceSignature+0x90>
 800c83e:	220a      	movs	r2, #10
 800c840:	4649      	mov	r1, r9
 800c842:	4640      	mov	r0, r8
 800c844:	f005 fea8 	bl	8012598 <itoa>
	/*Integer to ASCII UUID 0 */
	itoa(u32UUID0,buffuuid0,10);
 800c848:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800c8ac <updateDeviceSignature+0x94>
 800c84c:	220a      	movs	r2, #10
 800c84e:	4641      	mov	r1, r8
 800c850:	4620      	mov	r0, r4
 800c852:	f005 fea1 	bl	8012598 <itoa>
#if (USEFLASHSIZEINDEVINFO == TRUE)
	itoa(deviceSign.u32FlashSize,buffflash,10);
#endif

	/* Append Device Info to Array */
	strcat(dinfo,buffuuid2);
 800c856:	4c10      	ldr	r4, [pc, #64]	; (800c898 <updateDeviceSignature+0x80>)
 800c858:	4651      	mov	r1, sl
 800c85a:	4620      	mov	r0, r4
 800c85c:	f006 f99a 	bl	8012b94 <strcat>
	strcat(dinfo,buffuuid1);
 800c860:	4649      	mov	r1, r9
 800c862:	4620      	mov	r0, r4
 800c864:	f006 f996 	bl	8012b94 <strcat>
	strcat(dinfo,buffuuid0);
 800c868:	4641      	mov	r1, r8
 800c86a:	4620      	mov	r0, r4
 800c86c:	f006 f992 	bl	8012b94 <strcat>
#if (USEFLASHSIZEINDEVINFO == TRUE)
	strcat(dinfo,buffflash);
#endif
	/* Update Structure */
	/* 96 Bit UUID */
	deviceSign.u32UUID0 = STM32_UUID[0];
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <updateDeviceSignature+0x84>)
 800c874:	601a      	str	r2, [r3, #0]
	deviceSign.u32UUID1 = STM32_UUID[1];
 800c876:	6832      	ldr	r2, [r6, #0]
 800c878:	605a      	str	r2, [r3, #4]
	deviceSign.u32UUID2 = STM32_UUID[2];
 800c87a:	682a      	ldr	r2, [r5, #0]
 800c87c:	609a      	str	r2, [r3, #8]
	/* 16 Bit Flash Size */
	deviceSign.u32FlashSize = STM32_FLASHSIZE;
 800c87e:	4a08      	ldr	r2, [pc, #32]	; (800c8a0 <updateDeviceSignature+0x88>)
 800c880:	6812      	ldr	r2, [r2, #0]
 800c882:	60da      	str	r2, [r3, #12]
}
 800c884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c888:	1fff7a10 	.word	0x1fff7a10
 800c88c:	1fff7a14 	.word	0x1fff7a14
 800c890:	1fff7a18 	.word	0x1fff7a18
 800c894:	200034fc 	.word	0x200034fc
 800c898:	2000748c 	.word	0x2000748c
 800c89c:	20007570 	.word	0x20007570
 800c8a0:	1fff7a22 	.word	0x1fff7a22
 800c8a4:	20007550 	.word	0x20007550
 800c8a8:	20007510 	.word	0x20007510
 800c8ac:	20007530 	.word	0x20007530

0800c8b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c8b0:	b500      	push	{lr}
 800c8b2:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	9101      	str	r1, [sp, #4]
 800c8b8:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <MX_DMA_Init+0x30>)
 800c8ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8bc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c8c0:	631a      	str	r2, [r3, #48]	; 0x30
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800c8cc:	460a      	mov	r2, r1
 800c8ce:	203c      	movs	r0, #60	; 0x3c
 800c8d0:	f7f5 f85c 	bl	800198c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800c8d4:	203c      	movs	r0, #60	; 0x3c
 800c8d6:	f7f5 f88d 	bl	80019f4 <HAL_NVIC_EnableIRQ>

}
 800c8da:	b003      	add	sp, #12
 800c8dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8e0:	40023800 	.word	0x40023800

0800c8e4 <assertError>:
			/* Unwanted / Undefined Error Occured
			 * System Will Halt Completely */
			//while(1);
			break;
	}
}
 800c8e4:	4770      	bx	lr
	...

0800c8e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c8e8:	b510      	push	{r4, lr}
 800c8ea:	b08c      	sub	sp, #48	; 0x30
 800c8ec:	460c      	mov	r4, r1
  uint32_t i = 0U;
  struct pbuf *q = NULL;
  err_t errval = ERR_OK;
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c8ee:	2230      	movs	r2, #48	; 0x30
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	4668      	mov	r0, sp
 800c8f4:	f006 f8da 	bl	8012aac <memset>

  for(q = p; q != NULL; q = q->next)
 800c8f8:	4622      	mov	r2, r4
  uint32_t i = 0U;
 800c8fa:	2300      	movs	r3, #0
  for(q = p; q != NULL; q = q->next)
 800c8fc:	e003      	b.n	800c906 <low_level_output+0x1e>
    if(i>0)
    {
      Txbuffer[i-1].next = &Txbuffer[i];
    }

    if(q->next == NULL)
 800c8fe:	6811      	ldr	r1, [r2, #0]
 800c900:	b1f1      	cbz	r1, 800c940 <low_level_output+0x58>
    {
      Txbuffer[i].next = NULL;
    }

    i++;
 800c902:	3301      	adds	r3, #1
  for(q = p; q != NULL; q = q->next)
 800c904:	6812      	ldr	r2, [r2, #0]
 800c906:	b322      	cbz	r2, 800c952 <low_level_output+0x6a>
    if(i >= ETH_TX_DESC_CNT)
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d82e      	bhi.n	800c96a <low_level_output+0x82>
    Txbuffer[i].buffer = q->payload;
 800c90c:	6851      	ldr	r1, [r2, #4]
 800c90e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800c912:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c916:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 800c91a:	f840 1c30 	str.w	r1, [r0, #-48]
    Txbuffer[i].len = q->len;
 800c91e:	8951      	ldrh	r1, [r2, #10]
 800c920:	f840 1c2c 	str.w	r1, [r0, #-44]
    if(i>0)
 800c924:	2b00      	cmp	r3, #0
 800c926:	d0ea      	beq.n	800c8fe <low_level_output+0x16>
      Txbuffer[i-1].next = &Txbuffer[i];
 800c928:	1e58      	subs	r0, r3, #1
 800c92a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c92e:	eb0d 0181 	add.w	r1, sp, r1, lsl #2
 800c932:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c936:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 800c93a:	f840 1c28 	str.w	r1, [r0, #-40]
 800c93e:	e7de      	b.n	800c8fe <low_level_output+0x16>
      Txbuffer[i].next = NULL;
 800c940:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c944:	a80c      	add	r0, sp, #48	; 0x30
 800c946:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c94a:	2000      	movs	r0, #0
 800c94c:	f841 0c28 	str.w	r0, [r1, #-40]
 800c950:	e7d7      	b.n	800c902 <low_level_output+0x1a>
  }

  TxConfig.Length = p->tot_len;
 800c952:	8923      	ldrh	r3, [r4, #8]
 800c954:	4907      	ldr	r1, [pc, #28]	; (800c974 <low_level_output+0x8c>)
 800c956:	604b      	str	r3, [r1, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c958:	f8c1 d008 	str.w	sp, [r1, #8]
  TxConfig.pData = p;
 800c95c:	634c      	str	r4, [r1, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c95e:	2214      	movs	r2, #20
 800c960:	4805      	ldr	r0, [pc, #20]	; (800c978 <low_level_output+0x90>)
 800c962:	f7f5 fda9 	bl	80024b8 <HAL_ETH_Transmit>

  return errval;
 800c966:	2000      	movs	r0, #0
 800c968:	e001      	b.n	800c96e <low_level_output+0x86>
      return ERR_IF;
 800c96a:	f06f 000b 	mvn.w	r0, #11
}
 800c96e:	b00c      	add	sp, #48	; 0x30
 800c970:	bd10      	pop	{r4, pc}
 800c972:	bf00      	nop
 800c974:	2000cde8 	.word	0x2000cde8
 800c978:	2000cd38 	.word	0x2000cd38

0800c97c <low_level_init>:
{
 800c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c980:	b082      	sub	sp, #8
 800c982:	4604      	mov	r4, r0
  heth.Instance = ETH;
 800c984:	4d2c      	ldr	r5, [pc, #176]	; (800ca38 <low_level_init+0xbc>)
 800c986:	4b2d      	ldr	r3, [pc, #180]	; (800ca3c <low_level_init+0xc0>)
 800c988:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 800c98a:	2600      	movs	r6, #0
 800c98c:	f88d 6000 	strb.w	r6, [sp]
  MACAddr[1] = 0x80;
 800c990:	2380      	movs	r3, #128	; 0x80
 800c992:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 800c996:	23e1      	movs	r3, #225	; 0xe1
 800c998:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 800c99c:	f88d 6003 	strb.w	r6, [sp, #3]
  MACAddr[4] = 0x00;
 800c9a0:	f88d 6004 	strb.w	r6, [sp, #4]
  MACAddr[5] = 0x00;
 800c9a4:	f88d 6005 	strb.w	r6, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800c9a8:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c9ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c9b0:	60ab      	str	r3, [r5, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c9b2:	4b23      	ldr	r3, [pc, #140]	; (800ca40 <low_level_init+0xc4>)
 800c9b4:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c9b6:	4b23      	ldr	r3, [pc, #140]	; (800ca44 <low_level_init+0xc8>)
 800c9b8:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 800c9ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c9be:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f7f5 fd19 	bl	80023f8 <HAL_ETH_Init>
 800c9c6:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c9c8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800ca4c <low_level_init+0xd0>
 800c9cc:	2234      	movs	r2, #52	; 0x34
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	f006 f86b 	bl	8012aac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c9d6:	2321      	movs	r3, #33	; 0x21
 800c9d8:	f848 3c04 	str.w	r3, [r8, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c9dc:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800c9e0:	f8c8 3010 	str.w	r3, [r8, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c9e4:	4818      	ldr	r0, [pc, #96]	; (800ca48 <low_level_init+0xcc>)
 800c9e6:	f7f9 fea9 	bl	800673c <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c9ea:	2306      	movs	r3, #6
 800c9ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c9f0:	686b      	ldr	r3, [r5, #4]
 800c9f2:	781a      	ldrb	r2, [r3, #0]
 800c9f4:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c9f8:	785a      	ldrb	r2, [r3, #1]
 800c9fa:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c9fe:	789a      	ldrb	r2, [r3, #2]
 800ca00:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ca04:	78da      	ldrb	r2, [r3, #3]
 800ca06:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ca0a:	791a      	ldrb	r2, [r3, #4]
 800ca0c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ca10:	795b      	ldrb	r3, [r3, #5]
 800ca12:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 800ca16:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800ca1a:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ca1c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ca20:	f043 030a 	orr.w	r3, r3, #10
 800ca24:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  if (hal_eth_init_status == HAL_OK)
 800ca28:	b917      	cbnz	r7, 800ca30 <low_level_init+0xb4>
}
 800ca2a:	b002      	add	sp, #8
 800ca2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Error_Handler();
 800ca30:	f001 fe92 	bl	800e758 <Error_Handler>
}
 800ca34:	e7f9      	b.n	800ca2a <low_level_init+0xae>
 800ca36:	bf00      	nop
 800ca38:	2000cd38 	.word	0x2000cd38
 800ca3c:	40028000 	.word	0x40028000
 800ca40:	20008274 	.word	0x20008274
 800ca44:	2000cc98 	.word	0x2000cc98
 800ca48:	08019f00 	.word	0x08019f00
 800ca4c:	2000cdec 	.word	0x2000cdec

0800ca50 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ca50:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ca52:	4604      	mov	r4, r0
 800ca54:	b170      	cbz	r0, 800ca74 <ethernetif_init+0x24>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ca56:	2373      	movs	r3, #115	; 0x73
 800ca58:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800ca5c:	2374      	movs	r3, #116	; 0x74
 800ca5e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ca62:	4b08      	ldr	r3, [pc, #32]	; (800ca84 <ethernetif_init+0x34>)
 800ca64:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ca66:	4b08      	ldr	r3, [pc, #32]	; (800ca88 <ethernetif_init+0x38>)
 800ca68:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7ff ff86 	bl	800c97c <low_level_init>

  return ERR_OK;
}
 800ca70:	2000      	movs	r0, #0
 800ca72:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ca74:	4b05      	ldr	r3, [pc, #20]	; (800ca8c <ethernetif_init+0x3c>)
 800ca76:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800ca7a:	4905      	ldr	r1, [pc, #20]	; (800ca90 <ethernetif_init+0x40>)
 800ca7c:	4805      	ldr	r0, [pc, #20]	; (800ca94 <ethernetif_init+0x44>)
 800ca7e:	f006 f829 	bl	8012ad4 <printf>
 800ca82:	e7e8      	b.n	800ca56 <ethernetif_init+0x6>
 800ca84:	0800b499 	.word	0x0800b499
 800ca88:	0800c8e9 	.word	0x0800c8e9
 800ca8c:	0801c67c 	.word	0x0801c67c
 800ca90:	0801c144 	.word	0x0801c144
 800ca94:	08019f6c 	.word	0x08019f6c

0800ca98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800ca98:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800ca9a:	f7f4 fb11 	bl	80010c0 <HAL_GetTick>
}
 800ca9e:	bd08      	pop	{r3, pc}

0800caa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800caa6:	2400      	movs	r4, #0
 800caa8:	9407      	str	r4, [sp, #28]
 800caaa:	9408      	str	r4, [sp, #32]
 800caac:	9409      	str	r4, [sp, #36]	; 0x24
 800caae:	940a      	str	r4, [sp, #40]	; 0x28
 800cab0:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cab2:	9401      	str	r4, [sp, #4]
 800cab4:	4b39      	ldr	r3, [pc, #228]	; (800cb9c <MX_GPIO_Init+0xfc>)
 800cab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cabc:	631a      	str	r2, [r3, #48]	; 0x30
 800cabe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cac0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cac8:	9402      	str	r4, [sp, #8]
 800caca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cacc:	f042 0204 	orr.w	r2, r2, #4
 800cad0:	631a      	str	r2, [r3, #48]	; 0x30
 800cad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cad4:	f002 0204 	and.w	r2, r2, #4
 800cad8:	9202      	str	r2, [sp, #8]
 800cada:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cadc:	9403      	str	r4, [sp, #12]
 800cade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cae0:	f042 0201 	orr.w	r2, r2, #1
 800cae4:	631a      	str	r2, [r3, #48]	; 0x30
 800cae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cae8:	f002 0201 	and.w	r2, r2, #1
 800caec:	9203      	str	r2, [sp, #12]
 800caee:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800caf0:	9404      	str	r4, [sp, #16]
 800caf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800caf4:	f042 0210 	orr.w	r2, r2, #16
 800caf8:	631a      	str	r2, [r3, #48]	; 0x30
 800cafa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cafc:	f002 0210 	and.w	r2, r2, #16
 800cb00:	9204      	str	r2, [sp, #16]
 800cb02:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb04:	9405      	str	r4, [sp, #20]
 800cb06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb08:	f042 0202 	orr.w	r2, r2, #2
 800cb0c:	631a      	str	r2, [r3, #48]	; 0x30
 800cb0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb10:	f002 0202 	and.w	r2, r2, #2
 800cb14:	9205      	str	r2, [sp, #20]
 800cb16:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cb18:	9406      	str	r4, [sp, #24]
 800cb1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb1c:	f042 0208 	orr.w	r2, r2, #8
 800cb20:	631a      	str	r2, [r3, #48]	; 0x30
 800cb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	9306      	str	r3, [sp, #24]
 800cb2a:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MB_DE_Pin|MB_RE_Pin, GPIO_PIN_RESET);
 800cb2c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800cba8 <MX_GPIO_Init+0x108>
 800cb30:	4622      	mov	r2, r4
 800cb32:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cb36:	4640      	mov	r0, r8
 800cb38:	f7f6 f890 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_RESET);
 800cb3c:	4f18      	ldr	r7, [pc, #96]	; (800cba0 <MX_GPIO_Init+0x100>)
 800cb3e:	4622      	mov	r2, r4
 800cb40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cb44:	4638      	mov	r0, r7
 800cb46:	f7f6 f889 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_1_Pin|HEARTBEAT_Pin|LED_3_Pin|LED_2_Pin
 800cb4a:	4e16      	ldr	r6, [pc, #88]	; (800cba4 <MX_GPIO_Init+0x104>)
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 800cb52:	4630      	mov	r0, r6
 800cb54:	f7f6 f882 	bl	8002c5c <HAL_GPIO_WritePin>
                          |GSM_PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MB_DE_Pin|MB_RE_Pin;
 800cb58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cb5c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb5e:	2501      	movs	r5, #1
 800cb60:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb62:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb64:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cb66:	a907      	add	r1, sp, #28
 800cb68:	4640      	mov	r0, r8
 800cb6a:	f7f5 ff7f 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CE_Pin;
 800cb6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb72:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb74:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb76:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb78:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI_CE_GPIO_Port, &GPIO_InitStruct);
 800cb7a:	a907      	add	r1, sp, #28
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7f5 ff75 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED_1_Pin|HEARTBEAT_Pin|LED_3_Pin|LED_2_Pin
 800cb82:	f44f 631e 	mov.w	r3, #2528	; 0x9e0
 800cb86:	9307      	str	r3, [sp, #28]
                          |GSM_PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb88:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb8a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb8c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cb8e:	a907      	add	r1, sp, #28
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7f5 ff6b 	bl	8002a6c <HAL_GPIO_Init>

}
 800cb96:	b00c      	add	sp, #48	; 0x30
 800cb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9c:	40023800 	.word	0x40023800
 800cba0:	40020400 	.word	0x40020400
 800cba4:	40020c00 	.word	0x40020c00
 800cba8:	40021000 	.word	0x40021000

0800cbac <initGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initGSMSIM868(void)
{
 800cbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Init Buffers */

	memset(gsmInstance.agpsLocationData, GSM_ARRAY_INIT_CHAR, (GPS_LOCATION_ARRAY_SIZE * sizeof(char)));
 800cbb0:	4c6a      	ldr	r4, [pc, #424]	; (800cd5c <initGSMSIM868+0x1b0>)
 800cbb2:	2296      	movs	r2, #150	; 0x96
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f005 ff78 	bl	8012aac <memset>
	memset(gsmInstance.agsmNetworkIP, GSM_ARRAY_INIT_CHAR, (GPRS_NETWORKIP_ARRAY_SIZE * sizeof(char)));
 800cbbc:	2223      	movs	r2, #35	; 0x23
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800cbc4:	f005 ff72 	bl	8012aac <memset>
	memset(gsmInstance.agsmSignalStrength, GSM_ARRAY_INIT_CHAR, (GSM_SIGSTRGTH_ARRAY_SIZE * sizeof(char)));
 800cbc8:	2500      	movs	r5, #0
 800cbca:	f8c4 5096 	str.w	r5, [r4, #150]	; 0x96
 800cbce:	f8c4 509a 	str.w	r5, [r4, #154]	; 0x9a
 800cbd2:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
	memset((char *)gsmInstance.as8GSM_Response_Buff,GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(char)));
 800cbd6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800cbe0:	f005 ff64 	bl	8012aac <memset>
	memset(gsmInstance.agsmCommandResponse, DATA_UNKNOWN, sizeof(gsmInstance.agsmCommandResponse[0][0])
 800cbe4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800cbe8:	213f      	movs	r1, #63	; 0x3f
 800cbea:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 800cbee:	f005 ff5d 	bl	8012aac <memset>
		   * GSM_TOTAL_COMMANDS * GSM_TOTAL_COMMANDS);
	memset(gsmInstance.agsmHTTPRequestStatus,DATA_UNKNOWN,GSM_HTTP_RESPONSE_CODE_SIZE * sizeof(char));
 800cbf2:	f04f 333f 	mov.w	r3, #1061109567	; 0x3f3f3f3f
 800cbf6:	f8c4 3447 	str.w	r3, [r4, #1095]	; 0x447
 800cbfa:	f8c4 344b 	str.w	r3, [r4, #1099]	; 0x44b
	memset(gsmInstance.strSystemSMS.agsmSMSRecipient,DATA_UNKNOWN,SMS_MOB_NO_LENGTH * sizeof(char));
 800cbfe:	f8c4 3e41 	str.w	r3, [r4, #3649]	; 0xe41
 800cc02:	f8c4 3e45 	str.w	r3, [r4, #3653]	; 0xe45
 800cc06:	f8c4 3e49 	str.w	r3, [r4, #3657]	; 0xe49
 800cc0a:	f884 3e4d 	strb.w	r3, [r4, #3661]	; 0xe4d
	memset(gsmInstance.strSystemSMS.agsmSMSMessageBody,0x00,SMS_MAX_MSG_LENGTH * sizeof(char));
 800cc0e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc12:	4629      	mov	r1, r5
 800cc14:	f604 604e 	addw	r0, r4, #3662	; 0xe4e
 800cc18:	f005 ff48 	bl	8012aac <memset>
	memset(gsmInstance.u32GSMHttpResponseCode,0x00,sizeof(char) * 3);
 800cc1c:	f8a4 544f 	strh.w	r5, [r4, #1103]	; 0x44f
 800cc20:	f884 5451 	strb.w	r5, [r4, #1105]	; 0x451
	memset(gau8GSM_ATAPN, 0x00, (180 * sizeof(char)));
 800cc24:	4e4e      	ldr	r6, [pc, #312]	; (800cd60 <initGSMSIM868+0x1b4>)
 800cc26:	f04f 09b4 	mov.w	r9, #180	; 0xb4
 800cc2a:	464a      	mov	r2, r9
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f005 ff3c 	bl	8012aac <memset>
	memset(gau8GSM_ATURL, 0x00, (180 * sizeof(char)));
 800cc34:	eb06 0809 	add.w	r8, r6, r9
 800cc38:	464a      	mov	r2, r9
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	f005 ff35 	bl	8012aac <memset>
	memset(gau8GSM_SMSRecepient, 0x00, ( 180 * sizeof(char)));
 800cc42:	f506 77b4 	add.w	r7, r6, #360	; 0x168
 800cc46:	464a      	mov	r2, r9
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	f005 ff2e 	bl	8012aac <memset>

	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_ATCMGS);
 800cc50:	f506 7107 	add.w	r1, r6, #540	; 0x21c
 800cc54:	4638      	mov	r0, r7
 800cc56:	f005 ff9d 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f7f3 fad2 	bl	8000204 <strlen>
 800cc60:	4b40      	ldr	r3, [pc, #256]	; (800cd64 <initGSMSIM868+0x1b8>)
 800cc62:	f8b3 9000 	ldrh.w	r9, [r3]
 800cc66:	f827 9000 	strh.w	r9, [r7, r0]
	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_smsto);
 800cc6a:	f506 710e 	add.w	r1, r6, #568	; 0x238
 800cc6e:	4638      	mov	r0, r7
 800cc70:	f005 ff90 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7f3 fac5 	bl	8000204 <strlen>
 800cc7a:	f827 9000 	strh.w	r9, [r7, r0]
	//strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_ATSAPRBAPN);
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f7f3 fac0 	bl	8000204 <strlen>
 800cc84:	f826 9000 	strh.w	r9, [r6, r0]
	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_apn);
 800cc88:	f506 7112 	add.w	r1, r6, #584	; 0x248
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f005 ff81 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 800cc92:	4630      	mov	r0, r6
 800cc94:	f7f3 fab6 	bl	8000204 <strlen>
 800cc98:	f826 9000 	strh.w	r9, [r6, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 800cc9c:	f506 712b 	add.w	r1, r6, #684	; 0x2ac
 800cca0:	4640      	mov	r0, r8
 800cca2:	f005 ff77 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800cca6:	4640      	mov	r0, r8
 800cca8:	f7f3 faac 	bl	8000204 <strlen>
 800ccac:	f828 9000 	strh.w	r9, [r8, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 800ccb0:	f506 7151 	add.w	r1, r6, #836	; 0x344
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	f005 ff6d 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800ccba:	4640      	mov	r0, r8
 800ccbc:	f7f3 faa2 	bl	8000204 <strlen>
 800ccc0:	f828 9000 	strh.w	r9, [r8, r0]
	strcat(gau8GSM_ATAPN,"\r\n");
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f7f3 fa9d 	bl	8000204 <strlen>
 800ccca:	1832      	adds	r2, r6, r0
 800cccc:	4b26      	ldr	r3, [pc, #152]	; (800cd68 <initGSMSIM868+0x1bc>)
 800ccce:	f8b3 a000 	ldrh.w	sl, [r3]
 800ccd2:	f893 9002 	ldrb.w	r9, [r3, #2]
 800ccd6:	f826 a000 	strh.w	sl, [r6, r0]
 800ccda:	f882 9002 	strb.w	r9, [r2, #2]
	strcat(gau8GSM_ATURL,"\r\n");
 800ccde:	4640      	mov	r0, r8
 800cce0:	f7f3 fa90 	bl	8000204 <strlen>
 800cce4:	eb08 0300 	add.w	r3, r8, r0
 800cce8:	f828 a000 	strh.w	sl, [r8, r0]
 800ccec:	f883 9002 	strb.w	r9, [r3, #2]
	strcat(gau8GSM_SMSRecepient,"\r\n");
 800ccf0:	4638      	mov	r0, r7
 800ccf2:	f7f3 fa87 	bl	8000204 <strlen>
 800ccf6:	183b      	adds	r3, r7, r0
 800ccf8:	f827 a000 	strh.w	sl, [r7, r0]
 800ccfc:	f883 9002 	strb.w	r9, [r3, #2]

	gsmInstance.strSystemSMS.u8NewMessage = FALSE;
 800cd00:	f241 136e 	movw	r3, #4462	; 0x116e
 800cd04:	54e5      	strb	r5, [r4, r3]
	gsmInstance.enmcurrentTask = enmGSMTASK_RESET;
 800cd06:	f884 5e3e 	strb.w	r5, [r4, #3646]	; 0xe3e
	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 800cd0a:	f884 5e40 	strb.w	r5, [r4, #3648]	; 0xe40
	gsmInstance.u8isConnected = FALSE;
 800cd0e:	f884 5e19 	strb.w	r5, [r4, #3609]	; 0xe19
	gsmInstance.u8GSM_Response_Character_Counter = 0;
 800cd12:	f8c4 5e38 	str.w	r5, [r4, #3640]	; 0xe38
	gsmInstance.u8gsmRegistrationStatus = FALSE;
 800cd16:	f884 5e17 	strb.w	r5, [r4, #3607]	; 0xe17
	gsmInstance.u8gsmSIMReadyStatus = FALSE;
 800cd1a:	f884 5e16 	strb.w	r5, [r4, #3606]	; 0xe16
	gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 800cd1e:	2305      	movs	r3, #5
 800cd20:	f884 3e18 	strb.w	r3, [r4, #3608]	; 0xe18
	gsmInstance.u8AttemptFota = FALSE;
 800cd24:	f884 5e1b 	strb.w	r5, [r4, #3611]	; 0xe1b
	gsmInstance.u32GSMTimer = ONE_SEC;
 800cd28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd2c:	f8c4 3e20 	str.w	r3, [r4, #3616]	; 0xe20
	gu32GSMHangTimer = THREE_MIN;
 800cd30:	4b0e      	ldr	r3, [pc, #56]	; (800cd6c <initGSMSIM868+0x1c0>)
 800cd32:	4a0f      	ldr	r2, [pc, #60]	; (800cd70 <initGSMSIM868+0x1c4>)
 800cd34:	601a      	str	r2, [r3, #0]
	gu32GSMRestartTimer = FIVE_MIN;
 800cd36:	4b0f      	ldr	r3, [pc, #60]	; (800cd74 <initGSMSIM868+0x1c8>)
 800cd38:	4a0f      	ldr	r2, [pc, #60]	; (800cd78 <initGSMSIM868+0x1cc>)
 800cd3a:	601a      	str	r2, [r3, #0]
	gsmInstance.u32GSMHeartbeatTimer = 0;
 800cd3c:	f8c4 5e2c 	str.w	r5, [r4, #3628]	; 0xe2c
	gsmInstance.u8IllegalHttpResponseCounter = 0;
 800cd40:	f884 5e1d 	strb.w	r5, [r4, #3613]	; 0xe1d
	gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800cd44:	f884 5e3c 	strb.w	r5, [r4, #3644]	; 0xe3c
	gsmInstance.enmGSMCommand = enmGSMSTATE_ATE0;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	f884 3e3f 	strb.w	r3, [r4, #3647]	; 0xe3f
	gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800cd4e:	f884 3e3d 	strb.w	r3, [r4, #3645]	; 0xe3d
	gu8FlagNoTerminate = 1;
 800cd52:	f886 33da 	strb.w	r3, [r6, #986]	; 0x3da
}
 800cd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5a:	bf00      	nop
 800cd5c:	2000d5f0 	.word	0x2000d5f0
 800cd60:	20000014 	.word	0x20000014
 800cd64:	0801c690 	.word	0x0801c690
 800cd68:	0801c6b0 	.word	0x0801c6b0
 800cd6c:	20004448 	.word	0x20004448
 800cd70:	0002bf20 	.word	0x0002bf20
 800cd74:	200029a4 	.word	0x200029a4
 800cd78:	000493e0 	.word	0x000493e0

0800cd7c <updateHttpDataLength>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateHttpDataLength()
{
 800cd7c:	b5b0      	push	{r4, r5, r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
	char * tempdata = "";
	tempdata = gsmPayload.data[gsmPayload.tail];
 800cd80:	4a19      	ldr	r2, [pc, #100]	; (800cde8 <updateHttpDataLength+0x6c>)
 800cd82:	6853      	ldr	r3, [r2, #4]
 800cd84:	3302      	adds	r3, #2

	uint32_t payloadLength = strlen(tempdata);
 800cd86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd8a:	f7f3 fa3b 	bl	8000204 <strlen>
 800cd8e:	4604      	mov	r4, r0
	char buffer[payloadLength];
 800cd90:	1dc3      	adds	r3, r0, #7
 800cd92:	f023 0307 	bic.w	r3, r3, #7
 800cd96:	ebad 0d03 	sub.w	sp, sp, r3
	memset(buffer, 0x00, (payloadLength * sizeof(char))); /* Clear Response Buffer */
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	4668      	mov	r0, sp
 800cda0:	f005 fe84 	bl	8012aac <memset>

	/* Convert Integer to ASCII ( Decimal) */
	memset(gau8GSM_ATHTTPDATACOMMAND, 0x00, ( 30 * sizeof(char)));
 800cda4:	4d11      	ldr	r5, [pc, #68]	; (800cdec <updateHttpDataLength+0x70>)
 800cda6:	221e      	movs	r2, #30
 800cda8:	2100      	movs	r1, #0
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f005 fe7e 	bl	8012aac <memset>
	itoa(payloadLength,buffer,PAYLOAD_DATA_STRING_RADIX);
 800cdb0:	220a      	movs	r2, #10
 800cdb2:	4669      	mov	r1, sp
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f005 fbef 	bl	8012598 <itoa>
	strcat(buffer,gu8GSMDataTimeout);
 800cdba:	4668      	mov	r0, sp
 800cdbc:	f7f3 fa22 	bl	8000204 <strlen>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	eb0d 0400 	add.w	r4, sp, r0
 800cdc6:	4b0a      	ldr	r3, [pc, #40]	; (800cdf0 <updateHttpDataLength+0x74>)
 800cdc8:	cb03      	ldmia	r3!, {r0, r1}
 800cdca:	f84d 0002 	str.w	r0, [sp, r2]
 800cdce:	6061      	str	r1, [r4, #4]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	7223      	strb	r3, [r4, #8]
	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,(char *)gau8GSM_ATHTTPDATA);
 800cdd4:	4907      	ldr	r1, [pc, #28]	; (800cdf4 <updateHttpDataLength+0x78>)
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f005 fedc 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,buffer);
 800cddc:	4669      	mov	r1, sp
 800cdde:	4628      	mov	r0, r5
 800cde0:	f005 fed8 	bl	8012b94 <strcat>
}
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bdb0      	pop	{r4, r5, r7, pc}
 800cde8:	2000e760 	.word	0x2000e760
 800cdec:	20003510 	.word	0x20003510
 800cdf0:	0801c694 	.word	0x0801c694
 800cdf4:	200003f0 	.word	0x200003f0

0800cdf8 <sendSystemConfigurationSMS>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void sendSystemConfigurationSMS(void)
{
 800cdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdfa:	b089      	sub	sp, #36	; 0x24
	/* Tor Signature */
	strcpy(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)KLOUDQ_SIGNATURE);
 800cdfc:	4c91      	ldr	r4, [pc, #580]	; (800d044 <sendSystemConfigurationSMS+0x24c>)
 800cdfe:	4d92      	ldr	r5, [pc, #584]	; (800d048 <sendSystemConfigurationSMS+0x250>)
 800ce00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce02:	6020      	str	r0, [r4, #0]
 800ce04:	6061      	str	r1, [r4, #4]
 800ce06:	60a2      	str	r2, [r4, #8]
 800ce08:	60e3      	str	r3, [r4, #12]
 800ce0a:	882a      	ldrh	r2, [r5, #0]
 800ce0c:	78ab      	ldrb	r3, [r5, #2]
 800ce0e:	8222      	strh	r2, [r4, #16]
 800ce10:	74a3      	strb	r3, [r4, #18]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Config: \r\n");
 800ce12:	4620      	mov	r0, r4
 800ce14:	f7f3 f9f6 	bl	8000204 <strlen>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	1905      	adds	r5, r0, r4
 800ce1c:	4b8b      	ldr	r3, [pc, #556]	; (800d04c <sendSystemConfigurationSMS+0x254>)
 800ce1e:	cb03      	ldmia	r3!, {r0, r1}
 800ce20:	5110      	str	r0, [r2, r4]
 800ce22:	6069      	str	r1, [r5, #4]
 800ce24:	881a      	ldrh	r2, [r3, #0]
 800ce26:	789b      	ldrb	r3, [r3, #2]
 800ce28:	812a      	strh	r2, [r5, #8]
 800ce2a:	72ab      	strb	r3, [r5, #10]
	/*Tor Version */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Version: \r\n");
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7f3 f9e9 	bl	8000204 <strlen>
 800ce32:	4605      	mov	r5, r0
 800ce34:	1906      	adds	r6, r0, r4
 800ce36:	4b86      	ldr	r3, [pc, #536]	; (800d050 <sendSystemConfigurationSMS+0x258>)
 800ce38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ce3a:	5128      	str	r0, [r5, r4]
 800ce3c:	6071      	str	r1, [r6, #4]
 800ce3e:	60b2      	str	r2, [r6, #8]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)MODEL_NUMBER);
 800ce40:	4620      	mov	r0, r4
 800ce42:	f7f3 f9df 	bl	8000204 <strlen>
 800ce46:	4603      	mov	r3, r0
 800ce48:	1905      	adds	r5, r0, r4
 800ce4a:	4a82      	ldr	r2, [pc, #520]	; (800d054 <sendSystemConfigurationSMS+0x25c>)
 800ce4c:	ca03      	ldmia	r2!, {r0, r1}
 800ce4e:	5118      	str	r0, [r3, r4]
 800ce50:	6069      	str	r1, [r5, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800ce52:	4620      	mov	r0, r4
 800ce54:	f7f3 f9d6 	bl	8000204 <strlen>
 800ce58:	1902      	adds	r2, r0, r4
 800ce5a:	4b7f      	ldr	r3, [pc, #508]	; (800d058 <sendSystemConfigurationSMS+0x260>)
 800ce5c:	881e      	ldrh	r6, [r3, #0]
 800ce5e:	789d      	ldrb	r5, [r3, #2]
 800ce60:	5306      	strh	r6, [r0, r4]
 800ce62:	7095      	strb	r5, [r2, #2]
	/* Tor Device Id */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Id: ");
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7f3 f9cd 	bl	8000204 <strlen>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	1901      	adds	r1, r0, r4
 800ce6e:	4a7b      	ldr	r2, [pc, #492]	; (800d05c <sendSystemConfigurationSMS+0x264>)
 800ce70:	6810      	ldr	r0, [r2, #0]
 800ce72:	5118      	str	r0, [r3, r4]
 800ce74:	7913      	ldrb	r3, [r2, #4]
 800ce76:	710b      	strb	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,buffuuid2);
 800ce78:	4979      	ldr	r1, [pc, #484]	; (800d060 <sendSystemConfigurationSMS+0x268>)
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f005 fe8a 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,buffuuid1);
 800ce80:	4978      	ldr	r1, [pc, #480]	; (800d064 <sendSystemConfigurationSMS+0x26c>)
 800ce82:	4620      	mov	r0, r4
 800ce84:	f005 fe86 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,buffuuid0);
 800ce88:	4977      	ldr	r1, [pc, #476]	; (800d068 <sendSystemConfigurationSMS+0x270>)
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f005 fe82 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800ce90:	4620      	mov	r0, r4
 800ce92:	f7f3 f9b7 	bl	8000204 <strlen>
 800ce96:	1903      	adds	r3, r0, r4
 800ce98:	5306      	strh	r6, [r0, r4]
 800ce9a:	709d      	strb	r5, [r3, #2]
	/* Tor Signal Strength in RSSI */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"RSSI: ");
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f7f3 f9b1 	bl	8000204 <strlen>
 800cea2:	4603      	mov	r3, r0
 800cea4:	1901      	adds	r1, r0, r4
 800cea6:	4a71      	ldr	r2, [pc, #452]	; (800d06c <sendSystemConfigurationSMS+0x274>)
 800cea8:	6810      	ldr	r0, [r2, #0]
 800ceaa:	5118      	str	r0, [r3, r4]
 800ceac:	8890      	ldrh	r0, [r2, #4]
 800ceae:	7993      	ldrb	r3, [r2, #6]
 800ceb0:	8088      	strh	r0, [r1, #4]
 800ceb2:	718b      	strb	r3, [r1, #6]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gsmInstance.agsmSignalStrength);
 800ceb4:	f6a4 51b8 	subw	r1, r4, #3512	; 0xdb8
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f005 fe6b 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800cebe:	4620      	mov	r0, r4
 800cec0:	f7f3 f9a0 	bl	8000204 <strlen>
 800cec4:	1903      	adds	r3, r0, r4
 800cec6:	5306      	strh	r6, [r0, r4]
 800cec8:	709d      	strb	r5, [r3, #2]
	/* Tor Network IP , if connected */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"IP: ");
 800ceca:	4620      	mov	r0, r4
 800cecc:	f7f3 f99a 	bl	8000204 <strlen>
 800ced0:	4603      	mov	r3, r0
 800ced2:	1901      	adds	r1, r0, r4
 800ced4:	4a66      	ldr	r2, [pc, #408]	; (800d070 <sendSystemConfigurationSMS+0x278>)
 800ced6:	6810      	ldr	r0, [r2, #0]
 800ced8:	5118      	str	r0, [r3, r4]
 800ceda:	7913      	ldrb	r3, [r2, #4]
 800cedc:	710b      	strb	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gsmInstance.agsmNetworkIP);
 800cede:	f6a4 51ae 	subw	r1, r4, #3502	; 0xdae
 800cee2:	4620      	mov	r0, r4
 800cee4:	f005 fe56 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800cee8:	4620      	mov	r0, r4
 800ceea:	f7f3 f98b 	bl	8000204 <strlen>
 800ceee:	1903      	adds	r3, r0, r4
 800cef0:	5306      	strh	r6, [r0, r4]
 800cef2:	709d      	strb	r5, [r3, #2]
	/* Tor Network APN */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"APN: ");
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7f3 f985 	bl	8000204 <strlen>
 800cefa:	4603      	mov	r3, r0
 800cefc:	1901      	adds	r1, r0, r4
 800cefe:	4a5d      	ldr	r2, [pc, #372]	; (800d074 <sendSystemConfigurationSMS+0x27c>)
 800cf00:	6810      	ldr	r0, [r2, #0]
 800cf02:	5118      	str	r0, [r3, r4]
 800cf04:	8893      	ldrh	r3, [r2, #4]
 800cf06:	808b      	strh	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gau8GSM_apn);
 800cf08:	4f5b      	ldr	r7, [pc, #364]	; (800d078 <sendSystemConfigurationSMS+0x280>)
 800cf0a:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f005 fe40 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7f3 f975 	bl	8000204 <strlen>
 800cf1a:	1903      	adds	r3, r0, r4
 800cf1c:	5306      	strh	r6, [r0, r4]
 800cf1e:	709d      	strb	r5, [r3, #2]
	/* Tor Server URL */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"URL: ");
 800cf20:	4620      	mov	r0, r4
 800cf22:	f7f3 f96f 	bl	8000204 <strlen>
 800cf26:	4603      	mov	r3, r0
 800cf28:	1901      	adds	r1, r0, r4
 800cf2a:	4a54      	ldr	r2, [pc, #336]	; (800d07c <sendSystemConfigurationSMS+0x284>)
 800cf2c:	6810      	ldr	r0, [r2, #0]
 800cf2e:	5118      	str	r0, [r3, r4]
 800cf30:	8893      	ldrh	r3, [r2, #4]
 800cf32:	808b      	strh	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gau8GSM_url);
 800cf34:	f507 7151 	add.w	r1, r7, #836	; 0x344
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f005 fe2b 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f7f3 f960 	bl	8000204 <strlen>
 800cf44:	1903      	adds	r3, r0, r4
 800cf46:	5306      	strh	r6, [r0, r4]
 800cf48:	709d      	strb	r5, [r3, #2]

	/* Tor Upload Frequency */
	char ontime[10];
	char offtime[10];
	itoa(gsmInstance.u32ONPayloadUploadFreq,ontime,10);
 800cf4a:	f6a4 674e 	subw	r7, r4, #3662	; 0xe4e
 800cf4e:	220a      	movs	r2, #10
 800cf50:	a905      	add	r1, sp, #20
 800cf52:	f854 0c2a 	ldr.w	r0, [r4, #-42]
 800cf56:	f005 fb1f 	bl	8012598 <itoa>
	itoa(gsmInstance.u32OFFPayloadUploadFreq,offtime,10);
 800cf5a:	220a      	movs	r2, #10
 800cf5c:	a902      	add	r1, sp, #8
 800cf5e:	f854 0c26 	ldr.w	r0, [r4, #-38]
 800cf62:	f005 fb19 	bl	8012598 <itoa>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Up Freq ON: ");
 800cf66:	4620      	mov	r0, r4
 800cf68:	f7f3 f94c 	bl	8000204 <strlen>
 800cf6c:	4684      	mov	ip, r0
 800cf6e:	eb00 0e04 	add.w	lr, r0, r4
 800cf72:	4b43      	ldr	r3, [pc, #268]	; (800d080 <sendSystemConfigurationSMS+0x288>)
 800cf74:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf76:	f84c 0004 	str.w	r0, [ip, r4]
 800cf7a:	f8ce 1004 	str.w	r1, [lr, #4]
 800cf7e:	f8ce 2008 	str.w	r2, [lr, #8]
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	f88e 300c 	strb.w	r3, [lr, #12]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,ontime);
 800cf88:	a905      	add	r1, sp, #20
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f005 fe02 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7f3 f937 	bl	8000204 <strlen>
 800cf96:	1903      	adds	r3, r0, r4
 800cf98:	5306      	strh	r6, [r0, r4]
 800cf9a:	709d      	strb	r5, [r3, #2]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Up Freq OFF: ");
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7f3 f931 	bl	8000204 <strlen>
 800cfa2:	4684      	mov	ip, r0
 800cfa4:	eb00 0e04 	add.w	lr, r0, r4
 800cfa8:	4b36      	ldr	r3, [pc, #216]	; (800d084 <sendSystemConfigurationSMS+0x28c>)
 800cfaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfac:	f84c 0004 	str.w	r0, [ip, r4]
 800cfb0:	f8ce 1004 	str.w	r1, [lr, #4]
 800cfb4:	f8ce 2008 	str.w	r2, [lr, #8]
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	f8ae 300c 	strh.w	r3, [lr, #12]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,offtime);
 800cfbe:	a902      	add	r1, sp, #8
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f005 fde7 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f7f3 f91c 	bl	8000204 <strlen>
 800cfcc:	1903      	adds	r3, r0, r4
 800cfce:	5306      	strh	r6, [r0, r4]
 800cfd0:	709d      	strb	r5, [r3, #2]

	/* Last Known Location and time */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Location: ");
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f7f3 f916 	bl	8000204 <strlen>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	eb00 0c04 	add.w	ip, r0, r4
 800cfde:	4b2a      	ldr	r3, [pc, #168]	; (800d088 <sendSystemConfigurationSMS+0x290>)
 800cfe0:	cb03      	ldmia	r3!, {r0, r1}
 800cfe2:	5110      	str	r0, [r2, r4]
 800cfe4:	f8cc 1004 	str.w	r1, [ip, #4]
 800cfe8:	881a      	ldrh	r2, [r3, #0]
 800cfea:	789b      	ldrb	r3, [r3, #2]
 800cfec:	f8ac 2008 	strh.w	r2, [ip, #8]
 800cff0:	f88c 300a 	strb.w	r3, [ip, #10]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gsmInstance.agpsLocationData);
 800cff4:	4639      	mov	r1, r7
 800cff6:	4620      	mov	r0, r4
 800cff8:	f005 fdcc 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800cffc:	4620      	mov	r0, r4
 800cffe:	f7f3 f901 	bl	8000204 <strlen>
 800d002:	1903      	adds	r3, r0, r4
 800d004:	5306      	strh	r6, [r0, r4]
 800d006:	709d      	strb	r5, [r3, #2]

	/*Last HTTP Status Code */
	char httpresp[5];
	itoa(u8LastHttpResponseCode,httpresp,10);
 800d008:	220a      	movs	r2, #10
 800d00a:	4669      	mov	r1, sp
 800d00c:	4b1f      	ldr	r3, [pc, #124]	; (800d08c <sendSystemConfigurationSMS+0x294>)
 800d00e:	6a18      	ldr	r0, [r3, #32]
 800d010:	f005 fac2 	bl	8012598 <itoa>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"HTTP Code : ");
 800d014:	4620      	mov	r0, r4
 800d016:	f7f3 f8f5 	bl	8000204 <strlen>
 800d01a:	4605      	mov	r5, r0
 800d01c:	1906      	adds	r6, r0, r4
 800d01e:	4b1c      	ldr	r3, [pc, #112]	; (800d090 <sendSystemConfigurationSMS+0x298>)
 800d020:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d022:	5128      	str	r0, [r5, r4]
 800d024:	6071      	str	r1, [r6, #4]
 800d026:	60b2      	str	r2, [r6, #8]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	7333      	strb	r3, [r6, #12]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,httpresp);
 800d02c:	4669      	mov	r1, sp
 800d02e:	4620      	mov	r0, r4
 800d030:	f005 fdb0 	bl	8012b94 <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\n");
 800d034:	4620      	mov	r0, r4
 800d036:	f7f3 f8e5 	bl	8000204 <strlen>
 800d03a:	4b16      	ldr	r3, [pc, #88]	; (800d094 <sendSystemConfigurationSMS+0x29c>)
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	5223      	strh	r3, [r4, r0]
}
 800d040:	b009      	add	sp, #36	; 0x24
 800d042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d044:	2000e43e 	.word	0x2000e43e
 800d048:	0801c6a0 	.word	0x0801c6a0
 800d04c:	0801c6b4 	.word	0x0801c6b4
 800d050:	0801c6c0 	.word	0x0801c6c0
 800d054:	0801c6cc 	.word	0x0801c6cc
 800d058:	0801c6b0 	.word	0x0801c6b0
 800d05c:	0801c6d4 	.word	0x0801c6d4
 800d060:	20007550 	.word	0x20007550
 800d064:	20007510 	.word	0x20007510
 800d068:	20007530 	.word	0x20007530
 800d06c:	0801c6dc 	.word	0x0801c6dc
 800d070:	0801c6e4 	.word	0x0801c6e4
 800d074:	0801c6ec 	.word	0x0801c6ec
 800d078:	20000014 	.word	0x20000014
 800d07c:	0801c6f4 	.word	0x0801c6f4
 800d080:	0801c6fc 	.word	0x0801c6fc
 800d084:	0801c70c 	.word	0x0801c70c
 800d088:	0801c71c 	.word	0x0801c71c
 800d08c:	20003510 	.word	0x20003510
 800d090:	0801c728 	.word	0x0801c728
 800d094:	0801ae48 	.word	0x0801ae48

0800d098 <syncrtcwithNetworkTime>:
uint32_t gu32Date = 0;
uint32_t gu32Hours = 0;
uint32_t gu32Minutes = 0;
uint32_t gu32Seconds = 0;
void syncrtcwithNetworkTime(void)
{
 800d098:	b570      	push	{r4, r5, r6, lr}

	gu32Year = (((gau8GSM_TimeStamp[0]-'0') * 10) + (gau8GSM_TimeStamp[1]-'0'));
 800d09a:	4b3c      	ldr	r3, [pc, #240]	; (800d18c <syncrtcwithNetworkTime+0xf4>)
 800d09c:	f893 03fc 	ldrb.w	r0, [r3, #1020]	; 0x3fc
 800d0a0:	3830      	subs	r0, #48	; 0x30
 800d0a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d0a6:	f893 23fd 	ldrb.w	r2, [r3, #1021]	; 0x3fd
 800d0aa:	3a30      	subs	r2, #48	; 0x30
 800d0ac:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800d0b0:	4a37      	ldr	r2, [pc, #220]	; (800d190 <syncrtcwithNetworkTime+0xf8>)
 800d0b2:	6290      	str	r0, [r2, #40]	; 0x28
	gu32Month = (((gau8GSM_TimeStamp[3]-'0') * 10) + (gau8GSM_TimeStamp[4]-'0'));
 800d0b4:	f893 13ff 	ldrb.w	r1, [r3, #1023]	; 0x3ff
 800d0b8:	3930      	subs	r1, #48	; 0x30
 800d0ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d0be:	f893 4400 	ldrb.w	r4, [r3, #1024]	; 0x400
 800d0c2:	3c30      	subs	r4, #48	; 0x30
 800d0c4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800d0c8:	62d1      	str	r1, [r2, #44]	; 0x2c
	gu32Date = (((gau8GSM_TimeStamp[6]-'0') * 10) + (gau8GSM_TimeStamp[7]-'0'));
 800d0ca:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
 800d0ce:	3930      	subs	r1, #48	; 0x30
 800d0d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d0d4:	f893 4403 	ldrb.w	r4, [r3, #1027]	; 0x403
 800d0d8:	3c30      	subs	r4, #48	; 0x30
 800d0da:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800d0de:	6311      	str	r1, [r2, #48]	; 0x30

	gu32Hours = (((gau8GSM_TimeStamp[9]-'0') * 10) + (gau8GSM_TimeStamp[10]-'0'));
 800d0e0:	f893 1405 	ldrb.w	r1, [r3, #1029]	; 0x405
 800d0e4:	3930      	subs	r1, #48	; 0x30
 800d0e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d0ea:	f893 4406 	ldrb.w	r4, [r3, #1030]	; 0x406
 800d0ee:	3c30      	subs	r4, #48	; 0x30
 800d0f0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800d0f4:	6351      	str	r1, [r2, #52]	; 0x34
	gu32Minutes = (((gau8GSM_TimeStamp[12]-'0') * 10) + (gau8GSM_TimeStamp[13]-'0'));
 800d0f6:	f893 1408 	ldrb.w	r1, [r3, #1032]	; 0x408
 800d0fa:	3930      	subs	r1, #48	; 0x30
 800d0fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d100:	f893 4409 	ldrb.w	r4, [r3, #1033]	; 0x409
 800d104:	3c30      	subs	r4, #48	; 0x30
 800d106:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800d10a:	6391      	str	r1, [r2, #56]	; 0x38
	gu32Seconds = (((gau8GSM_TimeStamp[15]-'0') * 10) + (gau8GSM_TimeStamp[16]-'0'));
 800d10c:	f893 140b 	ldrb.w	r1, [r3, #1035]	; 0x40b
 800d110:	3930      	subs	r1, #48	; 0x30
 800d112:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d116:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800d11a:	3b30      	subs	r3, #48	; 0x30
 800d11c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800d120:	63d1      	str	r1, [r2, #60]	; 0x3c

	if((gu32Year >= 23) && (gu32Year < 80))
 800d122:	f1a0 0317 	sub.w	r3, r0, #23
 800d126:	2b38      	cmp	r3, #56	; 0x38
 800d128:	d900      	bls.n	800d12c <syncrtcwithNetworkTime+0x94>
		HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);

		/* Network Time Sync complete (Indicator) */
		gu32TimeSyncFlag = 1;
	}
}
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
		SDate1.Year = DecimalToBCD(gu32Year);
 800d12c:	f005 f882 	bl	8012234 <DecimalToBCD>
 800d130:	4d18      	ldr	r5, [pc, #96]	; (800d194 <syncrtcwithNetworkTime+0xfc>)
 800d132:	70e8      	strb	r0, [r5, #3]
		SDate1.Month = DecimalToBCD(gu32Month);
 800d134:	4c16      	ldr	r4, [pc, #88]	; (800d190 <syncrtcwithNetworkTime+0xf8>)
 800d136:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d138:	f005 f87c 	bl	8012234 <DecimalToBCD>
 800d13c:	7068      	strb	r0, [r5, #1]
		SDate1.Date = DecimalToBCD(gu32Date);
 800d13e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d140:	f005 f878 	bl	8012234 <DecimalToBCD>
 800d144:	70a8      	strb	r0, [r5, #2]
		STime1.Hours = DecimalToBCD(gu32Hours);
 800d146:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d148:	f005 f874 	bl	8012234 <DecimalToBCD>
 800d14c:	4e12      	ldr	r6, [pc, #72]	; (800d198 <syncrtcwithNetworkTime+0x100>)
 800d14e:	7030      	strb	r0, [r6, #0]
		STime1.Minutes = DecimalToBCD(gu32Minutes);
 800d150:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d152:	f005 f86f 	bl	8012234 <DecimalToBCD>
 800d156:	7070      	strb	r0, [r6, #1]
		STime1.Seconds = DecimalToBCD(gu32Seconds);
 800d158:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d15a:	f005 f86b 	bl	8012234 <DecimalToBCD>
 800d15e:	70b0      	strb	r0, [r6, #2]
		strTimeUpdate.u32RefTimeHH = gu32Hours;
 800d160:	4b0e      	ldr	r3, [pc, #56]	; (800d19c <syncrtcwithNetworkTime+0x104>)
 800d162:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d164:	601a      	str	r2, [r3, #0]
		strTimeUpdate.u32RefTimeMin = gu32Minutes;
 800d166:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d168:	605a      	str	r2, [r3, #4]
		strTimeUpdate.u32RefTimeSec = gu32Seconds;
 800d16a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d16c:	609a      	str	r2, [r3, #8]
		HAL_RTC_SetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 800d16e:	4c0c      	ldr	r4, [pc, #48]	; (800d1a0 <syncrtcwithNetworkTime+0x108>)
 800d170:	2201      	movs	r2, #1
 800d172:	4631      	mov	r1, r6
 800d174:	4620      	mov	r0, r4
 800d176:	f7f7 fd00 	bl	8004b7a <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 800d17a:	2201      	movs	r2, #1
 800d17c:	4629      	mov	r1, r5
 800d17e:	4620      	mov	r0, r4
 800d180:	f7f7 fd5a 	bl	8004c38 <HAL_RTC_SetDate>
		gu32TimeSyncFlag = 1;
 800d184:	4b07      	ldr	r3, [pc, #28]	; (800d1a4 <syncrtcwithNetworkTime+0x10c>)
 800d186:	2201      	movs	r2, #1
 800d188:	601a      	str	r2, [r3, #0]
}
 800d18a:	e7ce      	b.n	800d12a <syncrtcwithNetworkTime+0x92>
 800d18c:	20000014 	.word	0x20000014
 800d190:	20003510 	.word	0x20003510
 800d194:	20010594 	.word	0x20010594
 800d198:	20010598 	.word	0x20010598
 800d19c:	200043a8 	.word	0x200043a8
 800d1a0:	200105ac 	.word	0x200105ac
 800d1a4:	200043a4 	.word	0x200043a4

0800d1a8 <initHTTPURLforRemoteConfig>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initHTTPURLforRemoteConfig(void )
{
 800d1a8:	b570      	push	{r4, r5, r6, lr}
	memset(gau8GSM_ATURL, 0, sizeof(gau8GSM_ATURL) * sizeof(char));
 800d1aa:	4d1a      	ldr	r5, [pc, #104]	; (800d214 <initHTTPURLforRemoteConfig+0x6c>)
 800d1ac:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
 800d1b0:	22b4      	movs	r2, #180	; 0xb4
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f005 fc79 	bl	8012aac <memset>
	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 800d1ba:	f505 712b 	add.w	r1, r5, #684	; 0x2ac
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f005 fd04 	bl	8012bcc <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f7f3 f81d 	bl	8000204 <strlen>
 800d1ca:	4b13      	ldr	r3, [pc, #76]	; (800d218 <initHTTPURLforRemoteConfig+0x70>)
 800d1cc:	881e      	ldrh	r6, [r3, #0]
 800d1ce:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8RemoteConfigurationURL);
 800d1d0:	f505 6183 	add.w	r1, r5, #1048	; 0x418
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f005 fcdd 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"?id=");
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f7f3 f812 	bl	8000204 <strlen>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	1821      	adds	r1, r4, r0
 800d1e4:	4a0d      	ldr	r2, [pc, #52]	; (800d21c <initHTTPURLforRemoteConfig+0x74>)
 800d1e6:	6810      	ldr	r0, [r2, #0]
 800d1e8:	50e0      	str	r0, [r4, r3]
 800d1ea:	7913      	ldrb	r3, [r2, #4]
 800d1ec:	710b      	strb	r3, [r1, #4]
	strcat((char *)gau8GSM_ATURL,(char *)dinfo);
 800d1ee:	490c      	ldr	r1, [pc, #48]	; (800d220 <initHTTPURLforRemoteConfig+0x78>)
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f005 fccf 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f7f3 f804 	bl	8000204 <strlen>
 800d1fc:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,"\r\n");
 800d1fe:	4620      	mov	r0, r4
 800d200:	f7f3 f800 	bl	8000204 <strlen>
 800d204:	1822      	adds	r2, r4, r0
 800d206:	4b07      	ldr	r3, [pc, #28]	; (800d224 <initHTTPURLforRemoteConfig+0x7c>)
 800d208:	8819      	ldrh	r1, [r3, #0]
 800d20a:	789b      	ldrb	r3, [r3, #2]
 800d20c:	5221      	strh	r1, [r4, r0]
 800d20e:	7093      	strb	r3, [r2, #2]
}
 800d210:	bd70      	pop	{r4, r5, r6, pc}
 800d212:	bf00      	nop
 800d214:	20000014 	.word	0x20000014
 800d218:	0801c690 	.word	0x0801c690
 800d21c:	0801c73c 	.word	0x0801c73c
 800d220:	2000748c 	.word	0x2000748c
 800d224:	0801c6b0 	.word	0x0801c6b0

0800d228 <restoreHTTPURLforData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void restoreHTTPURLforData(void)
{
 800d228:	b570      	push	{r4, r5, r6, lr}
	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 800d22a:	4d10      	ldr	r5, [pc, #64]	; (800d26c <restoreHTTPURLforData+0x44>)
 800d22c:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
 800d230:	f505 712b 	add.w	r1, r5, #684	; 0x2ac
 800d234:	4620      	mov	r0, r4
 800d236:	f005 fcc9 	bl	8012bcc <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800d23a:	4620      	mov	r0, r4
 800d23c:	f7f2 ffe2 	bl	8000204 <strlen>
 800d240:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <restoreHTTPURLforData+0x48>)
 800d242:	881e      	ldrh	r6, [r3, #0]
 800d244:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 800d246:	f505 7151 	add.w	r1, r5, #836	; 0x344
 800d24a:	4620      	mov	r0, r4
 800d24c:	f005 fca2 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800d250:	4620      	mov	r0, r4
 800d252:	f7f2 ffd7 	bl	8000204 <strlen>
 800d256:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,"\r\n");
 800d258:	4620      	mov	r0, r4
 800d25a:	f7f2 ffd3 	bl	8000204 <strlen>
 800d25e:	1822      	adds	r2, r4, r0
 800d260:	4b04      	ldr	r3, [pc, #16]	; (800d274 <restoreHTTPURLforData+0x4c>)
 800d262:	8819      	ldrh	r1, [r3, #0]
 800d264:	789b      	ldrb	r3, [r3, #2]
 800d266:	5221      	strh	r1, [r4, r0]
 800d268:	7093      	strb	r3, [r2, #2]
}
 800d26a:	bd70      	pop	{r4, r5, r6, pc}
 800d26c:	20000014 	.word	0x20000014
 800d270:	0801c690 	.word	0x0801c690
 800d274:	0801c6b0 	.word	0x0801c6b0

0800d278 <updateNetworkAPN>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateNetworkAPN(void)
{
 800d278:	b570      	push	{r4, r5, r6, lr}
	memset(gau8GSM_NewSetAPN, 0x00, sizeof(gau8GSM_NewSetAPN) * sizeof(char));
 800d27a:	4c12      	ldr	r4, [pc, #72]	; (800d2c4 <updateNetworkAPN+0x4c>)
 800d27c:	2232      	movs	r2, #50	; 0x32
 800d27e:	2100      	movs	r1, #0
 800d280:	4620      	mov	r0, r4
 800d282:	f005 fc13 	bl	8012aac <memset>
	//gau8GSM_NewSetAPN
	strcpy((char *)gau8GSM_NewSetAPN,(char *)gau8GSM_ATSETAPN);
 800d286:	4e10      	ldr	r6, [pc, #64]	; (800d2c8 <updateNetworkAPN+0x50>)
 800d288:	f506 6196 	add.w	r1, r6, #1200	; 0x4b0
 800d28c:	4620      	mov	r0, r4
 800d28e:	f005 fc9d 	bl	8012bcc <strcpy>
	strcat((char *)gau8GSM_NewSetAPN,(char *)"\"");
 800d292:	4620      	mov	r0, r4
 800d294:	f7f2 ffb6 	bl	8000204 <strlen>
 800d298:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <updateNetworkAPN+0x54>)
 800d29a:	881d      	ldrh	r5, [r3, #0]
 800d29c:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_NewSetAPN,(char *)gau8GSM4G_apn);
 800d29e:	f206 41c4 	addw	r1, r6, #1220	; 0x4c4
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f005 fc76 	bl	8012b94 <strcat>
	strcat((char *)gau8GSM_NewSetAPN,(char *)"\"");
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7f2 ffab 	bl	8000204 <strlen>
 800d2ae:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_NewSetAPN,"\r\n");
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f7f2 ffa7 	bl	8000204 <strlen>
 800d2b6:	1822      	adds	r2, r4, r0
 800d2b8:	4b05      	ldr	r3, [pc, #20]	; (800d2d0 <updateNetworkAPN+0x58>)
 800d2ba:	8819      	ldrh	r1, [r3, #0]
 800d2bc:	789b      	ldrb	r3, [r3, #2]
 800d2be:	5221      	strh	r1, [r4, r0]
 800d2c0:	7093      	strb	r3, [r2, #2]
}
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}
 800d2c4:	20003550 	.word	0x20003550
 800d2c8:	20000014 	.word	0x20000014
 800d2cc:	0801c690 	.word	0x0801c690
 800d2d0:	0801c6b0 	.word	0x0801c6b0

0800d2d4 <updateHTTPReadLength>:
*******************************************************************************/
#define FOTAFILECHUNKSIZEBYTES	(1024)
uint32_t updateHTTPReadLength(uint32_t ConfigFileSizeBytes)
{

	if(ConfigFileSizeBytes != 0)
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	f000 8088 	beq.w	800d3ea <updateHTTPReadLength+0x116>
{
 800d2da:	b570      	push	{r4, r5, r6, lr}
	{
		/* Start of File */
		if(u32ConfigFileBaseAddress == 0)
 800d2dc:	4a43      	ldr	r2, [pc, #268]	; (800d3ec <updateHTTPReadLength+0x118>)
 800d2de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d2e0:	2a00      	cmp	r2, #0
 800d2e2:	d041      	beq.n	800d368 <updateHTTPReadLength+0x94>
			u32ConfigFileRemainingBytes = (ConfigFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
			itoa(FOTAFILECHUNKSIZEBYTES,ConfigbufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
			itoa(u32ConfigFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
		}

		strcpy(gau8GSM_ATHTTPREAD,(char *)"AT+HTTPREAD=");
 800d2e4:	4d42      	ldr	r5, [pc, #264]	; (800d3f0 <updateHTTPReadLength+0x11c>)
 800d2e6:	4b43      	ldr	r3, [pc, #268]	; (800d3f4 <updateHTTPReadLength+0x120>)
 800d2e8:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800d2ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2ee:	c407      	stmia	r4!, {r0, r1, r2}
 800d2f0:	7023      	strb	r3, [r4, #0]
		memset(buffer,0x00,sizeof(char) * sizeof(buffer));
 800d2f2:	f205 5254 	addw	r2, r5, #1364	; 0x554
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
 800d2fc:	f8a5 3558 	strh.w	r3, [r5, #1368]	; 0x558

		if(u32ConfigFileBaseAddress < u32ConfigFileChunkCounter)
 800d300:	4b3a      	ldr	r3, [pc, #232]	; (800d3ec <updateHTTPReadLength+0x118>)
 800d302:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800d304:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d306:	4284      	cmp	r4, r0
 800d308:	d343      	bcc.n	800d392 <updateHTTPReadLength+0xbe>
			gsmInstance.gu32RemoteConfigSizeinBytes = FOTAFILECHUNKSIZEBYTES;
			return 2;
		}
		else
		{
			itoa(u32ConfigFileChunkCounter * 1024,buffer,PAYLOAD_DATA_STRING_RADIX);
 800d30a:	4d39      	ldr	r5, [pc, #228]	; (800d3f0 <updateHTTPReadLength+0x11c>)
 800d30c:	f205 5654 	addw	r6, r5, #1364	; 0x554
 800d310:	220a      	movs	r2, #10
 800d312:	4631      	mov	r1, r6
 800d314:	4090      	lsls	r0, r2
 800d316:	f005 f93f 	bl	8012598 <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 800d31a:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800d31e:	4631      	mov	r1, r6
 800d320:	4620      	mov	r0, r4
 800d322:	f005 fc37 	bl	8012b94 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 800d326:	4620      	mov	r0, r4
 800d328:	f7f2 ff6c 	bl	8000204 <strlen>
 800d32c:	4b32      	ldr	r3, [pc, #200]	; (800d3f8 <updateHTTPReadLength+0x124>)
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)bufferRemBytes); /* Byte(s) Chunk to read*/
 800d332:	f505 61a6 	add.w	r1, r5, #1328	; 0x530
 800d336:	4620      	mov	r0, r4
 800d338:	f005 fc2c 	bl	8012b94 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 800d33c:	4620      	mov	r0, r4
 800d33e:	f7f2 ff61 	bl	8000204 <strlen>
 800d342:	1822      	adds	r2, r4, r0
 800d344:	4b2d      	ldr	r3, [pc, #180]	; (800d3fc <updateHTTPReadLength+0x128>)
 800d346:	8819      	ldrh	r1, [r3, #0]
 800d348:	789b      	ldrb	r3, [r3, #2]
 800d34a:	5221      	strh	r1, [r4, r0]
 800d34c:	7093      	strb	r3, [r2, #2]
			gsmInstance.gu32RemoteConfigSizeinBytes = u32ConfigFileRemainingBytes;
 800d34e:	4b27      	ldr	r3, [pc, #156]	; (800d3ec <updateHTTPReadLength+0x118>)
 800d350:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800d352:	4a2b      	ldr	r2, [pc, #172]	; (800d400 <updateHTTPReadLength+0x12c>)
 800d354:	f8c2 1e30 	str.w	r1, [r2, #3632]	; 0xe30
			u32ConfigFileBaseAddress = 0;
 800d358:	2200      	movs	r2, #0
 800d35a:	675a      	str	r2, [r3, #116]	; 0x74
			u32ConfigFileChunkCounter = 0;
 800d35c:	679a      	str	r2, [r3, #120]	; 0x78
			u32ConfigFileRemainingBytes = 0;
 800d35e:	67da      	str	r2, [r3, #124]	; 0x7c
			u32ConfigFileReadComplete = 1;
 800d360:	2001      	movs	r0, #1
 800d362:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
			return 1;
		}
	}
	else
		return 0;
}
 800d366:	bd70      	pop	{r4, r5, r6, pc}
			u32ConfigFileChunkCounter = (ConfigFileSizeBytes / FOTAFILECHUNKSIZEBYTES);
 800d368:	0a82      	lsrs	r2, r0, #10
 800d36a:	4c20      	ldr	r4, [pc, #128]	; (800d3ec <updateHTTPReadLength+0x118>)
 800d36c:	67a2      	str	r2, [r4, #120]	; 0x78
			u32ConfigFileRemainingBytes = (ConfigFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
 800d36e:	f3c0 0309 	ubfx	r3, r0, #0, #10
 800d372:	67e3      	str	r3, [r4, #124]	; 0x7c
			itoa(FOTAFILECHUNKSIZEBYTES,ConfigbufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
 800d374:	4d1e      	ldr	r5, [pc, #120]	; (800d3f0 <updateHTTPReadLength+0x11c>)
 800d376:	220a      	movs	r2, #10
 800d378:	f505 61a5 	add.w	r1, r5, #1320	; 0x528
 800d37c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d380:	f005 f90a 	bl	8012598 <itoa>
			itoa(u32ConfigFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
 800d384:	220a      	movs	r2, #10
 800d386:	f505 61a6 	add.w	r1, r5, #1328	; 0x530
 800d38a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d38c:	f005 f904 	bl	8012598 <itoa>
 800d390:	e7a8      	b.n	800d2e4 <updateHTTPReadLength+0x10>
			itoa((u32ConfigFileBaseAddress * FOTAFILECHUNKSIZEBYTES),buffer,PAYLOAD_DATA_STRING_RADIX);
 800d392:	4616      	mov	r6, r2
 800d394:	220a      	movs	r2, #10
 800d396:	4631      	mov	r1, r6
 800d398:	fa04 f002 	lsl.w	r0, r4, r2
 800d39c:	f005 f8fc 	bl	8012598 <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 800d3a0:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800d3a4:	4631      	mov	r1, r6
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f005 fbf4 	bl	8012b94 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f7f2 ff29 	bl	8000204 <strlen>
 800d3b2:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <updateHTTPReadLength+0x124>)
 800d3b4:	881b      	ldrh	r3, [r3, #0]
 800d3b6:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)ConfigbufferChunkBytes); /* Byte(s) Chunk to read*/
 800d3b8:	f505 61a5 	add.w	r1, r5, #1320	; 0x528
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f005 fbe9 	bl	8012b94 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f7f2 ff1e 	bl	8000204 <strlen>
 800d3c8:	1822      	adds	r2, r4, r0
 800d3ca:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <updateHTTPReadLength+0x128>)
 800d3cc:	8819      	ldrh	r1, [r3, #0]
 800d3ce:	789b      	ldrb	r3, [r3, #2]
 800d3d0:	5221      	strh	r1, [r4, r0]
 800d3d2:	7093      	strb	r3, [r2, #2]
			u32ConfigFileBaseAddress++;
 800d3d4:	4a05      	ldr	r2, [pc, #20]	; (800d3ec <updateHTTPReadLength+0x118>)
 800d3d6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800d3d8:	3301      	adds	r3, #1
 800d3da:	6753      	str	r3, [r2, #116]	; 0x74
			gsmInstance.gu32RemoteConfigSizeinBytes = FOTAFILECHUNKSIZEBYTES;
 800d3dc:	4b08      	ldr	r3, [pc, #32]	; (800d400 <updateHTTPReadLength+0x12c>)
 800d3de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d3e2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
			return 2;
 800d3e6:	2002      	movs	r0, #2
 800d3e8:	e7bd      	b.n	800d366 <updateHTTPReadLength+0x92>
}
 800d3ea:	4770      	bx	lr
 800d3ec:	20003510 	.word	0x20003510
 800d3f0:	20000014 	.word	0x20000014
 800d3f4:	0801c744 	.word	0x0801c744
 800d3f8:	0801c738 	.word	0x0801c738
 800d3fc:	0801c6b0 	.word	0x0801c6b0
 800d400:	2000d5f0 	.word	0x2000d5f0

0800d404 <sendGSMCommand>:
{
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	b082      	sub	sp, #8
	switch (gsmInstance.enmGSMCommandResponseState)
 800d408:	4bb1      	ldr	r3, [pc, #708]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d40a:	f893 3e3c 	ldrb.w	r3, [r3, #3644]	; 0xe3c
 800d40e:	b12b      	cbz	r3, 800d41c <sendGSMCommand+0x18>
 800d410:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d414:	2a01      	cmp	r2, #1
 800d416:	d077      	beq.n	800d508 <sendGSMCommand+0x104>
}
 800d418:	b002      	add	sp, #8
 800d41a:	bd70      	pop	{r4, r5, r6, pc}
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDSEND)
 800d41c:	4bac      	ldr	r3, [pc, #688]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d41e:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b01      	cmp	r3, #1
 800d426:	d01b      	beq.n	800d460 <sendGSMCommand+0x5c>
			else if(gsmInstance.enmGSMCommandState == enmGSM_CMDINPROCESS)
 800d428:	4ba9      	ldr	r3, [pc, #676]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d42a:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b02      	cmp	r3, #2
 800d432:	d166      	bne.n	800d502 <sendGSMCommand+0xfe>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800d434:	4ba7      	ldr	r3, [pc, #668]	; (800d6d4 <sendGSMCommand+0x2d0>)
 800d436:	681b      	ldr	r3, [r3, #0]
				if(!LL_USART_IsActiveFlag_TXE(UART4))
 800d438:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d43c:	d0ec      	beq.n	800d418 <sendGSMCommand+0x14>
					if(u8LoopCounter < (u8CharacterCounter))
 800d43e:	4aa6      	ldr	r2, [pc, #664]	; (800d6d8 <sendGSMCommand+0x2d4>)
 800d440:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800d444:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800d448:	4293      	cmp	r3, r2
 800d44a:	d236      	bcs.n	800d4ba <sendGSMCommand+0xb6>
						LL_USART_TransmitData8(UART4,command[u8LoopCounter++]);
 800d44c:	4aa2      	ldr	r2, [pc, #648]	; (800d6d8 <sendGSMCommand+0x2d4>)
 800d44e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800d452:	1c58      	adds	r0, r3, #1
 800d454:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
 800d458:	5cca      	ldrb	r2, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800d45a:	4b9e      	ldr	r3, [pc, #632]	; (800d6d4 <sendGSMCommand+0x2d0>)
 800d45c:	605a      	str	r2, [r3, #4]
}
 800d45e:	e7db      	b.n	800d418 <sendGSMCommand+0x14>
				u8LoopCounter = 0;
 800d460:	4b9d      	ldr	r3, [pc, #628]	; (800d6d8 <sendGSMCommand+0x2d4>)
 800d462:	2200      	movs	r2, #0
 800d464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA)
 800d468:	4b99      	ldr	r3, [pc, #612]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d46a:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800d46e:	2b15      	cmp	r3, #21
 800d470:	d01a      	beq.n	800d4a8 <sendGSMCommand+0xa4>
					command = gsmStateTableArray[gsmInstance.enmGSMCommand].atCommand;
 800d472:	4a9a      	ldr	r2, [pc, #616]	; (800d6dc <sendGSMCommand+0x2d8>)
 800d474:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800d478:	f8d3 255c 	ldr.w	r2, [r3, #1372]	; 0x55c
 800d47c:	4b96      	ldr	r3, [pc, #600]	; (800d6d8 <sendGSMCommand+0x2d4>)
 800d47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				u8CharacterCounter = strlen((const char *)command);
 800d482:	4c95      	ldr	r4, [pc, #596]	; (800d6d8 <sendGSMCommand+0x2d4>)
 800d484:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800d488:	4628      	mov	r0, r5
 800d48a:	f7f2 febb 	bl	8000204 <strlen>
 800d48e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				LL_USART_TransmitData8(UART4,command[u8LoopCounter++]);
 800d492:	2301      	movs	r3, #1
 800d494:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800d498:	782a      	ldrb	r2, [r5, #0]
  USARTx->DR = Value;
 800d49a:	4b8e      	ldr	r3, [pc, #568]	; (800d6d4 <sendGSMCommand+0x2d0>)
 800d49c:	605a      	str	r2, [r3, #4]
				gsmInstance.enmGSMCommandState = enmGSM_CMDINPROCESS;
 800d49e:	4b8c      	ldr	r3, [pc, #560]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d4a0:	2202      	movs	r2, #2
 800d4a2:	f883 2e3d 	strb.w	r2, [r3, #3645]	; 0xe3d
 800d4a6:	e7b7      	b.n	800d418 <sendGSMCommand+0x14>
					command = gsmPayload.data[gsmPayload.tail];
 800d4a8:	4a8d      	ldr	r2, [pc, #564]	; (800d6e0 <sendGSMCommand+0x2dc>)
 800d4aa:	6853      	ldr	r3, [r2, #4]
 800d4ac:	3302      	adds	r3, #2
 800d4ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d4b2:	4b89      	ldr	r3, [pc, #548]	; (800d6d8 <sendGSMCommand+0x2d4>)
 800d4b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800d4b8:	e7e3      	b.n	800d482 <sendGSMCommand+0x7e>
						u8LoopCounter = 0;
 800d4ba:	4b87      	ldr	r3, [pc, #540]	; (800d6d8 <sendGSMCommand+0x2d4>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 800d4c2:	4988      	ldr	r1, [pc, #544]	; (800d6e4 <sendGSMCommand+0x2e0>)
 800d4c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d4c8:	6008      	str	r0, [r1, #0]
						u8CharacterCounter = 0;
 800d4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						gsmInstance.enmGSMCommandResponseState = enmGSM_CHKRESPONSE;
 800d4ce:	4b80      	ldr	r3, [pc, #512]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f883 2e3c 	strb.w	r2, [r3, #3644]	; 0xe3c
						gsmInstance.u32GSMResponseTimer = gsmStateTableArray[gsmInstance.enmGSMCommand].msTimeOut;
 800d4d6:	f893 1e3f 	ldrb.w	r1, [r3, #3647]	; 0xe3f
 800d4da:	4a80      	ldr	r2, [pc, #512]	; (800d6dc <sendGSMCommand+0x2d8>)
 800d4dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d4e0:	f8d2 2564 	ldr.w	r2, [r2, #1380]	; 0x564
 800d4e4:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
						if((gsmInstance.enmGSMCommand == enmGSMSTATE_FOTAHTTPACTION) || (gsmInstance.enmGSMCommand == enmGSMSTATE_HTTPACTION))
 800d4e8:	2922      	cmp	r1, #34	; 0x22
 800d4ea:	d005      	beq.n	800d4f8 <sendGSMCommand+0xf4>
 800d4ec:	2916      	cmp	r1, #22
 800d4ee:	d003      	beq.n	800d4f8 <sendGSMCommand+0xf4>
							gu32FotaFileReadTimer = 0;
 800d4f0:	4b7d      	ldr	r3, [pc, #500]	; (800d6e8 <sendGSMCommand+0x2e4>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	e78f      	b.n	800d418 <sendGSMCommand+0x14>
							gu32FotaFileReadTimer = FIFTEEN_SEC;
 800d4f8:	4b7b      	ldr	r3, [pc, #492]	; (800d6e8 <sendGSMCommand+0x2e4>)
 800d4fa:	f643 2298 	movw	r2, #15000	; 0x3a98
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	e78a      	b.n	800d418 <sendGSMCommand+0x14>
				initGSMSIM868();
 800d502:	f7ff fb53 	bl	800cbac <initGSMSIM868>
 800d506:	e787      	b.n	800d418 <sendGSMCommand+0x14>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 800d508:	4b76      	ldr	r3, [pc, #472]	; (800d6e4 <sendGSMCommand+0x2e0>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	b93b      	cbnz	r3, 800d51e <sendGSMCommand+0x11a>
 800d50e:	4b70      	ldr	r3, [pc, #448]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d510:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 800d514:	b11b      	cbz	r3, 800d51e <sendGSMCommand+0x11a>
 800d516:	4b75      	ldr	r3, [pc, #468]	; (800d6ec <sendGSMCommand+0x2e8>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d038      	beq.n	800d590 <sendGSMCommand+0x18c>
			else if(gsmInstance.u32GSMResponseTimer == 0)
 800d51e:	4b6c      	ldr	r3, [pc, #432]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d520:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 800d524:	b9fb      	cbnz	r3, 800d566 <sendGSMCommand+0x162>
				gsmInstance.u8gsmRetryCount--;
 800d526:	4a6a      	ldr	r2, [pc, #424]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d528:	f892 3e18 	ldrb.w	r3, [r2, #3608]	; 0xe18
 800d52c:	3b01      	subs	r3, #1
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	f882 3e18 	strb.w	r3, [r2, #3608]	; 0xe18
				if(gsmInstance.u8gsmRetryCount == 0)
 800d534:	2b00      	cmp	r3, #0
 800d536:	f040 83b6 	bne.w	800dca6 <sendGSMCommand+0x8a2>
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 800d53a:	f202 4452 	addw	r4, r2, #1106	; 0x452
 800d53e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d542:	2100      	movs	r1, #0
 800d544:	4620      	mov	r0, r4
 800d546:	f005 fab1 	bl	8012aac <memset>
					if(gsmInstance.enmcurrentTask == enmGSMTASK_UPLOADDATA)
 800d54a:	f894 39ec 	ldrb.w	r3, [r4, #2540]	; 0x9ec
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	2b03      	cmp	r3, #3
 800d552:	f000 83a3 	beq.w	800dc9c <sendGSMCommand+0x898>
					initGSMSIM868();
 800d556:	f7ff fb29 	bl	800cbac <initGSMSIM868>
				gsmInstance.u32GSMResponseTimer = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	4a5c      	ldr	r2, [pc, #368]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d55e:	f8c2 3e34 	str.w	r3, [r2, #3636]	; 0xe34
				u8GSMCharRcv = 0;
 800d562:	4a62      	ldr	r2, [pc, #392]	; (800d6ec <sendGSMCommand+0x2e8>)
 800d564:	6013      	str	r3, [r2, #0]
			if(gsmInstance.enmGSMCommand == enmGSMSTATE_HTTPACTION)
 800d566:	4b5a      	ldr	r3, [pc, #360]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d568:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800d56c:	2b16      	cmp	r3, #22
 800d56e:	f47f af53 	bne.w	800d418 <sendGSMCommand+0x14>
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d572:	4a5a      	ldr	r2, [pc, #360]	; (800d6dc <sendGSMCommand+0x2d8>)
 800d574:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800d578:	f8d3 1560 	ldr.w	r1, [r3, #1376]	; 0x560
 800d57c:	485c      	ldr	r0, [pc, #368]	; (800d6f0 <sendGSMCommand+0x2ec>)
 800d57e:	f005 fb52 	bl	8012c26 <strstr>
 800d582:	2800      	cmp	r0, #0
 800d584:	f43f af48 	beq.w	800d418 <sendGSMCommand+0x14>
					gu32FotaFileReadTimer = 0;
 800d588:	4b57      	ldr	r3, [pc, #348]	; (800d6e8 <sendGSMCommand+0x2e4>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	601a      	str	r2, [r3, #0]
}
 800d58e:	e743      	b.n	800d418 <sendGSMCommand+0x14>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 800d590:	4b55      	ldr	r3, [pc, #340]	; (800d6e8 <sendGSMCommand+0x2e4>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1c2      	bne.n	800d51e <sendGSMCommand+0x11a>
						,(const char *)gsmStateTableArray[gsmInstance.enmGSMCommand].atCommandResponse) != NULL)
 800d598:	484d      	ldr	r0, [pc, #308]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d59a:	f890 4e3f 	ldrb.w	r4, [r0, #3647]	; 0xe3f
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d59e:	4b4f      	ldr	r3, [pc, #316]	; (800d6dc <sendGSMCommand+0x2d8>)
 800d5a0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800d5a4:	f8d3 1560 	ldr.w	r1, [r3, #1376]	; 0x560
 800d5a8:	f200 4052 	addw	r0, r0, #1106	; 0x452
 800d5ac:	f005 fb3b 	bl	8012c26 <strstr>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	f000 833d 	beq.w	800dc30 <sendGSMCommand+0x82c>
					switch(gsmInstance.enmGSMCommand)
 800d5b6:	2c23      	cmp	r4, #35	; 0x23
 800d5b8:	f200 830b 	bhi.w	800dbd2 <sendGSMCommand+0x7ce>
 800d5bc:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d5c0:	004d0024 	.word	0x004d0024
 800d5c4:	005200de 	.word	0x005200de
 800d5c8:	00780073 	.word	0x00780073
 800d5cc:	0082007d 	.word	0x0082007d
 800d5d0:	00cf00a0 	.word	0x00cf00a0
 800d5d4:	00d900d4 	.word	0x00d900d4
 800d5d8:	00ed00e8 	.word	0x00ed00e8
 800d5dc:	010400ff 	.word	0x010400ff
 800d5e0:	01d80109 	.word	0x01d80109
 800d5e4:	0121011c 	.word	0x0121011c
 800d5e8:	01520128 	.word	0x01520128
 800d5ec:	01dd0157 	.word	0x01dd0157
 800d5f0:	022800e3 	.word	0x022800e3
 800d5f4:	02540223 	.word	0x02540223
 800d5f8:	0028026a 	.word	0x0028026a
 800d5fc:	0283026f 	.word	0x0283026f
 800d600:	028d0288 	.word	0x028d0288
 800d604:	02e00292 	.word	0x02e00292
							gsmInstance.u8IncrementGsmState = TRUE;
 800d608:	4b31      	ldr	r3, [pc, #196]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 800d610:	4b2f      	ldr	r3, [pc, #188]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d612:	2200      	movs	r2, #0
 800d614:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800d618:	2101      	movs	r1, #1
 800d61a:	f883 1e3d 	strb.w	r1, [r3, #3645]	; 0xe3d
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800d61e:	f883 2e3c 	strb.w	r2, [r3, #3644]	; 0xe3c
					gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 800d622:	2105      	movs	r1, #5
 800d624:	f883 1e18 	strb.w	r1, [r3, #3608]	; 0xe18
					gsmInstance.u32GSMResponseTimer = 0;
 800d628:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
					u8GSMCharRcv = 0;
 800d62c:	492f      	ldr	r1, [pc, #188]	; (800d6ec <sendGSMCommand+0x2e8>)
 800d62e:	600a      	str	r2, [r1, #0]
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 800d630:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
					if(gsmInstance.enmGSMCommand != enmGSMSTATE_READFILE)
 800d634:	f893 4e3f 	ldrb.w	r4, [r3, #3647]	; 0xe3f
 800d638:	2c23      	cmp	r4, #35	; 0x23
 800d63a:	f040 82f1 	bne.w	800dc20 <sendGSMCommand+0x81c>
					if(gsmInstance.u8IncrementGsmState == TRUE)
 800d63e:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d640:	f893 3e1c 	ldrb.w	r3, [r3, #3612]	; 0xe1c
 800d644:	2b01      	cmp	r3, #1
 800d646:	d18e      	bne.n	800d566 <sendGSMCommand+0x162>
						gsmInstance.enmGSMCommand++;
 800d648:	4b21      	ldr	r3, [pc, #132]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d64a:	3401      	adds	r4, #1
 800d64c:	f883 4e3f 	strb.w	r4, [r3, #3647]	; 0xe3f
						gsmInstance.u32GSMTimer = ONE_SEC;
 800d650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d654:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 800d658:	e785      	b.n	800d566 <sendGSMCommand+0x162>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d65a:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d662:	e7d5      	b.n	800d610 <sendGSMCommand+0x20c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d664:	4e22      	ldr	r6, [pc, #136]	; (800d6f0 <sendGSMCommand+0x2ec>)
 800d666:	4923      	ldr	r1, [pc, #140]	; (800d6f4 <sendGSMCommand+0x2f0>)
 800d668:	4630      	mov	r0, r6
 800d66a:	f005 fadc 	bl	8012c26 <strstr>
 800d66e:	4604      	mov	r4, r0
								memset(gau8GSM_TimeStamp,0x00,(sizeof(char ) * strlen(gau8GSM_TimeStamp)));
 800d670:	4d21      	ldr	r5, [pc, #132]	; (800d6f8 <sendGSMCommand+0x2f4>)
 800d672:	4628      	mov	r0, r5
 800d674:	f7f2 fdc6 	bl	8000204 <strlen>
 800d678:	4602      	mov	r2, r0
 800d67a:	2100      	movs	r1, #0
 800d67c:	4628      	mov	r0, r5
 800d67e:	f005 fa15 	bl	8012aac <memset>
								memcpy( gau8GSM_TimeStamp, &strLoc[8], strlen(strtok(&strLoc[8],"\r")));
 800d682:	3408      	adds	r4, #8
 800d684:	491d      	ldr	r1, [pc, #116]	; (800d6fc <sendGSMCommand+0x2f8>)
 800d686:	4620      	mov	r0, r4
 800d688:	f006 f918 	bl	80138bc <strtok>
 800d68c:	f7f2 fdba 	bl	8000204 <strlen>
 800d690:	4602      	mov	r2, r0
 800d692:	4621      	mov	r1, r4
 800d694:	4628      	mov	r0, r5
 800d696:	f005 f9e1 	bl	8012a5c <memcpy>
								syncrtcwithNetworkTime();
 800d69a:	f7ff fcfd 	bl	800d098 <syncrtcwithNetworkTime>
								gsmInstance.u8IncrementGsmState = TRUE;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	f886 39ca 	strb.w	r3, [r6, #2506]	; 0x9ca
							break;
 800d6a4:	e7b4      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d6a6:	4b0a      	ldr	r3, [pc, #40]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d6ae:	e7af      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d6b0:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d6b8:	e7aa      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d6ba:	4b05      	ldr	r3, [pc, #20]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d6c2:	e7a5      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d6c4:	4b02      	ldr	r3, [pc, #8]	; (800d6d0 <sendGSMCommand+0x2cc>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d6cc:	e7a0      	b.n	800d610 <sendGSMCommand+0x20c>
 800d6ce:	bf00      	nop
 800d6d0:	2000d5f0 	.word	0x2000d5f0
 800d6d4:	40004c00 	.word	0x40004c00
 800d6d8:	20003510 	.word	0x20003510
 800d6dc:	20000014 	.word	0x20000014
 800d6e0:	2000e760 	.word	0x2000e760
 800d6e4:	20004444 	.word	0x20004444
 800d6e8:	20004458 	.word	0x20004458
 800d6ec:	2000426c 	.word	0x2000426c
 800d6f0:	2000da42 	.word	0x2000da42
 800d6f4:	0801c754 	.word	0x0801c754
 800d6f8:	20000410 	.word	0x20000410
 800d6fc:	0801c75c 	.word	0x0801c75c
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d700:	4cc6      	ldr	r4, [pc, #792]	; (800da1c <sendGSMCommand+0x618>)
 800d702:	49c7      	ldr	r1, [pc, #796]	; (800da20 <sendGSMCommand+0x61c>)
 800d704:	4620      	mov	r0, r4
 800d706:	f005 fa8e 	bl	8012c26 <strstr>
								memcpy(gsmInstance.agsmSignalStrength, &strLoc[6], strlen(strtok(strLoc,"\r")));
 800d70a:	1d85      	adds	r5, r0, #6
 800d70c:	49c5      	ldr	r1, [pc, #788]	; (800da24 <sendGSMCommand+0x620>)
 800d70e:	f006 f8d5 	bl	80138bc <strtok>
 800d712:	f7f2 fd77 	bl	8000204 <strlen>
 800d716:	4602      	mov	r2, r0
 800d718:	4629      	mov	r1, r5
 800d71a:	f5a4 706f 	sub.w	r0, r4, #956	; 0x3bc
 800d71e:	f005 f99d 	bl	8012a5c <memcpy>
								if(gsmInstance.enmcurrentTask == enmGSMTASK_ISALIVE)
 800d722:	f894 39ec 	ldrb.w	r3, [r4, #2540]	; 0x9ec
 800d726:	f2a4 4452 	subw	r4, r4, #1106	; 0x452
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	2b06      	cmp	r3, #6
 800d72e:	d004      	beq.n	800d73a <sendGSMCommand+0x336>
									gsmInstance.u8IncrementGsmState = TRUE;
 800d730:	4bbd      	ldr	r3, [pc, #756]	; (800da28 <sendGSMCommand+0x624>)
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 800d738:	e76a      	b.n	800d610 <sendGSMCommand+0x20c>
									gsmInstance.u32GSMHeartbeatTimer = ONE_MIN;
 800d73a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800d73e:	f8c4 2e2c 	str.w	r2, [r4, #3628]	; 0xe2c
									gsmInstance.u32GSMTimer = FIVE_SEC;
 800d742:	f241 3288 	movw	r2, #5000	; 0x1388
 800d746:	f8c4 2e20 	str.w	r2, [r4, #3616]	; 0xe20
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d74a:	2203      	movs	r2, #3
 800d74c:	f884 2e3e 	strb.w	r2, [r4, #3646]	; 0xe3e
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d750:	2214      	movs	r2, #20
 800d752:	f884 2e3f 	strb.w	r2, [r4, #3647]	; 0xe3f
									gsmInstance.u8IncrementGsmState = FALSE;
 800d756:	2200      	movs	r2, #0
 800d758:	f884 2e1c 	strb.w	r2, [r4, #3612]	; 0xe1c
 800d75c:	e758      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d75e:	4bb2      	ldr	r3, [pc, #712]	; (800da28 <sendGSMCommand+0x624>)
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d766:	e753      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d768:	4baf      	ldr	r3, [pc, #700]	; (800da28 <sendGSMCommand+0x624>)
 800d76a:	2201      	movs	r2, #1
 800d76c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d770:	e74e      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d772:	4bad      	ldr	r3, [pc, #692]	; (800da28 <sendGSMCommand+0x624>)
 800d774:	2201      	movs	r2, #1
 800d776:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d77a:	e749      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d77c:	4baa      	ldr	r3, [pc, #680]	; (800da28 <sendGSMCommand+0x624>)
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d784:	e744      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d786:	4ba8      	ldr	r3, [pc, #672]	; (800da28 <sendGSMCommand+0x624>)
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d78e:	e73f      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d790:	4ba5      	ldr	r3, [pc, #660]	; (800da28 <sendGSMCommand+0x624>)
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d798:	e73a      	b.n	800d610 <sendGSMCommand+0x20c>
							if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d79a:	49a4      	ldr	r1, [pc, #656]	; (800da2c <sendGSMCommand+0x628>)
 800d79c:	489f      	ldr	r0, [pc, #636]	; (800da1c <sendGSMCommand+0x618>)
 800d79e:	f005 fa42 	bl	8012c26 <strstr>
 800d7a2:	b138      	cbz	r0, 800d7b4 <sendGSMCommand+0x3b0>
								gsmInstance.u8IncrementGsmState = FALSE;
 800d7a4:	4ba0      	ldr	r3, [pc, #640]	; (800da28 <sendGSMCommand+0x624>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
								gsmInstance.enmGSMCommand += 2;
 800d7ac:	3402      	adds	r4, #2
 800d7ae:	f883 4e3f 	strb.w	r4, [r3, #3647]	; 0xe3f
 800d7b2:	e72d      	b.n	800d610 <sendGSMCommand+0x20c>
								gsmInstance.u8IncrementGsmState = TRUE;
 800d7b4:	4b9c      	ldr	r3, [pc, #624]	; (800da28 <sendGSMCommand+0x624>)
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 800d7bc:	e728      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d7be:	4b9a      	ldr	r3, [pc, #616]	; (800da28 <sendGSMCommand+0x624>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d7c6:	e723      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d7c8:	4b97      	ldr	r3, [pc, #604]	; (800da28 <sendGSMCommand+0x624>)
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d7d0:	e71e      	b.n	800d610 <sendGSMCommand+0x20c>
							if(gu8FlagNoTerminate == 1)
 800d7d2:	4b97      	ldr	r3, [pc, #604]	; (800da30 <sendGSMCommand+0x62c>)
 800d7d4:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d004      	beq.n	800d7e6 <sendGSMCommand+0x3e2>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d7dc:	4b92      	ldr	r3, [pc, #584]	; (800da28 <sendGSMCommand+0x624>)
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d7e4:	e714      	b.n	800d610 <sendGSMCommand+0x20c>
								gu8FlagNoTerminate = 0;
 800d7e6:	4b92      	ldr	r3, [pc, #584]	; (800da30 <sendGSMCommand+0x62c>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
								gsmInstance.enmGSMCommand++;
 800d7ee:	3401      	adds	r4, #1
 800d7f0:	4b8d      	ldr	r3, [pc, #564]	; (800da28 <sendGSMCommand+0x624>)
 800d7f2:	f883 4e3f 	strb.w	r4, [r3, #3647]	; 0xe3f
 800d7f6:	e7f1      	b.n	800d7dc <sendGSMCommand+0x3d8>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d7f8:	4b8b      	ldr	r3, [pc, #556]	; (800da28 <sendGSMCommand+0x624>)
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d800:	e706      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8HTTPInitStatus = TRUE;
 800d802:	4b89      	ldr	r3, [pc, #548]	; (800da28 <sendGSMCommand+0x624>)
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2e1a 	strb.w	r2, [r3, #3610]	; 0xe1a
							gsmInstance.u8IncrementGsmState = TRUE;
 800d80a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d80e:	e6ff      	b.n	800d610 <sendGSMCommand+0x20c>
							memcpy(gsmInstance.agsmCommandResponse[gsmInstance.enmGSMCommand],
 800d810:	231e      	movs	r3, #30
 800d812:	fb03 f304 	mul.w	r3, r3, r4
 800d816:	33c0      	adds	r3, #192	; 0xc0
 800d818:	4a83      	ldr	r2, [pc, #524]	; (800da28 <sendGSMCommand+0x624>)
 800d81a:	4413      	add	r3, r2
 800d81c:	f8d2 4452 	ldr.w	r4, [r2, #1106]	; 0x452
 800d820:	f8d2 0456 	ldr.w	r0, [r2, #1110]	; 0x456
 800d824:	f8d2 145a 	ldr.w	r1, [r2, #1114]	; 0x45a
 800d828:	f8d2 545e 	ldr.w	r5, [r2, #1118]	; 0x45e
 800d82c:	f8c3 4003 	str.w	r4, [r3, #3]
 800d830:	f8c3 0007 	str.w	r0, [r3, #7]
 800d834:	f8c3 100b 	str.w	r1, [r3, #11]
 800d838:	f8c3 500f 	str.w	r5, [r3, #15]
 800d83c:	f8d2 4462 	ldr.w	r4, [r2, #1122]	; 0x462
 800d840:	f8d2 0466 	ldr.w	r0, [r2, #1126]	; 0x466
 800d844:	f8d2 146a 	ldr.w	r1, [r2, #1130]	; 0x46a
 800d848:	f8c3 4013 	str.w	r4, [r3, #19]
 800d84c:	f8c3 0017 	str.w	r0, [r3, #23]
 800d850:	f8c3 101b 	str.w	r1, [r3, #27]
 800d854:	f8b2 146e 	ldrh.w	r1, [r2, #1134]	; 0x46e
 800d858:	f8a3 101f 	strh.w	r1, [r3, #31]
							gsmInstance.u8IncrementGsmState = TRUE;
 800d85c:	2301      	movs	r3, #1
 800d85e:	f882 3e1c 	strb.w	r3, [r2, #3612]	; 0xe1c
							break;
 800d862:	e6d5      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d864:	4b70      	ldr	r3, [pc, #448]	; (800da28 <sendGSMCommand+0x624>)
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d86c:	e6d0      	b.n	800d610 <sendGSMCommand+0x20c>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d86e:	4c6b      	ldr	r4, [pc, #428]	; (800da1c <sendGSMCommand+0x618>)
 800d870:	4970      	ldr	r1, [pc, #448]	; (800da34 <sendGSMCommand+0x630>)
 800d872:	4620      	mov	r0, r4
 800d874:	f005 f9d7 	bl	8012c26 <strstr>
							memcpy(gsmInstance.u32GSMHttpResponseCode, (char *)&strLoc[4], 3);
 800d878:	4603      	mov	r3, r0
 800d87a:	f833 2f04 	ldrh.w	r2, [r3, #4]!
 800d87e:	789b      	ldrb	r3, [r3, #2]
 800d880:	f824 2c03 	strh.w	r2, [r4, #-3]
 800d884:	f804 3c01 	strb.w	r3, [r4, #-1]
							switch(atoi(gsmInstance.u32GSMHttpResponseCode))
 800d888:	1ee0      	subs	r0, r4, #3
 800d88a:	f004 fe45 	bl	8012518 <atoi>
 800d88e:	28c8      	cmp	r0, #200	; 0xc8
 800d890:	d014      	beq.n	800d8bc <sendGSMCommand+0x4b8>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800d892:	4c69      	ldr	r4, [pc, #420]	; (800da38 <sendGSMCommand+0x634>)
 800d894:	4620      	mov	r0, r4
 800d896:	f004 fe3f 	bl	8012518 <atoi>
 800d89a:	4b68      	ldr	r3, [pc, #416]	; (800da3c <sendGSMCommand+0x638>)
 800d89c:	6218      	str	r0, [r3, #32]
									gsmInstance.u8IllegalHttpResponseCounter++;
 800d89e:	f894 39ce 	ldrb.w	r3, [r4, #2510]	; 0x9ce
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f884 39ce 	strb.w	r3, [r4, #2510]	; 0x9ce
									if(gsmInstance.u8IllegalHttpResponseCounter >= MAX_HTTP_ATTEMPTS)
 800d8aa:	2b04      	cmp	r3, #4
 800d8ac:	d951      	bls.n	800d952 <sendGSMCommand+0x54e>
										initGSMSIM868();
 800d8ae:	f7ff f97d 	bl	800cbac <initGSMSIM868>
										gu8CheckSMS = TRUE;
 800d8b2:	4b62      	ldr	r3, [pc, #392]	; (800da3c <sendGSMCommand+0x638>)
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
										break;
 800d8ba:	e6a9      	b.n	800d610 <sendGSMCommand+0x20c>
								dequeue(&gsmPayload);
 800d8bc:	4860      	ldr	r0, [pc, #384]	; (800da40 <sendGSMCommand+0x63c>)
 800d8be:	f001 ff27 	bl	800f710 <dequeue>
								gsmInstance.u32GSMTimer = TWO_SEC; // Replace with Upload Frequency
 800d8c2:	f2a4 4052 	subw	r0, r4, #1106	; 0x452
 800d8c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d8ca:	f8c0 3e20 	str.w	r3, [r0, #3616]	; 0xe20
								gu8HttpPayloadFlag = 0;
 800d8ce:	4c5b      	ldr	r4, [pc, #364]	; (800da3c <sendGSMCommand+0x638>)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
								gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d8d6:	2214      	movs	r2, #20
 800d8d8:	f880 2e3f 	strb.w	r2, [r0, #3647]	; 0xe3f
								gsmInstance.u8IncrementGsmState = FALSE;
 800d8dc:	f880 3e1c 	strb.w	r3, [r0, #3612]	; 0xe1c
								u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800d8e0:	f200 404f 	addw	r0, r0, #1103	; 0x44f
 800d8e4:	f004 fe18 	bl	8012518 <atoi>
 800d8e8:	6220      	str	r0, [r4, #32]
								HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800d8ea:	2120      	movs	r1, #32
 800d8ec:	4855      	ldr	r0, [pc, #340]	; (800da44 <sendGSMCommand+0x640>)
 800d8ee:	f7f5 f9bb 	bl	8002c68 <HAL_GPIO_TogglePin>
								gu32GSMRestartTimer = FIVE_MIN;
 800d8f2:	4b55      	ldr	r3, [pc, #340]	; (800da48 <sendGSMCommand+0x644>)
 800d8f4:	4a55      	ldr	r2, [pc, #340]	; (800da4c <sendGSMCommand+0x648>)
 800d8f6:	601a      	str	r2, [r3, #0]
								if(FlashStr.bitFlagSFlashData == 1)
 800d8f8:	4a55      	ldr	r2, [pc, #340]	; (800da50 <sendGSMCommand+0x64c>)
 800d8fa:	f242 134c 	movw	r3, #8524	; 0x214c
 800d8fe:	5cd3      	ldrb	r3, [r2, r3]
 800d900:	2b00      	cmp	r3, #0
 800d902:	f43f ae85 	beq.w	800d610 <sendGSMCommand+0x20c>
									memset(strI2cEeprom.pu8SFlashReadMemLocAddress, 0, sizeof(strI2cEeprom.pu8SFlashReadMemLocAddress)*sizeof(char));
 800d906:	4b53      	ldr	r3, [pc, #332]	; (800da54 <sendGSMCommand+0x650>)
 800d908:	2500      	movs	r5, #0
 800d90a:	f883 5ce1 	strb.w	r5, [r3, #3297]	; 0xce1
									strI2cEeprom.pu8SFlashReadMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashReadAddress >> 24);
 800d90e:	4614      	mov	r4, r2
 800d910:	6852      	ldr	r2, [r2, #4]
 800d912:	0e11      	lsrs	r1, r2, #24
 800d914:	f883 1ce0 	strb.w	r1, [r3, #3296]	; 0xce0
									strI2cEeprom.pu8SFlashReadMemLocAddress[2] = (uint8_t)(FlashStr.u32FlashReadAddress >> 16);
 800d918:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800d91c:	f883 1cdf 	strb.w	r1, [r3, #3295]	; 0xcdf
									strI2cEeprom.pu8SFlashReadMemLocAddress[1] = (uint8_t)(FlashStr.u32FlashReadAddress >> 8);
 800d920:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d924:	f883 1cde 	strb.w	r1, [r3, #3294]	; 0xcde
									strI2cEeprom.pu8SFlashReadMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashReadAddress);
 800d928:	f883 2cdd 	strb.w	r2, [r3, #3293]	; 0xcdd
									HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 292,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashReadMemLocAddress,4);
 800d92c:	2204      	movs	r2, #4
 800d92e:	9201      	str	r2, [sp, #4]
 800d930:	f603 43dd 	addw	r3, r3, #3293	; 0xcdd
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	2310      	movs	r3, #16
 800d938:	f44f 7292 	mov.w	r2, #292	; 0x124
 800d93c:	21a0      	movs	r1, #160	; 0xa0
 800d93e:	4846      	ldr	r0, [pc, #280]	; (800da58 <sendGSMCommand+0x654>)
 800d940:	f7f5 fc3a 	bl	80031b8 <HAL_I2C_Mem_Write_IT>
									HAL_Delay(10);
 800d944:	200a      	movs	r0, #10
 800d946:	f7f3 fbc1 	bl	80010cc <HAL_Delay>
									FlashStr.bitFlagSFlashData = 0;
 800d94a:	f242 134c 	movw	r3, #8524	; 0x214c
 800d94e:	54e5      	strb	r5, [r4, r3]
 800d950:	e65e      	b.n	800d610 <sendGSMCommand+0x20c>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800d952:	4c39      	ldr	r4, [pc, #228]	; (800da38 <sendGSMCommand+0x634>)
 800d954:	4620      	mov	r0, r4
 800d956:	f004 fddf 	bl	8012518 <atoi>
 800d95a:	4b38      	ldr	r3, [pc, #224]	; (800da3c <sendGSMCommand+0x638>)
 800d95c:	6218      	str	r0, [r3, #32]
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d95e:	2214      	movs	r2, #20
 800d960:	f884 29f0 	strb.w	r2, [r4, #2544]	; 0x9f0
									gsmInstance.u32GSMResponseTimer = 0;
 800d964:	2200      	movs	r2, #0
 800d966:	f8c4 29e5 	str.w	r2, [r4, #2533]	; 0x9e5
									gsmInstance.u8IncrementGsmState = FALSE;
 800d96a:	f884 29cd 	strb.w	r2, [r4, #2509]	; 0x9cd
								break;
 800d96e:	e64f      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d970:	4b2d      	ldr	r3, [pc, #180]	; (800da28 <sendGSMCommand+0x624>)
 800d972:	2201      	movs	r2, #1
 800d974:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d978:	e64a      	b.n	800d610 <sendGSMCommand+0x20c>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d97a:	4c28      	ldr	r4, [pc, #160]	; (800da1c <sendGSMCommand+0x618>)
 800d97c:	4937      	ldr	r1, [pc, #220]	; (800da5c <sendGSMCommand+0x658>)
 800d97e:	4620      	mov	r0, r4
 800d980:	f005 f951 	bl	8012c26 <strstr>
 800d984:	4605      	mov	r5, r0
							memset(gsmInstance.agpsLocationData,0x00, strlen(gsmInstance.agpsLocationData));
 800d986:	f2a4 4452 	subw	r4, r4, #1106	; 0x452
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7f2 fc3a 	bl	8000204 <strlen>
 800d990:	4602      	mov	r2, r0
 800d992:	2100      	movs	r1, #0
 800d994:	4620      	mov	r0, r4
 800d996:	f005 f889 	bl	8012aac <memset>
							memcpy(gsmInstance.agpsLocationData, (char *)&strLoc[11], strlen(strtok(strLoc,"\r")));//strlen(strtok(strLoc,"\r\n")));
 800d99a:	f105 060b 	add.w	r6, r5, #11
 800d99e:	4921      	ldr	r1, [pc, #132]	; (800da24 <sendGSMCommand+0x620>)
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	f005 ff8b 	bl	80138bc <strtok>
 800d9a6:	f7f2 fc2d 	bl	8000204 <strlen>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	4631      	mov	r1, r6
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f005 f854 	bl	8012a5c <memcpy>
							gsmInstance.u8IncrementGsmState = FALSE;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
							if(strlen(gsmInstance.agpsLocationData) < 10)
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f7f2 fc22 	bl	8000204 <strlen>
 800d9c0:	2809      	cmp	r0, #9
 800d9c2:	d80e      	bhi.n	800d9e2 <sendGSMCommand+0x5de>
								u32GPSTimeSyncFlag = FALSE;
 800d9c4:	4b1d      	ldr	r3, [pc, #116]	; (800da3c <sendGSMCommand+0x638>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
							if(gu32GSMConfigCheckTimer == 0)
 800d9cc:	4b24      	ldr	r3, [pc, #144]	; (800da60 <sendGSMCommand+0x65c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	b163      	cbz	r3, 800d9ec <sendGSMCommand+0x5e8>
								gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d9d2:	4b15      	ldr	r3, [pc, #84]	; (800da28 <sendGSMCommand+0x624>)
 800d9d4:	2203      	movs	r2, #3
 800d9d6:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
								gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d9da:	2214      	movs	r2, #20
 800d9dc:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
 800d9e0:	e616      	b.n	800d610 <sendGSMCommand+0x20c>
								u32GPSTimeSyncFlag = TRUE;
 800d9e2:	4b16      	ldr	r3, [pc, #88]	; (800da3c <sendGSMCommand+0x638>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800d9ea:	e7ef      	b.n	800d9cc <sendGSMCommand+0x5c8>
								gu32GSMConfigCheckTimer = (THIRTY_MIN * 2);//TWENTY_MIN ;
 800d9ec:	4b1c      	ldr	r3, [pc, #112]	; (800da60 <sendGSMCommand+0x65c>)
 800d9ee:	4a1d      	ldr	r2, [pc, #116]	; (800da64 <sendGSMCommand+0x660>)
 800d9f0:	601a      	str	r2, [r3, #0]
								initHTTPURLforRemoteConfig();
 800d9f2:	f7ff fbd9 	bl	800d1a8 <initHTTPURLforRemoteConfig>
								gsmInstance.enmcurrentTask = enmGSMTASK_DOWNLOADFOTAFILE;
 800d9f6:	4b0c      	ldr	r3, [pc, #48]	; (800da28 <sendGSMCommand+0x624>)
 800d9f8:	2208      	movs	r2, #8
 800d9fa:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
								gsmInstance.enmGSMCommand = enmGSMSTATE_HTTPTERMCONFIG;
 800d9fe:	221f      	movs	r2, #31
 800da00:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
 800da04:	e604      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800da06:	4b08      	ldr	r3, [pc, #32]	; (800da28 <sendGSMCommand+0x624>)
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800da0e:	e5ff      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800da10:	4b05      	ldr	r3, [pc, #20]	; (800da28 <sendGSMCommand+0x624>)
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800da18:	e5fa      	b.n	800d610 <sendGSMCommand+0x20c>
 800da1a:	bf00      	nop
 800da1c:	2000da42 	.word	0x2000da42
 800da20:	0801c760 	.word	0x0801c760
 800da24:	0801c75c 	.word	0x0801c75c
 800da28:	2000d5f0 	.word	0x2000d5f0
 800da2c:	0801c768 	.word	0x0801c768
 800da30:	20000014 	.word	0x20000014
 800da34:	0801c6e0 	.word	0x0801c6e0
 800da38:	2000da3f 	.word	0x2000da3f
 800da3c:	20003510 	.word	0x20003510
 800da40:	2000e760 	.word	0x2000e760
 800da44:	40020c00 	.word	0x40020c00
 800da48:	200029a4 	.word	0x200029a4
 800da4c:	000493e0 	.word	0x000493e0
 800da50:	200105f4 	.word	0x200105f4
 800da54:	20007580 	.word	0x20007580
 800da58:	2000e790 	.word	0x2000e790
 800da5c:	0801c774 	.word	0x0801c774
 800da60:	200029a8 	.word	0x200029a8
 800da64:	0036ee80 	.word	0x0036ee80
							gsmInstance.u32GSMHeartbeatTimer = FIVE_SEC;
 800da68:	4b98      	ldr	r3, [pc, #608]	; (800dccc <sendGSMCommand+0x8c8>)
 800da6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da6e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
							gsmInstance.u32GSMTimer = ONE_SEC;
 800da72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da76:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
							gsmInstance.enmGSMCommand = enmGSMSTATE_ATCSQ;
 800da7a:	2208      	movs	r2, #8
 800da7c:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
							gsmInstance.enmcurrentTask = enmGSMTASK_ISALIVE;
 800da80:	2206      	movs	r2, #6
 800da82:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
							gsmInstance.u8IncrementGsmState = FALSE;
 800da86:	2200      	movs	r2, #0
 800da88:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							gu8SendSMS = FALSE;
 800da8c:	4b90      	ldr	r3, [pc, #576]	; (800dcd0 <sendGSMCommand+0x8cc>)
 800da8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							break;
 800da92:	e5bd      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800da94:	4b8d      	ldr	r3, [pc, #564]	; (800dccc <sendGSMCommand+0x8c8>)
 800da96:	2201      	movs	r2, #1
 800da98:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800da9c:	e5b8      	b.n	800d610 <sendGSMCommand+0x20c>
							sendSystemConfigurationSMS();
 800da9e:	f7ff f9ab 	bl	800cdf8 <sendSystemConfigurationSMS>
							gsmInstance.enmcurrentTask = enmGSMTASK_SENDSMS;
 800daa2:	4c8a      	ldr	r4, [pc, #552]	; (800dccc <sendGSMCommand+0x8c8>)
 800daa4:	2305      	movs	r3, #5
 800daa6:	f884 3e3e 	strb.w	r3, [r4, #3646]	; 0xe3e
							gsmInstance.enmGSMCommand = enmGSMSTATE_CMGF;
 800daaa:	2318      	movs	r3, #24
 800daac:	f884 3e3f 	strb.w	r3, [r4, #3647]	; 0xe3f
							memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 800dab0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800dab4:	2100      	movs	r1, #0
 800dab6:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800daba:	f004 fff7 	bl	8012aac <memset>
							gsmInstance.u8IncrementGsmState = FALSE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
							break;
 800dac4:	e5a4      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800dac6:	4b81      	ldr	r3, [pc, #516]	; (800dccc <sendGSMCommand+0x8c8>)
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800dace:	e59f      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800dad0:	4b7e      	ldr	r3, [pc, #504]	; (800dccc <sendGSMCommand+0x8c8>)
 800dad2:	2201      	movs	r2, #1
 800dad4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800dad8:	e59a      	b.n	800d610 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800dada:	4b7c      	ldr	r3, [pc, #496]	; (800dccc <sendGSMCommand+0x8c8>)
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800dae2:	e595      	b.n	800d610 <sendGSMCommand+0x20c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800dae4:	497b      	ldr	r1, [pc, #492]	; (800dcd4 <sendGSMCommand+0x8d0>)
 800dae6:	487c      	ldr	r0, [pc, #496]	; (800dcd8 <sendGSMCommand+0x8d4>)
 800dae8:	f005 f89d 	bl	8012c26 <strstr>
								if(strLoc != NULL)
 800daec:	4605      	mov	r5, r0
 800daee:	2800      	cmp	r0, #0
 800daf0:	d03b      	beq.n	800db6a <sendGSMCommand+0x766>
									gu32GSMHangTimer = THREE_MIN;
 800daf2:	4b7a      	ldr	r3, [pc, #488]	; (800dcdc <sendGSMCommand+0x8d8>)
 800daf4:	4a7a      	ldr	r2, [pc, #488]	; (800dce0 <sendGSMCommand+0x8dc>)
 800daf6:	601a      	str	r2, [r3, #0]
									memset(gau32RemoteConfigSizeinBytes,0x00, strlen(gau32RemoteConfigSizeinBytes));
 800daf8:	4c7a      	ldr	r4, [pc, #488]	; (800dce4 <sendGSMCommand+0x8e0>)
 800dafa:	4620      	mov	r0, r4
 800dafc:	f7f2 fb82 	bl	8000204 <strlen>
 800db00:	4602      	mov	r2, r0
 800db02:	2100      	movs	r1, #0
 800db04:	4620      	mov	r0, r4
 800db06:	f004 ffd1 	bl	8012aac <memset>
									memcpy(gau32RemoteConfigSizeinBytes, &strLoc[4], strlen(strtok(&strLoc[4],"\r\n")));
 800db0a:	3504      	adds	r5, #4
 800db0c:	4976      	ldr	r1, [pc, #472]	; (800dce8 <sendGSMCommand+0x8e4>)
 800db0e:	4628      	mov	r0, r5
 800db10:	f005 fed4 	bl	80138bc <strtok>
 800db14:	f7f2 fb76 	bl	8000204 <strlen>
 800db18:	4602      	mov	r2, r0
 800db1a:	4629      	mov	r1, r5
 800db1c:	4620      	mov	r0, r4
 800db1e:	f004 ff9d 	bl	8012a5c <memcpy>
									gu32RemoteConfigSizeinBytes = strlen(gau32RemoteConfigSizeinBytes);
 800db22:	4620      	mov	r0, r4
 800db24:	f7f2 fb6e 	bl	8000204 <strlen>
 800db28:	4b69      	ldr	r3, [pc, #420]	; (800dcd0 <sendGSMCommand+0x8cc>)
 800db2a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
									gsmInstance.gu32RemoteConfigSizeinBytes = atoi(gau32RemoteConfigSizeinBytes);
 800db2e:	4620      	mov	r0, r4
 800db30:	f004 fcf2 	bl	8012518 <atoi>
 800db34:	4b65      	ldr	r3, [pc, #404]	; (800dccc <sendGSMCommand+0x8c8>)
 800db36:	f8c3 0e30 	str.w	r0, [r3, #3632]	; 0xe30
									if(gsmInstance.gu32RemoteConfigSizeinBytes <= (MAX_RMT_CONFIG_SIZE_BYTES))
 800db3a:	f241 3388 	movw	r3, #5000	; 0x1388
 800db3e:	4298      	cmp	r0, r3
 800db40:	d807      	bhi.n	800db52 <sendGSMCommand+0x74e>
										gu32AttemptFota = TRUE;
 800db42:	4b63      	ldr	r3, [pc, #396]	; (800dcd0 <sendGSMCommand+0x8cc>)
 800db44:	2201      	movs	r2, #1
 800db46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
										if(gsmInstance.gu32RemoteConfigSizeinBytes != 0)
 800db4a:	b148      	cbz	r0, 800db60 <sendGSMCommand+0x75c>
											updateHTTPReadLength(gsmInstance.gu32RemoteConfigSizeinBytes);
 800db4c:	f7ff fbc2 	bl	800d2d4 <updateHTTPReadLength>
 800db50:	e006      	b.n	800db60 <sendGSMCommand+0x75c>
										gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800db52:	4b5e      	ldr	r3, [pc, #376]	; (800dccc <sendGSMCommand+0x8c8>)
 800db54:	2203      	movs	r2, #3
 800db56:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
										gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800db5a:	2214      	movs	r2, #20
 800db5c:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
									gsmInstance.u8IncrementGsmState = TRUE;
 800db60:	4b5a      	ldr	r3, [pc, #360]	; (800dccc <sendGSMCommand+0x8c8>)
 800db62:	2201      	movs	r2, #1
 800db64:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 800db68:	e552      	b.n	800d610 <sendGSMCommand+0x20c>
									gsmInstance.u8IncrementGsmState = FALSE;
 800db6a:	4b58      	ldr	r3, [pc, #352]	; (800dccc <sendGSMCommand+0x8c8>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800db72:	2203      	movs	r2, #3
 800db74:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800db78:	2214      	movs	r2, #20
 800db7a:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
 800db7e:	e547      	b.n	800d610 <sendGSMCommand+0x20c>
									char *strloc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"(");
 800db80:	4c55      	ldr	r4, [pc, #340]	; (800dcd8 <sendGSMCommand+0x8d4>)
 800db82:	2128      	movs	r1, #40	; 0x28
 800db84:	4620      	mov	r0, r4
 800db86:	f005 f814 	bl	8012bb2 <strchr>
 800db8a:	4605      	mov	r5, r0
									memset(gau8ConfigData,0x00,sizeof(gau8ConfigData));//
 800db8c:	4e57      	ldr	r6, [pc, #348]	; (800dcec <sendGSMCommand+0x8e8>)
 800db8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800db92:	2100      	movs	r1, #0
 800db94:	4630      	mov	r0, r6
 800db96:	f004 ff89 	bl	8012aac <memset>
									memcpy(gau8ConfigData, (char *)strloc, gsmInstance.gu32RemoteConfigSizeinBytes);
 800db9a:	f8d4 29de 	ldr.w	r2, [r4, #2526]	; 0x9de
 800db9e:	4629      	mov	r1, r5
 800dba0:	4630      	mov	r0, r6
 800dba2:	f004 ff5b 	bl	8012a5c <memcpy>
									restoreHTTPURLforData();
 800dba6:	f7ff fb3f 	bl	800d228 <restoreHTTPURLforData>
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	f884 39ec 	strb.w	r3, [r4, #2540]	; 0x9ec
									gsmInstance.enmGSMCommand = enmGSMSTATE_HTTPTERM;
 800dbb0:	2311      	movs	r3, #17
 800dbb2:	f884 39ed 	strb.w	r3, [r4, #2541]	; 0x9ed
									HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);	// LED ON
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbbc:	484c      	ldr	r0, [pc, #304]	; (800dcf0 <sendGSMCommand+0x8ec>)
 800dbbe:	f7f5 f84d 	bl	8002c5c <HAL_GPIO_WritePin>
									gsmInstance.u8IncrementGsmState = FALSE;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	f884 39ca 	strb.w	r3, [r4, #2506]	; 0x9ca
									gu32NewConfigAvailable = TRUE;
 800dbc8:	4b41      	ldr	r3, [pc, #260]	; (800dcd0 <sendGSMCommand+0x8cc>)
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
							break;
 800dbd0:	e51e      	b.n	800d610 <sendGSMCommand+0x20c>
							memcpy(gsmInstance.agsmCommandResponse[gsmInstance.enmGSMCommand], (char *)&gsmInstance.as8GSM_Response_Buff, 30);
 800dbd2:	231e      	movs	r3, #30
 800dbd4:	fb03 f304 	mul.w	r3, r3, r4
 800dbd8:	33c0      	adds	r3, #192	; 0xc0
 800dbda:	4a3c      	ldr	r2, [pc, #240]	; (800dccc <sendGSMCommand+0x8c8>)
 800dbdc:	4413      	add	r3, r2
 800dbde:	f8d2 4452 	ldr.w	r4, [r2, #1106]	; 0x452
 800dbe2:	f8d2 0456 	ldr.w	r0, [r2, #1110]	; 0x456
 800dbe6:	f8d2 145a 	ldr.w	r1, [r2, #1114]	; 0x45a
 800dbea:	f8d2 545e 	ldr.w	r5, [r2, #1118]	; 0x45e
 800dbee:	f8c3 4003 	str.w	r4, [r3, #3]
 800dbf2:	f8c3 0007 	str.w	r0, [r3, #7]
 800dbf6:	f8c3 100b 	str.w	r1, [r3, #11]
 800dbfa:	f8c3 500f 	str.w	r5, [r3, #15]
 800dbfe:	f8d2 4462 	ldr.w	r4, [r2, #1122]	; 0x462
 800dc02:	f8d2 0466 	ldr.w	r0, [r2, #1126]	; 0x466
 800dc06:	f8d2 146a 	ldr.w	r1, [r2, #1130]	; 0x46a
 800dc0a:	f8c3 4013 	str.w	r4, [r3, #19]
 800dc0e:	f8c3 0017 	str.w	r0, [r3, #23]
 800dc12:	f8c3 101b 	str.w	r1, [r3, #27]
 800dc16:	f8b2 246e 	ldrh.w	r2, [r2, #1134]	; 0x46e
 800dc1a:	f8a3 201f 	strh.w	r2, [r3, #31]
							break;
 800dc1e:	e4f7      	b.n	800d610 <sendGSMCommand+0x20c>
						memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 800dc20:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800dc24:	2100      	movs	r1, #0
 800dc26:	f203 4052 	addw	r0, r3, #1106	; 0x452
 800dc2a:	f004 ff3f 	bl	8012aac <memset>
 800dc2e:	e506      	b.n	800d63e <sendGSMCommand+0x23a>
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 800dc30:	4826      	ldr	r0, [pc, #152]	; (800dccc <sendGSMCommand+0x8c8>)
 800dc32:	2500      	movs	r5, #0
 800dc34:	f8c0 5e38 	str.w	r5, [r0, #3640]	; 0xe38
					gsmInstance.enmGSMCommandResponseState = enmGSM_CMDSEND;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	f880 3e3c 	strb.w	r3, [r0, #3644]	; 0xe3c
					memcpy(gsmInstance.agsmCommandResponse[gsmInstance.enmGSMCommand], (char *)&gsmInstance.as8GSM_Response_Buff, 30);
 800dc3e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	33c0      	adds	r3, #192	; 0xc0
 800dc46:	4403      	add	r3, r0
 800dc48:	f8d0 4452 	ldr.w	r4, [r0, #1106]	; 0x452
 800dc4c:	f8d0 1456 	ldr.w	r1, [r0, #1110]	; 0x456
 800dc50:	f8d0 245a 	ldr.w	r2, [r0, #1114]	; 0x45a
 800dc54:	f8d0 645e 	ldr.w	r6, [r0, #1118]	; 0x45e
 800dc58:	f8c3 4003 	str.w	r4, [r3, #3]
 800dc5c:	f8c3 1007 	str.w	r1, [r3, #7]
 800dc60:	f8c3 200b 	str.w	r2, [r3, #11]
 800dc64:	f8c3 600f 	str.w	r6, [r3, #15]
 800dc68:	f8d0 4462 	ldr.w	r4, [r0, #1122]	; 0x462
 800dc6c:	f8d0 1466 	ldr.w	r1, [r0, #1126]	; 0x466
 800dc70:	f8d0 246a 	ldr.w	r2, [r0, #1130]	; 0x46a
 800dc74:	f8c3 4013 	str.w	r4, [r3, #19]
 800dc78:	f8c3 1017 	str.w	r1, [r3, #23]
 800dc7c:	f8c3 201b 	str.w	r2, [r3, #27]
 800dc80:	f8b0 246e 	ldrh.w	r2, [r0, #1134]	; 0x46e
 800dc84:	f8a3 201f 	strh.w	r2, [r3, #31]
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 800dc88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	f200 4052 	addw	r0, r0, #1106	; 0x452
 800dc92:	f004 ff0b 	bl	8012aac <memset>
					u8GSMCharRcv = 0;
 800dc96:	4b17      	ldr	r3, [pc, #92]	; (800dcf4 <sendGSMCommand+0x8f0>)
 800dc98:	601d      	str	r5, [r3, #0]
 800dc9a:	e464      	b.n	800d566 <sendGSMCommand+0x162>
						gu8CheckSMS = TRUE;
 800dc9c:	4b0c      	ldr	r3, [pc, #48]	; (800dcd0 <sendGSMCommand+0x8cc>)
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800dca4:	e457      	b.n	800d556 <sendGSMCommand+0x152>
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800dca6:	4c09      	ldr	r4, [pc, #36]	; (800dccc <sendGSMCommand+0x8c8>)
 800dca8:	2301      	movs	r3, #1
 800dcaa:	f884 3e3d 	strb.w	r3, [r4, #3645]	; 0xe3d
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800dcae:	2100      	movs	r1, #0
 800dcb0:	f884 1e3c 	strb.w	r1, [r4, #3644]	; 0xe3c
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 800dcb4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800dcb8:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800dcbc:	f004 fef6 	bl	8012aac <memset>
					gsmInstance.u32GSMTimer = ONE_SEC;
 800dcc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dcc4:	f8c4 3e20 	str.w	r3, [r4, #3616]	; 0xe20
 800dcc8:	e447      	b.n	800d55a <sendGSMCommand+0x156>
 800dcca:	bf00      	nop
 800dccc:	2000d5f0 	.word	0x2000d5f0
 800dcd0:	20003510 	.word	0x20003510
 800dcd4:	0801c780 	.word	0x0801c780
 800dcd8:	2000da42 	.word	0x2000da42
 800dcdc:	20004448 	.word	0x20004448
 800dce0:	0002bf20 	.word	0x0002bf20
 800dce4:	20000840 	.word	0x20000840
 800dce8:	0801c6b0 	.word	0x0801c6b0
 800dcec:	2000ce20 	.word	0x2000ce20
 800dcf0:	40020c00 	.word	0x40020c00
 800dcf4:	2000426c 	.word	0x2000426c

0800dcf8 <operateGSMSIM868>:
	if(gsmInstance.u32GSMTimer != 0)
 800dcf8:	4b9b      	ldr	r3, [pc, #620]	; (800df68 <operateGSMSIM868+0x270>)
 800dcfa:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f040 8131 	bne.w	800df66 <operateGSMSIM868+0x26e>
{
 800dd04:	b510      	push	{r4, lr}
 800dd06:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
	switch(gsmInstance.enmcurrentTask)
 800dd0a:	4b97      	ldr	r3, [pc, #604]	; (800df68 <operateGSMSIM868+0x270>)
 800dd0c:	f893 3e3e 	ldrb.w	r3, [r3, #3646]	; 0xe3e
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b09      	cmp	r3, #9
 800dd14:	f200 8124 	bhi.w	800df60 <operateGSMSIM868+0x268>
 800dd18:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dd1c:	0030000a 	.word	0x0030000a
 800dd20:	00c400b2 	.word	0x00c400b2
 800dd24:	00940076 	.word	0x00940076
 800dd28:	010a0064 	.word	0x010a0064
 800dd2c:	011a010d 	.word	0x011a010d
			if(gsmInstance.enmGSMPwrState == enmGSM_PWRNOTSTARTED)
 800dd30:	4b8d      	ldr	r3, [pc, #564]	; (800df68 <operateGSMSIM868+0x270>)
 800dd32:	f893 3e40 	ldrb.w	r3, [r3, #3648]	; 0xe40
 800dd36:	b19b      	cbz	r3, 800dd60 <operateGSMSIM868+0x68>
			else if(gsmInstance.enmGSMPwrState == enmGSM_PWRSTARTED)
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	f040 80ad 	bne.w	800de98 <operateGSMSIM868+0x1a0>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 800dd3e:	2200      	movs	r2, #0
 800dd40:	2180      	movs	r1, #128	; 0x80
 800dd42:	488a      	ldr	r0, [pc, #552]	; (800df6c <operateGSMSIM868+0x274>)
 800dd44:	f7f4 ff8a 	bl	8002c5c <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = TWO_SEC;
 800dd48:	4b87      	ldr	r3, [pc, #540]	; (800df68 <operateGSMSIM868+0x270>)
 800dd4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800dd4e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
				gsmInstance.enmcurrentTask = enmGSMTASK_INITMODULE;
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.enmGSMPwrState = enmGSM_PWRCOMPLETED;
 800dd58:	2202      	movs	r2, #2
 800dd5a:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 800dd5e:	e09b      	b.n	800de98 <operateGSMSIM868+0x1a0>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_SET);
 800dd60:	2201      	movs	r2, #1
 800dd62:	2180      	movs	r1, #128	; 0x80
 800dd64:	4881      	ldr	r0, [pc, #516]	; (800df6c <operateGSMSIM868+0x274>)
 800dd66:	f7f4 ff79 	bl	8002c5c <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = FIVE_SEC;
 800dd6a:	4b7f      	ldr	r3, [pc, #508]	; (800df68 <operateGSMSIM868+0x270>)
 800dd6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd70:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
				gsmInstance.enmGSMPwrState = enmGSM_PWRSTARTED;
 800dd74:	2201      	movs	r2, #1
 800dd76:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 800dd7a:	e08d      	b.n	800de98 <operateGSMSIM868+0x1a0>
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDTIMEOUT)
 800dd7c:	4b7a      	ldr	r3, [pc, #488]	; (800df68 <operateGSMSIM868+0x270>)
 800dd7e:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b05      	cmp	r3, #5
 800dd86:	d011      	beq.n	800ddac <operateGSMSIM868+0xb4>
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATACOMMAND)
 800dd88:	4b77      	ldr	r3, [pc, #476]	; (800df68 <operateGSMSIM868+0x270>)
 800dd8a:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800dd8e:	2b14      	cmp	r3, #20
 800dd90:	d11b      	bne.n	800ddca <operateGSMSIM868+0xd2>
					if(gu8CheckSMS == TRUE)
 800dd92:	4b77      	ldr	r3, [pc, #476]	; (800df70 <operateGSMSIM868+0x278>)
 800dd94:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d00a      	beq.n	800ddb2 <operateGSMSIM868+0xba>
						gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800dd9c:	4b72      	ldr	r3, [pc, #456]	; (800df68 <operateGSMSIM868+0x270>)
 800dd9e:	2217      	movs	r2, #23
 800dda0:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800dda4:	2202      	movs	r2, #2
 800dda6:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
 800ddaa:	e075      	b.n	800de98 <operateGSMSIM868+0x1a0>
				initGSMSIM868();
 800ddac:	f7fe fefe 	bl	800cbac <initGSMSIM868>
 800ddb0:	e072      	b.n	800de98 <operateGSMSIM868+0x1a0>
						gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800ddb2:	4b6d      	ldr	r3, [pc, #436]	; (800df68 <operateGSMSIM868+0x270>)
 800ddb4:	2203      	movs	r2, #3
 800ddb6:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
						gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800ddba:	2214      	movs	r2, #20
 800ddbc:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
						gu8CheckSMS = FALSE;
 800ddc0:	4b6b      	ldr	r3, [pc, #428]	; (800df70 <operateGSMSIM868+0x278>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800ddc8:	e066      	b.n	800de98 <operateGSMSIM868+0x1a0>
					sendGSMCommand(gsmInstance);
 800ddca:	4c67      	ldr	r4, [pc, #412]	; (800df68 <operateGSMSIM868+0x270>)
 800ddcc:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800ddd0:	f104 0110 	add.w	r1, r4, #16
 800ddd4:	4668      	mov	r0, sp
 800ddd6:	f004 fe41 	bl	8012a5c <memcpy>
 800ddda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ddde:	f7ff fb11 	bl	800d404 <sendGSMCommand>
 800dde2:	e059      	b.n	800de98 <operateGSMSIM868+0x1a0>
			if(gsmInstance.u32GSMHeartbeatTimer == 0)
 800dde4:	4b60      	ldr	r3, [pc, #384]	; (800df68 <operateGSMSIM868+0x270>)
 800dde6:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	; 0xe2c
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d154      	bne.n	800de98 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800ddee:	4c5e      	ldr	r4, [pc, #376]	; (800df68 <operateGSMSIM868+0x270>)
 800ddf0:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800ddf4:	f104 0110 	add.w	r1, r4, #16
 800ddf8:	4668      	mov	r0, sp
 800ddfa:	f004 fe2f 	bl	8012a5c <memcpy>
 800ddfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800de02:	f7ff faff 	bl	800d404 <sendGSMCommand>
 800de06:	e047      	b.n	800de98 <operateGSMSIM868+0x1a0>
			if(gu8ReadSMS == TRUE)
 800de08:	4b59      	ldr	r3, [pc, #356]	; (800df70 <operateGSMSIM868+0x278>)
 800de0a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d00b      	beq.n	800de2a <operateGSMSIM868+0x132>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800de12:	4b55      	ldr	r3, [pc, #340]	; (800df68 <operateGSMSIM868+0x270>)
 800de14:	2217      	movs	r2, #23
 800de16:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800de1a:	2202      	movs	r2, #2
 800de1c:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.u32GSMTimer = TWO_SEC;
 800de20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800de24:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 800de28:	e036      	b.n	800de98 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800de2a:	4c4f      	ldr	r4, [pc, #316]	; (800df68 <operateGSMSIM868+0x270>)
 800de2c:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800de30:	f104 0110 	add.w	r1, r4, #16
 800de34:	4668      	mov	r0, sp
 800de36:	f004 fe11 	bl	8012a5c <memcpy>
 800de3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800de3e:	f7ff fae1 	bl	800d404 <sendGSMCommand>
 800de42:	e029      	b.n	800de98 <operateGSMSIM868+0x1a0>
			if(gu8SendSMS == TRUE)
 800de44:	4b4a      	ldr	r3, [pc, #296]	; (800df70 <operateGSMSIM868+0x278>)
 800de46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d00b      	beq.n	800de66 <operateGSMSIM868+0x16e>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800de4e:	4b46      	ldr	r3, [pc, #280]	; (800df68 <operateGSMSIM868+0x270>)
 800de50:	2217      	movs	r2, #23
 800de52:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800de56:	2202      	movs	r2, #2
 800de58:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.u32GSMTimer = TWO_SEC;
 800de5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800de60:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 800de64:	e018      	b.n	800de98 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800de66:	4c40      	ldr	r4, [pc, #256]	; (800df68 <operateGSMSIM868+0x270>)
 800de68:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800de6c:	f104 0110 	add.w	r1, r4, #16
 800de70:	4668      	mov	r0, sp
 800de72:	f004 fdf3 	bl	8012a5c <memcpy>
 800de76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800de7a:	f7ff fac3 	bl	800d404 <sendGSMCommand>
 800de7e:	e00b      	b.n	800de98 <operateGSMSIM868+0x1a0>
			sendGSMCommand(gsmInstance);
 800de80:	4c39      	ldr	r4, [pc, #228]	; (800df68 <operateGSMSIM868+0x270>)
 800de82:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800de86:	f104 0110 	add.w	r1, r4, #16
 800de8a:	4668      	mov	r0, sp
 800de8c:	f004 fde6 	bl	8012a5c <memcpy>
 800de90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800de94:	f7ff fab6 	bl	800d404 <sendGSMCommand>
	gu32GSMHangTimer = THREE_MIN;
 800de98:	4b36      	ldr	r3, [pc, #216]	; (800df74 <operateGSMSIM868+0x27c>)
 800de9a:	4a37      	ldr	r2, [pc, #220]	; (800df78 <operateGSMSIM868+0x280>)
 800de9c:	601a      	str	r2, [r3, #0]
}
 800de9e:	f50d 5d8b 	add.w	sp, sp, #4448	; 0x1160
 800dea2:	bd10      	pop	{r4, pc}
			if((isQueueEmpty(&gsmPayload) == FALSE )&& (gsmPayload.data[gsmPayload.tail] != NULL))
 800dea4:	4835      	ldr	r0, [pc, #212]	; (800df7c <operateGSMSIM868+0x284>)
 800dea6:	f001 fc63 	bl	800f770 <isQueueEmpty>
 800deaa:	2800      	cmp	r0, #0
 800deac:	d138      	bne.n	800df20 <operateGSMSIM868+0x228>
 800deae:	4a33      	ldr	r2, [pc, #204]	; (800df7c <operateGSMSIM868+0x284>)
 800deb0:	6853      	ldr	r3, [r2, #4]
 800deb2:	3302      	adds	r3, #2
 800deb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deb8:	b393      	cbz	r3, 800df20 <operateGSMSIM868+0x228>
				if(gu32GSMConfigCheckTimer == 0)
 800deba:	4b31      	ldr	r3, [pc, #196]	; (800df80 <operateGSMSIM868+0x288>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	b933      	cbnz	r3, 800dece <operateGSMSIM868+0x1d6>
					gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800dec0:	4b29      	ldr	r3, [pc, #164]	; (800df68 <operateGSMSIM868+0x270>)
 800dec2:	2217      	movs	r2, #23
 800dec4:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
					gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800dec8:	2202      	movs	r2, #2
 800deca:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATACOMMAND))
 800dece:	4b28      	ldr	r3, [pc, #160]	; (800df70 <operateGSMSIM868+0x278>)
 800ded0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ded4:	b923      	cbnz	r3, 800dee0 <operateGSMSIM868+0x1e8>
 800ded6:	4a24      	ldr	r2, [pc, #144]	; (800df68 <operateGSMSIM868+0x270>)
 800ded8:	f892 2e3f 	ldrb.w	r2, [r2, #3647]	; 0xe3f
 800dedc:	2a14      	cmp	r2, #20
 800dede:	d013      	beq.n	800df08 <operateGSMSIM868+0x210>
				else if((gu8HttpPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d104      	bne.n	800deee <operateGSMSIM868+0x1f6>
 800dee4:	4b20      	ldr	r3, [pc, #128]	; (800df68 <operateGSMSIM868+0x270>)
 800dee6:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800deea:	2b15      	cmp	r3, #21
 800deec:	d013      	beq.n	800df16 <operateGSMSIM868+0x21e>
					sendGSMCommand(gsmInstance);
 800deee:	4c1e      	ldr	r4, [pc, #120]	; (800df68 <operateGSMSIM868+0x270>)
 800def0:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800def4:	f104 0110 	add.w	r1, r4, #16
 800def8:	4668      	mov	r0, sp
 800defa:	f004 fdaf 	bl	8012a5c <memcpy>
 800defe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df02:	f7ff fa7f 	bl	800d404 <sendGSMCommand>
 800df06:	e7c7      	b.n	800de98 <operateGSMSIM868+0x1a0>
					updateHttpDataLength();
 800df08:	f7fe ff38 	bl	800cd7c <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 800df0c:	4b18      	ldr	r3, [pc, #96]	; (800df70 <operateGSMSIM868+0x278>)
 800df0e:	2201      	movs	r2, #1
 800df10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800df14:	e7c0      	b.n	800de98 <operateGSMSIM868+0x1a0>
					gu8HttpPayloadFlag = 0;
 800df16:	4b16      	ldr	r3, [pc, #88]	; (800df70 <operateGSMSIM868+0x278>)
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800df1e:	e7bb      	b.n	800de98 <operateGSMSIM868+0x1a0>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800df20:	4b11      	ldr	r3, [pc, #68]	; (800df68 <operateGSMSIM868+0x270>)
 800df22:	2217      	movs	r2, #23
 800df24:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800df28:	2202      	movs	r2, #2
 800df2a:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
 800df2e:	e7b3      	b.n	800de98 <operateGSMSIM868+0x1a0>
			initGSMSIM868();
 800df30:	f7fe fe3c 	bl	800cbac <initGSMSIM868>
			break;
 800df34:	e7b0      	b.n	800de98 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800df36:	4c0c      	ldr	r4, [pc, #48]	; (800df68 <operateGSMSIM868+0x270>)
 800df38:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800df3c:	f104 0110 	add.w	r1, r4, #16
 800df40:	4668      	mov	r0, sp
 800df42:	f004 fd8b 	bl	8012a5c <memcpy>
 800df46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df4a:	f7ff fa5b 	bl	800d404 <sendGSMCommand>
			break;
 800df4e:	e7a3      	b.n	800de98 <operateGSMSIM868+0x1a0>
			gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800df50:	4b05      	ldr	r3, [pc, #20]	; (800df68 <operateGSMSIM868+0x270>)
 800df52:	2203      	movs	r2, #3
 800df54:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
			gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800df58:	2214      	movs	r2, #20
 800df5a:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
			break;
 800df5e:	e79b      	b.n	800de98 <operateGSMSIM868+0x1a0>
			initGSMSIM868();
 800df60:	f7fe fe24 	bl	800cbac <initGSMSIM868>
			break;
 800df64:	e798      	b.n	800de98 <operateGSMSIM868+0x1a0>
 800df66:	4770      	bx	lr
 800df68:	2000d5f0 	.word	0x2000d5f0
 800df6c:	40020c00 	.word	0x40020c00
 800df70:	20003510 	.word	0x20003510
 800df74:	20004448 	.word	0x20004448
 800df78:	0002bf20 	.word	0x0002bf20
 800df7c:	2000e760 	.word	0x2000e760
 800df80:	200029a8 	.word	0x200029a8

0800df84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800df84:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800df86:	4813      	ldr	r0, [pc, #76]	; (800dfd4 <MX_I2C1_Init+0x50>)
 800df88:	4b13      	ldr	r3, [pc, #76]	; (800dfd8 <MX_I2C1_Init+0x54>)
 800df8a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800df8c:	4b13      	ldr	r3, [pc, #76]	; (800dfdc <MX_I2C1_Init+0x58>)
 800df8e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800df90:	2300      	movs	r3, #0
 800df92:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800df94:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800df96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800df9a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800df9c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800df9e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800dfa0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800dfa2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800dfa4:	f7f5 f82a 	bl	8002ffc <HAL_I2C_Init>
 800dfa8:	b950      	cbnz	r0, 800dfc0 <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800dfaa:	2100      	movs	r1, #0
 800dfac:	4809      	ldr	r0, [pc, #36]	; (800dfd4 <MX_I2C1_Init+0x50>)
 800dfae:	f7f6 f805 	bl	8003fbc <HAL_I2CEx_ConfigAnalogFilter>
 800dfb2:	b940      	cbnz	r0, 800dfc6 <MX_I2C1_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	4807      	ldr	r0, [pc, #28]	; (800dfd4 <MX_I2C1_Init+0x50>)
 800dfb8:	f7f6 f822 	bl	8004000 <HAL_I2CEx_ConfigDigitalFilter>
 800dfbc:	b930      	cbnz	r0, 800dfcc <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800dfbe:	bd08      	pop	{r3, pc}
    Error_Handler();
 800dfc0:	f000 fbca 	bl	800e758 <Error_Handler>
 800dfc4:	e7f1      	b.n	800dfaa <MX_I2C1_Init+0x26>
    Error_Handler();
 800dfc6:	f000 fbc7 	bl	800e758 <Error_Handler>
 800dfca:	e7f3      	b.n	800dfb4 <MX_I2C1_Init+0x30>
    Error_Handler();
 800dfcc:	f000 fbc4 	bl	800e758 <Error_Handler>
}
 800dfd0:	e7f5      	b.n	800dfbe <MX_I2C1_Init+0x3a>
 800dfd2:	bf00      	nop
 800dfd4:	2000e790 	.word	0x2000e790
 800dfd8:	40005400 	.word	0x40005400
 800dfdc:	000186a0 	.word	0x000186a0

0800dfe0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800dfe0:	b530      	push	{r4, r5, lr}
 800dfe2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	9303      	str	r3, [sp, #12]
 800dfe8:	9304      	str	r3, [sp, #16]
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	9306      	str	r3, [sp, #24]
 800dfee:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800dff0:	6802      	ldr	r2, [r0, #0]
 800dff2:	4b1d      	ldr	r3, [pc, #116]	; (800e068 <HAL_I2C_MspInit+0x88>)
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d001      	beq.n	800dffc <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800dff8:	b009      	add	sp, #36	; 0x24
 800dffa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dffc:	2400      	movs	r4, #0
 800dffe:	9401      	str	r4, [sp, #4]
 800e000:	4d1a      	ldr	r5, [pc, #104]	; (800e06c <HAL_I2C_MspInit+0x8c>)
 800e002:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e004:	f043 0302 	orr.w	r3, r3, #2
 800e008:	632b      	str	r3, [r5, #48]	; 0x30
 800e00a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e00c:	f003 0302 	and.w	r3, r3, #2
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e014:	23c0      	movs	r3, #192	; 0xc0
 800e016:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e018:	2312      	movs	r3, #18
 800e01a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e01c:	2301      	movs	r3, #1
 800e01e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e020:	2303      	movs	r3, #3
 800e022:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e024:	2304      	movs	r3, #4
 800e026:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e028:	a903      	add	r1, sp, #12
 800e02a:	4811      	ldr	r0, [pc, #68]	; (800e070 <HAL_I2C_MspInit+0x90>)
 800e02c:	f7f4 fd1e 	bl	8002a6c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e030:	9402      	str	r4, [sp, #8]
 800e032:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e038:	642b      	str	r3, [r5, #64]	; 0x40
 800e03a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e03c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e040:	9302      	str	r3, [sp, #8]
 800e042:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800e044:	4622      	mov	r2, r4
 800e046:	4621      	mov	r1, r4
 800e048:	201f      	movs	r0, #31
 800e04a:	f7f3 fc9f 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e04e:	201f      	movs	r0, #31
 800e050:	f7f3 fcd0 	bl	80019f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800e054:	4622      	mov	r2, r4
 800e056:	4621      	mov	r1, r4
 800e058:	2020      	movs	r0, #32
 800e05a:	f7f3 fc97 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800e05e:	2020      	movs	r0, #32
 800e060:	f7f3 fcc8 	bl	80019f4 <HAL_NVIC_EnableIRQ>
}
 800e064:	e7c8      	b.n	800dff8 <HAL_I2C_MspInit+0x18>
 800e066:	bf00      	nop
 800e068:	40005400 	.word	0x40005400
 800e06c:	40023800 	.word	0x40023800
 800e070:	40020400 	.word	0x40020400

0800e074 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800e074:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800e076:	4807      	ldr	r0, [pc, #28]	; (800e094 <MX_IWDG_Init+0x20>)
 800e078:	4b07      	ldr	r3, [pc, #28]	; (800e098 <MX_IWDG_Init+0x24>)
 800e07a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800e07c:	2306      	movs	r3, #6
 800e07e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 800e080:	f640 73ff 	movw	r3, #4095	; 0xfff
 800e084:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800e086:	f7f5 ffdc 	bl	8004042 <HAL_IWDG_Init>
 800e08a:	b900      	cbnz	r0, 800e08e <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800e08c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e08e:	f000 fb63 	bl	800e758 <Error_Handler>
}
 800e092:	e7fb      	b.n	800e08c <MX_IWDG_Init+0x18>
 800e094:	2000e7e4 	.word	0x2000e7e4
 800e098:	40003000 	.word	0x40003000

0800e09c <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e09c:	4770      	bx	lr
	...

0800e0a0 <MX_LWIP_Init>:
{
 800e0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a2:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 192;
 800e0a4:	4f3c      	ldr	r7, [pc, #240]	; (800e198 <MX_LWIP_Init+0xf8>)
 800e0a6:	21c0      	movs	r1, #192	; 0xc0
 800e0a8:	7039      	strb	r1, [r7, #0]
  IP_ADDRESS[1] = 168;
 800e0aa:	22a8      	movs	r2, #168	; 0xa8
 800e0ac:	707a      	strb	r2, [r7, #1]
  IP_ADDRESS[2] = 0;
 800e0ae:	2400      	movs	r4, #0
 800e0b0:	70bc      	strb	r4, [r7, #2]
  IP_ADDRESS[3] = 100;
 800e0b2:	2364      	movs	r3, #100	; 0x64
 800e0b4:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800e0b6:	4e39      	ldr	r6, [pc, #228]	; (800e19c <MX_LWIP_Init+0xfc>)
 800e0b8:	23ff      	movs	r3, #255	; 0xff
 800e0ba:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800e0bc:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 800e0be:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800e0c0:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 192;
 800e0c2:	4d37      	ldr	r5, [pc, #220]	; (800e1a0 <MX_LWIP_Init+0x100>)
 800e0c4:	7029      	strb	r1, [r5, #0]
  GATEWAY_ADDRESS[1] = 168;
 800e0c6:	706a      	strb	r2, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	70ab      	strb	r3, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 800e0cc:	70eb      	strb	r3, [r5, #3]
  lwip_init();
 800e0ce:	f7f8 f860 	bl	8006192 <lwip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e0d2:	783a      	ldrb	r2, [r7, #0]
 800e0d4:	787b      	ldrb	r3, [r7, #1]
 800e0d6:	041b      	lsls	r3, r3, #16
 800e0d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e0dc:	78ba      	ldrb	r2, [r7, #2]
 800e0de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e0e2:	78f9      	ldrb	r1, [r7, #3]
 800e0e4:	430b      	orrs	r3, r1
 800e0e6:	021a      	lsls	r2, r3, #8
 800e0e8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800e0ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e0f0:	0a19      	lsrs	r1, r3, #8
 800e0f2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800e0f6:	430a      	orrs	r2, r1
 800e0f8:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800e0fc:	4929      	ldr	r1, [pc, #164]	; (800e1a4 <MX_LWIP_Init+0x104>)
 800e0fe:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e100:	7832      	ldrb	r2, [r6, #0]
 800e102:	7873      	ldrb	r3, [r6, #1]
 800e104:	041b      	lsls	r3, r3, #16
 800e106:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e10a:	78b2      	ldrb	r2, [r6, #2]
 800e10c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e110:	78f0      	ldrb	r0, [r6, #3]
 800e112:	4303      	orrs	r3, r0
 800e114:	021a      	lsls	r2, r3, #8
 800e116:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800e11a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800e11e:	0a18      	lsrs	r0, r3, #8
 800e120:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800e124:	4302      	orrs	r2, r0
 800e126:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800e12a:	4a1f      	ldr	r2, [pc, #124]	; (800e1a8 <MX_LWIP_Init+0x108>)
 800e12c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e12e:	7828      	ldrb	r0, [r5, #0]
 800e130:	786b      	ldrb	r3, [r5, #1]
 800e132:	041b      	lsls	r3, r3, #16
 800e134:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e138:	78a8      	ldrb	r0, [r5, #2]
 800e13a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e13e:	78ed      	ldrb	r5, [r5, #3]
 800e140:	432b      	orrs	r3, r5
 800e142:	0218      	lsls	r0, r3, #8
 800e144:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800e148:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 800e14c:	0a1d      	lsrs	r5, r3, #8
 800e14e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 800e152:	4328      	orrs	r0, r5
 800e154:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 800e158:	4b14      	ldr	r3, [pc, #80]	; (800e1ac <MX_LWIP_Init+0x10c>)
 800e15a:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e15c:	4d14      	ldr	r5, [pc, #80]	; (800e1b0 <MX_LWIP_Init+0x110>)
 800e15e:	4815      	ldr	r0, [pc, #84]	; (800e1b4 <MX_LWIP_Init+0x114>)
 800e160:	9002      	str	r0, [sp, #8]
 800e162:	4815      	ldr	r0, [pc, #84]	; (800e1b8 <MX_LWIP_Init+0x118>)
 800e164:	9001      	str	r0, [sp, #4]
 800e166:	9400      	str	r4, [sp, #0]
 800e168:	4628      	mov	r0, r5
 800e16a:	f7f8 fbf9 	bl	8006960 <netif_add>
  netif_set_default(&gnetif);
 800e16e:	4628      	mov	r0, r5
 800e170:	f7f8 fc88 	bl	8006a84 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 800e174:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e178:	f013 0f04 	tst.w	r3, #4
 800e17c:	d008      	beq.n	800e190 <MX_LWIP_Init+0xf0>
    netif_set_up(&gnetif);
 800e17e:	4628      	mov	r0, r5
 800e180:	f7f8 fc86 	bl	8006a90 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e184:	490d      	ldr	r1, [pc, #52]	; (800e1bc <MX_LWIP_Init+0x11c>)
 800e186:	480a      	ldr	r0, [pc, #40]	; (800e1b0 <MX_LWIP_Init+0x110>)
 800e188:	f7f8 fcc0 	bl	8006b0c <netif_set_link_callback>
}
 800e18c:	b005      	add	sp, #20
 800e18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 800e190:	4807      	ldr	r0, [pc, #28]	; (800e1b0 <MX_LWIP_Init+0x110>)
 800e192:	f7f8 fc9b 	bl	8006acc <netif_set_down>
 800e196:	e7f5      	b.n	800e184 <MX_LWIP_Init+0xe4>
 800e198:	2000e834 	.word	0x2000e834
 800e19c:	2000e830 	.word	0x2000e830
 800e1a0:	2000e7f0 	.word	0x2000e7f0
 800e1a4:	2000e828 	.word	0x2000e828
 800e1a8:	2000e838 	.word	0x2000e838
 800e1ac:	2000e83c 	.word	0x2000e83c
 800e1b0:	2000e7f4 	.word	0x2000e7f4
 800e1b4:	0800c5b9 	.word	0x0800c5b9
 800e1b8:	0800ca51 	.word	0x0800ca51
 800e1bc:	0800e09d 	.word	0x0800e09d

0800e1c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e1c0:	b530      	push	{r4, r5, lr}
 800e1c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e1c4:	2230      	movs	r2, #48	; 0x30
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	a808      	add	r0, sp, #32
 800e1ca:	f004 fc6f 	bl	8012aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e1ce:	2400      	movs	r4, #0
 800e1d0:	9403      	str	r4, [sp, #12]
 800e1d2:	9404      	str	r4, [sp, #16]
 800e1d4:	9405      	str	r4, [sp, #20]
 800e1d6:	9406      	str	r4, [sp, #24]
 800e1d8:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e1da:	9401      	str	r4, [sp, #4]
 800e1dc:	4b1d      	ldr	r3, [pc, #116]	; (800e254 <SystemClock_Config+0x94>)
 800e1de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e1e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e1e4:	641a      	str	r2, [r3, #64]	; 0x40
 800e1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e1f0:	9402      	str	r4, [sp, #8]
 800e1f2:	4b19      	ldr	r3, [pc, #100]	; (800e258 <SystemClock_Config+0x98>)
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e202:	9302      	str	r3, [sp, #8]
 800e204:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800e206:	230a      	movs	r3, #10
 800e208:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e20a:	2301      	movs	r3, #1
 800e20c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 25;
 800e20e:	2219      	movs	r2, #25
 800e210:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e212:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e214:	2502      	movs	r5, #2
 800e216:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e218:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e21a:	2308      	movs	r3, #8
 800e21c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800e21e:	23b4      	movs	r3, #180	; 0xb4
 800e220:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e222:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e224:	2304      	movs	r3, #4
 800e226:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e228:	a808      	add	r0, sp, #32
 800e22a:	f7f5 ff7d 	bl	8004128 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e22e:	f7f5 ff3b 	bl	80040a8 <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e232:	230f      	movs	r3, #15
 800e234:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e236:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e238:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e23a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e23e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e244:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e246:	2105      	movs	r1, #5
 800e248:	a803      	add	r0, sp, #12
 800e24a:	f7f6 f9b9 	bl	80045c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800e24e:	b015      	add	sp, #84	; 0x54
 800e250:	bd30      	pop	{r4, r5, pc}
 800e252:	bf00      	nop
 800e254:	40023800 	.word	0x40023800
 800e258:	40007000 	.word	0x40007000

0800e25c <main>:
{
 800e25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e260:	b082      	sub	sp, #8
  HAL_Init();
 800e262:	f7f2 ff07 	bl	8001074 <HAL_Init>
  SystemClock_Config();
 800e266:	f7ff ffab 	bl	800e1c0 <SystemClock_Config>
  getLastKnownConfiguration();
 800e26a:	f002 fa67 	bl	801073c <getLastKnownConfiguration>
  MX_GPIO_Init();
 800e26e:	f7fe fc17 	bl	800caa0 <MX_GPIO_Init>
  MX_DMA_Init();
 800e272:	f7fe fb1d 	bl	800c8b0 <MX_DMA_Init>
  MX_IWDG_Init();
 800e276:	f7ff fefd 	bl	800e074 <MX_IWDG_Init>
  MX_TIM7_Init();
 800e27a:	f003 fb25 	bl	80118c8 <MX_TIM7_Init>
  MX_UART4_Init();
 800e27e:	f003 fb6b 	bl	8011958 <MX_UART4_Init>
  MX_RTC_Init();
 800e282:	f002 fc55 	bl	8010b30 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800e286:	f003 fbf1 	bl	8011a6c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800e28a:	f7fe fa21 	bl	800c6d0 <MX_ADC1_Init>
  MX_LWIP_Init();
 800e28e:	f7ff ff07 	bl	800e0a0 <MX_LWIP_Init>
  MX_I2C1_Init();
 800e292:	f7ff fe77 	bl	800df84 <MX_I2C1_Init>
  MX_SPI1_Init();
 800e296:	f003 f945 	bl	8011524 <MX_SPI1_Init>
  updateDeviceSignature();
 800e29a:	f7fe fabd 	bl	800c818 <updateDeviceSignature>
	HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 800e29e:	4ca7      	ldr	r4, [pc, #668]	; (800e53c <main+0x2e0>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f7f4 fcd8 	bl	8002c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_SET);
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f7f4 fcd2 	bl	8002c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800e2b8:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f7f4 fcca 	bl	8002c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	2140      	movs	r1, #64	; 0x40
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f7f4 fcc5 	bl	8002c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	2120      	movs	r1, #32
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7f4 fcc0 	bl	8002c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 800e2dc:	2200      	movs	r2, #0
 800e2de:	2180      	movs	r1, #128	; 0x80
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f7f4 fcbb 	bl	8002c5c <HAL_GPIO_WritePin>
	setupModbus();
 800e2e6:	f000 fd8d 	bl	800ee04 <setupModbus>
	setupModbusRTU();
 800e2ea:	f000 fd59 	bl	800eda0 <setupModbusRTU>
	if(gu32UploadTimeSupply == 0)
 800e2ee:	4b94      	ldr	r3, [pc, #592]	; (800e540 <main+0x2e4>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	b91b      	cbnz	r3, 800e2fc <main+0xa0>
		gu32UploadTimeSupply = ONE_MIN;//THIRTY_SEC;//TWO_MIN;
 800e2f4:	4b92      	ldr	r3, [pc, #584]	; (800e540 <main+0x2e4>)
 800e2f6:	f64e 2260 	movw	r2, #60000	; 0xea60
 800e2fa:	601a      	str	r2, [r3, #0]
	if(gu32UploadTimeBatt == 0)
 800e2fc:	4b91      	ldr	r3, [pc, #580]	; (800e544 <main+0x2e8>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	b913      	cbnz	r3, 800e308 <main+0xac>
		gu32UploadTimeBatt = FIVE_MIN;
 800e302:	4b90      	ldr	r3, [pc, #576]	; (800e544 <main+0x2e8>)
 800e304:	4a90      	ldr	r2, [pc, #576]	; (800e548 <main+0x2ec>)
 800e306:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800e308:	4a90      	ldr	r2, [pc, #576]	; (800e54c <main+0x2f0>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30a:	e852 3f00 	ldrex	r3, [r2]
 800e30e:	f043 0320 	orr.w	r3, r3, #32
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e312:	e842 3100 	strex	r1, r3, [r2]
 800e316:	2900      	cmp	r1, #0
 800e318:	d1f6      	bne.n	800e308 <main+0xac>
 800e31a:	4a8d      	ldr	r2, [pc, #564]	; (800e550 <main+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31c:	e852 3f00 	ldrex	r3, [r2]
 800e320:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e324:	e842 3100 	strex	r1, r3, [r2]
 800e328:	2900      	cmp	r1, #0
 800e32a:	d1f6      	bne.n	800e31a <main+0xbe>
	if(HAL_TIM_Base_Start_IT(&htim7)!= HAL_OK)
 800e32c:	4889      	ldr	r0, [pc, #548]	; (800e554 <main+0x2f8>)
 800e32e:	f7f7 fb17 	bl	8005960 <HAL_TIM_Base_Start_IT>
	updateNetworkAPN();
 800e332:	f7fe ffa1 	bl	800d278 <updateNetworkAPN>
	gu32TempPayloadQueueEnqueue = ONE_MIN;
 800e336:	4b88      	ldr	r3, [pc, #544]	; (800e558 <main+0x2fc>)
 800e338:	f64e 2260 	movw	r2, #60000	; 0xea60
 800e33c:	601a      	str	r2, [r3, #0]
	memset(gau8TempMBPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimit);
 800e33e:	4b87      	ldr	r3, [pc, #540]	; (800e55c <main+0x300>)
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	2100      	movs	r1, #0
 800e344:	4886      	ldr	r0, [pc, #536]	; (800e560 <main+0x304>)
 800e346:	f004 fbb1 	bl	8012aac <memset>
	memset(gau8TempMBRTUPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimitRTU);
 800e34a:	4b86      	ldr	r3, [pc, #536]	; (800e564 <main+0x308>)
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	2100      	movs	r1, #0
 800e350:	4885      	ldr	r0, [pc, #532]	; (800e568 <main+0x30c>)
 800e352:	f004 fbab 	bl	8012aac <memset>
	if(HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDRESS,292,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashReadMemLocAddress, 4) != HAL_OK)
 800e356:	2304      	movs	r3, #4
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	4b84      	ldr	r3, [pc, #528]	; (800e56c <main+0x310>)
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	2310      	movs	r3, #16
 800e360:	f44f 7292 	mov.w	r2, #292	; 0x124
 800e364:	21a0      	movs	r1, #160	; 0xa0
 800e366:	4882      	ldr	r0, [pc, #520]	; (800e570 <main+0x314>)
 800e368:	f7f4 ff98 	bl	800329c <HAL_I2C_Mem_Read_IT>
 800e36c:	b370      	cbz	r0, 800e3cc <main+0x170>
	if(HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDRESS,288,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashWriteMemLocAddress, 4) != HAL_OK)
 800e36e:	2304      	movs	r3, #4
 800e370:	9301      	str	r3, [sp, #4]
 800e372:	4b80      	ldr	r3, [pc, #512]	; (800e574 <main+0x318>)
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	2310      	movs	r3, #16
 800e378:	f44f 7290 	mov.w	r2, #288	; 0x120
 800e37c:	21a0      	movs	r1, #160	; 0xa0
 800e37e:	487c      	ldr	r0, [pc, #496]	; (800e570 <main+0x314>)
 800e380:	f7f4 ff8c 	bl	800329c <HAL_I2C_Mem_Read_IT>
 800e384:	2800      	cmp	r0, #0
 800e386:	d04a      	beq.n	800e41e <main+0x1c2>
	FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 800e388:	4b7b      	ldr	r3, [pc, #492]	; (800e578 <main+0x31c>)
 800e38a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e38e:	611a      	str	r2, [r3, #16]
	FlashStr.bitFlagQueueDataWrite = 0;
 800e390:	f242 124e 	movw	r2, #8526	; 0x214e
 800e394:	2100      	movs	r1, #0
 800e396:	5499      	strb	r1, [r3, r2]
	if(HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDRESS,296,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8STimeStampBackup, 6) != HAL_OK)
 800e398:	2306      	movs	r3, #6
 800e39a:	9301      	str	r3, [sp, #4]
 800e39c:	4b77      	ldr	r3, [pc, #476]	; (800e57c <main+0x320>)
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	2310      	movs	r3, #16
 800e3a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e3a6:	21a0      	movs	r1, #160	; 0xa0
 800e3a8:	4871      	ldr	r0, [pc, #452]	; (800e570 <main+0x314>)
 800e3aa:	f7f4 ff77 	bl	800329c <HAL_I2C_Mem_Read_IT>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d056      	beq.n	800e460 <main+0x204>
	enqueue(&gsmPayload,(char *)getSystemConfig());
 800e3b2:	f000 fd51 	bl	800ee58 <getSystemConfig>
 800e3b6:	4601      	mov	r1, r0
 800e3b8:	4871      	ldr	r0, [pc, #452]	; (800e580 <main+0x324>)
 800e3ba:	f001 f96f 	bl	800f69c <enqueue>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);	// LED OFF
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3c4:	486f      	ldr	r0, [pc, #444]	; (800e584 <main+0x328>)
 800e3c6:	f7f4 fc49 	bl	8002c5c <HAL_GPIO_WritePin>
 800e3ca:	e11e      	b.n	800e60a <main+0x3ae>
		HAL_Delay(10);
 800e3cc:	200a      	movs	r0, #10
 800e3ce:	f7f2 fe7d 	bl	80010cc <HAL_Delay>
		strI2cEeprom.u32RdSFlashReadMemLocAddress = strI2cEeprom.pu8SFlashReadMemLocAddress[3] << 24;
 800e3d2:	4a6d      	ldr	r2, [pc, #436]	; (800e588 <main+0x32c>)
 800e3d4:	f892 1ce0 	ldrb.w	r1, [r2, #3296]	; 0xce0
		strI2cEeprom.u32RdSFlashReadMemLocAddress |= strI2cEeprom.pu8SFlashReadMemLocAddress[2] << 16;
 800e3d8:	f892 3cdf 	ldrb.w	r3, [r2, #3295]	; 0xcdf
 800e3dc:	041b      	lsls	r3, r3, #16
 800e3de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
		strI2cEeprom.u32RdSFlashReadMemLocAddress |= strI2cEeprom.pu8SFlashReadMemLocAddress[1] << 8;
 800e3e2:	f892 1cde 	ldrb.w	r1, [r2, #3294]	; 0xcde
 800e3e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		strI2cEeprom.u32RdSFlashReadMemLocAddress |= strI2cEeprom.pu8SFlashReadMemLocAddress[0];
 800e3ea:	f892 1cdd 	ldrb.w	r1, [r2, #3293]	; 0xcdd
 800e3ee:	430b      	orrs	r3, r1
 800e3f0:	f8c2 3cec 	str.w	r3, [r2, #3308]	; 0xcec
		if((strI2cEeprom.u32RdSFlashReadMemLocAddress == 0xFFFFFFFF) || (strI2cEeprom.u32RdSFlashReadMemLocAddress >= SFLASH_SIZE))
 800e3f4:	4a65      	ldr	r2, [pc, #404]	; (800e58c <main+0x330>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d903      	bls.n	800e402 <main+0x1a6>
			strI2cEeprom.u32RdSFlashReadMemLocAddress = 0;
 800e3fa:	4b63      	ldr	r3, [pc, #396]	; (800e588 <main+0x32c>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		FlashStr.u32FlashReadAddress = strI2cEeprom.u32RdSFlashReadMemLocAddress;
 800e402:	4b61      	ldr	r3, [pc, #388]	; (800e588 <main+0x32c>)
 800e404:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 800e408:	4a5b      	ldr	r2, [pc, #364]	; (800e578 <main+0x31c>)
 800e40a:	6053      	str	r3, [r2, #4]
		if(FlashStr.u32FlashReadAddress != 0 && FlashStr.u32FlashReadAddress > SFLASH_UPLOAD_LENGTH)
 800e40c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e410:	4293      	cmp	r3, r2
 800e412:	d9ac      	bls.n	800e36e <main+0x112>
			FlashStr.u32FlashReadAddress -= SFLASH_UPLOAD_LENGTH;
 800e414:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800e418:	4a57      	ldr	r2, [pc, #348]	; (800e578 <main+0x31c>)
 800e41a:	6053      	str	r3, [r2, #4]
 800e41c:	e7a7      	b.n	800e36e <main+0x112>
		HAL_Delay(10);
 800e41e:	200a      	movs	r0, #10
 800e420:	f7f2 fe54 	bl	80010cc <HAL_Delay>
		strI2cEeprom.u32RdSFlashWriteMemLocAddress = strI2cEeprom.pu8SFlashWriteMemLocAddress[3] << 24;
 800e424:	4a58      	ldr	r2, [pc, #352]	; (800e588 <main+0x32c>)
 800e426:	f892 1cdb 	ldrb.w	r1, [r2, #3291]	; 0xcdb
		strI2cEeprom.u32RdSFlashWriteMemLocAddress |= strI2cEeprom.pu8SFlashWriteMemLocAddress[2] << 16;
 800e42a:	f892 3cda 	ldrb.w	r3, [r2, #3290]	; 0xcda
 800e42e:	041b      	lsls	r3, r3, #16
 800e430:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
		strI2cEeprom.u32RdSFlashWriteMemLocAddress |= strI2cEeprom.pu8SFlashWriteMemLocAddress[1] << 8;
 800e434:	f892 1cd9 	ldrb.w	r1, [r2, #3289]	; 0xcd9
 800e438:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		strI2cEeprom.u32RdSFlashWriteMemLocAddress |= strI2cEeprom.pu8SFlashWriteMemLocAddress[0];
 800e43c:	f892 1cd8 	ldrb.w	r1, [r2, #3288]	; 0xcd8
 800e440:	430b      	orrs	r3, r1
 800e442:	f8c2 3cf0 	str.w	r3, [r2, #3312]	; 0xcf0
		if((strI2cEeprom.u32RdSFlashWriteMemLocAddress == 0xFFFFFFFF) || (strI2cEeprom.u32RdSFlashWriteMemLocAddress >= SFLASH_SIZE))
 800e446:	4a51      	ldr	r2, [pc, #324]	; (800e58c <main+0x330>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d903      	bls.n	800e454 <main+0x1f8>
			strI2cEeprom.u32RdSFlashWriteMemLocAddress = 0;
 800e44c:	4b4e      	ldr	r3, [pc, #312]	; (800e588 <main+0x32c>)
 800e44e:	2200      	movs	r2, #0
 800e450:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
		FlashStr.u32FlashWriteAddress = strI2cEeprom.u32RdSFlashWriteMemLocAddress;
 800e454:	4b4c      	ldr	r3, [pc, #304]	; (800e588 <main+0x32c>)
 800e456:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 800e45a:	4b47      	ldr	r3, [pc, #284]	; (800e578 <main+0x31c>)
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	e793      	b.n	800e388 <main+0x12c>
		HAL_Delay(10);
 800e460:	200a      	movs	r0, #10
 800e462:	f7f2 fe33 	bl	80010cc <HAL_Delay>
		STime1.Hours = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[3]);
 800e466:	4c48      	ldr	r4, [pc, #288]	; (800e588 <main+0x32c>)
 800e468:	f894 0ce5 	ldrb.w	r0, [r4, #3301]	; 0xce5
 800e46c:	f003 fee2 	bl	8012234 <DecimalToBCD>
 800e470:	4d47      	ldr	r5, [pc, #284]	; (800e590 <main+0x334>)
 800e472:	7028      	strb	r0, [r5, #0]
		STime1.Minutes = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[4]);
 800e474:	f894 0ce6 	ldrb.w	r0, [r4, #3302]	; 0xce6
 800e478:	f003 fedc 	bl	8012234 <DecimalToBCD>
 800e47c:	7068      	strb	r0, [r5, #1]
		STime1.Seconds = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[5]);
 800e47e:	f894 0ce7 	ldrb.w	r0, [r4, #3303]	; 0xce7
 800e482:	f003 fed7 	bl	8012234 <DecimalToBCD>
 800e486:	70a8      	strb	r0, [r5, #2]
		HAL_RTC_SetTime(&hrtc, &STime1, RTC_FORMAT_BCD);
 800e488:	4f42      	ldr	r7, [pc, #264]	; (800e594 <main+0x338>)
 800e48a:	2201      	movs	r2, #1
 800e48c:	4629      	mov	r1, r5
 800e48e:	4638      	mov	r0, r7
 800e490:	f7f6 fb73 	bl	8004b7a <HAL_RTC_SetTime>
		year = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[2]);
 800e494:	f894 0ce4 	ldrb.w	r0, [r4, #3300]	; 0xce4
 800e498:	f003 fecc 	bl	8012234 <DecimalToBCD>
 800e49c:	b2c6      	uxtb	r6, r0
		SDate1.WeekDay = RTC_WEEKDAY_MONDAY;
 800e49e:	4d3e      	ldr	r5, [pc, #248]	; (800e598 <main+0x33c>)
 800e4a0:	f04f 0801 	mov.w	r8, #1
 800e4a4:	f885 8000 	strb.w	r8, [r5]
		SDate1.Month = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[1]);
 800e4a8:	f894 0ce3 	ldrb.w	r0, [r4, #3299]	; 0xce3
 800e4ac:	f003 fec2 	bl	8012234 <DecimalToBCD>
 800e4b0:	7068      	strb	r0, [r5, #1]
		SDate1.Date = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[0]);
 800e4b2:	f894 0ce2 	ldrb.w	r0, [r4, #3298]	; 0xce2
 800e4b6:	f003 febd 	bl	8012234 <DecimalToBCD>
 800e4ba:	70a8      	strb	r0, [r5, #2]
		SDate1.Year = year;
 800e4bc:	70ee      	strb	r6, [r5, #3]
		HAL_RTC_SetDate(&hrtc, &SDate1, RTC_FORMAT_BCD);
 800e4be:	4642      	mov	r2, r8
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	f7f6 fbb8 	bl	8004c38 <HAL_RTC_SetDate>
 800e4c8:	e773      	b.n	800e3b2 <main+0x156>
		  bitFlagRTCBackupUpdated = 1;
 800e4ca:	4b34      	ldr	r3, [pc, #208]	; (800e59c <main+0x340>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	701a      	strb	r2, [r3, #0]
		  memset(strI2cEeprom.pu8STimeStampBackup, 0x0, sizeof(strI2cEeprom.pu8STimeStampBackup));
 800e4d0:	4c2a      	ldr	r4, [pc, #168]	; (800e57c <main+0x320>)
 800e4d2:	2700      	movs	r7, #0
 800e4d4:	6027      	str	r7, [r4, #0]
 800e4d6:	f8c4 7003 	str.w	r7, [r4, #3]
		  HAL_RTC_GetTime(&hrtc, &STime1, RTC_FORMAT_BIN);
 800e4da:	4d2d      	ldr	r5, [pc, #180]	; (800e590 <main+0x334>)
 800e4dc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800e594 <main+0x338>
 800e4e0:	463a      	mov	r2, r7
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	4640      	mov	r0, r8
 800e4e6:	f7f6 fcd8 	bl	8004e9a <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &SDate1, RTC_FORMAT_BIN);
 800e4ea:	4e2b      	ldr	r6, [pc, #172]	; (800e598 <main+0x33c>)
 800e4ec:	463a      	mov	r2, r7
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	4640      	mov	r0, r8
 800e4f2:	f7f6 fcf8 	bl	8004ee6 <HAL_RTC_GetDate>
		  strI2cEeprom.pu8STimeStampBackup[0] = SDate1.Date;
 800e4f6:	78b2      	ldrb	r2, [r6, #2]
 800e4f8:	f6a4 43e2 	subw	r3, r4, #3298	; 0xce2
 800e4fc:	f883 2ce2 	strb.w	r2, [r3, #3298]	; 0xce2
		  strI2cEeprom.pu8STimeStampBackup[1] = SDate1.Month;
 800e500:	7872      	ldrb	r2, [r6, #1]
 800e502:	7062      	strb	r2, [r4, #1]
		  strI2cEeprom.pu8STimeStampBackup[2] = SDate1.Year;
 800e504:	78f2      	ldrb	r2, [r6, #3]
 800e506:	70a2      	strb	r2, [r4, #2]
		  strI2cEeprom.pu8STimeStampBackup[3] = STime1.Hours;
 800e508:	782a      	ldrb	r2, [r5, #0]
 800e50a:	70e2      	strb	r2, [r4, #3]
		  strI2cEeprom.pu8STimeStampBackup[4] = STime1.Minutes;
 800e50c:	786a      	ldrb	r2, [r5, #1]
 800e50e:	7122      	strb	r2, [r4, #4]
		  strI2cEeprom.pu8STimeStampBackup[5] = STime1.Seconds;
 800e510:	78aa      	ldrb	r2, [r5, #2]
 800e512:	7162      	strb	r2, [r4, #5]
		  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 296, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&strI2cEeprom.pu8STimeStampBackup, 6);
 800e514:	2306      	movs	r3, #6
 800e516:	9301      	str	r3, [sp, #4]
 800e518:	9400      	str	r4, [sp, #0]
 800e51a:	2310      	movs	r3, #16
 800e51c:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e520:	21a0      	movs	r1, #160	; 0xa0
 800e522:	4813      	ldr	r0, [pc, #76]	; (800e570 <main+0x314>)
 800e524:	f7f4 fe48 	bl	80031b8 <HAL_I2C_Mem_Write_IT>
		  HAL_Delay(10);
 800e528:	200a      	movs	r0, #10
 800e52a:	f7f2 fdcf 	bl	80010cc <HAL_Delay>
 800e52e:	e08d      	b.n	800e64c <main+0x3f0>
		modbusQueryFSM();
 800e530:	f000 f964 	bl	800e7fc <modbusQueryFSM>
		uploadSlaveData();
 800e534:	f000 fba0 	bl	800ec78 <uploadSlaveData>
 800e538:	e08d      	b.n	800e656 <main+0x3fa>
 800e53a:	bf00      	nop
 800e53c:	40021000 	.word	0x40021000
 800e540:	20001fec 	.word	0x20001fec
 800e544:	20001ff0 	.word	0x20001ff0
 800e548:	000493e0 	.word	0x000493e0
 800e54c:	4000480c 	.word	0x4000480c
 800e550:	40004c0c 	.word	0x40004c0c
 800e554:	200127a4 	.word	0x200127a4
 800e558:	20004454 	.word	0x20004454
 800e55c:	20003b24 	.word	0x20003b24
 800e560:	200019ec 	.word	0x200019ec
 800e564:	20003aec 	.word	0x20003aec
 800e568:	200010f0 	.word	0x200010f0
 800e56c:	2000825d 	.word	0x2000825d
 800e570:	2000e790 	.word	0x2000e790
 800e574:	20008258 	.word	0x20008258
 800e578:	200105f4 	.word	0x200105f4
 800e57c:	20008262 	.word	0x20008262
 800e580:	2000e760 	.word	0x2000e760
 800e584:	40020c00 	.word	0x40020c00
 800e588:	20007580 	.word	0x20007580
 800e58c:	007ffffe 	.word	0x007ffffe
 800e590:	20010598 	.word	0x20010598
 800e594:	200105ac 	.word	0x200105ac
 800e598:	20010594 	.word	0x20010594
 800e59c:	20003610 	.word	0x20003610
			gu32TempPayloadQueueEnqueue = TWO_SEC;
 800e5a0:	4b58      	ldr	r3, [pc, #352]	; (800e704 <main+0x4a8>)
 800e5a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e5a6:	601a      	str	r2, [r3, #0]
			++u32MBCycleCompCouter;
 800e5a8:	4a57      	ldr	r2, [pc, #348]	; (800e708 <main+0x4ac>)
 800e5aa:	6853      	ldr	r3, [r2, #4]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	6053      	str	r3, [r2, #4]
			if(u32MBCycleCompCouter > 20)
 800e5b0:	2b14      	cmp	r3, #20
 800e5b2:	d904      	bls.n	800e5be <main+0x362>
				u32MB485FirstCycleComplete = 1;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	4a55      	ldr	r2, [pc, #340]	; (800e70c <main+0x4b0>)
 800e5b8:	6013      	str	r3, [r2, #0]
				u32MBTCPFirstCycleComplete = 1;
 800e5ba:	4a55      	ldr	r2, [pc, #340]	; (800e710 <main+0x4b4>)
 800e5bc:	6013      	str	r3, [r2, #0]
	if(gsmInstance.u32GSMTimer > FIVE_MIN)
 800e5be:	4b55      	ldr	r3, [pc, #340]	; (800e714 <main+0x4b8>)
 800e5c0:	f8d3 2e20 	ldr.w	r2, [r3, #3616]	; 0xe20
 800e5c4:	4b54      	ldr	r3, [pc, #336]	; (800e718 <main+0x4bc>)
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d904      	bls.n	800e5d4 <main+0x378>
		gsmInstance.u32GSMTimer = FOUR_SEC;
 800e5ca:	4b52      	ldr	r3, [pc, #328]	; (800e714 <main+0x4b8>)
 800e5cc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e5d0:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	if(gu32GSMHangTimer == 0)
 800e5d4:	4b51      	ldr	r3, [pc, #324]	; (800e71c <main+0x4c0>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d068      	beq.n	800e6ae <main+0x452>
	if(gu32GSMRestartTimer == 0)
 800e5dc:	4b50      	ldr	r3, [pc, #320]	; (800e720 <main+0x4c4>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d067      	beq.n	800e6b4 <main+0x458>
	operateGSMSIM868();
 800e5e4:	f7ff fb88 	bl	800dcf8 <operateGSMSIM868>
	if(gu32LedTimer == 0)
 800e5e8:	4b4e      	ldr	r3, [pc, #312]	; (800e724 <main+0x4c8>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d064      	beq.n	800e6ba <main+0x45e>
	if(gu32SystemResetTimer == 0)
 800e5f0:	4b4d      	ldr	r3, [pc, #308]	; (800e728 <main+0x4cc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d079      	beq.n	800e6ec <main+0x490>
	verifyRemoteConfiguration();
 800e5f8:	f001 fbd2 	bl	800fda0 <verifyRemoteConfiguration>
	parseRemoteconfig();
 800e5fc:	f001 fc4a 	bl	800fe94 <parseRemoteconfig>
	getRTCCalender();
 800e600:	f003 fde6 	bl	80121d0 <getRTCCalender>
	HAL_IWDG_Refresh(&hiwdg);
 800e604:	4849      	ldr	r0, [pc, #292]	; (800e72c <main+0x4d0>)
 800e606:	f7f5 fd48 	bl	800409a <HAL_IWDG_Refresh>
	  SerialFlashFSM();
 800e60a:	f002 fccf 	bl	8010fac <SerialFlashFSM>
	  if(gu32SystemResetTimer < THIRTY_SEC && FlashStr.bitFlagQueueDataWrite == 0)
 800e60e:	4b46      	ldr	r3, [pc, #280]	; (800e728 <main+0x4cc>)
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	f247 532f 	movw	r3, #29999	; 0x752f
 800e616:	429a      	cmp	r2, r3
 800e618:	d80d      	bhi.n	800e636 <main+0x3da>
 800e61a:	4a45      	ldr	r2, [pc, #276]	; (800e730 <main+0x4d4>)
 800e61c:	f242 134e 	movw	r3, #8526	; 0x214e
 800e620:	5cd3      	ldrb	r3, [r2, r3]
 800e622:	b943      	cbnz	r3, 800e636 <main+0x3da>
		  FlashStr.bitFlagQueueDataWrite = 1;
 800e624:	4613      	mov	r3, r2
 800e626:	2201      	movs	r2, #1
 800e628:	f242 114e 	movw	r1, #8526	; 0x214e
 800e62c:	545a      	strb	r2, [r3, r1]
		  GSMQueueFullFlag = 1;
 800e62e:	4941      	ldr	r1, [pc, #260]	; (800e734 <main+0x4d8>)
 800e630:	700a      	strb	r2, [r1, #0]
		  FlashStr.u8QueueWriteCounter = 0;
 800e632:	2200      	movs	r2, #0
 800e634:	755a      	strb	r2, [r3, #21]
	  if(gu32SystemResetTimer < THIRTY_SEC &&  bitFlagRTCBackupUpdated == 0)
 800e636:	4b3c      	ldr	r3, [pc, #240]	; (800e728 <main+0x4cc>)
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	f247 532f 	movw	r3, #29999	; 0x752f
 800e63e:	429a      	cmp	r2, r3
 800e640:	d804      	bhi.n	800e64c <main+0x3f0>
 800e642:	4b31      	ldr	r3, [pc, #196]	; (800e708 <main+0x4ac>)
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	f43f af3f 	beq.w	800e4ca <main+0x26e>
	if(gu32OperateModbus485 == 1)
 800e64c:	4b3a      	ldr	r3, [pc, #232]	; (800e738 <main+0x4dc>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b01      	cmp	r3, #1
 800e652:	f43f af6d 	beq.w	800e530 <main+0x2d4>
	operateadc();
 800e656:	f003 fae9 	bl	8011c2c <operateadc>
	if(gu32TempPayloadQueueEnqueue == 0)
 800e65a:	4b2a      	ldr	r3, [pc, #168]	; (800e704 <main+0x4a8>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1ad      	bne.n	800e5be <main+0x362>
		if(u32MB485FirstCycleComplete == 0 || u32MBTCPFirstCycleComplete == 0)
 800e662:	4b2a      	ldr	r3, [pc, #168]	; (800e70c <main+0x4b0>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d09a      	beq.n	800e5a0 <main+0x344>
 800e66a:	4b29      	ldr	r3, [pc, #164]	; (800e710 <main+0x4b4>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d096      	beq.n	800e5a0 <main+0x344>
			enqueue(&gsmPayload,(char *)getSystemDataString());
 800e672:	f000 fe67 	bl	800f344 <getSystemDataString>
 800e676:	4601      	mov	r1, r0
 800e678:	4830      	ldr	r0, [pc, #192]	; (800e73c <main+0x4e0>)
 800e67a:	f001 f80f 	bl	800f69c <enqueue>
			if(gu32InputSupplySwitchedAlert == TRUE)
 800e67e:	4b30      	ldr	r3, [pc, #192]	; (800e740 <main+0x4e4>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b01      	cmp	r3, #1
 800e684:	d00e      	beq.n	800e6a4 <main+0x448>
				gu32TempPayloadQueueEnqueue = gu32UploadTimeSupply;
 800e686:	4b2f      	ldr	r3, [pc, #188]	; (800e744 <main+0x4e8>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	4b1e      	ldr	r3, [pc, #120]	; (800e704 <main+0x4a8>)
 800e68c:	601a      	str	r2, [r3, #0]
			if(gu32TempPayloadQueueEnqueue < ONE_MIN)
 800e68e:	4b1d      	ldr	r3, [pc, #116]	; (800e704 <main+0x4a8>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	f64e 235f 	movw	r3, #59999	; 0xea5f
 800e696:	429a      	cmp	r2, r3
 800e698:	d891      	bhi.n	800e5be <main+0x362>
				gu32TempPayloadQueueEnqueue = ONE_MIN;
 800e69a:	4b1a      	ldr	r3, [pc, #104]	; (800e704 <main+0x4a8>)
 800e69c:	f64e 2260 	movw	r2, #60000	; 0xea60
 800e6a0:	601a      	str	r2, [r3, #0]
 800e6a2:	e78c      	b.n	800e5be <main+0x362>
				gu32TempPayloadQueueEnqueue = gu32UploadTimeBatt; //TEN_SEC;//
 800e6a4:	4b28      	ldr	r3, [pc, #160]	; (800e748 <main+0x4ec>)
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	4b16      	ldr	r3, [pc, #88]	; (800e704 <main+0x4a8>)
 800e6aa:	601a      	str	r2, [r3, #0]
 800e6ac:	e7ef      	b.n	800e68e <main+0x432>
		initGSMSIM868();
 800e6ae:	f7fe fa7d 	bl	800cbac <initGSMSIM868>
 800e6b2:	e793      	b.n	800e5dc <main+0x380>
		initGSMSIM868();
 800e6b4:	f7fe fa7a 	bl	800cbac <initGSMSIM868>
 800e6b8:	e794      	b.n	800e5e4 <main+0x388>
		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800e6ba:	4c24      	ldr	r4, [pc, #144]	; (800e74c <main+0x4f0>)
 800e6bc:	2140      	movs	r1, #64	; 0x40
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7f4 fad2 	bl	8002c68 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port,HEARTBEAT_Pin);
 800e6c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7f4 facd 	bl	8002c68 <HAL_GPIO_TogglePin>
		gu32LedTimer = ONE_SEC; // FIVE_SEC; // HUNDRED_MS; //
 800e6ce:	4b15      	ldr	r3, [pc, #84]	; (800e724 <main+0x4c8>)
 800e6d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6d4:	601a      	str	r2, [r3, #0]
		if(gu32InputSupplySwitchedAlert == FALSE)
 800e6d6:	4b1a      	ldr	r3, [pc, #104]	; (800e740 <main+0x4e4>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	b913      	cbnz	r3, 800e6e2 <main+0x486>
			gu32LedTimer = ONE_SEC;
 800e6dc:	4b11      	ldr	r3, [pc, #68]	; (800e724 <main+0x4c8>)
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	e786      	b.n	800e5f0 <main+0x394>
			gu32LedTimer = FIVE_SEC;
 800e6e2:	4b10      	ldr	r3, [pc, #64]	; (800e724 <main+0x4c8>)
 800e6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	e781      	b.n	800e5f0 <main+0x394>
		gu32ExtWatchDogResetTimer = TWO_MIN;
 800e6ec:	4b18      	ldr	r3, [pc, #96]	; (800e750 <main+0x4f4>)
 800e6ee:	4a19      	ldr	r2, [pc, #100]	; (800e754 <main+0x4f8>)
 800e6f0:	601a      	str	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
 800e6f2:	480e      	ldr	r0, [pc, #56]	; (800e72c <main+0x4d0>)
 800e6f4:	f7f5 fcd1 	bl	800409a <HAL_IWDG_Refresh>
			if(gu32ExtWatchDogResetTimer == 0)
 800e6f8:	4b15      	ldr	r3, [pc, #84]	; (800e750 <main+0x4f4>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1f8      	bne.n	800e6f2 <main+0x496>
				while(1) // Alternate for external watch dog
 800e700:	e7fe      	b.n	800e700 <main+0x4a4>
 800e702:	bf00      	nop
 800e704:	20004454 	.word	0x20004454
 800e708:	20003610 	.word	0x20003610
 800e70c:	20003620 	.word	0x20003620
 800e710:	20004000 	.word	0x20004000
 800e714:	2000d5f0 	.word	0x2000d5f0
 800e718:	000493e0 	.word	0x000493e0
 800e71c:	20004448 	.word	0x20004448
 800e720:	200029a4 	.word	0x200029a4
 800e724:	2000446c 	.word	0x2000446c
 800e728:	200029b0 	.word	0x200029b0
 800e72c:	2000e7e4 	.word	0x2000e7e4
 800e730:	200105f4 	.word	0x200105f4
 800e734:	2000427c 	.word	0x2000427c
 800e738:	2000292c 	.word	0x2000292c
 800e73c:	2000e760 	.word	0x2000e760
 800e740:	20004298 	.word	0x20004298
 800e744:	20001fec 	.word	0x20001fec
 800e748:	20001ff0 	.word	0x20001ff0
 800e74c:	40020c00 	.word	0x40020c00
 800e750:	200029b4 	.word	0x200029b4
 800e754:	0001d4c0 	.word	0x0001d4c0

0800e758 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e758:	4770      	bx	lr

0800e75a <modbusCRC16>:
* <hr>
*
*******************************************************************************/

uint16_t modbusCRC16(uint8_t * data , uint8_t length)
{
 800e75a:	b430      	push	{r4, r5}
 800e75c:	4605      	mov	r5, r0
	uint16_t crc = 0xFFFF;

	  for (int pos = 0; pos < length; pos++)
 800e75e:	2400      	movs	r4, #0
	uint16_t crc = 0xFFFF;
 800e760:	f64f 70ff 	movw	r0, #65535	; 0xffff
	  for (int pos = 0; pos < length; pos++)
 800e764:	e00b      	b.n	800e77e <modbusCRC16+0x24>
	      {
	        crc >>= 1;                    	// Shift right and XOR 0xA001
	        crc ^= 0xA001;
	      }
	      else                            	// Else LSB is not set
	        crc >>= 1;                    	// Just shift right
 800e766:	0840      	lsrs	r0, r0, #1
	    for (int i = 8; i != 0; i--)  		// Loop over each bit
 800e768:	3b01      	subs	r3, #1
 800e76a:	b13b      	cbz	r3, 800e77c <modbusCRC16+0x22>
	      if ((crc & 0x0001) != 0) 			// If the LSB is set
 800e76c:	f010 0f01 	tst.w	r0, #1
 800e770:	d0f9      	beq.n	800e766 <modbusCRC16+0xc>
	        crc ^= 0xA001;
 800e772:	f24a 0201 	movw	r2, #40961	; 0xa001
 800e776:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
 800e77a:	e7f5      	b.n	800e768 <modbusCRC16+0xe>
	  for (int pos = 0; pos < length; pos++)
 800e77c:	3401      	adds	r4, #1
 800e77e:	42a1      	cmp	r1, r4
 800e780:	dd03      	ble.n	800e78a <modbusCRC16+0x30>
	    crc ^= (uint16_t)data[pos];         // XOR byte into least sig. byte of crc
 800e782:	5d2b      	ldrb	r3, [r5, r4]
 800e784:	4058      	eors	r0, r3
	    for (int i = 8; i != 0; i--)  		// Loop over each bit
 800e786:	2308      	movs	r3, #8
 800e788:	e7ef      	b.n	800e76a <modbusCRC16+0x10>
	    }
	  }
	  return crc;
}
 800e78a:	bc30      	pop	{r4, r5}
 800e78c:	4770      	bx	lr
	...

0800e790 <updateModbusQueryFrameRTU>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateModbusQueryFrameRTU(strctModbusMaster *master)
{
 800e790:	b510      	push	{r4, lr}
 800e792:	4604      	mov	r4, r0
	uint16_t crc ;
	/* Form Query Frame String */
	master->u8QueryFrame[0] = master->u8MBSlave_Address;
 800e794:	7803      	ldrb	r3, [r0, #0]
 800e796:	7043      	strb	r3, [r0, #1]
	master->u8QueryFrame[1] = gu32MBRTUClientFuncCode[u8MBQueryRegisterAddressCounter];
 800e798:	4b0d      	ldr	r3, [pc, #52]	; (800e7d0 <updateModbusQueryFrameRTU+0x40>)
 800e79a:	781a      	ldrb	r2, [r3, #0]
 800e79c:	4b0d      	ldr	r3, [pc, #52]	; (800e7d4 <updateModbusQueryFrameRTU+0x44>)
 800e79e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7a2:	7081      	strb	r1, [r0, #2]
	master->u8QueryFrame[2] = ((gu32MBRTUClientAddress[u8MBQueryRegisterAddressCounter] - MB_ADDRESS_DEREF) >> 8);
 800e7a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e7a8:	6a1a      	ldr	r2, [r3, #32]
 800e7aa:	3a01      	subs	r2, #1
 800e7ac:	0a12      	lsrs	r2, r2, #8
 800e7ae:	70c2      	strb	r2, [r0, #3]
	master->u8QueryFrame[3] = ((gu32MBRTUClientAddress[u8MBQueryRegisterAddressCounter] - MB_ADDRESS_DEREF)& 0xFF);
 800e7b0:	6a1a      	ldr	r2, [r3, #32]
 800e7b2:	3a01      	subs	r2, #1
 800e7b4:	7102      	strb	r2, [r0, #4]
	master->u8QueryFrame[4] = (gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter] >> 8);
 800e7b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7b8:	0a12      	lsrs	r2, r2, #8
 800e7ba:	7142      	strb	r2, [r0, #5]
	master->u8QueryFrame[5] = (gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter] & 0xFF);
 800e7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7be:	7183      	strb	r3, [r0, #6]
	crc = modbusCRC16(master->u8QueryFrame , 6);
 800e7c0:	2106      	movs	r1, #6
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	f7ff ffc9 	bl	800e75a <modbusCRC16>
	master->u8QueryFrame[6] = crc;
 800e7c8:	71e0      	strb	r0, [r4, #7]
	master->u8QueryFrame[7] = (crc >> 8);
 800e7ca:	0a00      	lsrs	r0, r0, #8
 800e7cc:	7220      	strb	r0, [r4, #8]
	/* End of Query Frame */
}
 800e7ce:	bd10      	pop	{r4, pc}
 800e7d0:	2000361c 	.word	0x2000361c
 800e7d4:	20000c40 	.word	0x20000c40

0800e7d8 <resetModbusPort>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void resetModbusPort()
{
 800e7d8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 800e7da:	4c07      	ldr	r4, [pc, #28]	; (800e7f8 <resetModbusPort+0x20>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f7f4 fa3a 	bl	8002c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_SET);
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f7f4 fa34 	bl	8002c5c <HAL_GPIO_WritePin>
}
 800e7f4:	bd10      	pop	{r4, pc}
 800e7f6:	bf00      	nop
 800e7f8:	40021000 	.word	0x40021000

0800e7fc <modbusQueryFSM>:
{
 800e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7fe:	b0a1      	sub	sp, #132	; 0x84
	switch(modbusState)
 800e800:	4b98      	ldr	r3, [pc, #608]	; (800ea64 <modbusQueryFSM+0x268>)
 800e802:	785b      	ldrb	r3, [r3, #1]
 800e804:	2b05      	cmp	r3, #5
 800e806:	f200 8228 	bhi.w	800ec5a <modbusQueryFSM+0x45e>
 800e80a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e80e:	0006      	.short	0x0006
 800e810:	005b0224 	.word	0x005b0224
 800e814:	01e001a5 	.word	0x01e001a5
 800e818:	0085      	.short	0x0085
			if(master.u32PollDelay == 0)
 800e81a:	4b93      	ldr	r3, [pc, #588]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e81c:	f8d3 3e4c 	ldr.w	r3, [r3, #3660]	; 0xe4c
 800e820:	2b00      	cmp	r3, #0
 800e822:	f040 8218 	bne.w	800ec56 <modbusQueryFSM+0x45a>
				if(u32MB485OperationStatus == 1)
 800e826:	4b91      	ldr	r3, [pc, #580]	; (800ea6c <modbusQueryFSM+0x270>)
 800e828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	f040 8213 	bne.w	800ec56 <modbusQueryFSM+0x45a>
					HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_SET); // DE -> High
 800e830:	4c8f      	ldr	r4, [pc, #572]	; (800ea70 <modbusQueryFSM+0x274>)
 800e832:	2201      	movs	r2, #1
 800e834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e838:	4620      	mov	r0, r4
 800e83a:	f7f4 fa0f 	bl	8002c5c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_SET); // ~RE -> HIGH
 800e83e:	2201      	movs	r2, #1
 800e840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e844:	4620      	mov	r0, r4
 800e846:	f7f4 fa09 	bl	8002c5c <HAL_GPIO_WritePin>
					memset(master.u8SlaveResponseArray, 0x00, 260 * sizeof(int32_t));
 800e84a:	4c8a      	ldr	r4, [pc, #552]	; (800ea74 <modbusQueryFSM+0x278>)
 800e84c:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800e850:	2100      	movs	r1, #0
 800e852:	4620      	mov	r0, r4
 800e854:	f004 f92a 	bl	8012aac <memset>
					master.u8MBResponseCharacterCounter = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	f884 3514 	strb.w	r3, [r4, #1300]	; 0x514
					if(u8MBQueryRegisterAddressCounter >= (master.u16NoRegisterstoFetch))
 800e85e:	4b81      	ldr	r3, [pc, #516]	; (800ea64 <modbusQueryFSM+0x268>)
 800e860:	781a      	ldrb	r2, [r3, #0]
 800e862:	f8b4 3826 	ldrh.w	r3, [r4, #2086]	; 0x826
 800e866:	429a      	cmp	r2, r3
 800e868:	d309      	bcc.n	800e87e <modbusQueryFSM+0x82>
						u32MB485OperationStatus = 2;
 800e86a:	4b80      	ldr	r3, [pc, #512]	; (800ea6c <modbusQueryFSM+0x270>)
 800e86c:	2202      	movs	r2, #2
 800e86e:	661a      	str	r2, [r3, #96]	; 0x60
						u32MB485FirstCycleComplete = 1;
 800e870:	4b7c      	ldr	r3, [pc, #496]	; (800ea64 <modbusQueryFSM+0x268>)
 800e872:	2201      	movs	r2, #1
 800e874:	605a      	str	r2, [r3, #4]
						u8MBQueryRegisterAddressCounter = 0;
 800e876:	2200      	movs	r2, #0
 800e878:	701a      	strb	r2, [r3, #0]
						gu32MBRTUDataByteCounter = 0;
 800e87a:	609a      	str	r2, [r3, #8]
						break;
 800e87c:	e1eb      	b.n	800ec56 <modbusQueryFSM+0x45a>
						updateModbusQueryFrameRTU(&master);
 800e87e:	487a      	ldr	r0, [pc, #488]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e880:	f7ff ff86 	bl	800e790 <updateModbusQueryFrameRTU>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800e884:	4b7c      	ldr	r3, [pc, #496]	; (800ea78 <modbusQueryFSM+0x27c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e886:	e853 2f00 	ldrex	r2, [r3]
 800e88a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88e:	e843 2100 	strex	r1, r2, [r3]
 800e892:	2900      	cmp	r1, #0
 800e894:	d1f6      	bne.n	800e884 <modbusQueryFSM+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e896:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800e89a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	e843 2100 	strex	r1, r2, [r3]
 800e8a2:	2900      	cmp	r1, #0
 800e8a4:	d1f7      	bne.n	800e896 <modbusQueryFSM+0x9a>
					u8MBQueryCharacterCounter = 0;
 800e8a6:	4b6f      	ldr	r3, [pc, #444]	; (800ea64 <modbusQueryFSM+0x268>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	731a      	strb	r2, [r3, #12]
					LL_USART_TransmitData8(USART3,master.u8QueryFrame[u8MBQueryCharacterCounter++]);
 800e8ac:	7b19      	ldrb	r1, [r3, #12]
 800e8ae:	1c4a      	adds	r2, r1, #1
 800e8b0:	b2d2      	uxtb	r2, r2
 800e8b2:	731a      	strb	r2, [r3, #12]
 800e8b4:	4a6c      	ldr	r2, [pc, #432]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e8b6:	440a      	add	r2, r1
 800e8b8:	7851      	ldrb	r1, [r2, #1]
  USARTx->DR = Value;
 800e8ba:	4a70      	ldr	r2, [pc, #448]	; (800ea7c <modbusQueryFSM+0x280>)
 800e8bc:	6051      	str	r1, [r2, #4]
					modbusState = enmMODBUS_SEND_QUERY;
 800e8be:	2201      	movs	r2, #1
 800e8c0:	705a      	strb	r2, [r3, #1]
 800e8c2:	e1c8      	b.n	800ec56 <modbusQueryFSM+0x45a>
			if(master.u32PollDelay == 0)
 800e8c4:	4b68      	ldr	r3, [pc, #416]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e8c6:	f8d3 3e4c 	ldr.w	r3, [r3, #3660]	; 0xe4c
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f040 81c3 	bne.w	800ec56 <modbusQueryFSM+0x45a>
				if(gu8MBResponseFlag == 1)
 800e8d0:	4b64      	ldr	r3, [pc, #400]	; (800ea64 <modbusQueryFSM+0x268>)
 800e8d2:	7b5b      	ldrb	r3, [r3, #13]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d008      	beq.n	800e8ea <modbusQueryFSM+0xee>
					if(gu32ModbusResponseTimeout == 0)
 800e8d8:	4b62      	ldr	r3, [pc, #392]	; (800ea64 <modbusQueryFSM+0x268>)
 800e8da:	695b      	ldr	r3, [r3, #20]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f040 81ba 	bne.w	800ec56 <modbusQueryFSM+0x45a>
						modbusState = enmMODBUS_RESPONSE_TIMEOUT;
 800e8e2:	4b60      	ldr	r3, [pc, #384]	; (800ea64 <modbusQueryFSM+0x268>)
 800e8e4:	2204      	movs	r2, #4
 800e8e6:	705a      	strb	r2, [r3, #1]
 800e8e8:	e1b5      	b.n	800ec56 <modbusQueryFSM+0x45a>
					if((gu32ModbusFrameEndTimer == 0) && (gu32ModbusResponseTimeout != 0))
 800e8ea:	4b5e      	ldr	r3, [pc, #376]	; (800ea64 <modbusQueryFSM+0x268>)
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	b943      	cbnz	r3, 800e902 <modbusQueryFSM+0x106>
 800e8f0:	4b5c      	ldr	r3, [pc, #368]	; (800ea64 <modbusQueryFSM+0x268>)
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	b12b      	cbz	r3, 800e902 <modbusQueryFSM+0x106>
						modbusState = enmMODBUS_PARSE_RESPONSE;
 800e8f6:	4b5b      	ldr	r3, [pc, #364]	; (800ea64 <modbusQueryFSM+0x268>)
 800e8f8:	2205      	movs	r2, #5
 800e8fa:	705a      	strb	r2, [r3, #1]
						gu8MBResponseFlag = 0;
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	735a      	strb	r2, [r3, #13]
 800e900:	e1a9      	b.n	800ec56 <modbusQueryFSM+0x45a>
					else if(gu32ModbusResponseTimeout == 0)
 800e902:	4b58      	ldr	r3, [pc, #352]	; (800ea64 <modbusQueryFSM+0x268>)
 800e904:	695b      	ldr	r3, [r3, #20]
 800e906:	2b00      	cmp	r3, #0
 800e908:	f040 81a5 	bne.w	800ec56 <modbusQueryFSM+0x45a>
						modbusState = enmMODBUS_PARSE_RESPONSE;//enmMODBUS_RESPONSE_TIMEOUT;//enmMODBUS_PARSE_RESPONSE;
 800e90c:	4b55      	ldr	r3, [pc, #340]	; (800ea64 <modbusQueryFSM+0x268>)
 800e90e:	2205      	movs	r2, #5
 800e910:	705a      	strb	r2, [r3, #1]
						gu8MBResponseFlag = 0;
 800e912:	2200      	movs	r2, #0
 800e914:	735a      	strb	r2, [r3, #13]
 800e916:	e19e      	b.n	800ec56 <modbusQueryFSM+0x45a>
				gu32ModbusIP485Reset = 0;
 800e918:	4b52      	ldr	r3, [pc, #328]	; (800ea64 <modbusQueryFSM+0x268>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	619a      	str	r2, [r3, #24]
				if(master.u8SlaveResponseArray[0] == gu32MBRTUClientFuncCode[u8MBQueryRegisterAddressCounter])
 800e91e:	4a52      	ldr	r2, [pc, #328]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e920:	68d6      	ldr	r6, [r2, #12]
 800e922:	781d      	ldrb	r5, [r3, #0]
 800e924:	462c      	mov	r4, r5
 800e926:	4b51      	ldr	r3, [pc, #324]	; (800ea6c <modbusQueryFSM+0x270>)
 800e928:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e92c:	429e      	cmp	r6, r3
 800e92e:	d007      	beq.n	800e940 <modbusQueryFSM+0x144>
				else if((master.u8SlaveResponseArray[0] & 0x80) == 0x80)
 800e930:	f016 0f80 	tst.w	r6, #128	; 0x80
 800e934:	f040 810e 	bne.w	800eb54 <modbusQueryFSM+0x358>
					modbusState = enmMODBUS_RETRY_QUERY;
 800e938:	4b4a      	ldr	r3, [pc, #296]	; (800ea64 <modbusQueryFSM+0x268>)
 800e93a:	2203      	movs	r2, #3
 800e93c:	705a      	strb	r2, [r3, #1]
 800e93e:	e102      	b.n	800eb46 <modbusQueryFSM+0x34a>
					uint8_t u8TempCRCArray[125]= {0};
 800e940:	2400      	movs	r4, #0
 800e942:	9400      	str	r4, [sp, #0]
 800e944:	2279      	movs	r2, #121	; 0x79
 800e946:	4621      	mov	r1, r4
 800e948:	a801      	add	r0, sp, #4
 800e94a:	f004 f8af 	bl	8012aac <memset>
					uint8_t u8MBNoDataBytesRx = (uint8_t)master.u8SlaveResponseArray[1];
 800e94e:	4b46      	ldr	r3, [pc, #280]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e950:	691f      	ldr	r7, [r3, #16]
 800e952:	b2f8      	uxtb	r0, r7
					u8TempCRCArray[0]=master.u8MBSlave_Address;       // ID
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	f88d 3000 	strb.w	r3, [sp]
					u8TempCRCArray[1]=master.u8SlaveResponseArray[0]; // FC
 800e95a:	f88d 6001 	strb.w	r6, [sp, #1]
					u8TempCRCArray[2]=master.u8SlaveResponseArray[1]; // No of Bytes
 800e95e:	f88d 0002 	strb.w	r0, [sp, #2]
					for(u8CrcLoopCounter = 0 ; u8CrcLoopCounter < u8MBNoDataBytesRx ;u8CrcLoopCounter ++ )
 800e962:	4621      	mov	r1, r4
 800e964:	e00b      	b.n	800e97e <modbusQueryFSM+0x182>
						u8TempCRCArray[3 + u8CrcLoopCounter] = master.u8SlaveResponseArray[2 + u8CrcLoopCounter];
 800e966:	1d0a      	adds	r2, r1, #4
 800e968:	4b3f      	ldr	r3, [pc, #252]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e96a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	1ccb      	adds	r3, r1, #3
 800e972:	ac20      	add	r4, sp, #128	; 0x80
 800e974:	4423      	add	r3, r4
 800e976:	f803 2c80 	strb.w	r2, [r3, #-128]
					for(u8CrcLoopCounter = 0 ; u8CrcLoopCounter < u8MBNoDataBytesRx ;u8CrcLoopCounter ++ )
 800e97a:	3101      	adds	r1, #1
 800e97c:	b2c9      	uxtb	r1, r1
 800e97e:	4281      	cmp	r1, r0
 800e980:	d3f1      	bcc.n	800e966 <modbusQueryFSM+0x16a>
					u16TempCRC = modbusCRC16(u8TempCRCArray,3 + u8CrcLoopCounter);
 800e982:	3103      	adds	r1, #3
 800e984:	b2c9      	uxtb	r1, r1
 800e986:	4668      	mov	r0, sp
 800e988:	f7ff fee7 	bl	800e75a <modbusCRC16>
					uint8_t u8CRCHi = master.u8SlaveResponseArray[u8MBNoDataBytesRx + 2 ];    // CRC High Location
 800e98c:	b2ff      	uxtb	r7, r7
 800e98e:	4a36      	ldr	r2, [pc, #216]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e990:	1d3b      	adds	r3, r7, #4
 800e992:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e996:	791b      	ldrb	r3, [r3, #4]
					uint8_t u8CRCLow = master.u8SlaveResponseArray[u8MBNoDataBytesRx + 3];    // CRC Low Location
 800e998:	1d79      	adds	r1, r7, #5
 800e99a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e99e:	6852      	ldr	r2, [r2, #4]
					uint16_t u16ReceivedCRC =  (u8CRCLow<<8)|u8CRCHi;
 800e9a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9a4:	b29b      	uxth	r3, r3
					if(u16ReceivedCRC == u16TempCRC)
 800e9a6:	4298      	cmp	r0, r3
 800e9a8:	d003      	beq.n	800e9b2 <modbusQueryFSM+0x1b6>
						modbusState = enmMODBUS_RETRY_QUERY;
 800e9aa:	4b2e      	ldr	r3, [pc, #184]	; (800ea64 <modbusQueryFSM+0x268>)
 800e9ac:	2203      	movs	r2, #3
 800e9ae:	705a      	strb	r2, [r3, #1]
 800e9b0:	e0c9      	b.n	800eb46 <modbusQueryFSM+0x34a>
						gu32MBRTUClientConnectedFlag = 1; /* Indicates Response Received form client in payload .*/
 800e9b2:	4b2c      	ldr	r3, [pc, #176]	; (800ea64 <modbusQueryFSM+0x268>)
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	61da      	str	r2, [r3, #28]
						if(master.u8SlaveResponseArray[0] == 1)
 800e9b8:	4296      	cmp	r6, r2
 800e9ba:	d01a      	beq.n	800e9f2 <modbusQueryFSM+0x1f6>
							if(u8MBNoDataBytesRx == (2 * gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter]))
 800e9bc:	4b2b      	ldr	r3, [pc, #172]	; (800ea6c <modbusQueryFSM+0x270>)
 800e9be:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800e9c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e9c4:	ebb7 0f40 	cmp.w	r7, r0, lsl #1
 800e9c8:	d05c      	beq.n	800ea84 <modbusQueryFSM+0x288>
								gu32MBRTUDataByteCounter += gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];
 800e9ca:	4a26      	ldr	r2, [pc, #152]	; (800ea64 <modbusQueryFSM+0x268>)
 800e9cc:	6893      	ldr	r3, [r2, #8]
 800e9ce:	4403      	add	r3, r0
 800e9d0:	6093      	str	r3, [r2, #8]
						master.u8MBResponseStatus[u8MBQueryRegisterAddressCounter++] = 0;
 800e9d2:	4c24      	ldr	r4, [pc, #144]	; (800ea64 <modbusQueryFSM+0x268>)
 800e9d4:	1c6b      	adds	r3, r5, #1
 800e9d6:	7023      	strb	r3, [r4, #0]
 800e9d8:	4f23      	ldr	r7, [pc, #140]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e9da:	443d      	add	r5, r7
 800e9dc:	2600      	movs	r6, #0
 800e9de:	f885 6523 	strb.w	r6, [r5, #1315]	; 0x523
						resetModbusPort();
 800e9e2:	f7ff fef9 	bl	800e7d8 <resetModbusPort>
						master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800e9e6:	4b26      	ldr	r3, [pc, #152]	; (800ea80 <modbusQueryFSM+0x284>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f8c7 3e4c 	str.w	r3, [r7, #3660]	; 0xe4c
						modbusState = enmMODBUS_IDLE;
 800e9ee:	7066      	strb	r6, [r4, #1]
 800e9f0:	e0a9      	b.n	800eb46 <modbusQueryFSM+0x34a>
							for(LoopCounter = 0; LoopCounter < u8MBNoDataBytesRx; LoopCounter++)
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	428f      	cmp	r7, r1
 800e9f6:	d913      	bls.n	800ea20 <modbusQueryFSM+0x224>
								master.u32SlaveData[gu32MBRTUDataByteCounter] = master.u8SlaveResponseArray[2 + LoopCounter];
 800e9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ea64 <modbusQueryFSM+0x268>)
 800e9fa:	6898      	ldr	r0, [r3, #8]
 800e9fc:	4a1a      	ldr	r2, [pc, #104]	; (800ea68 <modbusQueryFSM+0x26c>)
 800e9fe:	1d0c      	adds	r4, r1, #4
 800ea00:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ea04:	6864      	ldr	r4, [r4, #4]
 800ea06:	f200 268e 	addw	r6, r0, #654	; 0x28e
 800ea0a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ea0e:	6054      	str	r4, [r2, #4]
								gu32MBRTUDataStatus[gu32MBRTUDataByteCounter++] = 2;
 800ea10:	1c42      	adds	r2, r0, #1
 800ea12:	609a      	str	r2, [r3, #8]
 800ea14:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ea18:	2202      	movs	r2, #2
 800ea1a:	621a      	str	r2, [r3, #32]
							for(LoopCounter = 0; LoopCounter < u8MBNoDataBytesRx; LoopCounter++)
 800ea1c:	3101      	adds	r1, #1
 800ea1e:	e7e9      	b.n	800e9f4 <modbusQueryFSM+0x1f8>
							if(u8MBNoDataBytesRx != gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter])
 800ea20:	4a12      	ldr	r2, [pc, #72]	; (800ea6c <modbusQueryFSM+0x270>)
 800ea22:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800ea26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ea28:	4297      	cmp	r7, r2
 800ea2a:	d0d2      	beq.n	800e9d2 <modbusQueryFSM+0x1d6>
								gu32MBRTUDataByteCounter += (gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter] - u8MBNoDataBytesRx);
 800ea2c:	1bd3      	subs	r3, r2, r7
 800ea2e:	490d      	ldr	r1, [pc, #52]	; (800ea64 <modbusQueryFSM+0x268>)
 800ea30:	688a      	ldr	r2, [r1, #8]
 800ea32:	4413      	add	r3, r2
 800ea34:	608b      	str	r3, [r1, #8]
 800ea36:	e7cc      	b.n	800e9d2 <modbusQueryFSM+0x1d6>
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800ea38:	490b      	ldr	r1, [pc, #44]	; (800ea68 <modbusQueryFSM+0x26c>)
 800ea3a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800ea3e:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] +256 ;
 800ea42:	3303      	adds	r3, #3
 800ea44:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ea48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ea4c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800ea50:	4c04      	ldr	r4, [pc, #16]	; (800ea64 <modbusQueryFSM+0x268>)
 800ea52:	68a4      	ldr	r4, [r4, #8]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] +256 ;
 800ea54:	f503 7380 	add.w	r3, r3, #256	; 0x100
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800ea58:	f204 248e 	addw	r4, r4, #654	; 0x28e
 800ea5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea60:	604b      	str	r3, [r1, #4]
 800ea62:	e02f      	b.n	800eac4 <modbusQueryFSM+0x2c8>
 800ea64:	2000361c 	.word	0x2000361c
 800ea68:	2000e840 	.word	0x2000e840
 800ea6c:	20000c40 	.word	0x20000c40
 800ea70:	40021000 	.word	0x40021000
 800ea74:	2000e84c 	.word	0x2000e84c
 800ea78:	4000480c 	.word	0x4000480c
 800ea7c:	40004800 	.word	0x40004800
 800ea80:	20001ffc 	.word	0x20001ffc
								for(u32LoopCounter = 0; u32LoopCounter < gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];u32LoopCounter++)
 800ea84:	2200      	movs	r2, #0
 800ea86:	4290      	cmp	r0, r2
 800ea88:	d9a3      	bls.n	800e9d2 <modbusQueryFSM+0x1d6>
									if((int32_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter)] < 0)
 800ea8a:	3201      	adds	r2, #1
 800ea8c:	0053      	lsls	r3, r2, #1
 800ea8e:	1c9c      	adds	r4, r3, #2
 800ea90:	4974      	ldr	r1, [pc, #464]	; (800ec64 <modbusQueryFSM+0x468>)
 800ea92:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea96:	6849      	ldr	r1, [r1, #4]
 800ea98:	2900      	cmp	r1, #0
 800ea9a:	dbcd      	blt.n	800ea38 <modbusQueryFSM+0x23c>
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800ea9c:	4971      	ldr	r1, [pc, #452]	; (800ec64 <modbusQueryFSM+0x468>)
 800ea9e:	1c9c      	adds	r4, r3, #2
 800eaa0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800eaa4:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] ;
 800eaa8:	3303      	adds	r3, #3
 800eaaa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800eaae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800eab2:	4c6d      	ldr	r4, [pc, #436]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eab4:	68a4      	ldr	r4, [r4, #8]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] ;
 800eab6:	eb03 2306 	add.w	r3, r3, r6, lsl #8
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800eaba:	f204 248e 	addw	r4, r4, #654	; 0x28e
 800eabe:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eac2:	604b      	str	r3, [r1, #4]
									if(master.u32SlaveData[gu32MBRTUDataByteCounter] > 32768)
 800eac4:	4b68      	ldr	r3, [pc, #416]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	f203 248e 	addw	r4, r3, #654	; 0x28e
 800eacc:	4965      	ldr	r1, [pc, #404]	; (800ec64 <modbusQueryFSM+0x468>)
 800eace:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ead2:	6849      	ldr	r1, [r1, #4]
 800ead4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800ead8:	d905      	bls.n	800eae6 <modbusQueryFSM+0x2ea>
										master.u32SlaveData[gu32MBRTUDataByteCounter] = master.u32SlaveData[gu32MBRTUDataByteCounter] - 65536;
 800eada:	f5a1 3180 	sub.w	r1, r1, #65536	; 0x10000
 800eade:	4e61      	ldr	r6, [pc, #388]	; (800ec64 <modbusQueryFSM+0x468>)
 800eae0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800eae4:	6061      	str	r1, [r4, #4]
									gu32MBRTUDataStatus[gu32MBRTUDataByteCounter] = 0;
 800eae6:	4960      	ldr	r1, [pc, #384]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eae8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800eaec:	2600      	movs	r6, #0
 800eaee:	6226      	str	r6, [r4, #32]
									gu32MBRTUDataByteCounter++;
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	608b      	str	r3, [r1, #8]
									if(gu32MBRTUDataByteCounter >= gu32MBDataByteCounterLimitRTU)
 800eaf4:	f8d1 14d0 	ldr.w	r1, [r1, #1232]	; 0x4d0
 800eaf8:	428b      	cmp	r3, r1
 800eafa:	d3c4      	bcc.n	800ea86 <modbusQueryFSM+0x28a>
										gu32MBRTUDataByteCounter = 0;
 800eafc:	4b5a      	ldr	r3, [pc, #360]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eafe:	609e      	str	r6, [r3, #8]
 800eb00:	e7c1      	b.n	800ea86 <modbusQueryFSM+0x28a>
						master.u32SlaveData[gu32MBRTUDataByteCounter] = master.u8SlaveResponseArray[1] ;
 800eb02:	4b59      	ldr	r3, [pc, #356]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eb04:	6899      	ldr	r1, [r3, #8]
 800eb06:	4a57      	ldr	r2, [pc, #348]	; (800ec64 <modbusQueryFSM+0x468>)
 800eb08:	6916      	ldr	r6, [r2, #16]
 800eb0a:	f201 278e 	addw	r7, r1, #654	; 0x28e
 800eb0e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800eb12:	6056      	str	r6, [r2, #4]
						gu32MBRTUDataStatus[gu32MBRTUDataByteCounter++] = 1;
 800eb14:	1c4a      	adds	r2, r1, #1
 800eb16:	609a      	str	r2, [r3, #8]
 800eb18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	621a      	str	r2, [r3, #32]
					for(u32TempLoopCounter = 0; u32TempLoopCounter < gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];u32TempLoopCounter++)
 800eb20:	4410      	add	r0, r2
 800eb22:	4b52      	ldr	r3, [pc, #328]	; (800ec6c <modbusQueryFSM+0x470>)
 800eb24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2a:	4283      	cmp	r3, r0
 800eb2c:	d8e9      	bhi.n	800eb02 <modbusQueryFSM+0x306>
					u8MBQueryRegisterAddressCounter++;
 800eb2e:	4c4e      	ldr	r4, [pc, #312]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eb30:	3501      	adds	r5, #1
 800eb32:	7025      	strb	r5, [r4, #0]
					resetModbusPort();
 800eb34:	f7ff fe50 	bl	800e7d8 <resetModbusPort>
					master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800eb38:	4b4d      	ldr	r3, [pc, #308]	; (800ec70 <modbusQueryFSM+0x474>)
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	4b49      	ldr	r3, [pc, #292]	; (800ec64 <modbusQueryFSM+0x468>)
 800eb3e:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
					modbusState = enmMODBUS_IDLE;
 800eb42:	2300      	movs	r3, #0
 800eb44:	7063      	strb	r3, [r4, #1]
				memset(master.u8SlaveResponseArray,0x00,sizeof(master.u8SlaveResponseArray));
 800eb46:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	4849      	ldr	r0, [pc, #292]	; (800ec74 <modbusQueryFSM+0x478>)
 800eb4e:	f003 ffad 	bl	8012aac <memset>
			break;
 800eb52:	e080      	b.n	800ec56 <modbusQueryFSM+0x45a>
					for(u32TempLoopCounter = 0; u32TempLoopCounter < gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];u32TempLoopCounter++)
 800eb54:	2000      	movs	r0, #0
 800eb56:	e7e4      	b.n	800eb22 <modbusQueryFSM+0x326>
			if(master.u8MBNoQueryAttempts > MB_485_QUERY_RETRY_ATTEMPTS)
 800eb58:	4b42      	ldr	r3, [pc, #264]	; (800ec64 <modbusQueryFSM+0x468>)
 800eb5a:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d930      	bls.n	800ebc4 <modbusQueryFSM+0x3c8>
				gu32MBRTUDataByteCounter += gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];
 800eb62:	4b41      	ldr	r3, [pc, #260]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eb64:	781a      	ldrb	r2, [r3, #0]
 800eb66:	4941      	ldr	r1, [pc, #260]	; (800ec6c <modbusQueryFSM+0x470>)
 800eb68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eb6c:	6c08      	ldr	r0, [r1, #64]	; 0x40
 800eb6e:	6899      	ldr	r1, [r3, #8]
 800eb70:	4401      	add	r1, r0
 800eb72:	6099      	str	r1, [r3, #8]
				u8MBQueryRegisterAddressCounter++;
 800eb74:	3201      	adds	r2, #1
 800eb76:	701a      	strb	r2, [r3, #0]
				gu32MBRTUClientConnectedFlag = 0;
 800eb78:	2200      	movs	r2, #0
 800eb7a:	61da      	str	r2, [r3, #28]
				master.u8MBNoQueryAttempts = 0;
 800eb7c:	4b39      	ldr	r3, [pc, #228]	; (800ec64 <modbusQueryFSM+0x468>)
 800eb7e:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
			if(u8MBQueryRegisterAddressCounter > master.u16NoRegisterstoFetch)
 800eb82:	4b39      	ldr	r3, [pc, #228]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eb84:	781a      	ldrb	r2, [r3, #0]
 800eb86:	4b37      	ldr	r3, [pc, #220]	; (800ec64 <modbusQueryFSM+0x468>)
 800eb88:	f8b3 3832 	ldrh.w	r3, [r3, #2098]	; 0x832
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d909      	bls.n	800eba4 <modbusQueryFSM+0x3a8>
				gu32MBRTUDataByteCounter = 0;
 800eb90:	4b35      	ldr	r3, [pc, #212]	; (800ec68 <modbusQueryFSM+0x46c>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	609a      	str	r2, [r3, #8]
				u8MBQueryRegisterAddressCounter = 0;
 800eb96:	701a      	strb	r2, [r3, #0]
				gu32MBRTUClientConnectedFlag = 0;
 800eb98:	61da      	str	r2, [r3, #28]
				u32MB485OperationStatus = 2;
 800eb9a:	4a34      	ldr	r2, [pc, #208]	; (800ec6c <modbusQueryFSM+0x470>)
 800eb9c:	2102      	movs	r1, #2
 800eb9e:	6611      	str	r1, [r2, #96]	; 0x60
				u32MB485FirstCycleComplete = 1;
 800eba0:	2201      	movs	r2, #1
 800eba2:	605a      	str	r2, [r3, #4]
			resetModbusPort();
 800eba4:	f7ff fe18 	bl	800e7d8 <resetModbusPort>
			master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800eba8:	482e      	ldr	r0, [pc, #184]	; (800ec64 <modbusQueryFSM+0x468>)
 800ebaa:	4b31      	ldr	r3, [pc, #196]	; (800ec70 <modbusQueryFSM+0x474>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f8c0 3e4c 	str.w	r3, [r0, #3660]	; 0xe4c
			modbusState = enmMODBUS_IDLE;
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	4b2c      	ldr	r3, [pc, #176]	; (800ec68 <modbusQueryFSM+0x46c>)
 800ebb6:	7059      	strb	r1, [r3, #1]
			memset(master.u8SlaveResponseArray,0x00,sizeof(master.u8SlaveResponseArray));
 800ebb8:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800ebbc:	300c      	adds	r0, #12
 800ebbe:	f003 ff75 	bl	8012aac <memset>
			break;
 800ebc2:	e048      	b.n	800ec56 <modbusQueryFSM+0x45a>
				master.u8MBNoQueryAttempts++;
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	4a27      	ldr	r2, [pc, #156]	; (800ec64 <modbusQueryFSM+0x468>)
 800ebc8:	f882 3522 	strb.w	r3, [r2, #1314]	; 0x522
 800ebcc:	e7d9      	b.n	800eb82 <modbusQueryFSM+0x386>
			uint32_t temploopcountrt = gu32MBRTUDataByteCounter;
 800ebce:	4a26      	ldr	r2, [pc, #152]	; (800ec68 <modbusQueryFSM+0x46c>)
 800ebd0:	6893      	ldr	r3, [r2, #8]
			gu32MBRTUDataByteCounter += gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];
 800ebd2:	7814      	ldrb	r4, [r2, #0]
 800ebd4:	4925      	ldr	r1, [pc, #148]	; (800ec6c <modbusQueryFSM+0x470>)
 800ebd6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ebda:	6c08      	ldr	r0, [r1, #64]	; 0x40
 800ebdc:	4418      	add	r0, r3
 800ebde:	6090      	str	r0, [r2, #8]
			for(iteratorrt = temploopcountrt ; iteratorrt < gu32MBRTUDataByteCounter ; iteratorrt++)
 800ebe0:	e007      	b.n	800ebf2 <modbusQueryFSM+0x3f6>
				master.u32SlaveData[iteratorrt] = 0;
 800ebe2:	f203 218e 	addw	r1, r3, #654	; 0x28e
 800ebe6:	4a1f      	ldr	r2, [pc, #124]	; (800ec64 <modbusQueryFSM+0x468>)
 800ebe8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ebec:	2100      	movs	r1, #0
 800ebee:	6051      	str	r1, [r2, #4]
			for(iteratorrt = temploopcountrt ; iteratorrt < gu32MBRTUDataByteCounter ; iteratorrt++)
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	4298      	cmp	r0, r3
 800ebf4:	d90b      	bls.n	800ec0e <modbusQueryFSM+0x412>
				if(gu32MBRTUDataStatus[iteratorrt] == 1)
 800ebf6:	4a1c      	ldr	r2, [pc, #112]	; (800ec68 <modbusQueryFSM+0x46c>)
 800ebf8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ebfc:	6a12      	ldr	r2, [r2, #32]
 800ebfe:	2a01      	cmp	r2, #1
 800ec00:	d1ef      	bne.n	800ebe2 <modbusQueryFSM+0x3e6>
					gu32MBRTUDataStatus[iteratorrt] = 0;
 800ec02:	4a19      	ldr	r2, [pc, #100]	; (800ec68 <modbusQueryFSM+0x46c>)
 800ec04:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec08:	2100      	movs	r1, #0
 800ec0a:	6211      	str	r1, [r2, #32]
 800ec0c:	e7e9      	b.n	800ebe2 <modbusQueryFSM+0x3e6>
			if(u8MBQueryRegisterAddressCounter >= (master.u16NoRegisterstoFetch))
 800ec0e:	b2a4      	uxth	r4, r4
 800ec10:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <modbusQueryFSM+0x468>)
 800ec12:	f8b3 3832 	ldrh.w	r3, [r3, #2098]	; 0x832
 800ec16:	429c      	cmp	r4, r3
 800ec18:	d308      	bcc.n	800ec2c <modbusQueryFSM+0x430>
				u8MBQueryRegisterAddressCounter = 0;
 800ec1a:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <modbusQueryFSM+0x46c>)
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	701a      	strb	r2, [r3, #0]
				gu32MBRTUClientConnectedFlag = 0; // 13/12/22 getting late
 800ec20:	61da      	str	r2, [r3, #28]
				gu32MBRTUDataByteCounter = 0;
 800ec22:	609a      	str	r2, [r3, #8]
				u32MB485OperationStatus = 2;
 800ec24:	4911      	ldr	r1, [pc, #68]	; (800ec6c <modbusQueryFSM+0x470>)
 800ec26:	2002      	movs	r0, #2
 800ec28:	6608      	str	r0, [r1, #96]	; 0x60
				gu8MBResponseFlag = 0;
 800ec2a:	735a      	strb	r2, [r3, #13]
			gu32ModbusIP485Reset++;
 800ec2c:	4c0e      	ldr	r4, [pc, #56]	; (800ec68 <modbusQueryFSM+0x46c>)
 800ec2e:	69a3      	ldr	r3, [r4, #24]
 800ec30:	3301      	adds	r3, #1
 800ec32:	61a3      	str	r3, [r4, #24]
			resetModbusPort();
 800ec34:	f7ff fdd0 	bl	800e7d8 <resetModbusPort>
			master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800ec38:	480a      	ldr	r0, [pc, #40]	; (800ec64 <modbusQueryFSM+0x468>)
 800ec3a:	4b0d      	ldr	r3, [pc, #52]	; (800ec70 <modbusQueryFSM+0x474>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f8c0 3e4c 	str.w	r3, [r0, #3660]	; 0xe4c
			modbusState = enmMODBUS_IDLE;
 800ec42:	2100      	movs	r1, #0
 800ec44:	7061      	strb	r1, [r4, #1]
			memset(master.u8SlaveResponseArray,0x00,sizeof(master.u8SlaveResponseArray));
 800ec46:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800ec4a:	300c      	adds	r0, #12
 800ec4c:	f003 ff2e 	bl	8012aac <memset>
			u8MBQueryRegisterAddressCounter++;
 800ec50:	7823      	ldrb	r3, [r4, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	7023      	strb	r3, [r4, #0]
}
 800ec56:	b021      	add	sp, #132	; 0x84
 800ec58:	bdf0      	pop	{r4, r5, r6, r7, pc}
			modbusState = enmMODBUS_IDLE;
 800ec5a:	4b03      	ldr	r3, [pc, #12]	; (800ec68 <modbusQueryFSM+0x46c>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	705a      	strb	r2, [r3, #1]
}
 800ec60:	e7f9      	b.n	800ec56 <modbusQueryFSM+0x45a>
 800ec62:	bf00      	nop
 800ec64:	2000e840 	.word	0x2000e840
 800ec68:	2000361c 	.word	0x2000361c
 800ec6c:	20000c40 	.word	0x20000c40
 800ec70:	20001ffc 	.word	0x20001ffc
 800ec74:	2000e84c 	.word	0x2000e84c

0800ec78 <uploadSlaveData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void uploadSlaveData(void)
{
 800ec78:	b530      	push	{r4, r5, lr}
 800ec7a:	b083      	sub	sp, #12
	static int32_t value;
	char buffer[6];

//	if(u32MB485OperationStatus == 2)
//	{
		value = master.u32SlaveData[Loopcounter];    // Signed Integer
 800ec7c:	4a42      	ldr	r2, [pc, #264]	; (800ed88 <uploadSlaveData+0x110>)
 800ec7e:	f8d2 44d4 	ldr.w	r4, [r2, #1236]	; 0x4d4
 800ec82:	f204 218e 	addw	r1, r4, #654	; 0x28e
 800ec86:	4b41      	ldr	r3, [pc, #260]	; (800ed8c <uploadSlaveData+0x114>)
 800ec88:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ec8c:	685d      	ldr	r5, [r3, #4]
 800ec8e:	f8c2 54d8 	str.w	r5, [r2, #1240]	; 0x4d8
		if(Loopcounter == 0)
 800ec92:	b364      	cbz	r4, 800ecee <uploadSlaveData+0x76>
		{
			memset(gau8MBPayloadStringRT, 0x00, (1100 * sizeof(char)));
		}
		if(Loopcounter < gu32MBDataByteCounterLimitRTU)
 800ec94:	4b3c      	ldr	r3, [pc, #240]	; (800ed88 <uploadSlaveData+0x110>)
 800ec96:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800ec9a:	429c      	cmp	r4, r3
 800ec9c:	d264      	bcs.n	800ed68 <uploadSlaveData+0xf0>
		{
			/* Append Data to GSM Payload */
			if(gu32MBRTUDataStatus[Loopcounter] == 1)
 800ec9e:	4b3a      	ldr	r3, [pc, #232]	; (800ed88 <uploadSlaveData+0x110>)
 800eca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eca4:	6a23      	ldr	r3, [r4, #32]
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d028      	beq.n	800ecfc <uploadSlaveData+0x84>
				memset(buffer, 0x00, (6 * sizeof(char)));
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   				  // Decimal String
				strcat(gau8MBPayloadStringRT,buffer);
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
			}
			else if(gu32MBRTUDataStatus[Loopcounter] == 2)
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d147      	bne.n	800ed3e <uploadSlaveData+0xc6>
			{
				/* Coil Data .Represent in binary .
				 * */
				if(value < 0)
 800ecae:	2d00      	cmp	r5, #0
 800ecb0:	db3f      	blt.n	800ed32 <uploadSlaveData+0xba>
					value += 256;

				memset(buffer, 0x00, (6 * sizeof(char)));
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	9300      	str	r3, [sp, #0]
 800ecb6:	f8ad 3004 	strh.w	r3, [sp, #4]
				itoa(value,buffer,10);
 800ecba:	220a      	movs	r2, #10
 800ecbc:	4669      	mov	r1, sp
 800ecbe:	4b32      	ldr	r3, [pc, #200]	; (800ed88 <uploadSlaveData+0x110>)
 800ecc0:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 800ecc4:	f003 fc68 	bl	8012598 <itoa>
				strcat(gau8MBPayloadStringRT,buffer);
 800ecc8:	4c31      	ldr	r4, [pc, #196]	; (800ed90 <uploadSlaveData+0x118>)
 800ecca:	4669      	mov	r1, sp
 800eccc:	4620      	mov	r0, r4
 800ecce:	f003 ff61 	bl	8012b94 <strcat>
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f7f1 fa96 	bl	8000204 <strlen>
 800ecd8:	4b2e      	ldr	r3, [pc, #184]	; (800ed94 <uploadSlaveData+0x11c>)
 800ecda:	881b      	ldrh	r3, [r3, #0]
 800ecdc:	5223      	strh	r3, [r4, r0]
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
			}
			//master.u32SlaveData[Loopcounter] = 0;
			/*Added on 20-1-2020 */
			//gu32MBRTUDataStatus[Loopcounter] = 0;
			Loopcounter++;
 800ecde:	4a2a      	ldr	r2, [pc, #168]	; (800ed88 <uploadSlaveData+0x110>)
 800ece0:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 800ece4:	3301      	adds	r3, #1
 800ece6:	f8c2 34d4 	str.w	r3, [r2, #1236]	; 0x4d4
			//memset(gau8MBPayloadStringRT,0x00,1100 * sizeof(char));
			Loopcounter = 0;
			//gu32MBRTUDataByteCounter = 0;
		}
//	}
}
 800ecea:	b003      	add	sp, #12
 800ecec:	bd30      	pop	{r4, r5, pc}
			memset(gau8MBPayloadStringRT, 0x00, (1100 * sizeof(char)));
 800ecee:	f240 424c 	movw	r2, #1100	; 0x44c
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	4826      	ldr	r0, [pc, #152]	; (800ed90 <uploadSlaveData+0x118>)
 800ecf6:	f003 fed9 	bl	8012aac <memset>
 800ecfa:	e7cb      	b.n	800ec94 <uploadSlaveData+0x1c>
				strcat(gau8MBPayloadStringRT,"E");
 800ecfc:	4c24      	ldr	r4, [pc, #144]	; (800ed90 <uploadSlaveData+0x118>)
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f7f1 fa80 	bl	8000204 <strlen>
 800ed04:	4b24      	ldr	r3, [pc, #144]	; (800ed98 <uploadSlaveData+0x120>)
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	5223      	strh	r3, [r4, r0]
				memset(buffer, 0x00, (6 * sizeof(char)));
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	f8ad 3004 	strh.w	r3, [sp, #4]
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   				  // Decimal String
 800ed12:	220a      	movs	r2, #10
 800ed14:	4669      	mov	r1, sp
 800ed16:	4628      	mov	r0, r5
 800ed18:	f003 fc3e 	bl	8012598 <itoa>
				strcat(gau8MBPayloadStringRT,buffer);
 800ed1c:	4669      	mov	r1, sp
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f003 ff38 	bl	8012b94 <strcat>
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
 800ed24:	4620      	mov	r0, r4
 800ed26:	f7f1 fa6d 	bl	8000204 <strlen>
 800ed2a:	4b1a      	ldr	r3, [pc, #104]	; (800ed94 <uploadSlaveData+0x11c>)
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	5223      	strh	r3, [r4, r0]
 800ed30:	e7d5      	b.n	800ecde <uploadSlaveData+0x66>
					value += 256;
 800ed32:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800ed36:	4b14      	ldr	r3, [pc, #80]	; (800ed88 <uploadSlaveData+0x110>)
 800ed38:	f8c3 54d8 	str.w	r5, [r3, #1240]	; 0x4d8
 800ed3c:	e7b9      	b.n	800ecb2 <uploadSlaveData+0x3a>
				memset(buffer, 0x00, (6 * sizeof(char)));
 800ed3e:	2300      	movs	r3, #0
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	f8ad 3004 	strh.w	r3, [sp, #4]
				itoa(value,buffer,MB_PAYLOAD_RADIX);
 800ed46:	220a      	movs	r2, #10
 800ed48:	4669      	mov	r1, sp
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f003 fc24 	bl	8012598 <itoa>
				strcat(gau8MBPayloadStringRT,buffer);
 800ed50:	4c0f      	ldr	r4, [pc, #60]	; (800ed90 <uploadSlaveData+0x118>)
 800ed52:	4669      	mov	r1, sp
 800ed54:	4620      	mov	r0, r4
 800ed56:	f003 ff1d 	bl	8012b94 <strcat>
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7f1 fa52 	bl	8000204 <strlen>
 800ed60:	4b0c      	ldr	r3, [pc, #48]	; (800ed94 <uploadSlaveData+0x11c>)
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	5223      	strh	r3, [r4, r0]
 800ed66:	e7ba      	b.n	800ecde <uploadSlaveData+0x66>
			u32MB485OperationStatus = 1;
 800ed68:	480c      	ldr	r0, [pc, #48]	; (800ed9c <uploadSlaveData+0x124>)
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	6603      	str	r3, [r0, #96]	; 0x60
			memcpy(gau8TempMBRTUPayloadString,gau8MBPayloadStringRT,sizeof(gau8MBPayloadStringRT));
 800ed6e:	f240 424c 	movw	r2, #1100	; 0x44c
 800ed72:	f100 0164 	add.w	r1, r0, #100	; 0x64
 800ed76:	f500 6096 	add.w	r0, r0, #1200	; 0x4b0
 800ed7a:	f003 fe6f 	bl	8012a5c <memcpy>
			Loopcounter = 0;
 800ed7e:	4b02      	ldr	r3, [pc, #8]	; (800ed88 <uploadSlaveData+0x110>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
}
 800ed86:	e7b0      	b.n	800ecea <uploadSlaveData+0x72>
 800ed88:	2000361c 	.word	0x2000361c
 800ed8c:	2000e840 	.word	0x2000e840
 800ed90:	20000ca4 	.word	0x20000ca4
 800ed94:	0801c738 	.word	0x0801c738
 800ed98:	0801c7e8 	.word	0x0801c7e8
 800ed9c:	20000c40 	.word	0x20000c40

0800eda0 <setupModbusRTU>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void setupModbusRTU(void)
{
 800eda0:	b410      	push	{r4}
	uint32_t temp = 0;
	master.u16NoRegisterstoFetch = gu32Modbus485RegisterFetch;
 800eda2:	4b12      	ldr	r3, [pc, #72]	; (800edec <setupModbusRTU+0x4c>)
 800eda4:	881c      	ldrh	r4, [r3, #0]
 800eda6:	4b12      	ldr	r3, [pc, #72]	; (800edf0 <setupModbusRTU+0x50>)
 800eda8:	f8a3 4832 	strh.w	r4, [r3, #2098]	; 0x832
	master.u8MBSlave_Address = gu32Modbus485SlaveID;
 800edac:	4a11      	ldr	r2, [pc, #68]	; (800edf4 <setupModbusRTU+0x54>)
 800edae:	6812      	ldr	r2, [r2, #0]
 800edb0:	701a      	strb	r2, [r3, #0]
	u32MB485OperationStatus = 1;
 800edb2:	4a11      	ldr	r2, [pc, #68]	; (800edf8 <setupModbusRTU+0x58>)
 800edb4:	2101      	movs	r1, #1
 800edb6:	6611      	str	r1, [r2, #96]	; 0x60
	master.u32PollDelay = gu32Modbus485PollingTime;
 800edb8:	4a10      	ldr	r2, [pc, #64]	; (800edfc <setupModbusRTU+0x5c>)
 800edba:	6812      	ldr	r2, [r2, #0]
 800edbc:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c

	for(temp = 0; temp < master.u16NoRegisterstoFetch ;temp++)
 800edc0:	2300      	movs	r3, #0
 800edc2:	429c      	cmp	r4, r3
 800edc4:	d90b      	bls.n	800edde <setupModbusRTU+0x3e>
	{
		/*Calculates how many data values will be there in payload */
		gu32MBDataByteCounterLimitRTU += gu32MBRTUClientNoofPoints[temp];
 800edc6:	4a0c      	ldr	r2, [pc, #48]	; (800edf8 <setupModbusRTU+0x58>)
 800edc8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800edcc:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800edce:	490c      	ldr	r1, [pc, #48]	; (800ee00 <setupModbusRTU+0x60>)
 800edd0:	f8d1 24d0 	ldr.w	r2, [r1, #1232]	; 0x4d0
 800edd4:	4402      	add	r2, r0
 800edd6:	f8c1 24d0 	str.w	r2, [r1, #1232]	; 0x4d0
	for(temp = 0; temp < master.u16NoRegisterstoFetch ;temp++)
 800edda:	3301      	adds	r3, #1
 800eddc:	e7f1      	b.n	800edc2 <setupModbusRTU+0x22>
	}
	master.u8MBNoQueryAttempts = 0;
 800edde:	4b04      	ldr	r3, [pc, #16]	; (800edf0 <setupModbusRTU+0x50>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
}
 800ede6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	20002934 	.word	0x20002934
 800edf0:	2000e840 	.word	0x2000e840
 800edf4:	20002930 	.word	0x20002930
 800edf8:	20000c40 	.word	0x20000c40
 800edfc:	20001ffc 	.word	0x20001ffc
 800ee00:	2000361c 	.word	0x2000361c

0800ee04 <setupModbus>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void setupModbus(void)
{
 800ee04:	b410      	push	{r4}
	strMbClient.u32MBQueryCounter = 0;
 800ee06:	4a10      	ldr	r2, [pc, #64]	; (800ee48 <setupModbus+0x44>)
 800ee08:	2300      	movs	r3, #0
 800ee0a:	6113      	str	r3, [r2, #16]
	/* Number of Queries configured */
	strMbClient.u32NoofRegConfigured = gu32Modbus485RegisterFetch;//44;
 800ee0c:	490f      	ldr	r1, [pc, #60]	; (800ee4c <setupModbus+0x48>)
 800ee0e:	680c      	ldr	r4, [r1, #0]
 800ee10:	f8c2 4668 	str.w	r4, [r2, #1640]	; 0x668
	for(temp = 0; temp < strMbClient.u32NoofRegConfigured ;temp++)
 800ee14:	4a0e      	ldr	r2, [pc, #56]	; (800ee50 <setupModbus+0x4c>)
 800ee16:	6153      	str	r3, [r2, #20]
 800ee18:	4b0d      	ldr	r3, [pc, #52]	; (800ee50 <setupModbus+0x4c>)
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	429c      	cmp	r4, r3
 800ee1e:	d90a      	bls.n	800ee36 <setupModbus+0x32>
	{
		/* Calculates how many data values will be there in payload
		 * Tested -> 19/11/2020 */
		gu32MBDataByteCounterLimit += gu32MBTCPClientNoofPoints[temp];
 800ee20:	4a0c      	ldr	r2, [pc, #48]	; (800ee54 <setupModbus+0x50>)
 800ee22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ee26:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800ee28:	4a09      	ldr	r2, [pc, #36]	; (800ee50 <setupModbus+0x4c>)
 800ee2a:	6a11      	ldr	r1, [r2, #32]
 800ee2c:	4401      	add	r1, r0
 800ee2e:	6211      	str	r1, [r2, #32]
	for(temp = 0; temp < strMbClient.u32NoofRegConfigured ;temp++)
 800ee30:	3301      	adds	r3, #1
 800ee32:	6153      	str	r3, [r2, #20]
 800ee34:	e7f0      	b.n	800ee18 <setupModbus+0x14>
 	}
	strMbClient.u32MBNoQueryAttempts = 0;
 800ee36:	4b04      	ldr	r3, [pc, #16]	; (800ee48 <setupModbus+0x44>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	609a      	str	r2, [r3, #8]
//	{
//		gu32MBTCPDataPointLL[temp] = -5;
//		gu32MBTCPDataPointUL[temp] = 2000;
//	}
#endif
	strMbClient.u32UnitId = 1;
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	60da      	str	r2, [r3, #12]
}
 800ee40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	2000f728 	.word	0x2000f728
 800ee4c:	20002934 	.word	0x20002934
 800ee50:	20003b04 	.word	0x20003b04
 800ee54:	2000153c 	.word	0x2000153c

0800ee58 <getSystemConfig>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
char * getSystemConfig(void)
{
 800ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee5a:	b08f      	sub	sp, #60	; 0x3c
	char * systemConfig = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800ee5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ee60:	f003 fb9c 	bl	801259c <malloc>
 800ee64:	4604      	mov	r4, r0
	getrtcStamp();
 800ee66:	f003 f9fb 	bl	8012260 <getrtcStamp>
	if(systemConfig != NULL)
 800ee6a:	2c00      	cmp	r4, #0
 800ee6c:	f000 80fd 	beq.w	800f06a <getSystemConfig+0x212>
	{
		memset(systemConfig,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800ee70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ee74:	2100      	movs	r1, #0
 800ee76:	4620      	mov	r0, r4
 800ee78:	f003 fe18 	bl	8012aac <memset>
		char temp_array[50];

		/* Start of Frame */
		strcpy((char *)systemConfig,(char * )START_OF_FRAME);
 800ee7c:	4b7c      	ldr	r3, [pc, #496]	; (800f070 <getSystemConfig+0x218>)
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	8023      	strh	r3, [r4, #0]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800ee82:	4620      	mov	r0, r4
 800ee84:	f7f1 f9be 	bl	8000204 <strlen>
 800ee88:	4b7a      	ldr	r3, [pc, #488]	; (800f074 <getSystemConfig+0x21c>)
 800ee8a:	881d      	ldrh	r5, [r3, #0]
 800ee8c:	5225      	strh	r5, [r4, r0]

		/* Device UUID */
		strcat((char *)systemConfig,(char * )dinfo);
 800ee8e:	497a      	ldr	r1, [pc, #488]	; (800f078 <getSystemConfig+0x220>)
 800ee90:	4620      	mov	r0, r4
 800ee92:	f003 fe7f 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )"_Conf");
 800ee96:	4620      	mov	r0, r4
 800ee98:	f7f1 f9b4 	bl	8000204 <strlen>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	1821      	adds	r1, r4, r0
 800eea0:	4a76      	ldr	r2, [pc, #472]	; (800f07c <getSystemConfig+0x224>)
 800eea2:	6810      	ldr	r0, [r2, #0]
 800eea4:	50e0      	str	r0, [r4, r3]
 800eea6:	8893      	ldrh	r3, [r2, #4]
 800eea8:	808b      	strh	r3, [r1, #4]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f7f1 f9aa 	bl	8000204 <strlen>
 800eeb0:	5225      	strh	r5, [r4, r0]

		/* Model Number */
		strcat((char *)systemConfig,(char * )MODEL_NUMBER);
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f7f1 f9a6 	bl	8000204 <strlen>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	1826      	adds	r6, r4, r0
 800eebc:	4a70      	ldr	r2, [pc, #448]	; (800f080 <getSystemConfig+0x228>)
 800eebe:	ca03      	ldmia	r2!, {r0, r1}
 800eec0:	50e0      	str	r0, [r4, r3]
 800eec2:	6071      	str	r1, [r6, #4]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800eec4:	4620      	mov	r0, r4
 800eec6:	f7f1 f99d 	bl	8000204 <strlen>
 800eeca:	5225      	strh	r5, [r4, r0]

		/* Local Time Stamp */
		strcat((char *)systemConfig,(char * )gau8Date);
 800eecc:	496d      	ldr	r1, [pc, #436]	; (800f084 <getSystemConfig+0x22c>)
 800eece:	4620      	mov	r0, r4
 800eed0:	f003 fe60 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )RTC_DATESEPARATOR);
 800eed4:	4620      	mov	r0, r4
 800eed6:	f7f1 f995 	bl	8000204 <strlen>
 800eeda:	4b6b      	ldr	r3, [pc, #428]	; (800f088 <getSystemConfig+0x230>)
 800eedc:	881e      	ldrh	r6, [r3, #0]
 800eede:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Month);
 800eee0:	496a      	ldr	r1, [pc, #424]	; (800f08c <getSystemConfig+0x234>)
 800eee2:	4620      	mov	r0, r4
 800eee4:	f003 fe56 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )RTC_DATESEPARATOR);
 800eee8:	4620      	mov	r0, r4
 800eeea:	f7f1 f98b 	bl	8000204 <strlen>
 800eeee:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Year);
 800eef0:	4967      	ldr	r1, [pc, #412]	; (800f090 <getSystemConfig+0x238>)
 800eef2:	4620      	mov	r0, r4
 800eef4:	f003 fe4e 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )RTC_PARAM_SEPARATOR);
 800eef8:	4620      	mov	r0, r4
 800eefa:	f7f1 f983 	bl	8000204 <strlen>
 800eefe:	4b65      	ldr	r3, [pc, #404]	; (800f094 <getSystemConfig+0x23c>)
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Hour);
 800ef04:	4964      	ldr	r1, [pc, #400]	; (800f098 <getSystemConfig+0x240>)
 800ef06:	4620      	mov	r0, r4
 800ef08:	f003 fe44 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )RTC_TIMESEPARATOR);
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f7f1 f979 	bl	8000204 <strlen>
 800ef12:	4b62      	ldr	r3, [pc, #392]	; (800f09c <getSystemConfig+0x244>)
 800ef14:	881e      	ldrh	r6, [r3, #0]
 800ef16:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Minutes);
 800ef18:	4961      	ldr	r1, [pc, #388]	; (800f0a0 <getSystemConfig+0x248>)
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f003 fe3a 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )RTC_TIMESEPARATOR);
 800ef20:	4620      	mov	r0, r4
 800ef22:	f7f1 f96f 	bl	8000204 <strlen>
 800ef26:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Seconds);
 800ef28:	495e      	ldr	r1, [pc, #376]	; (800f0a4 <getSystemConfig+0x24c>)
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f003 fe32 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800ef30:	4620      	mov	r0, r4
 800ef32:	f7f1 f967 	bl	8000204 <strlen>
 800ef36:	5225      	strh	r5, [r4, r0]

		/* Firmware Version*/
		strcat((char *)systemConfig,(char * )FIRMWARE_VER);
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7f1 f963 	bl	8000204 <strlen>
 800ef3e:	4684      	mov	ip, r0
 800ef40:	1827      	adds	r7, r4, r0
 800ef42:	4e59      	ldr	r6, [pc, #356]	; (800f0a8 <getSystemConfig+0x250>)
 800ef44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ef46:	f844 000c 	str.w	r0, [r4, ip]
 800ef4a:	6079      	str	r1, [r7, #4]
 800ef4c:	60ba      	str	r2, [r7, #8]
 800ef4e:	60fb      	str	r3, [r7, #12]
 800ef50:	ce03      	ldmia	r6!, {r0, r1}
 800ef52:	6138      	str	r0, [r7, #16]
 800ef54:	6179      	str	r1, [r7, #20]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800ef56:	4620      	mov	r0, r4
 800ef58:	f7f1 f954 	bl	8000204 <strlen>
 800ef5c:	5225      	strh	r5, [r4, r0]

		strcat((char *)systemConfig,(char * )"SystemConfig :");
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f7f1 f950 	bl	8000204 <strlen>
 800ef64:	4607      	mov	r7, r0
 800ef66:	1826      	adds	r6, r4, r0
 800ef68:	4b50      	ldr	r3, [pc, #320]	; (800f0ac <getSystemConfig+0x254>)
 800ef6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef6c:	51e0      	str	r0, [r4, r7]
 800ef6e:	6071      	str	r1, [r6, #4]
 800ef70:	60b2      	str	r2, [r6, #8]
 800ef72:	881a      	ldrh	r2, [r3, #0]
 800ef74:	789b      	ldrb	r3, [r3, #2]
 800ef76:	81b2      	strh	r2, [r6, #12]
 800ef78:	73b3      	strb	r3, [r6, #14]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f7f1 f942 	bl	8000204 <strlen>
 800ef80:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8LastKnownConfiguration);
 800ef82:	494b      	ldr	r1, [pc, #300]	; (800f0b0 <getSystemConfig+0x258>)
 800ef84:	4620      	mov	r0, r4
 800ef86:	f003 fe05 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7f1 f93a 	bl	8000204 <strlen>
 800ef90:	5225      	strh	r5, [r4, r0]

		/* Config Error */
		memset(temp_array, 0, sizeof(temp_array));
 800ef92:	2732      	movs	r7, #50	; 0x32
 800ef94:	463a      	mov	r2, r7
 800ef96:	2100      	movs	r1, #0
 800ef98:	a801      	add	r0, sp, #4
 800ef9a:	f003 fd87 	bl	8012aac <memset>
		itoa(gu32ConfigNetworkErrorDatabase, temp_array, 10);
 800ef9e:	220a      	movs	r2, #10
 800efa0:	a901      	add	r1, sp, #4
 800efa2:	4b44      	ldr	r3, [pc, #272]	; (800f0b4 <getSystemConfig+0x25c>)
 800efa4:	6818      	ldr	r0, [r3, #0]
 800efa6:	f003 faf7 	bl	8012598 <itoa>
		strcat((char *)systemConfig,(char * )"NetworkErr ");
 800efaa:	4620      	mov	r0, r4
 800efac:	f7f1 f92a 	bl	8000204 <strlen>
 800efb0:	4606      	mov	r6, r0
 800efb2:	eb04 0c00 	add.w	ip, r4, r0
 800efb6:	4b40      	ldr	r3, [pc, #256]	; (800f0b8 <getSystemConfig+0x260>)
 800efb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efba:	51a0      	str	r0, [r4, r6]
 800efbc:	f8cc 1004 	str.w	r1, [ip, #4]
 800efc0:	f8cc 2008 	str.w	r2, [ip, #8]
		strcat((char *)systemConfig,(char * )temp_array);
 800efc4:	a901      	add	r1, sp, #4
 800efc6:	4620      	mov	r0, r4
 800efc8:	f003 fde4 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800efcc:	4620      	mov	r0, r4
 800efce:	f7f1 f919 	bl	8000204 <strlen>
 800efd2:	5225      	strh	r5, [r4, r0]

		memset(temp_array, 0, sizeof(temp_array));
 800efd4:	463a      	mov	r2, r7
 800efd6:	2100      	movs	r1, #0
 800efd8:	a801      	add	r0, sp, #4
 800efda:	f003 fd67 	bl	8012aac <memset>
		itoa(gu32ConfigModbus485ErrorDatabase, temp_array, 10);
 800efde:	220a      	movs	r2, #10
 800efe0:	a901      	add	r1, sp, #4
 800efe2:	4b36      	ldr	r3, [pc, #216]	; (800f0bc <getSystemConfig+0x264>)
 800efe4:	6818      	ldr	r0, [r3, #0]
 800efe6:	f003 fad7 	bl	8012598 <itoa>
		strcat((char *)systemConfig,(char * )"485Err ");
 800efea:	4620      	mov	r0, r4
 800efec:	f7f1 f90a 	bl	8000204 <strlen>
 800eff0:	4603      	mov	r3, r0
 800eff2:	1826      	adds	r6, r4, r0
 800eff4:	4a32      	ldr	r2, [pc, #200]	; (800f0c0 <getSystemConfig+0x268>)
 800eff6:	ca03      	ldmia	r2!, {r0, r1}
 800eff8:	50e0      	str	r0, [r4, r3]
 800effa:	6071      	str	r1, [r6, #4]
		strcat((char *)systemConfig,(char * )temp_array);
 800effc:	a901      	add	r1, sp, #4
 800effe:	4620      	mov	r0, r4
 800f000:	f003 fdc8 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f004:	4620      	mov	r0, r4
 800f006:	f7f1 f8fd 	bl	8000204 <strlen>
 800f00a:	5225      	strh	r5, [r4, r0]

		memset(temp_array, 0, sizeof(temp_array));
 800f00c:	463a      	mov	r2, r7
 800f00e:	2100      	movs	r1, #0
 800f010:	a801      	add	r0, sp, #4
 800f012:	f003 fd4b 	bl	8012aac <memset>
		itoa(gu32ConfigModbusTCPErrorDatabase, temp_array, 10);
 800f016:	220a      	movs	r2, #10
 800f018:	a901      	add	r1, sp, #4
 800f01a:	4b2a      	ldr	r3, [pc, #168]	; (800f0c4 <getSystemConfig+0x26c>)
 800f01c:	6818      	ldr	r0, [r3, #0]
 800f01e:	f003 fabb 	bl	8012598 <itoa>
		strcat((char *)systemConfig,(char * )"MBTCPErr ");
 800f022:	4620      	mov	r0, r4
 800f024:	f7f1 f8ee 	bl	8000204 <strlen>
 800f028:	4602      	mov	r2, r0
 800f02a:	1826      	adds	r6, r4, r0
 800f02c:	4b26      	ldr	r3, [pc, #152]	; (800f0c8 <getSystemConfig+0x270>)
 800f02e:	cb03      	ldmia	r3!, {r0, r1}
 800f030:	50a0      	str	r0, [r4, r2]
 800f032:	6071      	str	r1, [r6, #4]
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	8133      	strh	r3, [r6, #8]
		strcat((char *)systemConfig,(char * )temp_array);
 800f038:	a901      	add	r1, sp, #4
 800f03a:	4620      	mov	r0, r4
 800f03c:	f003 fdaa 	bl	8012b94 <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f040:	4620      	mov	r0, r4
 800f042:	f7f1 f8df 	bl	8000204 <strlen>
 800f046:	5225      	strh	r5, [r4, r0]

		strcat((char *)systemConfig,(char * )"0,0");	// Added for buffer identification
 800f048:	4620      	mov	r0, r4
 800f04a:	f7f1 f8db 	bl	8000204 <strlen>
 800f04e:	4603      	mov	r3, r0
 800f050:	4a1e      	ldr	r2, [pc, #120]	; (800f0cc <getSystemConfig+0x274>)
 800f052:	6810      	ldr	r0, [r2, #0]
 800f054:	50e0      	str	r0, [r4, r3]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f056:	4620      	mov	r0, r4
 800f058:	f7f1 f8d4 	bl	8000204 <strlen>
 800f05c:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemConfig,(char * )END_OF_FRAME);
 800f05e:	4620      	mov	r0, r4
 800f060:	f7f1 f8d0 	bl	8000204 <strlen>
 800f064:	4b1a      	ldr	r3, [pc, #104]	; (800f0d0 <getSystemConfig+0x278>)
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	5223      	strh	r3, [r4, r0]

		return systemConfig;
	}
	else
		return NULL;
}
 800f06a:	4620      	mov	r0, r4
 800f06c:	b00f      	add	sp, #60	; 0x3c
 800f06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f070:	0801c7ec 	.word	0x0801c7ec
 800f074:	0801c738 	.word	0x0801c738
 800f078:	2000748c 	.word	0x2000748c
 800f07c:	0801c7f0 	.word	0x0801c7f0
 800f080:	0801c6cc 	.word	0x0801c6cc
 800f084:	20002980 	.word	0x20002980
 800f088:	0801c7f8 	.word	0x0801c7f8
 800f08c:	20002978 	.word	0x20002978
 800f090:	20002970 	.word	0x20002970
 800f094:	0801c718 	.word	0x0801c718
 800f098:	20002988 	.word	0x20002988
 800f09c:	0801c7a4 	.word	0x0801c7a4
 800f0a0:	20002990 	.word	0x20002990
 800f0a4:	20002998 	.word	0x20002998
 800f0a8:	0801c7fc 	.word	0x0801c7fc
 800f0ac:	0801c814 	.word	0x0801c814
 800f0b0:	2000fdc4 	.word	0x2000fdc4
 800f0b4:	20004038 	.word	0x20004038
 800f0b8:	0801c824 	.word	0x0801c824
 800f0bc:	200041a0 	.word	0x200041a0
 800f0c0:	0801c830 	.word	0x0801c830
 800f0c4:	200041cc 	.word	0x200041cc
 800f0c8:	0801c838 	.word	0x0801c838
 800f0cc:	0801c8a0 	.word	0x0801c8a0
 800f0d0:	0801c844 	.word	0x0801c844

0800f0d4 <updateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateInputVoltage(void)
{
 800f0d4:	b510      	push	{r4, lr}
	sprintf(gcSystemSupplyVoltage,"%.2f",gfInputSupplyVoltage);
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	; (800f104 <updateInputVoltage+0x30>)
 800f0d8:	6818      	ldr	r0, [r3, #0]
 800f0da:	f7f1 fa55 	bl	8000588 <__aeabi_f2d>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	4c09      	ldr	r4, [pc, #36]	; (800f108 <updateInputVoltage+0x34>)
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	4809      	ldr	r0, [pc, #36]	; (800f10c <updateInputVoltage+0x38>)
 800f0e8:	f003 fd34 	bl	8012b54 <sprintf>
	sprintf(gcBatterySupplyVoltage,"%.2f",gfBatteryVoltage);
 800f0ec:	4b08      	ldr	r3, [pc, #32]	; (800f110 <updateInputVoltage+0x3c>)
 800f0ee:	6818      	ldr	r0, [r3, #0]
 800f0f0:	f7f1 fa4a 	bl	8000588 <__aeabi_f2d>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	4806      	ldr	r0, [pc, #24]	; (800f114 <updateInputVoltage+0x40>)
 800f0fc:	f003 fd2a 	bl	8012b54 <sprintf>
}
 800f100:	bd10      	pop	{r4, pc}
 800f102:	bf00      	nop
 800f104:	20004290 	.word	0x20004290
 800f108:	0801c848 	.word	0x0801c848
 800f10c:	2000fdb0 	.word	0x2000fdb0
 800f110:	20004294 	.word	0x20004294
 800f114:	2000fd9c 	.word	0x2000fd9c

0800f118 <formatGPSSring>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void formatGPSSring(void)
{
 800f118:	b570      	push	{r4, r5, r6, lr}
	/*Formulate Lat and Lon in standard format
		 * 1830.101 = 18 + (30.101094/60) = 18.5016849
		 * 7348.878 = 73 + (48.877697 /60) = 73.8146 */

	char *configptr = strtok(agpsLastLocationData, ",");
 800f11a:	4984      	ldr	r1, [pc, #528]	; (800f32c <formatGPSSring+0x214>)
 800f11c:	4884      	ldr	r0, [pc, #528]	; (800f330 <formatGPSSring+0x218>)
 800f11e:	f004 fbcd 	bl	80138bc <strtok>
 800f122:	4604      	mov	r4, r0
	gu32ExtractGPSParamCounter = 0;
 800f124:	4b83      	ldr	r3, [pc, #524]	; (800f334 <formatGPSSring+0x21c>)
 800f126:	2200      	movs	r2, #0
 800f128:	601a      	str	r2, [r3, #0]

	while(gu32ExtractGPSParamCounter != 9) //reference : while(configptr != NULL)
 800f12a:	e045      	b.n	800f1b8 <formatGPSSring+0xa0>
	{
		switch(gu32ExtractGPSParamCounter)
		{
			case 0:
				/* Lat  */
				strcpy(gu32GPSLat,configptr);
 800f12c:	4d80      	ldr	r5, [pc, #512]	; (800f330 <formatGPSSring+0x218>)
 800f12e:	4621      	mov	r1, r4
 800f130:	f105 0098 	add.w	r0, r5, #152	; 0x98
 800f134:	f003 fd4a 	bl	8012bcc <strcpy>
				templat = atof(&gu32GPSLat[2]);
 800f138:	f105 009a 	add.w	r0, r5, #154	; 0x9a
 800f13c:	f003 f9e9 	bl	8012512 <atof>
 800f140:	ec51 0b10 	vmov	r0, r1, d0
 800f144:	f7f1 fd70 	bl	8000c28 <__aeabi_d2f>
 800f148:	ee06 0a90 	vmov	s13, r0
				templat /= 60;
 800f14c:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800f338 <formatGPSSring+0x220>
 800f150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				templat += (((gu32GPSLat[0]-'0') * 10) + (gu32GPSLat[1]-'0'));
 800f154:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
 800f158:	3b30      	subs	r3, #48	; 0x30
 800f15a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f15e:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800f162:	3b30      	subs	r3, #48	; 0x30
 800f164:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f168:	ee07 3a90 	vmov	s15, r3
 800f16c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f170:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f174:	4b6f      	ldr	r3, [pc, #444]	; (800f334 <formatGPSSring+0x21c>)
 800f176:	edc3 7a01 	vstr	s15, [r3, #4]
				sprintf(gu32GPSLatformatted,"%.7f",templat);
 800f17a:	ee17 0a90 	vmov	r0, s15
 800f17e:	f7f1 fa03 	bl	8000588 <__aeabi_f2d>
 800f182:	4602      	mov	r2, r0
 800f184:	460b      	mov	r3, r1
 800f186:	f105 06a8 	add.w	r6, r5, #168	; 0xa8
 800f18a:	496c      	ldr	r1, [pc, #432]	; (800f33c <formatGPSSring+0x224>)
 800f18c:	4630      	mov	r0, r6
 800f18e:	f003 fce1 	bl	8012b54 <sprintf>
				memset(agpsLastLocationDataFormatted,0x00,150);
 800f192:	35b8      	adds	r5, #184	; 0xb8
 800f194:	2296      	movs	r2, #150	; 0x96
 800f196:	2100      	movs	r1, #0
 800f198:	4628      	mov	r0, r5
 800f19a:	f003 fc87 	bl	8012aac <memset>
				strcpy(agpsLastLocationDataFormatted,gu32GPSLatformatted);
 800f19e:	4631      	mov	r1, r6
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	f003 fd13 	bl	8012bcc <strcpy>

			default:

				break;
		}
		if(gu32ExtractGPSParamCounter != 9)
 800f1a6:	4b63      	ldr	r3, [pc, #396]	; (800f334 <formatGPSSring+0x21c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b09      	cmp	r3, #9
 800f1ac:	f040 80b7 	bne.w	800f31e <formatGPSSring+0x206>
			configptr = strtok(NULL, ",");

		gu32ExtractGPSParamCounter++;
 800f1b0:	4a60      	ldr	r2, [pc, #384]	; (800f334 <formatGPSSring+0x21c>)
 800f1b2:	6813      	ldr	r3, [r2, #0]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	6013      	str	r3, [r2, #0]
	while(gu32ExtractGPSParamCounter != 9) //reference : while(configptr != NULL)
 800f1b8:	4b5e      	ldr	r3, [pc, #376]	; (800f334 <formatGPSSring+0x21c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b09      	cmp	r3, #9
 800f1be:	f000 80b4 	beq.w	800f32a <formatGPSSring+0x212>
		switch(gu32ExtractGPSParamCounter)
 800f1c2:	2b08      	cmp	r3, #8
 800f1c4:	d8ef      	bhi.n	800f1a6 <formatGPSSring+0x8e>
 800f1c6:	a201      	add	r2, pc, #4	; (adr r2, 800f1cc <formatGPSSring+0xb4>)
 800f1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1cc:	0800f12d 	.word	0x0800f12d
 800f1d0:	0800f1f1 	.word	0x0800f1f1
 800f1d4:	0800f211 	.word	0x0800f211
 800f1d8:	0800f28f 	.word	0x0800f28f
 800f1dc:	0800f2a7 	.word	0x0800f2a7
 800f1e0:	0800f2bf 	.word	0x0800f2bf
 800f1e4:	0800f2d7 	.word	0x0800f2d7
 800f1e8:	0800f2ef 	.word	0x0800f2ef
 800f1ec:	0800f307 	.word	0x0800f307
				strcat(agpsLastLocationDataFormatted,",");
 800f1f0:	4d53      	ldr	r5, [pc, #332]	; (800f340 <formatGPSSring+0x228>)
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f7f1 f806 	bl	8000204 <strlen>
 800f1f8:	4b4c      	ldr	r3, [pc, #304]	; (800f32c <formatGPSSring+0x214>)
 800f1fa:	881e      	ldrh	r6, [r3, #0]
 800f1fc:	522e      	strh	r6, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f1fe:	4621      	mov	r1, r4
 800f200:	4628      	mov	r0, r5
 800f202:	f003 fcc7 	bl	8012b94 <strcat>
				strcat(agpsLastLocationDataFormatted,",");
 800f206:	4628      	mov	r0, r5
 800f208:	f7f0 fffc 	bl	8000204 <strlen>
 800f20c:	522e      	strh	r6, [r5, r0]
				break;
 800f20e:	e7ca      	b.n	800f1a6 <formatGPSSring+0x8e>
				strcpy(gu32GPSLon,configptr);
 800f210:	4d47      	ldr	r5, [pc, #284]	; (800f330 <formatGPSSring+0x218>)
 800f212:	4621      	mov	r1, r4
 800f214:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 800f218:	f003 fcd8 	bl	8012bcc <strcpy>
				templon = atof(&gu32GPSLon[3]);
 800f21c:	f205 1053 	addw	r0, r5, #339	; 0x153
 800f220:	f003 f977 	bl	8012512 <atof>
 800f224:	ec51 0b10 	vmov	r0, r1, d0
 800f228:	f7f1 fcfe 	bl	8000c28 <__aeabi_d2f>
 800f22c:	ee06 0a90 	vmov	s13, r0
				templon /= 60;
 800f230:	eddf 7a41 	vldr	s15, [pc, #260]	; 800f338 <formatGPSSring+0x220>
 800f234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				templon += (((gu32GPSLon[0]- '0') * 100 )+ ((gu32GPSLon[1]-'0') * 10) +(gu32GPSLon[2]-'0'));
 800f238:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
 800f23c:	3b30      	subs	r3, #48	; 0x30
 800f23e:	f895 2151 	ldrb.w	r2, [r5, #337]	; 0x151
 800f242:	3a30      	subs	r2, #48	; 0x30
 800f244:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f248:	0052      	lsls	r2, r2, #1
 800f24a:	2164      	movs	r1, #100	; 0x64
 800f24c:	fb01 2303 	mla	r3, r1, r3, r2
 800f250:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
 800f254:	3a30      	subs	r2, #48	; 0x30
 800f256:	4413      	add	r3, r2
 800f258:	ee07 3a90 	vmov	s15, r3
 800f25c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f260:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f264:	4b33      	ldr	r3, [pc, #204]	; (800f334 <formatGPSSring+0x21c>)
 800f266:	edc3 7a02 	vstr	s15, [r3, #8]
				sprintf(gu32GPSLonformatted,"%.7f",templon);
 800f26a:	ee17 0a90 	vmov	r0, s15
 800f26e:	f7f1 f98b 	bl	8000588 <__aeabi_f2d>
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	f505 76b0 	add.w	r6, r5, #352	; 0x160
 800f27a:	4930      	ldr	r1, [pc, #192]	; (800f33c <formatGPSSring+0x224>)
 800f27c:	4630      	mov	r0, r6
 800f27e:	f003 fc69 	bl	8012b54 <sprintf>
				strcat(agpsLastLocationDataFormatted,gu32GPSLonformatted);
 800f282:	4631      	mov	r1, r6
 800f284:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 800f288:	f003 fc84 	bl	8012b94 <strcat>
				break;
 800f28c:	e78b      	b.n	800f1a6 <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f28e:	4d2c      	ldr	r5, [pc, #176]	; (800f340 <formatGPSSring+0x228>)
 800f290:	4628      	mov	r0, r5
 800f292:	f7f0 ffb7 	bl	8000204 <strlen>
 800f296:	4b25      	ldr	r3, [pc, #148]	; (800f32c <formatGPSSring+0x214>)
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f29c:	4621      	mov	r1, r4
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f003 fc78 	bl	8012b94 <strcat>
				break;
 800f2a4:	e77f      	b.n	800f1a6 <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f2a6:	4d26      	ldr	r5, [pc, #152]	; (800f340 <formatGPSSring+0x228>)
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f7f0 ffab 	bl	8000204 <strlen>
 800f2ae:	4b1f      	ldr	r3, [pc, #124]	; (800f32c <formatGPSSring+0x214>)
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	f003 fc6c 	bl	8012b94 <strcat>
				break;
 800f2bc:	e773      	b.n	800f1a6 <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f2be:	4d20      	ldr	r5, [pc, #128]	; (800f340 <formatGPSSring+0x228>)
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	f7f0 ff9f 	bl	8000204 <strlen>
 800f2c6:	4b19      	ldr	r3, [pc, #100]	; (800f32c <formatGPSSring+0x214>)
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f003 fc60 	bl	8012b94 <strcat>
				break;
 800f2d4:	e767      	b.n	800f1a6 <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f2d6:	4d1a      	ldr	r5, [pc, #104]	; (800f340 <formatGPSSring+0x228>)
 800f2d8:	4628      	mov	r0, r5
 800f2da:	f7f0 ff93 	bl	8000204 <strlen>
 800f2de:	4b13      	ldr	r3, [pc, #76]	; (800f32c <formatGPSSring+0x214>)
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	f003 fc54 	bl	8012b94 <strcat>
				break;
 800f2ec:	e75b      	b.n	800f1a6 <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f2ee:	4d14      	ldr	r5, [pc, #80]	; (800f340 <formatGPSSring+0x228>)
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f7f0 ff87 	bl	8000204 <strlen>
 800f2f6:	4b0d      	ldr	r3, [pc, #52]	; (800f32c <formatGPSSring+0x214>)
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	4628      	mov	r0, r5
 800f300:	f003 fc48 	bl	8012b94 <strcat>
				break;
 800f304:	e74f      	b.n	800f1a6 <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f306:	4d0e      	ldr	r5, [pc, #56]	; (800f340 <formatGPSSring+0x228>)
 800f308:	4628      	mov	r0, r5
 800f30a:	f7f0 ff7b 	bl	8000204 <strlen>
 800f30e:	4b07      	ldr	r3, [pc, #28]	; (800f32c <formatGPSSring+0x214>)
 800f310:	881b      	ldrh	r3, [r3, #0]
 800f312:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f314:	4621      	mov	r1, r4
 800f316:	4628      	mov	r0, r5
 800f318:	f003 fc3c 	bl	8012b94 <strcat>
				break;
 800f31c:	e743      	b.n	800f1a6 <formatGPSSring+0x8e>
			configptr = strtok(NULL, ",");
 800f31e:	4903      	ldr	r1, [pc, #12]	; (800f32c <formatGPSSring+0x214>)
 800f320:	2000      	movs	r0, #0
 800f322:	f004 facb 	bl	80138bc <strtok>
 800f326:	4604      	mov	r4, r0
 800f328:	e742      	b.n	800f1b0 <formatGPSSring+0x98>

	}
}
 800f32a:	bd70      	pop	{r4, r5, r6, pc}
 800f32c:	0801c738 	.word	0x0801c738
 800f330:	20001e38 	.word	0x20001e38
 800f334:	2000401c 	.word	0x2000401c
 800f338:	42700000 	.word	0x42700000
 800f33c:	0801c850 	.word	0x0801c850
 800f340:	20001ef0 	.word	0x20001ef0

0800f344 <getSystemDataString>:
{
 800f344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f346:	b08f      	sub	sp, #60	; 0x3c
	char * systemPayload = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800f348:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f34c:	f003 f926 	bl	801259c <malloc>
 800f350:	4604      	mov	r4, r0
	getrtcStamp();
 800f352:	f002 ff85 	bl	8012260 <getrtcStamp>
	updateInputVoltage();
 800f356:	f7ff febd 	bl	800f0d4 <updateInputVoltage>
	itoa(gu32EthLinkAlert,gacEthernetLinkStatus,10);
 800f35a:	220a      	movs	r2, #10
 800f35c:	49a6      	ldr	r1, [pc, #664]	; (800f5f8 <getSystemDataString+0x2b4>)
 800f35e:	4ba7      	ldr	r3, [pc, #668]	; (800f5fc <getSystemDataString+0x2b8>)
 800f360:	6818      	ldr	r0, [r3, #0]
 800f362:	f003 f919 	bl	8012598 <itoa>
	itoa(gu32MBDataByteCounterLimit,gacMBDataPoints,10);
 800f366:	220a      	movs	r2, #10
 800f368:	49a5      	ldr	r1, [pc, #660]	; (800f600 <getSystemDataString+0x2bc>)
 800f36a:	4ba6      	ldr	r3, [pc, #664]	; (800f604 <getSystemDataString+0x2c0>)
 800f36c:	6818      	ldr	r0, [r3, #0]
 800f36e:	f003 f913 	bl	8012598 <itoa>
	itoa(gu32MBDataByteCounterLimitRTU,gacMBDataPointsRTU,10);
 800f372:	220a      	movs	r2, #10
 800f374:	49a4      	ldr	r1, [pc, #656]	; (800f608 <getSystemDataString+0x2c4>)
 800f376:	4ba5      	ldr	r3, [pc, #660]	; (800f60c <getSystemDataString+0x2c8>)
 800f378:	6818      	ldr	r0, [r3, #0]
 800f37a:	f003 f90d 	bl	8012598 <itoa>
	itoa(gu32MBClientConnectedFlag,gacModbusStatus,10);
 800f37e:	4ba4      	ldr	r3, [pc, #656]	; (800f610 <getSystemDataString+0x2cc>)
 800f380:	6818      	ldr	r0, [r3, #0]
 800f382:	4da4      	ldr	r5, [pc, #656]	; (800f614 <getSystemDataString+0x2d0>)
 800f384:	220a      	movs	r2, #10
 800f386:	f105 010c 	add.w	r1, r5, #12
 800f38a:	f003 f905 	bl	8012598 <itoa>
	itoa(gu32MBRTUClientConnectedFlag,gacModbusStatusRTU,10);// gu8MBResponseFlag
 800f38e:	4ba2      	ldr	r3, [pc, #648]	; (800f618 <getSystemDataString+0x2d4>)
 800f390:	6818      	ldr	r0, [r3, #0]
 800f392:	220a      	movs	r2, #10
 800f394:	f105 0110 	add.w	r1, r5, #16
 800f398:	f003 f8fe 	bl	8012598 <itoa>
	if(strlen(gsmInstance.agpsLocationData) > 10)
 800f39c:	489f      	ldr	r0, [pc, #636]	; (800f61c <getSystemDataString+0x2d8>)
 800f39e:	f7f0 ff31 	bl	8000204 <strlen>
 800f3a2:	280a      	cmp	r0, #10
 800f3a4:	d80d      	bhi.n	800f3c2 <getSystemDataString+0x7e>
	if(systemPayload != NULL)
 800f3a6:	b14c      	cbz	r4, 800f3bc <getSystemDataString+0x78>
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800f3a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f003 fb7c 	bl	8012aac <memset>
		if(gu32OperateModbus485 == 1)
 800f3b4:	4b9a      	ldr	r3, [pc, #616]	; (800f620 <getSystemDataString+0x2dc>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d00a      	beq.n	800f3d2 <getSystemDataString+0x8e>
}
 800f3bc:	4620      	mov	r0, r4
 800f3be:	b00f      	add	sp, #60	; 0x3c
 800f3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(agpsLastLocationData,gsmInstance.agpsLocationData,strlen(gsmInstance.agpsLocationData));
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	4995      	ldr	r1, [pc, #596]	; (800f61c <getSystemDataString+0x2d8>)
 800f3c6:	4897      	ldr	r0, [pc, #604]	; (800f624 <getSystemDataString+0x2e0>)
 800f3c8:	f003 fb48 	bl	8012a5c <memcpy>
		formatGPSSring();
 800f3cc:	f7ff fea4 	bl	800f118 <formatGPSSring>
 800f3d0:	e7e9      	b.n	800f3a6 <getSystemDataString+0x62>
			strcat((char *)systemPayload,(char * )START_OF_FRAME);
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f7f0 ff16 	bl	8000204 <strlen>
 800f3d8:	4b93      	ldr	r3, [pc, #588]	; (800f628 <getSystemDataString+0x2e4>)
 800f3da:	881b      	ldrh	r3, [r3, #0]
 800f3dc:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f7f0 ff10 	bl	8000204 <strlen>
 800f3e4:	4b91      	ldr	r3, [pc, #580]	; (800f62c <getSystemDataString+0x2e8>)
 800f3e6:	881e      	ldrh	r6, [r3, #0]
 800f3e8:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )dinfo);
 800f3ea:	4991      	ldr	r1, [pc, #580]	; (800f630 <getSystemDataString+0x2ec>)
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f003 fbd1 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )"_RTU");
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f7f0 ff06 	bl	8000204 <strlen>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	1821      	adds	r1, r4, r0
 800f3fc:	4a8d      	ldr	r2, [pc, #564]	; (800f634 <getSystemDataString+0x2f0>)
 800f3fe:	6810      	ldr	r0, [r2, #0]
 800f400:	50e0      	str	r0, [r4, r3]
 800f402:	7913      	ldrb	r3, [r2, #4]
 800f404:	710b      	strb	r3, [r1, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f406:	4620      	mov	r0, r4
 800f408:	f7f0 fefc 	bl	8000204 <strlen>
 800f40c:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 800f40e:	4620      	mov	r0, r4
 800f410:	f7f0 fef8 	bl	8000204 <strlen>
 800f414:	4603      	mov	r3, r0
 800f416:	1825      	adds	r5, r4, r0
 800f418:	4a87      	ldr	r2, [pc, #540]	; (800f638 <getSystemDataString+0x2f4>)
 800f41a:	ca03      	ldmia	r2!, {r0, r1}
 800f41c:	50e0      	str	r0, [r4, r3]
 800f41e:	6069      	str	r1, [r5, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f420:	4620      	mov	r0, r4
 800f422:	f7f0 feef 	bl	8000204 <strlen>
 800f426:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Date);
 800f428:	4984      	ldr	r1, [pc, #528]	; (800f63c <getSystemDataString+0x2f8>)
 800f42a:	4620      	mov	r0, r4
 800f42c:	f003 fbb2 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 800f430:	4620      	mov	r0, r4
 800f432:	f7f0 fee7 	bl	8000204 <strlen>
 800f436:	4b82      	ldr	r3, [pc, #520]	; (800f640 <getSystemDataString+0x2fc>)
 800f438:	881d      	ldrh	r5, [r3, #0]
 800f43a:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Month);
 800f43c:	4981      	ldr	r1, [pc, #516]	; (800f644 <getSystemDataString+0x300>)
 800f43e:	4620      	mov	r0, r4
 800f440:	f003 fba8 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 800f444:	4620      	mov	r0, r4
 800f446:	f7f0 fedd 	bl	8000204 <strlen>
 800f44a:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Year);
 800f44c:	497e      	ldr	r1, [pc, #504]	; (800f648 <getSystemDataString+0x304>)
 800f44e:	4620      	mov	r0, r4
 800f450:	f003 fba0 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )RTC_PARAM_SEPARATOR);
 800f454:	4620      	mov	r0, r4
 800f456:	f7f0 fed5 	bl	8000204 <strlen>
 800f45a:	4b7c      	ldr	r3, [pc, #496]	; (800f64c <getSystemDataString+0x308>)
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Hour);
 800f460:	497b      	ldr	r1, [pc, #492]	; (800f650 <getSystemDataString+0x30c>)
 800f462:	4620      	mov	r0, r4
 800f464:	f003 fb96 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 800f468:	4620      	mov	r0, r4
 800f46a:	f7f0 fecb 	bl	8000204 <strlen>
 800f46e:	4b79      	ldr	r3, [pc, #484]	; (800f654 <getSystemDataString+0x310>)
 800f470:	881d      	ldrh	r5, [r3, #0]
 800f472:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Minutes);
 800f474:	4978      	ldr	r1, [pc, #480]	; (800f658 <getSystemDataString+0x314>)
 800f476:	4620      	mov	r0, r4
 800f478:	f003 fb8c 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 800f47c:	4620      	mov	r0, r4
 800f47e:	f7f0 fec1 	bl	8000204 <strlen>
 800f482:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Seconds);
 800f484:	4975      	ldr	r1, [pc, #468]	; (800f65c <getSystemDataString+0x318>)
 800f486:	4620      	mov	r0, r4
 800f488:	f003 fb84 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f48c:	4620      	mov	r0, r4
 800f48e:	f7f0 feb9 	bl	8000204 <strlen>
 800f492:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 800f494:	4620      	mov	r0, r4
 800f496:	f7f0 feb5 	bl	8000204 <strlen>
 800f49a:	4684      	mov	ip, r0
 800f49c:	1827      	adds	r7, r4, r0
 800f49e:	4d70      	ldr	r5, [pc, #448]	; (800f660 <getSystemDataString+0x31c>)
 800f4a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4a2:	f844 000c 	str.w	r0, [r4, ip]
 800f4a6:	6079      	str	r1, [r7, #4]
 800f4a8:	60ba      	str	r2, [r7, #8]
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	cd03      	ldmia	r5!, {r0, r1}
 800f4ae:	6138      	str	r0, [r7, #16]
 800f4b0:	6179      	str	r1, [r7, #20]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f7f0 fea6 	bl	8000204 <strlen>
 800f4b8:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gacEthernetLinkStatus);
 800f4ba:	494f      	ldr	r1, [pc, #316]	; (800f5f8 <getSystemDataString+0x2b4>)
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f003 fb69 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7f0 fe9e 	bl	8000204 <strlen>
 800f4c8:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gacMBDataPointsRTU);
 800f4ca:	494f      	ldr	r1, [pc, #316]	; (800f608 <getSystemDataString+0x2c4>)
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f003 fb61 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f7f0 fe96 	bl	8000204 <strlen>
 800f4d8:	5226      	strh	r6, [r4, r0]
			if((float)gfInputSupplyVoltage < 9.00f)
 800f4da:	4b62      	ldr	r3, [pc, #392]	; (800f664 <getSystemDataString+0x320>)
 800f4dc:	ed93 7a00 	vldr	s14, [r3]
 800f4e0:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 800f4e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ec:	d571      	bpl.n	800f5d2 <getSystemDataString+0x28e>
				strcat((char *)systemPayload,(char * )gcBatterySupplyVoltage);
 800f4ee:	495e      	ldr	r1, [pc, #376]	; (800f668 <getSystemDataString+0x324>)
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f003 fb4f 	bl	8012b94 <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	f7f0 fe84 	bl	8000204 <strlen>
 800f4fc:	4b4b      	ldr	r3, [pc, #300]	; (800f62c <getSystemDataString+0x2e8>)
 800f4fe:	881b      	ldrh	r3, [r3, #0]
 800f500:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gacModbusStatusRTU);
 800f502:	495a      	ldr	r1, [pc, #360]	; (800f66c <getSystemDataString+0x328>)
 800f504:	4620      	mov	r0, r4
 800f506:	f003 fb45 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f50a:	4620      	mov	r0, r4
 800f50c:	f7f0 fe7a 	bl	8000204 <strlen>
 800f510:	4b46      	ldr	r3, [pc, #280]	; (800f62c <getSystemDataString+0x2e8>)
 800f512:	881d      	ldrh	r5, [r3, #0]
 800f514:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,"RT,");
 800f516:	4620      	mov	r0, r4
 800f518:	f7f0 fe74 	bl	8000204 <strlen>
 800f51c:	4603      	mov	r3, r0
 800f51e:	4a54      	ldr	r2, [pc, #336]	; (800f670 <getSystemDataString+0x32c>)
 800f520:	6810      	ldr	r0, [r2, #0]
 800f522:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f524:	4620      	mov	r0, r4
 800f526:	f7f0 fe6d 	bl	8000204 <strlen>
 800f52a:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )agpsLastLocationDataFormatted);
 800f52c:	4951      	ldr	r1, [pc, #324]	; (800f674 <getSystemDataString+0x330>)
 800f52e:	4620      	mov	r0, r4
 800f530:	f003 fb30 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f534:	4620      	mov	r0, r4
 800f536:	f7f0 fe65 	bl	8000204 <strlen>
 800f53a:	5225      	strh	r5, [r4, r0]
			if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 800f53c:	4b37      	ldr	r3, [pc, #220]	; (800f61c <getSystemDataString+0x2d8>)
 800f53e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f542:	2b00      	cmp	r3, #0
 800f544:	d050      	beq.n	800f5e8 <getSystemDataString+0x2a4>
				strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 800f546:	494c      	ldr	r1, [pc, #304]	; (800f678 <getSystemDataString+0x334>)
 800f548:	4620      	mov	r0, r4
 800f54a:	f003 fb23 	bl	8012b94 <strcat>
			u32TempVar = gu32GSMConfigCheckTimer / 1000;
 800f54e:	4b4b      	ldr	r3, [pc, #300]	; (800f67c <getSystemDataString+0x338>)
 800f550:	681d      	ldr	r5, [r3, #0]
 800f552:	4b4b      	ldr	r3, [pc, #300]	; (800f680 <getSystemDataString+0x33c>)
 800f554:	fba3 3505 	umull	r3, r5, r3, r5
 800f558:	09ad      	lsrs	r5, r5, #6
 800f55a:	4b4a      	ldr	r3, [pc, #296]	; (800f684 <getSystemDataString+0x340>)
 800f55c:	601d      	str	r5, [r3, #0]
			memset(temp_array, 0, sizeof(temp_array));
 800f55e:	2232      	movs	r2, #50	; 0x32
 800f560:	2100      	movs	r1, #0
 800f562:	a801      	add	r0, sp, #4
 800f564:	f003 faa2 	bl	8012aac <memset>
			itoa(u32TempVar, temp_array, 10);
 800f568:	220a      	movs	r2, #10
 800f56a:	a901      	add	r1, sp, #4
 800f56c:	4628      	mov	r0, r5
 800f56e:	f003 f813 	bl	8012598 <itoa>
			strcat((char *)systemPayload,(char * )",ConfigCheckTime ");
 800f572:	4620      	mov	r0, r4
 800f574:	f7f0 fe46 	bl	8000204 <strlen>
 800f578:	4607      	mov	r7, r0
 800f57a:	1826      	adds	r6, r4, r0
 800f57c:	4d42      	ldr	r5, [pc, #264]	; (800f688 <getSystemDataString+0x344>)
 800f57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f580:	51e0      	str	r0, [r4, r7]
 800f582:	6071      	str	r1, [r6, #4]
 800f584:	60b2      	str	r2, [r6, #8]
 800f586:	60f3      	str	r3, [r6, #12]
 800f588:	882b      	ldrh	r3, [r5, #0]
 800f58a:	8233      	strh	r3, [r6, #16]
			strcat((char *)systemPayload,(char * )temp_array);
 800f58c:	a901      	add	r1, sp, #4
 800f58e:	4620      	mov	r0, r4
 800f590:	f003 fb00 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f594:	4620      	mov	r0, r4
 800f596:	f7f0 fe35 	bl	8000204 <strlen>
 800f59a:	4b24      	ldr	r3, [pc, #144]	; (800f62c <getSystemDataString+0x2e8>)
 800f59c:	881d      	ldrh	r5, [r3, #0]
 800f59e:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,gau8TempMBRTUPayloadString);
 800f5a0:	493a      	ldr	r1, [pc, #232]	; (800f68c <getSystemDataString+0x348>)
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f003 faf6 	bl	8012b94 <strcat>
			strcat((char *)systemPayload,(char * )"0,0");	// Added for buffer identification
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f7f0 fe2b 	bl	8000204 <strlen>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	4a37      	ldr	r2, [pc, #220]	; (800f690 <getSystemDataString+0x34c>)
 800f5b2:	6810      	ldr	r0, [r2, #0]
 800f5b4:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f7f0 fe24 	bl	8000204 <strlen>
 800f5bc:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )END_OF_FRAME);
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f7f0 fe20 	bl	8000204 <strlen>
 800f5c4:	4b33      	ldr	r3, [pc, #204]	; (800f694 <getSystemDataString+0x350>)
 800f5c6:	881b      	ldrh	r3, [r3, #0]
 800f5c8:	5223      	strh	r3, [r4, r0]
			gu32TempLoopCounter = 0;
 800f5ca:	4b12      	ldr	r3, [pc, #72]	; (800f614 <getSystemDataString+0x2d0>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	615a      	str	r2, [r3, #20]
		return systemPayload;
 800f5d0:	e6f4      	b.n	800f3bc <getSystemDataString+0x78>
				strcat((char *)systemPayload,(char * )gcSystemSupplyVoltage);
 800f5d2:	4931      	ldr	r1, [pc, #196]	; (800f698 <getSystemDataString+0x354>)
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	f003 fadd 	bl	8012b94 <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7f0 fe12 	bl	8000204 <strlen>
 800f5e0:	4b12      	ldr	r3, [pc, #72]	; (800f62c <getSystemDataString+0x2e8>)
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	5223      	strh	r3, [r4, r0]
 800f5e6:	e78c      	b.n	800f502 <getSystemDataString+0x1be>
				strcat((char *)systemPayload,gpu8Norssi);
 800f5e8:	4b0e      	ldr	r3, [pc, #56]	; (800f624 <getSystemDataString+0x2e0>)
 800f5ea:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f003 fad0 	bl	8012b94 <strcat>
 800f5f4:	e7ab      	b.n	800f54e <getSystemDataString+0x20a>
 800f5f6:	bf00      	nop
 800f5f8:	2000fdc0 	.word	0x2000fdc0
 800f5fc:	20002964 	.word	0x20002964
 800f600:	2000fdb8 	.word	0x2000fdb8
 800f604:	20003b24 	.word	0x20003b24
 800f608:	2000fda8 	.word	0x2000fda8
 800f60c:	20003aec 	.word	0x20003aec
 800f610:	20003b10 	.word	0x20003b10
 800f614:	2000401c 	.word	0x2000401c
 800f618:	20003638 	.word	0x20003638
 800f61c:	2000d5f0 	.word	0x2000d5f0
 800f620:	2000292c 	.word	0x2000292c
 800f624:	20001e38 	.word	0x20001e38
 800f628:	0801c7ec 	.word	0x0801c7ec
 800f62c:	0801c738 	.word	0x0801c738
 800f630:	2000748c 	.word	0x2000748c
 800f634:	0801c858 	.word	0x0801c858
 800f638:	0801c6cc 	.word	0x0801c6cc
 800f63c:	20002980 	.word	0x20002980
 800f640:	0801c7f8 	.word	0x0801c7f8
 800f644:	20002978 	.word	0x20002978
 800f648:	20002970 	.word	0x20002970
 800f64c:	0801c718 	.word	0x0801c718
 800f650:	20002988 	.word	0x20002988
 800f654:	0801c7a4 	.word	0x0801c7a4
 800f658:	20002990 	.word	0x20002990
 800f65c:	20002998 	.word	0x20002998
 800f660:	0801c7fc 	.word	0x0801c7fc
 800f664:	20004290 	.word	0x20004290
 800f668:	2000fd9c 	.word	0x2000fd9c
 800f66c:	2000402c 	.word	0x2000402c
 800f670:	0801c860 	.word	0x0801c860
 800f674:	20001ef0 	.word	0x20001ef0
 800f678:	2000d686 	.word	0x2000d686
 800f67c:	200029a8 	.word	0x200029a8
 800f680:	10624dd3 	.word	0x10624dd3
 800f684:	2000fda4 	.word	0x2000fda4
 800f688:	0801c864 	.word	0x0801c864
 800f68c:	200010f0 	.word	0x200010f0
 800f690:	0801c8a0 	.word	0x0801c8a0
 800f694:	0801c844 	.word	0x0801c844
 800f698:	2000fdb0 	.word	0x2000fdb0

0800f69c <enqueue>:
* <hr>
*
*******************************************************************************/
void enqueue(strctQUEUE * queue,char * data)
{
	if(data != NULL)
 800f69c:	b381      	cbz	r1, 800f700 <enqueue+0x64>
{
 800f69e:	b570      	push	{r4, r5, r6, lr}
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	460d      	mov	r5, r1
	{
		if(queue->head >= (MAX_QUEUE_SIZE))
 800f6a4:	6803      	ldr	r3, [r0, #0]
 800f6a6:	2b09      	cmp	r3, #9
 800f6a8:	dd01      	ble.n	800f6ae <enqueue+0x12>
		{
			/*Queue Overflow */
//			queue->head = 0;
			/* Added For Buffer */
			queue->head = MAX_QUEUE_SIZE - 1;
 800f6aa:	2309      	movs	r3, #9
 800f6ac:	6003      	str	r3, [r0, #0]
		}
		/* If queue has data overwrite it */
		if(queue->data[queue->head] != NULL)
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	3302      	adds	r3, #2
 800f6b2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800f6b6:	b1e3      	cbz	r3, 800f6f2 <enqueue+0x56>
		{
			GSMQueueFullFlag = 1;
 800f6b8:	4b12      	ldr	r3, [pc, #72]	; (800f704 <enqueue+0x68>)
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	701a      	strb	r2, [r3, #0]
			memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 800f6be:	4e12      	ldr	r6, [pc, #72]	; (800f708 <enqueue+0x6c>)
 800f6c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f003 f9f0 	bl	8012aac <memset>
			strcpy((char *)FlashStr.cSFlashWriteData,(char *)gsmPayload.data[gsmPayload.head]);
 800f6cc:	4a0f      	ldr	r2, [pc, #60]	; (800f70c <enqueue+0x70>)
 800f6ce:	6813      	ldr	r3, [r2, #0]
 800f6d0:	3302      	adds	r3, #2
 800f6d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f003 fa78 	bl	8012bcc <strcpy>
			free(queue->data[queue->head]);
 800f6dc:	6823      	ldr	r3, [r4, #0]
 800f6de:	3302      	adds	r3, #2
 800f6e0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f6e4:	f002 ff62 	bl	80125ac <free>
			queue->data[queue->head] = NULL;
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	3302      	adds	r3, #2
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		queue->data[queue->head]= data;
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	1c9a      	adds	r2, r3, #2
 800f6f6:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
		queue->head++;
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	6023      	str	r3, [r4, #0]
	else
	{
		/* Log Error */
		//Error_Callback(enmERROR_ENQUEUE);
	}
}
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	2000427c 	.word	0x2000427c
 800f708:	20011d7a 	.word	0x20011d7a
 800f70c:	2000e760 	.word	0x2000e760

0800f710 <dequeue>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void dequeue(strctQUEUE * queue)
{
 800f710:	b510      	push	{r4, lr}
 800f712:	4604      	mov	r4, r0
	/* After data is uploaded free the pointer in queue->data */
    if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 800f714:	6843      	ldr	r3, [r0, #4]
 800f716:	b90b      	cbnz	r3, 800f71c <dequeue+0xc>
 800f718:	6802      	ldr	r2, [r0, #0]
 800f71a:	b112      	cbz	r2, 800f722 <dequeue+0x12>
 800f71c:	6822      	ldr	r2, [r4, #0]
 800f71e:	4293      	cmp	r3, r2
 800f720:	d10e      	bne.n	800f740 <dequeue+0x30>
    {
       // printf("Queue is Empty \n");
    	if(queue->data[queue->tail] != NULL)
 800f722:	3302      	adds	r3, #2
 800f724:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f728:	b130      	cbz	r0, 800f738 <dequeue+0x28>
    	{
            free(queue->data[queue->tail]);
 800f72a:	f002 ff3f 	bl	80125ac <free>
            queue->data[queue->tail] = NULL;
 800f72e:	6863      	ldr	r3, [r4, #4]
 800f730:	3302      	adds	r3, #2
 800f732:	2200      	movs	r2, #0
 800f734:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    	}
    	queue->tail = 0;
 800f738:	2300      	movs	r3, #0
 800f73a:	6063      	str	r3, [r4, #4]
    	queue->head = 0;
 800f73c:	6023      	str	r3, [r4, #0]
        	queue->tail = 0;
        	queue->head = 0;
        }
        if(queue->tail > (MAX_QUEUE_SIZE-1)) queue->tail=0;
    }
}
 800f73e:	bd10      	pop	{r4, pc}
        free(queue->data[queue->tail]);
 800f740:	3302      	adds	r3, #2
 800f742:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f746:	f002 ff31 	bl	80125ac <free>
        queue->data[queue->tail] = NULL;
 800f74a:	6863      	ldr	r3, [r4, #4]
 800f74c:	1c9a      	adds	r2, r3, #2
 800f74e:	2100      	movs	r1, #0
 800f750:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
        queue->tail++;
 800f754:	3301      	adds	r3, #1
 800f756:	6063      	str	r3, [r4, #4]
        if(queue->tail == queue->head)
 800f758:	6822      	ldr	r2, [r4, #0]
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d005      	beq.n	800f76a <dequeue+0x5a>
        if(queue->tail > (MAX_QUEUE_SIZE-1)) queue->tail=0;
 800f75e:	6863      	ldr	r3, [r4, #4]
 800f760:	2b09      	cmp	r3, #9
 800f762:	ddec      	ble.n	800f73e <dequeue+0x2e>
 800f764:	2300      	movs	r3, #0
 800f766:	6063      	str	r3, [r4, #4]
}
 800f768:	e7e9      	b.n	800f73e <dequeue+0x2e>
        	queue->tail = 0;
 800f76a:	6061      	str	r1, [r4, #4]
        	queue->head = 0;
 800f76c:	6021      	str	r1, [r4, #0]
 800f76e:	e7f6      	b.n	800f75e <dequeue+0x4e>

0800f770 <isQueueEmpty>:
* <hr>
*
*******************************************************************************/
uint32_t isQueueEmpty(strctQUEUE * queue)
{
	return((queue->head) == (queue->tail));
 800f770:	6802      	ldr	r2, [r0, #0]
 800f772:	6840      	ldr	r0, [r0, #4]
}
 800f774:	4282      	cmp	r2, r0
 800f776:	bf14      	ite	ne
 800f778:	2000      	movne	r0, #0
 800f77a:	2001      	moveq	r0, #1
 800f77c:	4770      	bx	lr
	...

0800f780 <verifyNetworkConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyNetworkConfigData(void)
{
 800f780:	b510      	push	{r4, lr}
	/*Log Errors Related to */
	if(atoi(gau8ConfigNewtorkIsEnabled) > 2)
 800f782:	4858      	ldr	r0, [pc, #352]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f784:	f002 fec8 	bl	8012518 <atoi>
 800f788:	2802      	cmp	r0, #2
 800f78a:	dd62      	ble.n	800f852 <verifyNetworkConfigData+0xd2>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWISENABLED);
 800f78c:	4a55      	ldr	r2, [pc, #340]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f78e:	6853      	ldr	r3, [r2, #4]
 800f790:	f043 0302 	orr.w	r3, r3, #2
 800f794:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWISENABLED);

	if(strlen(gau8ConfigNewtorkServerURL) > 150)
 800f796:	4854      	ldr	r0, [pc, #336]	; (800f8e8 <verifyNetworkConfigData+0x168>)
 800f798:	f7f0 fd34 	bl	8000204 <strlen>
 800f79c:	2896      	cmp	r0, #150	; 0x96
 800f79e:	d95e      	bls.n	800f85e <verifyNetworkConfigData+0xde>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSERURLLEN);
 800f7a0:	4a50      	ldr	r2, [pc, #320]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f7a2:	6853      	ldr	r3, [r2, #4]
 800f7a4:	f043 0304 	orr.w	r3, r3, #4
 800f7a8:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSERURLLEN);

	if(strlen(gau8ConfigNewtorkConfigURL) > 150)
 800f7aa:	4850      	ldr	r0, [pc, #320]	; (800f8ec <verifyNetworkConfigData+0x16c>)
 800f7ac:	f7f0 fd2a 	bl	8000204 <strlen>
 800f7b0:	2896      	cmp	r0, #150	; 0x96
 800f7b2:	d95a      	bls.n	800f86a <verifyNetworkConfigData+0xea>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFURLLEN);
 800f7b4:	4a4b      	ldr	r2, [pc, #300]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f7b6:	6853      	ldr	r3, [r2, #4]
 800f7b8:	f043 0308 	orr.w	r3, r3, #8
 800f7bc:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWCONFURLLEN);

	if(strlen(gau8ConfigNewtorkAPN) > 50)
 800f7be:	484c      	ldr	r0, [pc, #304]	; (800f8f0 <verifyNetworkConfigData+0x170>)
 800f7c0:	f7f0 fd20 	bl	8000204 <strlen>
 800f7c4:	2832      	cmp	r0, #50	; 0x32
 800f7c6:	d956      	bls.n	800f876 <verifyNetworkConfigData+0xf6>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWAPN);
 800f7c8:	4a46      	ldr	r2, [pc, #280]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f7ca:	6853      	ldr	r3, [r2, #4]
 800f7cc:	f043 0310 	orr.w	r3, r3, #16
 800f7d0:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWAPN);

	if(atoi(gau8ConfigNewtorkUpFreqSupply) > 10000000)
 800f7d2:	4848      	ldr	r0, [pc, #288]	; (800f8f4 <verifyNetworkConfigData+0x174>)
 800f7d4:	f002 fea0 	bl	8012518 <atoi>
 800f7d8:	4b47      	ldr	r3, [pc, #284]	; (800f8f8 <verifyNetworkConfigData+0x178>)
 800f7da:	4298      	cmp	r0, r3
 800f7dc:	dd51      	ble.n	800f882 <verifyNetworkConfigData+0x102>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWUPFREQSUPPLY);
 800f7de:	4a41      	ldr	r2, [pc, #260]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f7e0:	6853      	ldr	r3, [r2, #4]
 800f7e2:	f043 0320 	orr.w	r3, r3, #32
 800f7e6:	6053      	str	r3, [r2, #4]
	{
		gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQSUPPLY);
	}

	if(atoi(gau8ConfigNewtorkUpFreqBatt) > 10000000)
 800f7e8:	4844      	ldr	r0, [pc, #272]	; (800f8fc <verifyNetworkConfigData+0x17c>)
 800f7ea:	f002 fe95 	bl	8012518 <atoi>
 800f7ee:	4b42      	ldr	r3, [pc, #264]	; (800f8f8 <verifyNetworkConfigData+0x178>)
 800f7f0:	4298      	cmp	r0, r3
 800f7f2:	dd52      	ble.n	800f89a <verifyNetworkConfigData+0x11a>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWUPFREQBATT);
 800f7f4:	4a3b      	ldr	r2, [pc, #236]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f7f6:	6853      	ldr	r3, [r2, #4]
 800f7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7fc:	6053      	str	r3, [r2, #4]
	else
	{
		gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQBATT);
	}
	if(atoi(gau8ConfigNewtorkType) > 2)
 800f7fe:	4840      	ldr	r0, [pc, #256]	; (800f900 <verifyNetworkConfigData+0x180>)
 800f800:	f002 fe8a 	bl	8012518 <atoi>
 800f804:	2802      	cmp	r0, #2
 800f806:	dd54      	ble.n	800f8b2 <verifyNetworkConfigData+0x132>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWTYPE);
 800f808:	4a36      	ldr	r2, [pc, #216]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f80a:	6853      	ldr	r3, [r2, #4]
 800f80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f810:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWTYPE);

	if(atoi(gau8ConfigNewtorkGPSEnable) > 1)
 800f812:	483c      	ldr	r0, [pc, #240]	; (800f904 <verifyNetworkConfigData+0x184>)
 800f814:	f002 fe80 	bl	8012518 <atoi>
 800f818:	2801      	cmp	r0, #1
 800f81a:	dd50      	ble.n	800f8be <verifyNetworkConfigData+0x13e>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWGPSEN);
 800f81c:	4a31      	ldr	r2, [pc, #196]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f81e:	6853      	ldr	r3, [r2, #4]
 800f820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f824:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWGPSEN);

	if(atoi(gau8ConfigNewtorkSendData) > 1)
 800f826:	4838      	ldr	r0, [pc, #224]	; (800f908 <verifyNetworkConfigData+0x188>)
 800f828:	f002 fe76 	bl	8012518 <atoi>
 800f82c:	2801      	cmp	r0, #1
 800f82e:	dd4c      	ble.n	800f8ca <verifyNetworkConfigData+0x14a>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSENDDATAEN);
 800f830:	4a2c      	ldr	r2, [pc, #176]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f832:	6853      	ldr	r3, [r2, #4]
 800f834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f838:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATAEN);

	if(atoi(gau8ConfigNewtorkSendDataDisableTime) > 10000000)
 800f83a:	4834      	ldr	r0, [pc, #208]	; (800f90c <verifyNetworkConfigData+0x18c>)
 800f83c:	f002 fe6c 	bl	8012518 <atoi>
 800f840:	4b2d      	ldr	r3, [pc, #180]	; (800f8f8 <verifyNetworkConfigData+0x178>)
 800f842:	4298      	cmp	r0, r3
 800f844:	dd47      	ble.n	800f8d6 <verifyNetworkConfigData+0x156>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSENDDATADISABLE);
 800f846:	4a27      	ldr	r2, [pc, #156]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f848:	6853      	ldr	r3, [r2, #4]
 800f84a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f84e:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATADISABLE);

}
 800f850:	bd10      	pop	{r4, pc}
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWISENABLED);
 800f852:	4a24      	ldr	r2, [pc, #144]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f854:	6853      	ldr	r3, [r2, #4]
 800f856:	f023 0302 	bic.w	r3, r3, #2
 800f85a:	6053      	str	r3, [r2, #4]
 800f85c:	e79b      	b.n	800f796 <verifyNetworkConfigData+0x16>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSERURLLEN);
 800f85e:	4a21      	ldr	r2, [pc, #132]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f860:	6853      	ldr	r3, [r2, #4]
 800f862:	f023 0304 	bic.w	r3, r3, #4
 800f866:	6053      	str	r3, [r2, #4]
 800f868:	e79f      	b.n	800f7aa <verifyNetworkConfigData+0x2a>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWCONFURLLEN);
 800f86a:	4a1e      	ldr	r2, [pc, #120]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f86c:	6853      	ldr	r3, [r2, #4]
 800f86e:	f023 0308 	bic.w	r3, r3, #8
 800f872:	6053      	str	r3, [r2, #4]
 800f874:	e7a3      	b.n	800f7be <verifyNetworkConfigData+0x3e>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWAPN);
 800f876:	4a1b      	ldr	r2, [pc, #108]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f878:	6853      	ldr	r3, [r2, #4]
 800f87a:	f023 0310 	bic.w	r3, r3, #16
 800f87e:	6053      	str	r3, [r2, #4]
 800f880:	e7a7      	b.n	800f7d2 <verifyNetworkConfigData+0x52>
		gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
 800f882:	4c18      	ldr	r4, [pc, #96]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f884:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800f888:	f002 fe46 	bl	8012518 <atoi>
 800f88c:	4b18      	ldr	r3, [pc, #96]	; (800f8f0 <verifyNetworkConfigData+0x170>)
 800f88e:	6358      	str	r0, [r3, #52]	; 0x34
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQSUPPLY);
 800f890:	6863      	ldr	r3, [r4, #4]
 800f892:	f023 0320 	bic.w	r3, r3, #32
 800f896:	6063      	str	r3, [r4, #4]
 800f898:	e7a6      	b.n	800f7e8 <verifyNetworkConfigData+0x68>
		gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
 800f89a:	4c12      	ldr	r4, [pc, #72]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f89c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800f8a0:	f002 fe3a 	bl	8012518 <atoi>
 800f8a4:	4b12      	ldr	r3, [pc, #72]	; (800f8f0 <verifyNetworkConfigData+0x170>)
 800f8a6:	6398      	str	r0, [r3, #56]	; 0x38
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQBATT);
 800f8a8:	6863      	ldr	r3, [r4, #4]
 800f8aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8ae:	6063      	str	r3, [r4, #4]
 800f8b0:	e7a5      	b.n	800f7fe <verifyNetworkConfigData+0x7e>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWTYPE);
 800f8b2:	4a0c      	ldr	r2, [pc, #48]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f8b4:	6853      	ldr	r3, [r2, #4]
 800f8b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8ba:	6053      	str	r3, [r2, #4]
 800f8bc:	e7a9      	b.n	800f812 <verifyNetworkConfigData+0x92>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWGPSEN);
 800f8be:	4a09      	ldr	r2, [pc, #36]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f8c0:	6853      	ldr	r3, [r2, #4]
 800f8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8c6:	6053      	str	r3, [r2, #4]
 800f8c8:	e7ad      	b.n	800f826 <verifyNetworkConfigData+0xa6>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATAEN);
 800f8ca:	4a06      	ldr	r2, [pc, #24]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f8cc:	6853      	ldr	r3, [r2, #4]
 800f8ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8d2:	6053      	str	r3, [r2, #4]
 800f8d4:	e7b1      	b.n	800f83a <verifyNetworkConfigData+0xba>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATADISABLE);
 800f8d6:	4a03      	ldr	r2, [pc, #12]	; (800f8e4 <verifyNetworkConfigData+0x164>)
 800f8d8:	6853      	ldr	r3, [r2, #4]
 800f8da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8de:	6053      	str	r3, [r2, #4]
}
 800f8e0:	e7b6      	b.n	800f850 <verifyNetworkConfigData+0xd0>
 800f8e2:	bf00      	nop
 800f8e4:	20004034 	.word	0x20004034
 800f8e8:	2000403c 	.word	0x2000403c
 800f8ec:	200040d4 	.word	0x200040d4
 800f8f0:	20001fb8 	.word	0x20001fb8
 800f8f4:	2000416c 	.word	0x2000416c
 800f8f8:	00989680 	.word	0x00989680
 800f8fc:	20004178 	.word	0x20004178
 800f900:	20004184 	.word	0x20004184
 800f904:	20004188 	.word	0x20004188
 800f908:	2000418c 	.word	0x2000418c
 800f90c:	20004190 	.word	0x20004190

0800f910 <verifyModbus485ConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyModbus485ConfigData(void)
{
 800f910:	b538      	push	{r3, r4, r5, lr}
   /* Log Errors Related to Modbus485 Configuration */
	uint32_t u32LoopCounter = 0;

	if(atoi(gau8ConfigModbus485IsEnabled) > 2)
 800f912:	48a5      	ldr	r0, [pc, #660]	; (800fba8 <verifyModbus485ConfigData+0x298>)
 800f914:	f002 fe00 	bl	8012518 <atoi>
 800f918:	2802      	cmp	r0, #2
 800f91a:	f340 8090 	ble.w	800fa3e <verifyModbus485ConfigData+0x12e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ISENABLED);
 800f91e:	4aa3      	ldr	r2, [pc, #652]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800f920:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f924:	f043 0302 	orr.w	r3, r3, #2
 800f928:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ISENABLED);

	if((atoi(gau8ConfigModbus485SlaveID) <= 0) | (atoi(gau8ConfigModbus485SlaveID) > 255)) // 1 to 255
 800f92c:	4da0      	ldr	r5, [pc, #640]	; (800fbb0 <verifyModbus485ConfigData+0x2a0>)
 800f92e:	4628      	mov	r0, r5
 800f930:	f002 fdf2 	bl	8012518 <atoi>
 800f934:	4604      	mov	r4, r0
 800f936:	4628      	mov	r0, r5
 800f938:	f002 fdee 	bl	8012518 <atoi>
 800f93c:	28ff      	cmp	r0, #255	; 0xff
 800f93e:	bfd4      	ite	le
 800f940:	2300      	movle	r3, #0
 800f942:	2301      	movgt	r3, #1
 800f944:	2c00      	cmp	r4, #0
 800f946:	bfd8      	it	le
 800f948:	f043 0301 	orrle.w	r3, r3, #1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d07e      	beq.n	800fa4e <verifyModbus485ConfigData+0x13e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485SLAVEID);
 800f950:	f5a5 72b8 	sub.w	r2, r5, #368	; 0x170
 800f954:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f958:	f043 0304 	orr.w	r3, r3, #4
 800f95c:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485SLAVEID);

	if(atoi(gau8ConfigModbus485Termination) > 1)
 800f960:	4894      	ldr	r0, [pc, #592]	; (800fbb4 <verifyModbus485ConfigData+0x2a4>)
 800f962:	f002 fdd9 	bl	8012518 <atoi>
 800f966:	2801      	cmp	r0, #1
 800f968:	dd79      	ble.n	800fa5e <verifyModbus485ConfigData+0x14e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485TERMINATE);
 800f96a:	4a90      	ldr	r2, [pc, #576]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800f96c:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f970:	f043 0308 	orr.w	r3, r3, #8
 800f974:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485TERMINATE);

	if(atoi(gau8ConfigModbus485DataPoints) > CONFIG_MB485_MAXPARAMS)
 800f978:	488f      	ldr	r0, [pc, #572]	; (800fbb8 <verifyModbus485ConfigData+0x2a8>)
 800f97a:	f002 fdcd 	bl	8012518 <atoi>
 800f97e:	2808      	cmp	r0, #8
 800f980:	dd75      	ble.n	800fa6e <verifyModbus485ConfigData+0x15e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
 800f982:	4a8a      	ldr	r2, [pc, #552]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800f984:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f988:	f043 0310 	orr.w	r3, r3, #16
 800f98c:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);

	if(atoi(gau8ConfigModbus485UARTBR) > 115200)
 800f990:	488a      	ldr	r0, [pc, #552]	; (800fbbc <verifyModbus485ConfigData+0x2ac>)
 800f992:	f002 fdc1 	bl	8012518 <atoi>
 800f996:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
 800f99a:	dd70      	ble.n	800fa7e <verifyModbus485ConfigData+0x16e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTBR);
 800f99c:	4a83      	ldr	r2, [pc, #524]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800f99e:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f9a2:	f043 0320 	orr.w	r3, r3, #32
 800f9a6:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTBR);

	if(atoi(gau8ConfigModbus485UARTStartBit) > 3)
 800f9aa:	4885      	ldr	r0, [pc, #532]	; (800fbc0 <verifyModbus485ConfigData+0x2b0>)
 800f9ac:	f002 fdb4 	bl	8012518 <atoi>
 800f9b0:	2803      	cmp	r0, #3
 800f9b2:	dd6c      	ble.n	800fa8e <verifyModbus485ConfigData+0x17e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTSTARTBIT);
 800f9b4:	4a7d      	ldr	r2, [pc, #500]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800f9b6:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9be:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTARTBIT);

	if(atoi(gau8ConfigModbus485UARTStopBit) > 3)
 800f9c2:	4880      	ldr	r0, [pc, #512]	; (800fbc4 <verifyModbus485ConfigData+0x2b4>)
 800f9c4:	f002 fda8 	bl	8012518 <atoi>
 800f9c8:	2803      	cmp	r0, #3
 800f9ca:	dd68      	ble.n	800fa9e <verifyModbus485ConfigData+0x18e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTSTOPBIT);
 800f9cc:	4a77      	ldr	r2, [pc, #476]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800f9ce:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9d6:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(atoi(gau8ConfigModbus485PollingTime) > 1000000)
 800f9da:	487b      	ldr	r0, [pc, #492]	; (800fbc8 <verifyModbus485ConfigData+0x2b8>)
 800f9dc:	f002 fd9c 	bl	8012518 <atoi>
 800f9e0:	4b7a      	ldr	r3, [pc, #488]	; (800fbcc <verifyModbus485ConfigData+0x2bc>)
 800f9e2:	4298      	cmp	r0, r3
 800f9e4:	dd63      	ble.n	800faae <verifyModbus485ConfigData+0x19e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
 800f9e6:	4a71      	ldr	r2, [pc, #452]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800f9e8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800f9ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f9f0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	{
		gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
	}

	if(atoi(gau8ConfigModbus485ResponseTime) > 1000000)
 800f9f4:	4876      	ldr	r0, [pc, #472]	; (800fbd0 <verifyModbus485ConfigData+0x2c0>)
 800f9f6:	f002 fd8f 	bl	8012518 <atoi>
 800f9fa:	4b74      	ldr	r3, [pc, #464]	; (800fbcc <verifyModbus485ConfigData+0x2bc>)
 800f9fc:	4298      	cmp	r0, r3
 800f9fe:	dd64      	ble.n	800faca <verifyModbus485ConfigData+0x1ba>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485RESPTIME);
 800fa00:	4a6a      	ldr	r2, [pc, #424]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa02:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa0a:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 800fa0e:	2400      	movs	r4, #0
	else
	{	gu32ModbusResponseTimeout = atoi(gau8ConfigModbus485ResponseTime);
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
	}
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800fa10:	4869      	ldr	r0, [pc, #420]	; (800fbb8 <verifyModbus485ConfigData+0x2a8>)
 800fa12:	f002 fd81 	bl	8012518 <atoi>
 800fa16:	42a0      	cmp	r0, r4
 800fa18:	d96c      	bls.n	800faf4 <verifyModbus485ConfigData+0x1e4>
	{
		if((gau32ConfigModbus485Address[u32LoopCounter] == 0) || (gau32ConfigModbus485Address[u32LoopCounter] > 65535))
 800fa1a:	4b6e      	ldr	r3, [pc, #440]	; (800fbd4 <verifyModbus485ConfigData+0x2c4>)
 800fa1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fa20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa22:	3b01      	subs	r3, #1
 800fa24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d85c      	bhi.n	800fae6 <verifyModbus485ConfigData+0x1d6>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ADDRESS);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ADDRESS);
 800fa2c:	4a5f      	ldr	r2, [pc, #380]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa2e:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa36:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800fa3a:	3401      	adds	r4, #1
 800fa3c:	e7e8      	b.n	800fa10 <verifyModbus485ConfigData+0x100>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ISENABLED);
 800fa3e:	4a5b      	ldr	r2, [pc, #364]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa40:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa44:	f023 0302 	bic.w	r3, r3, #2
 800fa48:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800fa4c:	e76e      	b.n	800f92c <verifyModbus485ConfigData+0x1c>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485SLAVEID);
 800fa4e:	4a57      	ldr	r2, [pc, #348]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa50:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa54:	f023 0304 	bic.w	r3, r3, #4
 800fa58:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800fa5c:	e780      	b.n	800f960 <verifyModbus485ConfigData+0x50>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485TERMINATE);
 800fa5e:	4a53      	ldr	r2, [pc, #332]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa60:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa64:	f023 0308 	bic.w	r3, r3, #8
 800fa68:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800fa6c:	e784      	b.n	800f978 <verifyModbus485ConfigData+0x68>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);
 800fa6e:	4a4f      	ldr	r2, [pc, #316]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa70:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa74:	f023 0310 	bic.w	r3, r3, #16
 800fa78:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800fa7c:	e788      	b.n	800f990 <verifyModbus485ConfigData+0x80>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTBR);
 800fa7e:	4a4b      	ldr	r2, [pc, #300]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa80:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa84:	f023 0320 	bic.w	r3, r3, #32
 800fa88:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800fa8c:	e78d      	b.n	800f9aa <verifyModbus485ConfigData+0x9a>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTARTBIT);
 800fa8e:	4a47      	ldr	r2, [pc, #284]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fa90:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fa94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa98:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800fa9c:	e791      	b.n	800f9c2 <verifyModbus485ConfigData+0xb2>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);
 800fa9e:	4a43      	ldr	r2, [pc, #268]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800faa0:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800faa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faa8:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800faac:	e795      	b.n	800f9da <verifyModbus485ConfigData+0xca>
		gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
 800faae:	4c3f      	ldr	r4, [pc, #252]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fab0:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 800fab4:	f002 fd30 	bl	8012518 <atoi>
 800fab8:	4b46      	ldr	r3, [pc, #280]	; (800fbd4 <verifyModbus485ConfigData+0x2c4>)
 800faba:	6458      	str	r0, [r3, #68]	; 0x44
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 800fabc:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800fac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fac4:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 800fac8:	e794      	b.n	800f9f4 <verifyModbus485ConfigData+0xe4>
	{	gu32ModbusResponseTimeout = atoi(gau8ConfigModbus485ResponseTime);
 800faca:	4c38      	ldr	r4, [pc, #224]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800facc:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 800fad0:	f002 fd22 	bl	8012518 <atoi>
 800fad4:	4b40      	ldr	r3, [pc, #256]	; (800fbd8 <verifyModbus485ConfigData+0x2c8>)
 800fad6:	6018      	str	r0, [r3, #0]
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
 800fad8:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800fadc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fae0:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 800fae4:	e793      	b.n	800fa0e <verifyModbus485ConfigData+0xfe>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ADDRESS);
 800fae6:	4a31      	ldr	r2, [pc, #196]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fae8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800faec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800faf0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 800faf4:	2400      	movs	r4, #0
	}

	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800faf6:	4830      	ldr	r0, [pc, #192]	; (800fbb8 <verifyModbus485ConfigData+0x2a8>)
 800faf8:	f002 fd0e 	bl	8012518 <atoi>
 800fafc:	42a0      	cmp	r0, r4
 800fafe:	d916      	bls.n	800fb2e <verifyModbus485ConfigData+0x21e>
	{
		if((gau32ConfigModbus485DFunctionCode[u32LoopCounter] == 0) || (gau32ConfigModbus485DFunctionCode[u32LoopCounter] > 5))
 800fb00:	4b34      	ldr	r3, [pc, #208]	; (800fbd4 <verifyModbus485ConfigData+0x2c4>)
 800fb02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fb06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	2b04      	cmp	r3, #4
 800fb0c:	d808      	bhi.n	800fb20 <verifyModbus485ConfigData+0x210>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485FUCNTIONCODE);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485FUCNTIONCODE);
 800fb0e:	4a27      	ldr	r2, [pc, #156]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fb10:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fb14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb18:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800fb1c:	3401      	adds	r4, #1
 800fb1e:	e7ea      	b.n	800faf6 <verifyModbus485ConfigData+0x1e6>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485FUCNTIONCODE);
 800fb20:	4a22      	ldr	r2, [pc, #136]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fb22:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fb26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fb2a:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 800fb2e:	2400      	movs	r4, #0
	}
	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800fb30:	4821      	ldr	r0, [pc, #132]	; (800fbb8 <verifyModbus485ConfigData+0x2a8>)
 800fb32:	f002 fcf1 	bl	8012518 <atoi>
 800fb36:	42a0      	cmp	r0, r4
 800fb38:	d917      	bls.n	800fb6a <verifyModbus485ConfigData+0x25a>
	{
		if((gau32ConfigModbus485NoPoints[u32LoopCounter] == 0) || (gau32ConfigModbus485NoPoints[u32LoopCounter] > 255))
 800fb3a:	4b26      	ldr	r3, [pc, #152]	; (800fbd4 <verifyModbus485ConfigData+0x2c4>)
 800fb3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fb40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb44:	3b01      	subs	r3, #1
 800fb46:	2bfe      	cmp	r3, #254	; 0xfe
 800fb48:	d808      	bhi.n	800fb5c <verifyModbus485ConfigData+0x24c>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);
 800fb4a:	4a18      	ldr	r2, [pc, #96]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fb4c:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fb50:	f023 0310 	bic.w	r3, r3, #16
 800fb54:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800fb58:	3401      	adds	r4, #1
 800fb5a:	e7e9      	b.n	800fb30 <verifyModbus485ConfigData+0x220>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
 800fb5c:	4a13      	ldr	r2, [pc, #76]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fb5e:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fb62:	f043 0310 	orr.w	r3, r3, #16
 800fb66:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	}

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPDEVICE) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPDEVICE);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPDEVICE);
 800fb6a:	4810      	ldr	r0, [pc, #64]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fb6c:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPGATEWAY) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 800fb70:	f423 43a1 	bic.w	r3, r3, #20608	; 0x5080
 800fb74:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198

	if(atoi(gau8ConfigModbusTCPPORT) > 65535)
 800fb78:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
 800fb7c:	f002 fccc 	bl	8012518 <atoi>
 800fb80:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800fb84:	db07      	blt.n	800fb96 <verifyModbus485ConfigData+0x286>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPPORT);
 800fb86:	4a09      	ldr	r2, [pc, #36]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fb88:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fb8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fb90:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);

}
 800fb94:	bd38      	pop	{r3, r4, r5, pc}
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);
 800fb96:	4a05      	ldr	r2, [pc, #20]	; (800fbac <verifyModbus485ConfigData+0x29c>)
 800fb98:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fb9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fba0:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 800fba4:	e7f6      	b.n	800fb94 <verifyModbus485ConfigData+0x284>
 800fba6:	bf00      	nop
 800fba8:	2000419c 	.word	0x2000419c
 800fbac:	20004034 	.word	0x20004034
 800fbb0:	200041a4 	.word	0x200041a4
 800fbb4:	200041ac 	.word	0x200041ac
 800fbb8:	200041b0 	.word	0x200041b0
 800fbbc:	20001ff4 	.word	0x20001ff4
 800fbc0:	200041b4 	.word	0x200041b4
 800fbc4:	200041b8 	.word	0x200041b8
 800fbc8:	200041bc 	.word	0x200041bc
 800fbcc:	000f4240 	.word	0x000f4240
 800fbd0:	200041c4 	.word	0x200041c4
 800fbd4:	20001fb8 	.word	0x20001fb8
 800fbd8:	20003630 	.word	0x20003630

0800fbdc <verifyModbusTCPConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyModbusTCPConfigData(void)
{
 800fbdc:	b510      	push	{r4, lr}
	/* Log Errors Related to Modbus485 Configuration */
	uint32_t u32LoopCounter = 0;

	if(atoi(gau8ConfigModbusTCPIsEnabled) > 2)
 800fbde:	4869      	ldr	r0, [pc, #420]	; (800fd84 <verifyModbusTCPConfigData+0x1a8>)
 800fbe0:	f002 fc9a 	bl	8012518 <atoi>
 800fbe4:	2802      	cmp	r0, #2
 800fbe6:	dd5a      	ble.n	800fc9e <verifyModbusTCPConfigData+0xc2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPISENABLED);
 800fbe8:	4a67      	ldr	r2, [pc, #412]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fbea:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fbee:	f043 0302 	orr.w	r3, r3, #2
 800fbf2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPISENABLED);

	if(atoi(gau8ConfigModbusTCPDataPoints) > CONFIG_MBTCP_MAXPARAMS)
 800fbf6:	4865      	ldr	r0, [pc, #404]	; (800fd8c <verifyModbusTCPConfigData+0x1b0>)
 800fbf8:	f002 fc8e 	bl	8012518 <atoi>
 800fbfc:	2808      	cmp	r0, #8
 800fbfe:	dd56      	ble.n	800fcae <verifyModbusTCPConfigData+0xd2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPDATAPOINTS);
 800fc00:	4a61      	ldr	r2, [pc, #388]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fc02:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fc06:	f043 0304 	orr.w	r3, r3, #4
 800fc0a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPDATAPOINTS);

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPDEVICE) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPDEVICE);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPDEVICE);
 800fc0e:	485e      	ldr	r0, [pc, #376]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fc10:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPGATEWAY) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 800fc14:	f423 43a1 	bic.w	r3, r3, #20608	; 0x5080
 800fc18:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198

	if(atoi(gau8ConfigModbusTCPPORT) > 65535)
 800fc1c:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
 800fc20:	f002 fc7a 	bl	8012518 <atoi>
 800fc24:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800fc28:	db49      	blt.n	800fcbe <verifyModbusTCPConfigData+0xe2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPPORT);
 800fc2a:	4a57      	ldr	r2, [pc, #348]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fc2c:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fc30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fc34:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);

	/*Added on 28-1-2022 */
	if(atoi(gau8ConfigModbusTCPPollingTime) > 1000000)
 800fc38:	4855      	ldr	r0, [pc, #340]	; (800fd90 <verifyModbusTCPConfigData+0x1b4>)
 800fc3a:	f002 fc6d 	bl	8012518 <atoi>
 800fc3e:	4b55      	ldr	r3, [pc, #340]	; (800fd94 <verifyModbusTCPConfigData+0x1b8>)
 800fc40:	4298      	cmp	r0, r3
 800fc42:	dd44      	ble.n	800fcce <verifyModbusTCPConfigData+0xf2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPPOLLTIME);
 800fc44:	4a50      	ldr	r2, [pc, #320]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fc46:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fc4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fc4e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	{
		gu32ModbusTCPPollingTime = atoi(gau8ConfigModbusTCPPollingTime);
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPPOLLTIME);
	}

	if(atoi(gau8ConfigModbusTCPResponseTime) > 1000000)
 800fc52:	4851      	ldr	r0, [pc, #324]	; (800fd98 <verifyModbusTCPConfigData+0x1bc>)
 800fc54:	f002 fc60 	bl	8012518 <atoi>
 800fc58:	4b4e      	ldr	r3, [pc, #312]	; (800fd94 <verifyModbusTCPConfigData+0x1b8>)
 800fc5a:	4298      	cmp	r0, r3
 800fc5c:	dd46      	ble.n	800fcec <verifyModbusTCPConfigData+0x110>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MB485RESPTIME);
 800fc5e:	4a4a      	ldr	r2, [pc, #296]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fc60:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fc64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fc68:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
{
 800fc6c:	2400      	movs	r4, #0
		/* Will not update this field as LWIP TCP stack requires min 3 SEC to update the state */
		//gu32ModbusTCPResponseTimeout = atoi(gau8ConfigModbusTCPResponseTime);
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
	}

	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 800fc6e:	4847      	ldr	r0, [pc, #284]	; (800fd8c <verifyModbusTCPConfigData+0x1b0>)
 800fc70:	f002 fc52 	bl	8012518 <atoi>
 800fc74:	4284      	cmp	r4, r0
 800fc76:	d248      	bcs.n	800fd0a <verifyModbusTCPConfigData+0x12e>
	{
		if((gau32ConfigModbusTCPAddress[u32LoopCounter] == 0) || (gau32ConfigModbusTCPAddress[u32LoopCounter] > 65535))
 800fc78:	4b48      	ldr	r3, [pc, #288]	; (800fd9c <verifyModbusTCPConfigData+0x1c0>)
 800fc7a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fc7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fc82:	3b01      	subs	r3, #1
 800fc84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d837      	bhi.n	800fcfc <verifyModbusTCPConfigData+0x120>
			 * Log Error*/
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPADDRESS);
			break;
		}
		else
			gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPADDRESS);
 800fc8c:	4a3e      	ldr	r2, [pc, #248]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fc8e:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fc92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc96:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 800fc9a:	3401      	adds	r4, #1
 800fc9c:	e7e7      	b.n	800fc6e <verifyModbusTCPConfigData+0x92>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPISENABLED);
 800fc9e:	4a3a      	ldr	r2, [pc, #232]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fca0:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fca4:	f023 0302 	bic.w	r3, r3, #2
 800fca8:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 800fcac:	e7a3      	b.n	800fbf6 <verifyModbusTCPConfigData+0x1a>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPDATAPOINTS);
 800fcae:	4a36      	ldr	r2, [pc, #216]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fcb0:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fcb4:	f023 0304 	bic.w	r3, r3, #4
 800fcb8:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 800fcbc:	e7a7      	b.n	800fc0e <verifyModbusTCPConfigData+0x32>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);
 800fcbe:	4a32      	ldr	r2, [pc, #200]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fcc0:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fcc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcc8:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 800fccc:	e7b4      	b.n	800fc38 <verifyModbusTCPConfigData+0x5c>
		gu32ModbusTCPPollingTime = atoi(gau8ConfigModbusTCPPollingTime);
 800fcce:	4c2e      	ldr	r4, [pc, #184]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fcd0:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 800fcd4:	f002 fc20 	bl	8012518 <atoi>
 800fcd8:	4b30      	ldr	r3, [pc, #192]	; (800fd9c <verifyModbusTCPConfigData+0x1c0>)
 800fcda:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPPOLLTIME);
 800fcde:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800fce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fce6:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
 800fcea:	e7b2      	b.n	800fc52 <verifyModbusTCPConfigData+0x76>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
 800fcec:	4a26      	ldr	r2, [pc, #152]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fcee:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fcf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcf6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 800fcfa:	e7b7      	b.n	800fc6c <verifyModbusTCPConfigData+0x90>
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPADDRESS);
 800fcfc:	4a22      	ldr	r2, [pc, #136]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fcfe:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fd02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd06:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
{
 800fd0a:	2400      	movs	r4, #0
	}

	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 800fd0c:	481f      	ldr	r0, [pc, #124]	; (800fd8c <verifyModbusTCPConfigData+0x1b0>)
 800fd0e:	f002 fc03 	bl	8012518 <atoi>
 800fd12:	4284      	cmp	r4, r0
 800fd14:	d217      	bcs.n	800fd46 <verifyModbusTCPConfigData+0x16a>
	{
		if((gau32ConfigModbusTCPDFunctionCode[u32LoopCounter] == 0) || (gau32ConfigModbusTCPDFunctionCode[u32LoopCounter] > 5))
 800fd16:	4b21      	ldr	r3, [pc, #132]	; (800fd9c <verifyModbusTCPConfigData+0x1c0>)
 800fd18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fd1c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fd20:	3b01      	subs	r3, #1
 800fd22:	2b04      	cmp	r3, #4
 800fd24:	d808      	bhi.n	800fd38 <verifyModbusTCPConfigData+0x15c>
			 * Log Error*/
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPFUNCTIONCODE);
			break;
		}
		else
			gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPFUNCTIONCODE);
 800fd26:	4a18      	ldr	r2, [pc, #96]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fd28:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fd2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd30:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 800fd34:	3401      	adds	r4, #1
 800fd36:	e7e9      	b.n	800fd0c <verifyModbusTCPConfigData+0x130>
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPFUNCTIONCODE);
 800fd38:	4a13      	ldr	r2, [pc, #76]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fd3a:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fd3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fd42:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
{
 800fd46:	2400      	movs	r4, #0
	}
	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 800fd48:	4810      	ldr	r0, [pc, #64]	; (800fd8c <verifyModbusTCPConfigData+0x1b0>)
 800fd4a:	f002 fbe5 	bl	8012518 <atoi>
 800fd4e:	4284      	cmp	r4, r0
 800fd50:	d217      	bcs.n	800fd82 <verifyModbusTCPConfigData+0x1a6>
	{
		if((gau32ConfigModbusTCPNoPoints[u32LoopCounter] == 0) || (gau32ConfigModbusTCPNoPoints[u32LoopCounter] > 255))
 800fd52:	4b12      	ldr	r3, [pc, #72]	; (800fd9c <verifyModbusTCPConfigData+0x1c0>)
 800fd54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fd58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	2bfe      	cmp	r3, #254	; 0xfe
 800fd60:	d808      	bhi.n	800fd74 <verifyModbusTCPConfigData+0x198>
			 * Log Error*/
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPDATALEN);
			break;
		}
		else
			gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPDATALEN);
 800fd62:	4a09      	ldr	r2, [pc, #36]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fd64:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fd68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd6c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 800fd70:	3401      	adds	r4, #1
 800fd72:	e7e9      	b.n	800fd48 <verifyModbusTCPConfigData+0x16c>
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPDATALEN);
 800fd74:	4a04      	ldr	r2, [pc, #16]	; (800fd88 <verifyModbusTCPConfigData+0x1ac>)
 800fd76:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 800fd7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fd7e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	}
}
 800fd82:	bd10      	pop	{r4, pc}
 800fd84:	200041d8 	.word	0x200041d8
 800fd88:	20004034 	.word	0x20004034
 800fd8c:	200041dc 	.word	0x200041dc
 800fd90:	200041e0 	.word	0x200041e0
 800fd94:	000f4240 	.word	0x000f4240
 800fd98:	200041e8 	.word	0x200041e8
 800fd9c:	20001fb8 	.word	0x20001fb8

0800fda0 <verifyRemoteConfiguration>:
{
 800fda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(gu32NewConfigAvailable == TRUE)
 800fda2:	4b30      	ldr	r3, [pc, #192]	; (800fe64 <verifyRemoteConfiguration+0xc4>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d003      	beq.n	800fdb2 <verifyRemoteConfiguration+0x12>
	gu32NewConfigAvailable = FALSE;
 800fdaa:	4b2e      	ldr	r3, [pc, #184]	; (800fe64 <verifyRemoteConfiguration+0xc4>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	601a      	str	r2, [r3, #0]
}
 800fdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sof = strstr(gau8ConfigData,"(,");
 800fdb2:	4d2d      	ldr	r5, [pc, #180]	; (800fe68 <verifyRemoteConfiguration+0xc8>)
 800fdb4:	492d      	ldr	r1, [pc, #180]	; (800fe6c <verifyRemoteConfiguration+0xcc>)
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f002 ff35 	bl	8012c26 <strstr>
 800fdbc:	4606      	mov	r6, r0
 800fdbe:	4c2c      	ldr	r4, [pc, #176]	; (800fe70 <verifyRemoteConfiguration+0xd0>)
 800fdc0:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
		eof = strstr(gau8ConfigData,",)");
 800fdc4:	492b      	ldr	r1, [pc, #172]	; (800fe74 <verifyRemoteConfiguration+0xd4>)
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f002 ff2d 	bl	8012c26 <strstr>
 800fdcc:	4607      	mov	r7, r0
 800fdce:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		nwsof = strstr(gau8ConfigData,"NS,");
 800fdd2:	4929      	ldr	r1, [pc, #164]	; (800fe78 <verifyRemoteConfiguration+0xd8>)
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	f002 ff26 	bl	8012c26 <strstr>
 800fdda:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		nweof = strstr(gau8ConfigData,",NE");
 800fdde:	4927      	ldr	r1, [pc, #156]	; (800fe7c <verifyRemoteConfiguration+0xdc>)
 800fde0:	4628      	mov	r0, r5
 800fde2:	f002 ff20 	bl	8012c26 <strstr>
 800fde6:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		mb485sof = strstr(gau8ConfigData,"MS,");
 800fdea:	4925      	ldr	r1, [pc, #148]	; (800fe80 <verifyRemoteConfiguration+0xe0>)
 800fdec:	4628      	mov	r0, r5
 800fdee:	f002 ff1a 	bl	8012c26 <strstr>
 800fdf2:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
		mb485eof = strstr(gau8ConfigData,",ME");
 800fdf6:	4923      	ldr	r1, [pc, #140]	; (800fe84 <verifyRemoteConfiguration+0xe4>)
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f002 ff14 	bl	8012c26 <strstr>
 800fdfe:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
		devReset = strstr(gau8ConfigData,"!");
 800fe02:	2121      	movs	r1, #33	; 0x21
 800fe04:	4628      	mov	r0, r5
 800fe06:	f002 fed4 	bl	8012bb2 <strchr>
 800fe0a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		useDefaultConfig = strstr(gau8ConfigData,"^");
 800fe0e:	215e      	movs	r1, #94	; 0x5e
 800fe10:	4628      	mov	r0, r5
 800fe12:	f002 fece 	bl	8012bb2 <strchr>
 800fe16:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
		getConfig = strstr(gau8ConfigData,"%");
 800fe1a:	2125      	movs	r1, #37	; 0x25
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	f002 fec8 	bl	8012bb2 <strchr>
 800fe22:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
		if(sof != NULL)
 800fe26:	2e00      	cmp	r6, #0
 800fe28:	d0bf      	beq.n	800fdaa <verifyRemoteConfiguration+0xa>
			if(eof != NULL)
 800fe2a:	2f00      	cmp	r7, #0
 800fe2c:	d0bd      	beq.n	800fdaa <verifyRemoteConfiguration+0xa>
				gu32ConfigLen = eof - sof ;	// Total Config Bytes
 800fe2e:	1bbf      	subs	r7, r7, r6
 800fe30:	4c15      	ldr	r4, [pc, #84]	; (800fe88 <verifyRemoteConfiguration+0xe8>)
 800fe32:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
				memset(gau8RemoteDeviceID, 0, sizeof(gau8RemoteDeviceID));
 800fe36:	4d15      	ldr	r5, [pc, #84]	; (800fe8c <verifyRemoteConfiguration+0xec>)
 800fe38:	2228      	movs	r2, #40	; 0x28
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f002 fe35 	bl	8012aac <memset>
				memcpy(gau8RemoteDeviceID, sof+4, strlen(strtok(sof+4,",")));
 800fe42:	3604      	adds	r6, #4
 800fe44:	4912      	ldr	r1, [pc, #72]	; (800fe90 <verifyRemoteConfiguration+0xf0>)
 800fe46:	4630      	mov	r0, r6
 800fe48:	f003 fd38 	bl	80138bc <strtok>
 800fe4c:	f7f0 f9da 	bl	8000204 <strlen>
 800fe50:	4602      	mov	r2, r0
 800fe52:	4631      	mov	r1, r6
 800fe54:	4628      	mov	r0, r5
 800fe56:	f002 fe01 	bl	8012a5c <memcpy>
				gu32ParseConfigAvailable = TRUE;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 800fe60:	e7a3      	b.n	800fdaa <verifyRemoteConfiguration+0xa>
 800fe62:	bf00      	nop
 800fe64:	200035b0 	.word	0x200035b0
 800fe68:	2000ce20 	.word	0x2000ce20
 800fe6c:	0801c8a4 	.word	0x0801c8a4
 800fe70:	20001fb8 	.word	0x20001fb8
 800fe74:	0801c8a8 	.word	0x0801c8a8
 800fe78:	0801c8ac 	.word	0x0801c8ac
 800fe7c:	0801c8b0 	.word	0x0801c8b0
 800fe80:	0801c8b4 	.word	0x0801c8b4
 800fe84:	0801c8b8 	.word	0x0801c8b8
 800fe88:	20004034 	.word	0x20004034
 800fe8c:	200020e8 	.word	0x200020e8
 800fe90:	0801c738 	.word	0x0801c738

0800fe94 <parseRemoteconfig>:
	if(gu32ParseConfigAvailable == TRUE)
 800fe94:	4bb0      	ldr	r3, [pc, #704]	; (8010158 <parseRemoteconfig+0x2c4>)
 800fe96:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d000      	beq.n	800fea0 <parseRemoteconfig+0xc>
 800fe9e:	4770      	bx	lr
{
 800fea0:	b570      	push	{r4, r5, r6, lr}
		if(strcmp(dinfo,gau8RemoteDeviceID) == 0)
 800fea2:	49ae      	ldr	r1, [pc, #696]	; (801015c <parseRemoteconfig+0x2c8>)
 800fea4:	48ae      	ldr	r0, [pc, #696]	; (8010160 <parseRemoteconfig+0x2cc>)
 800fea6:	f7f0 f9a3 	bl	80001f0 <strcmp>
 800feaa:	b100      	cbz	r0, 800feae <parseRemoteconfig+0x1a>
}
 800feac:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);	// LED ON
 800feae:	2200      	movs	r2, #0
 800feb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800feb4:	48ab      	ldr	r0, [pc, #684]	; (8010164 <parseRemoteconfig+0x2d0>)
 800feb6:	f7f2 fed1 	bl	8002c5c <HAL_GPIO_WritePin>
			if(devReset != NULL)
 800feba:	4bab      	ldr	r3, [pc, #684]	; (8010168 <parseRemoteconfig+0x2d4>)
 800febc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800fec0:	b15b      	cbz	r3, 800feda <parseRemoteconfig+0x46>
				HAL_Delay(1000);
 800fec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fec6:	f7f1 f901 	bl	80010cc <HAL_Delay>
				HAL_Delay(1000000);
 800feca:	4ca8      	ldr	r4, [pc, #672]	; (801016c <parseRemoteconfig+0x2d8>)
 800fecc:	4620      	mov	r0, r4
 800fece:	f7f1 f8fd 	bl	80010cc <HAL_Delay>
				HAL_Delay(1000000);
 800fed2:	4620      	mov	r0, r4
 800fed4:	f7f1 f8fa 	bl	80010cc <HAL_Delay>
 800fed8:	e7e8      	b.n	800feac <parseRemoteconfig+0x18>
			else if(useDefaultConfig != NULL)
 800feda:	4ba3      	ldr	r3, [pc, #652]	; (8010168 <parseRemoteconfig+0x2d4>)
 800fedc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800fee0:	b163      	cbz	r3, 800fefc <parseRemoteconfig+0x68>
				if(FLASH_If_Erase(ADDR_FLASH_SECTOR_22) != FLASHIF_OK)
 800fee2:	48a3      	ldr	r0, [pc, #652]	; (8010170 <parseRemoteconfig+0x2dc>)
 800fee4:	f002 f92a 	bl	801213c <FLASH_If_Erase>
 800fee8:	2800      	cmp	r0, #0
 800feea:	d1df      	bne.n	800feac <parseRemoteconfig+0x18>
					HAL_Delay(1000000);
 800feec:	4c9f      	ldr	r4, [pc, #636]	; (801016c <parseRemoteconfig+0x2d8>)
 800feee:	4620      	mov	r0, r4
 800fef0:	f7f1 f8ec 	bl	80010cc <HAL_Delay>
					HAL_Delay(1000000);
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7f1 f8e9 	bl	80010cc <HAL_Delay>
 800fefa:	e7d7      	b.n	800feac <parseRemoteconfig+0x18>
			else if(getConfig != NULL)
 800fefc:	4b9a      	ldr	r3, [pc, #616]	; (8010168 <parseRemoteconfig+0x2d4>)
 800fefe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ff02:	b133      	cbz	r3, 800ff12 <parseRemoteconfig+0x7e>
				enqueue(&gsmPayload,(char *)getSystemConfig());
 800ff04:	f7fe ffa8 	bl	800ee58 <getSystemConfig>
 800ff08:	4601      	mov	r1, r0
 800ff0a:	489a      	ldr	r0, [pc, #616]	; (8010174 <parseRemoteconfig+0x2e0>)
 800ff0c:	f7ff fbc6 	bl	800f69c <enqueue>
 800ff10:	e7cc      	b.n	800feac <parseRemoteconfig+0x18>
				switch(enmDeviceConfigState)
 800ff12:	4b91      	ldr	r3, [pc, #580]	; (8010158 <parseRemoteconfig+0x2c4>)
 800ff14:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 800ff18:	2b0d      	cmp	r3, #13
 800ff1a:	f200 81a2 	bhi.w	8010262 <parseRemoteconfig+0x3ce>
 800ff1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ff22:	000e      	.short	0x000e
 800ff24:	003c0032 	.word	0x003c0032
 800ff28:	00510046 	.word	0x00510046
 800ff2c:	00ab005c 	.word	0x00ab005c
 800ff30:	013700e6 	.word	0x013700e6
 800ff34:	014d0142 	.word	0x014d0142
 800ff38:	01630158 	.word	0x01630158
 800ff3c:	016e      	.short	0x016e
						memcpy(gau8RemoteDeviceType, sof+2, strlen(strtok(sof+2,",")));
 800ff3e:	4d8a      	ldr	r5, [pc, #552]	; (8010168 <parseRemoteconfig+0x2d4>)
 800ff40:	f8d5 410c 	ldr.w	r4, [r5, #268]	; 0x10c
 800ff44:	3402      	adds	r4, #2
 800ff46:	498c      	ldr	r1, [pc, #560]	; (8010178 <parseRemoteconfig+0x2e4>)
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f003 fcb7 	bl	80138bc <strtok>
 800ff4e:	f7f0 f959 	bl	8000204 <strlen>
 800ff52:	4602      	mov	r2, r0
 800ff54:	4e89      	ldr	r6, [pc, #548]	; (801017c <parseRemoteconfig+0x2e8>)
 800ff56:	4621      	mov	r1, r4
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f002 fd7f 	bl	8012a5c <memcpy>
						if(atoi(gau8RemoteDeviceType) == enmMyDeviceType)
 800ff5e:	4630      	mov	r0, r6
 800ff60:	f002 fada 	bl	8012518 <atoi>
 800ff64:	f895 3158 	ldrb.w	r3, [r5, #344]	; 0x158
 800ff68:	4298      	cmp	r0, r3
 800ff6a:	d004      	beq.n	800ff76 <parseRemoteconfig+0xe2>
							gu32ParseConfigAvailable = FALSE;
 800ff6c:	4b7a      	ldr	r3, [pc, #488]	; (8010158 <parseRemoteconfig+0x2c4>)
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
 800ff74:	e79a      	b.n	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 800ff76:	f5a6 72e4 	sub.w	r2, r6, #456	; 0x1c8
 800ff7a:	f892 31c4 	ldrb.w	r3, [r2, #452]	; 0x1c4
 800ff7e:	3301      	adds	r3, #1
 800ff80:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 800ff84:	e792      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_ADC] == TRUE)
 800ff86:	4a78      	ldr	r2, [pc, #480]	; (8010168 <parseRemoteconfig+0x2d4>)
 800ff88:	f8d2 2160 	ldr.w	r2, [r2, #352]	; 0x160
 800ff8c:	2a01      	cmp	r2, #1
 800ff8e:	d08d      	beq.n	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 800ff90:	3301      	adds	r3, #1
 800ff92:	4a71      	ldr	r2, [pc, #452]	; (8010158 <parseRemoteconfig+0x2c4>)
 800ff94:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 800ff98:	e788      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DI] == TRUE)
 800ff9a:	4a73      	ldr	r2, [pc, #460]	; (8010168 <parseRemoteconfig+0x2d4>)
 800ff9c:	f8d2 2164 	ldr.w	r2, [r2, #356]	; 0x164
 800ffa0:	2a01      	cmp	r2, #1
 800ffa2:	d083      	beq.n	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	4a6c      	ldr	r2, [pc, #432]	; (8010158 <parseRemoteconfig+0x2c4>)
 800ffa8:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 800ffac:	e77e      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DO] == TRUE)
 800ffae:	4a6e      	ldr	r2, [pc, #440]	; (8010168 <parseRemoteconfig+0x2d4>)
 800ffb0:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
 800ffb4:	2a01      	cmp	r2, #1
 800ffb6:	f43f af79 	beq.w	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 800ffba:	3301      	adds	r3, #1
 800ffbc:	4a66      	ldr	r2, [pc, #408]	; (8010158 <parseRemoteconfig+0x2c4>)
 800ffbe:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 800ffc2:	e773      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_RPM] == TRUE)
 800ffc4:	4a68      	ldr	r2, [pc, #416]	; (8010168 <parseRemoteconfig+0x2d4>)
 800ffc6:	f8d2 216c 	ldr.w	r2, [r2, #364]	; 0x16c
 800ffca:	2a01      	cmp	r2, #1
 800ffcc:	f43f af6e 	beq.w	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	4a61      	ldr	r2, [pc, #388]	; (8010158 <parseRemoteconfig+0x2c4>)
 800ffd4:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 800ffd8:	e768      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_NETWORK] == TRUE)
 800ffda:	4a63      	ldr	r2, [pc, #396]	; (8010168 <parseRemoteconfig+0x2d4>)
 800ffdc:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 800ffe0:	2a01      	cmp	r2, #1
 800ffe2:	d004      	beq.n	800ffee <parseRemoteconfig+0x15a>
							enmDeviceConfigState++;
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	4a5c      	ldr	r2, [pc, #368]	; (8010158 <parseRemoteconfig+0x2c4>)
 800ffe8:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 800ffec:	e75e      	b.n	800feac <parseRemoteconfig+0x18>
							if(gu32ConfigOperationStatus == FALSE)
 800ffee:	4a5a      	ldr	r2, [pc, #360]	; (8010158 <parseRemoteconfig+0x2c4>)
 800fff0:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	d137      	bne.n	8010068 <parseRemoteconfig+0x1d4>
								if((nwsof != NULL) && (nweof != NULL))
 800fff8:	4a5b      	ldr	r2, [pc, #364]	; (8010168 <parseRemoteconfig+0x2d4>)
 800fffa:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
 800fffe:	b371      	cbz	r1, 801005e <parseRemoteconfig+0x1ca>
 8010000:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8010004:	b35a      	cbz	r2, 801005e <parseRemoteconfig+0x1ca>
									nwmlen = (nweof - nwsof) + 4 ;
 8010006:	1a53      	subs	r3, r2, r1
 8010008:	3304      	adds	r3, #4
 801000a:	4a53      	ldr	r2, [pc, #332]	; (8010158 <parseRemoteconfig+0x2c4>)
 801000c:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
									tempconfig = (char *)malloc(sizeof(char) * 2000);
 8010010:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010014:	f002 fac2 	bl	801259c <malloc>
 8010018:	4604      	mov	r4, r0
 801001a:	4a53      	ldr	r2, [pc, #332]	; (8010168 <parseRemoteconfig+0x2d4>)
 801001c:	f8c2 018c 	str.w	r0, [r2, #396]	; 0x18c
									memset(tempconfig,0x00,2000 * sizeof(char));
 8010020:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010024:	2100      	movs	r1, #0
 8010026:	f002 fd41 	bl	8012aac <memset>
									if(tempconfig != NULL)
 801002a:	4620      	mov	r0, r4
 801002c:	b164      	cbz	r4, 8010048 <parseRemoteconfig+0x1b4>
										strncat((char *)tempconfig,nwsof,nwmlen);
 801002e:	4b4a      	ldr	r3, [pc, #296]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010030:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 8010034:	4b4c      	ldr	r3, [pc, #304]	; (8010168 <parseRemoteconfig+0x2d4>)
 8010036:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 801003a:	f002 fdcf 	bl	8012bdc <strncat>
									gu32ConfigOperationStatus = TRUE;
 801003e:	4b46      	ldr	r3, [pc, #280]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010040:	2201      	movs	r2, #1
 8010042:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8010046:	e731      	b.n	800feac <parseRemoteconfig+0x18>
										gau32RemoteConfigSupport[enmCONFIG_NETWORK] = FALSE;
 8010048:	4b47      	ldr	r3, [pc, #284]	; (8010168 <parseRemoteconfig+0x2d4>)
 801004a:	2200      	movs	r2, #0
 801004c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
										enmDeviceConfigState++;
 8010050:	4a41      	ldr	r2, [pc, #260]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010052:	f892 31c4 	ldrb.w	r3, [r2, #452]	; 0x1c4
 8010056:	3301      	adds	r3, #1
 8010058:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801005c:	e7ef      	b.n	801003e <parseRemoteconfig+0x1aa>
									enmDeviceConfigState++;
 801005e:	3301      	adds	r3, #1
 8010060:	4a3d      	ldr	r2, [pc, #244]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010062:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010066:	e721      	b.n	800feac <parseRemoteconfig+0x18>
								gu32ConfigOperationStatus = FALSE;
 8010068:	4a3b      	ldr	r2, [pc, #236]	; (8010158 <parseRemoteconfig+0x2c4>)
 801006a:	2100      	movs	r1, #0
 801006c:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
								enmDeviceConfigState++;
 8010070:	3301      	adds	r3, #1
 8010072:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010076:	e719      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_MODBUS485] == TRUE)
 8010078:	4a3b      	ldr	r2, [pc, #236]	; (8010168 <parseRemoteconfig+0x2d4>)
 801007a:	f8d2 2174 	ldr.w	r2, [r2, #372]	; 0x174
 801007e:	2a01      	cmp	r2, #1
 8010080:	d004      	beq.n	801008c <parseRemoteconfig+0x1f8>
							enmDeviceConfigState++;
 8010082:	3301      	adds	r3, #1
 8010084:	4a34      	ldr	r2, [pc, #208]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010086:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801008a:	e70f      	b.n	800feac <parseRemoteconfig+0x18>
							if(gu32ConfigOperationStatus == FALSE)
 801008c:	4a32      	ldr	r2, [pc, #200]	; (8010158 <parseRemoteconfig+0x2c4>)
 801008e:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
 8010092:	bb22      	cbnz	r2, 80100de <parseRemoteconfig+0x24a>
								if((mb485sof != NULL) && (mb485eof != NULL))
 8010094:	4a34      	ldr	r2, [pc, #208]	; (8010168 <parseRemoteconfig+0x2d4>)
 8010096:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 801009a:	b1d9      	cbz	r1, 80100d4 <parseRemoteconfig+0x240>
 801009c:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 80100a0:	b1c2      	cbz	r2, 80100d4 <parseRemoteconfig+0x240>
									mb485mlen = (mb485eof - mb485sof) + 4 ;
 80100a2:	1a52      	subs	r2, r2, r1
 80100a4:	3204      	adds	r2, #4
 80100a6:	482c      	ldr	r0, [pc, #176]	; (8010158 <parseRemoteconfig+0x2c4>)
 80100a8:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
									if(tempconfig != NULL)
 80100ac:	482e      	ldr	r0, [pc, #184]	; (8010168 <parseRemoteconfig+0x2d4>)
 80100ae:	f8d0 018c 	ldr.w	r0, [r0, #396]	; 0x18c
 80100b2:	b130      	cbz	r0, 80100c2 <parseRemoteconfig+0x22e>
										strncat((char *)tempconfig,mb485sof,mb485mlen);
 80100b4:	f002 fd92 	bl	8012bdc <strncat>
									gu32ConfigOperationStatus = TRUE;
 80100b8:	4b27      	ldr	r3, [pc, #156]	; (8010158 <parseRemoteconfig+0x2c4>)
 80100ba:	2201      	movs	r2, #1
 80100bc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 80100c0:	e6f4      	b.n	800feac <parseRemoteconfig+0x18>
										gau32RemoteConfigSupport[enmCONFIG_NETWORK] = FALSE;
 80100c2:	4a29      	ldr	r2, [pc, #164]	; (8010168 <parseRemoteconfig+0x2d4>)
 80100c4:	2100      	movs	r1, #0
 80100c6:	f8c2 1170 	str.w	r1, [r2, #368]	; 0x170
										enmDeviceConfigState++;
 80100ca:	3301      	adds	r3, #1
 80100cc:	4a22      	ldr	r2, [pc, #136]	; (8010158 <parseRemoteconfig+0x2c4>)
 80100ce:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80100d2:	e7f1      	b.n	80100b8 <parseRemoteconfig+0x224>
									enmDeviceConfigState++;
 80100d4:	3301      	adds	r3, #1
 80100d6:	4a20      	ldr	r2, [pc, #128]	; (8010158 <parseRemoteconfig+0x2c4>)
 80100d8:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80100dc:	e6e6      	b.n	800feac <parseRemoteconfig+0x18>
								gu32ConfigOperationStatus = FALSE;
 80100de:	4a1e      	ldr	r2, [pc, #120]	; (8010158 <parseRemoteconfig+0x2c4>)
 80100e0:	2100      	movs	r1, #0
 80100e2:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
								enmDeviceConfigState++;
 80100e6:	3301      	adds	r3, #1
 80100e8:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80100ec:	e6de      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_MODBUSTCP] == TRUE)
 80100ee:	4a1e      	ldr	r2, [pc, #120]	; (8010168 <parseRemoteconfig+0x2d4>)
 80100f0:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 80100f4:	2a01      	cmp	r2, #1
 80100f6:	d004      	beq.n	8010102 <parseRemoteconfig+0x26e>
							enmDeviceConfigState++;
 80100f8:	3301      	adds	r3, #1
 80100fa:	4a17      	ldr	r2, [pc, #92]	; (8010158 <parseRemoteconfig+0x2c4>)
 80100fc:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010100:	e6d4      	b.n	800feac <parseRemoteconfig+0x18>
								if(gu32ConfigOperationStatus == FALSE)
 8010102:	4a15      	ldr	r2, [pc, #84]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010104:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
 8010108:	2a00      	cmp	r2, #0
 801010a:	d139      	bne.n	8010180 <parseRemoteconfig+0x2ec>
									if((mbTCPsof != NULL) && (mbTCPeof != NULL))
 801010c:	4a16      	ldr	r2, [pc, #88]	; (8010168 <parseRemoteconfig+0x2d4>)
 801010e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
 8010112:	b1d9      	cbz	r1, 801014c <parseRemoteconfig+0x2b8>
 8010114:	f8d2 2194 	ldr.w	r2, [r2, #404]	; 0x194
 8010118:	b1c2      	cbz	r2, 801014c <parseRemoteconfig+0x2b8>
										mbtcpmlen = (mbTCPeof-mbTCPsof) + 4;
 801011a:	1a52      	subs	r2, r2, r1
 801011c:	3204      	adds	r2, #4
 801011e:	480e      	ldr	r0, [pc, #56]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010120:	f8c0 21d8 	str.w	r2, [r0, #472]	; 0x1d8
										if(tempconfig != NULL)
 8010124:	4810      	ldr	r0, [pc, #64]	; (8010168 <parseRemoteconfig+0x2d4>)
 8010126:	f8d0 018c 	ldr.w	r0, [r0, #396]	; 0x18c
 801012a:	b130      	cbz	r0, 801013a <parseRemoteconfig+0x2a6>
											strncat((char *)tempconfig,mbTCPsof,mbtcpmlen);
 801012c:	f002 fd56 	bl	8012bdc <strncat>
										gu32ConfigOperationStatus = TRUE;
 8010130:	4b09      	ldr	r3, [pc, #36]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010132:	2201      	movs	r2, #1
 8010134:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8010138:	e6b8      	b.n	800feac <parseRemoteconfig+0x18>
											gau32RemoteConfigSupport[enmCONFIG_MODBUSTCP] = FALSE;
 801013a:	4a0b      	ldr	r2, [pc, #44]	; (8010168 <parseRemoteconfig+0x2d4>)
 801013c:	2100      	movs	r1, #0
 801013e:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
											enmDeviceConfigState++;
 8010142:	3301      	adds	r3, #1
 8010144:	4a04      	ldr	r2, [pc, #16]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010146:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801014a:	e7f1      	b.n	8010130 <parseRemoteconfig+0x29c>
										enmDeviceConfigState++;
 801014c:	3301      	adds	r3, #1
 801014e:	4a02      	ldr	r2, [pc, #8]	; (8010158 <parseRemoteconfig+0x2c4>)
 8010150:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010154:	e6aa      	b.n	800feac <parseRemoteconfig+0x18>
 8010156:	bf00      	nop
 8010158:	20004034 	.word	0x20004034
 801015c:	200020e8 	.word	0x200020e8
 8010160:	2000748c 	.word	0x2000748c
 8010164:	40020c00 	.word	0x40020c00
 8010168:	20001fb8 	.word	0x20001fb8
 801016c:	000f4240 	.word	0x000f4240
 8010170:	081c0000 	.word	0x081c0000
 8010174:	2000e760 	.word	0x2000e760
 8010178:	0801c738 	.word	0x0801c738
 801017c:	200041fc 	.word	0x200041fc
									gu32ConfigOperationStatus = FALSE;
 8010180:	4a3a      	ldr	r2, [pc, #232]	; (801026c <parseRemoteconfig+0x3d8>)
 8010182:	2100      	movs	r1, #0
 8010184:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
									enmDeviceConfigState++;
 8010188:	3301      	adds	r3, #1
 801018a:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801018e:	e68d      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DATAMGMT] == TRUE)
 8010190:	4a37      	ldr	r2, [pc, #220]	; (8010270 <parseRemoteconfig+0x3dc>)
 8010192:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 8010196:	2a01      	cmp	r2, #1
 8010198:	f43f ae88 	beq.w	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 801019c:	3301      	adds	r3, #1
 801019e:	4a33      	ldr	r2, [pc, #204]	; (801026c <parseRemoteconfig+0x3d8>)
 80101a0:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80101a4:	e682      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_CAN_1] == TRUE)
 80101a6:	4a32      	ldr	r2, [pc, #200]	; (8010270 <parseRemoteconfig+0x3dc>)
 80101a8:	f8d2 2180 	ldr.w	r2, [r2, #384]	; 0x180
 80101ac:	2a01      	cmp	r2, #1
 80101ae:	f43f ae7d 	beq.w	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 80101b2:	3301      	adds	r3, #1
 80101b4:	4a2d      	ldr	r2, [pc, #180]	; (801026c <parseRemoteconfig+0x3d8>)
 80101b6:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80101ba:	e677      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_CAN_2] == TRUE)
 80101bc:	4a2c      	ldr	r2, [pc, #176]	; (8010270 <parseRemoteconfig+0x3dc>)
 80101be:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
 80101c2:	2a01      	cmp	r2, #1
 80101c4:	f43f ae72 	beq.w	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 80101c8:	3301      	adds	r3, #1
 80101ca:	4a28      	ldr	r2, [pc, #160]	; (801026c <parseRemoteconfig+0x3d8>)
 80101cc:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80101d0:	e66c      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DEBUG] == TRUE)
 80101d2:	4a27      	ldr	r2, [pc, #156]	; (8010270 <parseRemoteconfig+0x3dc>)
 80101d4:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
 80101d8:	2a01      	cmp	r2, #1
 80101da:	f43f ae67 	beq.w	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 80101de:	3301      	adds	r3, #1
 80101e0:	4a22      	ldr	r2, [pc, #136]	; (801026c <parseRemoteconfig+0x3d8>)
 80101e2:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80101e6:	e661      	b.n	800feac <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_MQTT] == TRUE)
 80101e8:	4a21      	ldr	r2, [pc, #132]	; (8010270 <parseRemoteconfig+0x3dc>)
 80101ea:	f8d2 218c 	ldr.w	r2, [r2, #396]	; 0x18c
 80101ee:	2a01      	cmp	r2, #1
 80101f0:	f43f ae5c 	beq.w	800feac <parseRemoteconfig+0x18>
							enmDeviceConfigState++ ;
 80101f4:	3301      	adds	r3, #1
 80101f6:	4a1d      	ldr	r2, [pc, #116]	; (801026c <parseRemoteconfig+0x3d8>)
 80101f8:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80101fc:	e656      	b.n	800feac <parseRemoteconfig+0x18>
						if(FLASH_If_Erase(ADDR_FLASH_SECTOR_22) != FLASHIF_OK)
 80101fe:	481d      	ldr	r0, [pc, #116]	; (8010274 <parseRemoteconfig+0x3e0>)
 8010200:	f001 ff9c 	bl	801213c <FLASH_If_Erase>
 8010204:	b9c0      	cbnz	r0, 8010238 <parseRemoteconfig+0x3a4>
							if(u32LastMemoryWriteLocation == 0)
 8010206:	4b1c      	ldr	r3, [pc, #112]	; (8010278 <parseRemoteconfig+0x3e4>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	b913      	cbnz	r3, 8010212 <parseRemoteconfig+0x37e>
								u32LastMemoryWriteLocation = ADDR_FLASH_SECTOR_22;
 801020c:	4b1a      	ldr	r3, [pc, #104]	; (8010278 <parseRemoteconfig+0x3e4>)
 801020e:	4a19      	ldr	r2, [pc, #100]	; (8010274 <parseRemoteconfig+0x3e0>)
 8010210:	601a      	str	r2, [r3, #0]
							if(WriteDatatoFlash(u32LastMemoryWriteLocation,(uint8_t *)tempconfig,(nwmlen+mb485mlen+mbtcpmlen+4),1) == SUCCESS)
 8010212:	4a16      	ldr	r2, [pc, #88]	; (801026c <parseRemoteconfig+0x3d8>)
 8010214:	f8d2 31d0 	ldr.w	r3, [r2, #464]	; 0x1d0
 8010218:	f8d2 11d4 	ldr.w	r1, [r2, #468]	; 0x1d4
 801021c:	440b      	add	r3, r1
 801021e:	f8d2 21d8 	ldr.w	r2, [r2, #472]	; 0x1d8
 8010222:	441a      	add	r2, r3
 8010224:	2301      	movs	r3, #1
 8010226:	3204      	adds	r2, #4
 8010228:	4911      	ldr	r1, [pc, #68]	; (8010270 <parseRemoteconfig+0x3dc>)
 801022a:	f8d1 118c 	ldr.w	r1, [r1, #396]	; 0x18c
 801022e:	4812      	ldr	r0, [pc, #72]	; (8010278 <parseRemoteconfig+0x3e4>)
 8010230:	6800      	ldr	r0, [r0, #0]
 8010232:	f001 ffc5 	bl	80121c0 <WriteDatatoFlash>
 8010236:	b120      	cbz	r0, 8010242 <parseRemoteconfig+0x3ae>
						gu32ParseConfigAvailable = FALSE;
 8010238:	4b0c      	ldr	r3, [pc, #48]	; (801026c <parseRemoteconfig+0x3d8>)
 801023a:	2200      	movs	r2, #0
 801023c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
						break;
 8010240:	e634      	b.n	800feac <parseRemoteconfig+0x18>
								tempconfig = NULL;
 8010242:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <parseRemoteconfig+0x3dc>)
 8010244:	2200      	movs	r2, #0
 8010246:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
								HAL_Delay(3000);
 801024a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801024e:	f7f0 ff3d 	bl	80010cc <HAL_Delay>
								HAL_Delay(1000000);
 8010252:	4c0a      	ldr	r4, [pc, #40]	; (801027c <parseRemoteconfig+0x3e8>)
 8010254:	4620      	mov	r0, r4
 8010256:	f7f0 ff39 	bl	80010cc <HAL_Delay>
								HAL_Delay(1000000);
 801025a:	4620      	mov	r0, r4
 801025c:	f7f0 ff36 	bl	80010cc <HAL_Delay>
 8010260:	e7ea      	b.n	8010238 <parseRemoteconfig+0x3a4>
						gu32ParseConfigAvailable = FALSE;
 8010262:	4b02      	ldr	r3, [pc, #8]	; (801026c <parseRemoteconfig+0x3d8>)
 8010264:	2200      	movs	r2, #0
 8010266:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 801026a:	e61f      	b.n	800feac <parseRemoteconfig+0x18>
 801026c:	20004034 	.word	0x20004034
 8010270:	20001fb8 	.word	0x20001fb8
 8010274:	081c0000 	.word	0x081c0000
 8010278:	20004328 	.word	0x20004328
 801027c:	000f4240 	.word	0x000f4240

08010280 <extractNewtorkConfiguration>:
{
 8010280:	b510      	push	{r4, lr}
	gu32ExtractParamCounter = 0;
 8010282:	4b31      	ldr	r3, [pc, #196]	; (8010348 <extractNewtorkConfiguration+0xc8>)
 8010284:	2200      	movs	r2, #0
 8010286:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	char *configptr = strtok(nwsof, ",");
 801028a:	4930      	ldr	r1, [pc, #192]	; (801034c <extractNewtorkConfiguration+0xcc>)
 801028c:	4b30      	ldr	r3, [pc, #192]	; (8010350 <extractNewtorkConfiguration+0xd0>)
 801028e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8010292:	f003 fb13 	bl	80138bc <strtok>
 8010296:	4601      	mov	r1, r0
	while(configptr != NULL)
 8010298:	e00b      	b.n	80102b2 <extractNewtorkConfiguration+0x32>
				strcpy(gau8ConfigNewtorkIsEnabled,configptr);
 801029a:	482b      	ldr	r0, [pc, #172]	; (8010348 <extractNewtorkConfiguration+0xc8>)
 801029c:	f002 fc96 	bl	8012bcc <strcpy>
		gu32ExtractParamCounter++;
 80102a0:	3401      	adds	r4, #1
 80102a2:	4b29      	ldr	r3, [pc, #164]	; (8010348 <extractNewtorkConfiguration+0xc8>)
 80102a4:	f8c3 41dc 	str.w	r4, [r3, #476]	; 0x1dc
		configptr = strtok(NULL, ",");
 80102a8:	4928      	ldr	r1, [pc, #160]	; (801034c <extractNewtorkConfiguration+0xcc>)
 80102aa:	2000      	movs	r0, #0
 80102ac:	f003 fb06 	bl	80138bc <strtok>
 80102b0:	4601      	mov	r1, r0
	while(configptr != NULL)
 80102b2:	2900      	cmp	r1, #0
 80102b4:	d040      	beq.n	8010338 <extractNewtorkConfiguration+0xb8>
		switch(gu32ExtractParamCounter)
 80102b6:	4b24      	ldr	r3, [pc, #144]	; (8010348 <extractNewtorkConfiguration+0xc8>)
 80102b8:	f8d3 41dc 	ldr.w	r4, [r3, #476]	; 0x1dc
 80102bc:	1e63      	subs	r3, r4, #1
 80102be:	2b09      	cmp	r3, #9
 80102c0:	d8ee      	bhi.n	80102a0 <extractNewtorkConfiguration+0x20>
 80102c2:	a201      	add	r2, pc, #4	; (adr r2, 80102c8 <extractNewtorkConfiguration+0x48>)
 80102c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c8:	0801029b 	.word	0x0801029b
 80102cc:	080102f1 	.word	0x080102f1
 80102d0:	080102f9 	.word	0x080102f9
 80102d4:	08010301 	.word	0x08010301
 80102d8:	08010309 	.word	0x08010309
 80102dc:	08010311 	.word	0x08010311
 80102e0:	08010319 	.word	0x08010319
 80102e4:	08010321 	.word	0x08010321
 80102e8:	08010329 	.word	0x08010329
 80102ec:	08010331 	.word	0x08010331
				strcpy(gau8ConfigNewtorkServerURL,configptr);
 80102f0:	4818      	ldr	r0, [pc, #96]	; (8010354 <extractNewtorkConfiguration+0xd4>)
 80102f2:	f002 fc6b 	bl	8012bcc <strcpy>
				break;
 80102f6:	e7d3      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkConfigURL,configptr);
 80102f8:	4817      	ldr	r0, [pc, #92]	; (8010358 <extractNewtorkConfiguration+0xd8>)
 80102fa:	f002 fc67 	bl	8012bcc <strcpy>
				break;
 80102fe:	e7cf      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkAPN,configptr);
 8010300:	4813      	ldr	r0, [pc, #76]	; (8010350 <extractNewtorkConfiguration+0xd0>)
 8010302:	f002 fc63 	bl	8012bcc <strcpy>
				break;
 8010306:	e7cb      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkUpFreqSupply,configptr);
 8010308:	4814      	ldr	r0, [pc, #80]	; (801035c <extractNewtorkConfiguration+0xdc>)
 801030a:	f002 fc5f 	bl	8012bcc <strcpy>
				break;
 801030e:	e7c7      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkUpFreqBatt,configptr);
 8010310:	4813      	ldr	r0, [pc, #76]	; (8010360 <extractNewtorkConfiguration+0xe0>)
 8010312:	f002 fc5b 	bl	8012bcc <strcpy>
				break;
 8010316:	e7c3      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkType,configptr);
 8010318:	4812      	ldr	r0, [pc, #72]	; (8010364 <extractNewtorkConfiguration+0xe4>)
 801031a:	f002 fc57 	bl	8012bcc <strcpy>
				break;
 801031e:	e7bf      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkGPSEnable,configptr);
 8010320:	4811      	ldr	r0, [pc, #68]	; (8010368 <extractNewtorkConfiguration+0xe8>)
 8010322:	f002 fc53 	bl	8012bcc <strcpy>
				break;
 8010326:	e7bb      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkSendData,configptr);
 8010328:	4810      	ldr	r0, [pc, #64]	; (801036c <extractNewtorkConfiguration+0xec>)
 801032a:	f002 fc4f 	bl	8012bcc <strcpy>
				break;
 801032e:	e7b7      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkSendDataDisableTime,configptr);
 8010330:	480f      	ldr	r0, [pc, #60]	; (8010370 <extractNewtorkConfiguration+0xf0>)
 8010332:	f002 fc4b 	bl	8012bcc <strcpy>
				break;
 8010336:	e7b3      	b.n	80102a0 <extractNewtorkConfiguration+0x20>
	gu32ExtractParamCounter = 0;
 8010338:	4b03      	ldr	r3, [pc, #12]	; (8010348 <extractNewtorkConfiguration+0xc8>)
 801033a:	2200      	movs	r2, #0
 801033c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyNetworkConfigData();
 8010340:	f7ff fa1e 	bl	800f780 <verifyNetworkConfigData>
}
 8010344:	bd10      	pop	{r4, pc}
 8010346:	bf00      	nop
 8010348:	20004034 	.word	0x20004034
 801034c:	0801c738 	.word	0x0801c738
 8010350:	20001fb8 	.word	0x20001fb8
 8010354:	2000403c 	.word	0x2000403c
 8010358:	200040d4 	.word	0x200040d4
 801035c:	2000416c 	.word	0x2000416c
 8010360:	20004178 	.word	0x20004178
 8010364:	20004184 	.word	0x20004184
 8010368:	20004188 	.word	0x20004188
 801036c:	2000418c 	.word	0x2000418c
 8010370:	20004190 	.word	0x20004190

08010374 <extractModbus485Configuration>:
{
 8010374:	b570      	push	{r4, r5, r6, lr}
	char *configptr = strtok(mb485config, ",");//mb485config
 8010376:	4977      	ldr	r1, [pc, #476]	; (8010554 <extractModbus485Configuration+0x1e0>)
 8010378:	4b77      	ldr	r3, [pc, #476]	; (8010558 <extractModbus485Configuration+0x1e4>)
 801037a:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 801037e:	f003 fa9d 	bl	80138bc <strtok>
 8010382:	4604      	mov	r4, r0
	gu32ExtractParamCounter = 0;
 8010384:	4b75      	ldr	r3, [pc, #468]	; (801055c <extractModbus485Configuration+0x1e8>)
 8010386:	2200      	movs	r2, #0
 8010388:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	while(configptr != NULL)
 801038c:	e00f      	b.n	80103ae <extractModbus485Configuration+0x3a>
				strcpy(gau8ConfigModbus485IsEnabled,configptr);
 801038e:	4621      	mov	r1, r4
 8010390:	4873      	ldr	r0, [pc, #460]	; (8010560 <extractModbus485Configuration+0x1ec>)
 8010392:	f002 fc1b 	bl	8012bcc <strcpy>
		if(gu32ExtractParamCounter != 9)
 8010396:	4b71      	ldr	r3, [pc, #452]	; (801055c <extractModbus485Configuration+0x1e8>)
 8010398:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801039c:	2b09      	cmp	r3, #9
 801039e:	f040 80cb 	bne.w	8010538 <extractModbus485Configuration+0x1c4>
		gu32ExtractParamCounter++;
 80103a2:	4a6e      	ldr	r2, [pc, #440]	; (801055c <extractModbus485Configuration+0x1e8>)
 80103a4:	f8d2 31dc 	ldr.w	r3, [r2, #476]	; 0x1dc
 80103a8:	3301      	adds	r3, #1
 80103aa:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
	while(configptr != NULL)
 80103ae:	2c00      	cmp	r4, #0
 80103b0:	f000 80c8 	beq.w	8010544 <extractModbus485Configuration+0x1d0>
		switch(gu32ExtractParamCounter)
 80103b4:	4b69      	ldr	r3, [pc, #420]	; (801055c <extractModbus485Configuration+0x1e8>)
 80103b6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80103ba:	3b01      	subs	r3, #1
 80103bc:	2b0f      	cmp	r3, #15
 80103be:	d8ea      	bhi.n	8010396 <extractModbus485Configuration+0x22>
 80103c0:	a201      	add	r2, pc, #4	; (adr r2, 80103c8 <extractModbus485Configuration+0x54>)
 80103c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c6:	bf00      	nop
 80103c8:	0801038f 	.word	0x0801038f
 80103cc:	08010409 	.word	0x08010409
 80103d0:	08010413 	.word	0x08010413
 80103d4:	0801041d 	.word	0x0801041d
 80103d8:	08010427 	.word	0x08010427
 80103dc:	08010431 	.word	0x08010431
 80103e0:	0801043b 	.word	0x0801043b
 80103e4:	08010445 	.word	0x08010445
 80103e8:	0801044f 	.word	0x0801044f
 80103ec:	080104f3 	.word	0x080104f3
 80103f0:	080104fd 	.word	0x080104fd
 80103f4:	08010507 	.word	0x08010507
 80103f8:	08010511 	.word	0x08010511
 80103fc:	0801051b 	.word	0x0801051b
 8010400:	08010525 	.word	0x08010525
 8010404:	0801052f 	.word	0x0801052f
				strcpy(gau8ConfigModbus485SlaveID,configptr);
 8010408:	4621      	mov	r1, r4
 801040a:	4856      	ldr	r0, [pc, #344]	; (8010564 <extractModbus485Configuration+0x1f0>)
 801040c:	f002 fbde 	bl	8012bcc <strcpy>
				break;
 8010410:	e7c1      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485Termination,configptr);
 8010412:	4621      	mov	r1, r4
 8010414:	4854      	ldr	r0, [pc, #336]	; (8010568 <extractModbus485Configuration+0x1f4>)
 8010416:	f002 fbd9 	bl	8012bcc <strcpy>
				break;
 801041a:	e7bc      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485DataPoints,configptr);
 801041c:	4621      	mov	r1, r4
 801041e:	4853      	ldr	r0, [pc, #332]	; (801056c <extractModbus485Configuration+0x1f8>)
 8010420:	f002 fbd4 	bl	8012bcc <strcpy>
				break;
 8010424:	e7b7      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTBR,configptr);
 8010426:	4621      	mov	r1, r4
 8010428:	4851      	ldr	r0, [pc, #324]	; (8010570 <extractModbus485Configuration+0x1fc>)
 801042a:	f002 fbcf 	bl	8012bcc <strcpy>
				break;
 801042e:	e7b2      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTStartBit,configptr);
 8010430:	4621      	mov	r1, r4
 8010432:	4850      	ldr	r0, [pc, #320]	; (8010574 <extractModbus485Configuration+0x200>)
 8010434:	f002 fbca 	bl	8012bcc <strcpy>
				break;
 8010438:	e7ad      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTStopBit,configptr);
 801043a:	4621      	mov	r1, r4
 801043c:	484e      	ldr	r0, [pc, #312]	; (8010578 <extractModbus485Configuration+0x204>)
 801043e:	f002 fbc5 	bl	8012bcc <strcpy>
				break;
 8010442:	e7a8      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTParity,configptr);
 8010444:	4621      	mov	r1, r4
 8010446:	484d      	ldr	r0, [pc, #308]	; (801057c <extractModbus485Configuration+0x208>)
 8010448:	f002 fbc0 	bl	8012bcc <strcpy>
				break;
 801044c:	e7a3      	b.n	8010396 <extractModbus485Configuration+0x22>
				if(atoi(gau8ConfigModbus485DataPoints) <= CONFIG_MB485_MAXPARAMS)
 801044e:	4847      	ldr	r0, [pc, #284]	; (801056c <extractModbus485Configuration+0x1f8>)
 8010450:	f002 f862 	bl	8012518 <atoi>
 8010454:	2808      	cmp	r0, #8
 8010456:	dc9e      	bgt.n	8010396 <extractModbus485Configuration+0x22>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 8010458:	2600      	movs	r6, #0
 801045a:	4844      	ldr	r0, [pc, #272]	; (801056c <extractModbus485Configuration+0x1f8>)
 801045c:	f002 f85c 	bl	8012518 <atoi>
 8010460:	42b0      	cmp	r0, r6
 8010462:	d912      	bls.n	801048a <extractModbus485Configuration+0x116>
						gau32ConfigModbus485Address[u32Loopcounter] = atoi(configptr);
 8010464:	4620      	mov	r0, r4
 8010466:	f002 f857 	bl	8012518 <atoi>
 801046a:	4d3b      	ldr	r5, [pc, #236]	; (8010558 <extractModbus485Configuration+0x1e4>)
 801046c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8010470:	64a8      	str	r0, [r5, #72]	; 0x48
						gau32ConfigModbusTCPAddress[u32Loopcounter] = atoi(configptr);
 8010472:	4620      	mov	r0, r4
 8010474:	f002 f850 	bl	8012518 <atoi>
 8010478:	f8c5 00ac 	str.w	r0, [r5, #172]	; 0xac
						configptr = strtok(NULL, ",");
 801047c:	4935      	ldr	r1, [pc, #212]	; (8010554 <extractModbus485Configuration+0x1e0>)
 801047e:	2000      	movs	r0, #0
 8010480:	f003 fa1c 	bl	80138bc <strtok>
 8010484:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 8010486:	3601      	adds	r6, #1
 8010488:	e7e7      	b.n	801045a <extractModbus485Configuration+0xe6>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 801048a:	2600      	movs	r6, #0
 801048c:	e011      	b.n	80104b2 <extractModbus485Configuration+0x13e>
						gau32ConfigModbus485DFunctionCode[u32Loopcounter] = atoi(configptr);
 801048e:	4620      	mov	r0, r4
 8010490:	f002 f842 	bl	8012518 <atoi>
 8010494:	4d30      	ldr	r5, [pc, #192]	; (8010558 <extractModbus485Configuration+0x1e4>)
 8010496:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801049a:	66a8      	str	r0, [r5, #104]	; 0x68
						gau32ConfigModbusTCPDFunctionCode[u32Loopcounter] = atoi(configptr);
 801049c:	4620      	mov	r0, r4
 801049e:	f002 f83b 	bl	8012518 <atoi>
 80104a2:	f8c5 00cc 	str.w	r0, [r5, #204]	; 0xcc
						configptr = strtok(NULL, ",");
 80104a6:	492b      	ldr	r1, [pc, #172]	; (8010554 <extractModbus485Configuration+0x1e0>)
 80104a8:	2000      	movs	r0, #0
 80104aa:	f003 fa07 	bl	80138bc <strtok>
 80104ae:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 80104b0:	3601      	adds	r6, #1
 80104b2:	482e      	ldr	r0, [pc, #184]	; (801056c <extractModbus485Configuration+0x1f8>)
 80104b4:	f002 f830 	bl	8012518 <atoi>
 80104b8:	42b0      	cmp	r0, r6
 80104ba:	d8e8      	bhi.n	801048e <extractModbus485Configuration+0x11a>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 80104bc:	2600      	movs	r6, #0
 80104be:	e012      	b.n	80104e6 <extractModbus485Configuration+0x172>
						gau32ConfigModbus485NoPoints[u32Loopcounter] = atoi(configptr);
 80104c0:	4620      	mov	r0, r4
 80104c2:	f002 f829 	bl	8012518 <atoi>
 80104c6:	4d24      	ldr	r5, [pc, #144]	; (8010558 <extractModbus485Configuration+0x1e4>)
 80104c8:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80104cc:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
						gau32ConfigModbusTCPNoPoints[u32Loopcounter] = atoi(configptr);
 80104d0:	4620      	mov	r0, r4
 80104d2:	f002 f821 	bl	8012518 <atoi>
 80104d6:	f8c5 00ec 	str.w	r0, [r5, #236]	; 0xec
						configptr = strtok(NULL, ",");
 80104da:	491e      	ldr	r1, [pc, #120]	; (8010554 <extractModbus485Configuration+0x1e0>)
 80104dc:	2000      	movs	r0, #0
 80104de:	f003 f9ed 	bl	80138bc <strtok>
 80104e2:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 80104e4:	3601      	adds	r6, #1
 80104e6:	4821      	ldr	r0, [pc, #132]	; (801056c <extractModbus485Configuration+0x1f8>)
 80104e8:	f002 f816 	bl	8012518 <atoi>
 80104ec:	42b0      	cmp	r0, r6
 80104ee:	d8e7      	bhi.n	80104c0 <extractModbus485Configuration+0x14c>
 80104f0:	e751      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485PollingTime,configptr);
 80104f2:	4621      	mov	r1, r4
 80104f4:	4822      	ldr	r0, [pc, #136]	; (8010580 <extractModbus485Configuration+0x20c>)
 80104f6:	f002 fb69 	bl	8012bcc <strcpy>
				break;
 80104fa:	e74c      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485ResponseTime,configptr);
 80104fc:	4621      	mov	r1, r4
 80104fe:	4821      	ldr	r0, [pc, #132]	; (8010584 <extractModbus485Configuration+0x210>)
 8010500:	f002 fb64 	bl	8012bcc <strcpy>
				break;
 8010504:	e747      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPDEVICE,configptr);
 8010506:	4621      	mov	r1, r4
 8010508:	481f      	ldr	r0, [pc, #124]	; (8010588 <extractModbus485Configuration+0x214>)
 801050a:	f002 fb5f 	bl	8012bcc <strcpy>
				break;
 801050e:	e742      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPSUBNET,configptr);
 8010510:	4621      	mov	r1, r4
 8010512:	481e      	ldr	r0, [pc, #120]	; (801058c <extractModbus485Configuration+0x218>)
 8010514:	f002 fb5a 	bl	8012bcc <strcpy>
				break;
 8010518:	e73d      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPSERVER,configptr);
 801051a:	4621      	mov	r1, r4
 801051c:	481c      	ldr	r0, [pc, #112]	; (8010590 <extractModbus485Configuration+0x21c>)
 801051e:	f002 fb55 	bl	8012bcc <strcpy>
				break;
 8010522:	e738      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPGATEWAY,configptr);
 8010524:	4621      	mov	r1, r4
 8010526:	481b      	ldr	r0, [pc, #108]	; (8010594 <extractModbus485Configuration+0x220>)
 8010528:	f002 fb50 	bl	8012bcc <strcpy>
				break;
 801052c:	e733      	b.n	8010396 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPPORT,configptr);
 801052e:	4621      	mov	r1, r4
 8010530:	4819      	ldr	r0, [pc, #100]	; (8010598 <extractModbus485Configuration+0x224>)
 8010532:	f002 fb4b 	bl	8012bcc <strcpy>
				break;
 8010536:	e72e      	b.n	8010396 <extractModbus485Configuration+0x22>
			configptr = strtok(NULL, ",");
 8010538:	4906      	ldr	r1, [pc, #24]	; (8010554 <extractModbus485Configuration+0x1e0>)
 801053a:	2000      	movs	r0, #0
 801053c:	f003 f9be 	bl	80138bc <strtok>
 8010540:	4604      	mov	r4, r0
 8010542:	e72e      	b.n	80103a2 <extractModbus485Configuration+0x2e>
	gu32ExtractParamCounter = 0;
 8010544:	4b05      	ldr	r3, [pc, #20]	; (801055c <extractModbus485Configuration+0x1e8>)
 8010546:	2200      	movs	r2, #0
 8010548:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyModbus485ConfigData();
 801054c:	f7ff f9e0 	bl	800f910 <verifyModbus485ConfigData>
}
 8010550:	bd70      	pop	{r4, r5, r6, pc}
 8010552:	bf00      	nop
 8010554:	0801c738 	.word	0x0801c738
 8010558:	20001fb8 	.word	0x20001fb8
 801055c:	20004034 	.word	0x20004034
 8010560:	2000419c 	.word	0x2000419c
 8010564:	200041a4 	.word	0x200041a4
 8010568:	200041ac 	.word	0x200041ac
 801056c:	200041b0 	.word	0x200041b0
 8010570:	20001ff4 	.word	0x20001ff4
 8010574:	200041b4 	.word	0x200041b4
 8010578:	200041b8 	.word	0x200041b8
 801057c:	20004214 	.word	0x20004214
 8010580:	200041bc 	.word	0x200041bc
 8010584:	200041c4 	.word	0x200041c4
 8010588:	20004218 	.word	0x20004218
 801058c:	20004228 	.word	0x20004228
 8010590:	20004238 	.word	0x20004238
 8010594:	20004248 	.word	0x20004248
 8010598:	200041d0 	.word	0x200041d0

0801059c <extractModbusTCPConfiguration>:
{
 801059c:	b538      	push	{r3, r4, r5, lr}
	char *configptr = strtok(mbTCPconfig, ",");
 801059e:	495b      	ldr	r1, [pc, #364]	; (801070c <extractModbusTCPConfiguration+0x170>)
 80105a0:	4b5b      	ldr	r3, [pc, #364]	; (8010710 <extractModbusTCPConfiguration+0x174>)
 80105a2:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80105a6:	f003 f989 	bl	80138bc <strtok>
 80105aa:	4604      	mov	r4, r0
	gu32ExtractParamCounter = 0;
 80105ac:	4b59      	ldr	r3, [pc, #356]	; (8010714 <extractModbusTCPConfiguration+0x178>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	while(configptr != NULL)
 80105b4:	e00f      	b.n	80105d6 <extractModbusTCPConfiguration+0x3a>
				strcpy(gau8ConfigModbusTCPIsEnabled,configptr);
 80105b6:	4621      	mov	r1, r4
 80105b8:	4857      	ldr	r0, [pc, #348]	; (8010718 <extractModbusTCPConfiguration+0x17c>)
 80105ba:	f002 fb07 	bl	8012bcc <strcpy>
		if(gu32ExtractParamCounter != 8)
 80105be:	4b55      	ldr	r3, [pc, #340]	; (8010714 <extractModbusTCPConfiguration+0x178>)
 80105c0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80105c4:	2b08      	cmp	r3, #8
 80105c6:	f040 8094 	bne.w	80106f2 <extractModbusTCPConfiguration+0x156>
		gu32ExtractParamCounter++;
 80105ca:	4a52      	ldr	r2, [pc, #328]	; (8010714 <extractModbusTCPConfiguration+0x178>)
 80105cc:	f8d2 31dc 	ldr.w	r3, [r2, #476]	; 0x1dc
 80105d0:	3301      	adds	r3, #1
 80105d2:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
	while(configptr != NULL)
 80105d6:	2c00      	cmp	r4, #0
 80105d8:	f000 8091 	beq.w	80106fe <extractModbusTCPConfiguration+0x162>
		switch(gu32ExtractParamCounter)
 80105dc:	4b4d      	ldr	r3, [pc, #308]	; (8010714 <extractModbusTCPConfiguration+0x178>)
 80105de:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80105e2:	3b01      	subs	r3, #1
 80105e4:	2b09      	cmp	r3, #9
 80105e6:	d8ea      	bhi.n	80105be <extractModbusTCPConfiguration+0x22>
 80105e8:	a201      	add	r2, pc, #4	; (adr r2, 80105f0 <extractModbusTCPConfiguration+0x54>)
 80105ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ee:	bf00      	nop
 80105f0:	080105b7 	.word	0x080105b7
 80105f4:	08010619 	.word	0x08010619
 80105f8:	08010623 	.word	0x08010623
 80105fc:	0801062d 	.word	0x0801062d
 8010600:	08010637 	.word	0x08010637
 8010604:	08010641 	.word	0x08010641
 8010608:	0801064b 	.word	0x0801064b
 801060c:	08010655 	.word	0x08010655
 8010610:	080106df 	.word	0x080106df
 8010614:	080106e9 	.word	0x080106e9
				strcpy(gau8ConfigModbusTCPDataPoints,configptr);
 8010618:	4621      	mov	r1, r4
 801061a:	4840      	ldr	r0, [pc, #256]	; (801071c <extractModbusTCPConfiguration+0x180>)
 801061c:	f002 fad6 	bl	8012bcc <strcpy>
				break;
 8010620:	e7cd      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPDEVICE,configptr);
 8010622:	4621      	mov	r1, r4
 8010624:	483e      	ldr	r0, [pc, #248]	; (8010720 <extractModbusTCPConfiguration+0x184>)
 8010626:	f002 fad1 	bl	8012bcc <strcpy>
				break;
 801062a:	e7c8      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPSUBNET,configptr);
 801062c:	4621      	mov	r1, r4
 801062e:	483d      	ldr	r0, [pc, #244]	; (8010724 <extractModbusTCPConfiguration+0x188>)
 8010630:	f002 facc 	bl	8012bcc <strcpy>
				break;
 8010634:	e7c3      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPSERVER,configptr);
 8010636:	4621      	mov	r1, r4
 8010638:	483b      	ldr	r0, [pc, #236]	; (8010728 <extractModbusTCPConfiguration+0x18c>)
 801063a:	f002 fac7 	bl	8012bcc <strcpy>
				break;
 801063e:	e7be      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPGATEWAY,configptr);
 8010640:	4621      	mov	r1, r4
 8010642:	483a      	ldr	r0, [pc, #232]	; (801072c <extractModbusTCPConfiguration+0x190>)
 8010644:	f002 fac2 	bl	8012bcc <strcpy>
				break;
 8010648:	e7b9      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPPORT,configptr);
 801064a:	4621      	mov	r1, r4
 801064c:	4838      	ldr	r0, [pc, #224]	; (8010730 <extractModbusTCPConfiguration+0x194>)
 801064e:	f002 fabd 	bl	8012bcc <strcpy>
				break;
 8010652:	e7b4      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				if(atoi(gau8ConfigModbusTCPDataPoints) <= CONFIG_MBTCP_MAXPARAMS)
 8010654:	4831      	ldr	r0, [pc, #196]	; (801071c <extractModbusTCPConfiguration+0x180>)
 8010656:	f001 ff5f 	bl	8012518 <atoi>
 801065a:	2808      	cmp	r0, #8
 801065c:	dcaf      	bgt.n	80105be <extractModbusTCPConfiguration+0x22>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 801065e:	2500      	movs	r5, #0
 8010660:	e00d      	b.n	801067e <extractModbusTCPConfiguration+0xe2>
						gau32ConfigModbusTCPAddress[u32Loopcounter] = atoi(configptr);
 8010662:	4620      	mov	r0, r4
 8010664:	f001 ff58 	bl	8012518 <atoi>
 8010668:	4b29      	ldr	r3, [pc, #164]	; (8010710 <extractModbusTCPConfiguration+0x174>)
 801066a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801066e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
						configptr = strtok(NULL, ",");
 8010672:	4926      	ldr	r1, [pc, #152]	; (801070c <extractModbusTCPConfiguration+0x170>)
 8010674:	2000      	movs	r0, #0
 8010676:	f003 f921 	bl	80138bc <strtok>
 801067a:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 801067c:	3501      	adds	r5, #1
 801067e:	4827      	ldr	r0, [pc, #156]	; (801071c <extractModbusTCPConfiguration+0x180>)
 8010680:	f001 ff4a 	bl	8012518 <atoi>
 8010684:	42a8      	cmp	r0, r5
 8010686:	d8ec      	bhi.n	8010662 <extractModbusTCPConfiguration+0xc6>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 8010688:	2500      	movs	r5, #0
 801068a:	e00d      	b.n	80106a8 <extractModbusTCPConfiguration+0x10c>
						gau32ConfigModbusTCPDFunctionCode[u32Loopcounter] = atoi(configptr);
 801068c:	4620      	mov	r0, r4
 801068e:	f001 ff43 	bl	8012518 <atoi>
 8010692:	4b1f      	ldr	r3, [pc, #124]	; (8010710 <extractModbusTCPConfiguration+0x174>)
 8010694:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8010698:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
						configptr = strtok(NULL, ",");
 801069c:	491b      	ldr	r1, [pc, #108]	; (801070c <extractModbusTCPConfiguration+0x170>)
 801069e:	2000      	movs	r0, #0
 80106a0:	f003 f90c 	bl	80138bc <strtok>
 80106a4:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 80106a6:	3501      	adds	r5, #1
 80106a8:	481c      	ldr	r0, [pc, #112]	; (801071c <extractModbusTCPConfiguration+0x180>)
 80106aa:	f001 ff35 	bl	8012518 <atoi>
 80106ae:	42a8      	cmp	r0, r5
 80106b0:	d8ec      	bhi.n	801068c <extractModbusTCPConfiguration+0xf0>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 80106b2:	2500      	movs	r5, #0
 80106b4:	e00d      	b.n	80106d2 <extractModbusTCPConfiguration+0x136>
						gau32ConfigModbusTCPNoPoints[u32Loopcounter] = atoi(configptr);
 80106b6:	4620      	mov	r0, r4
 80106b8:	f001 ff2e 	bl	8012518 <atoi>
 80106bc:	4b14      	ldr	r3, [pc, #80]	; (8010710 <extractModbusTCPConfiguration+0x174>)
 80106be:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80106c2:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
						configptr = strtok(NULL, ",");
 80106c6:	4911      	ldr	r1, [pc, #68]	; (801070c <extractModbusTCPConfiguration+0x170>)
 80106c8:	2000      	movs	r0, #0
 80106ca:	f003 f8f7 	bl	80138bc <strtok>
 80106ce:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 80106d0:	3501      	adds	r5, #1
 80106d2:	4812      	ldr	r0, [pc, #72]	; (801071c <extractModbusTCPConfiguration+0x180>)
 80106d4:	f001 ff20 	bl	8012518 <atoi>
 80106d8:	42a8      	cmp	r0, r5
 80106da:	d8ec      	bhi.n	80106b6 <extractModbusTCPConfiguration+0x11a>
 80106dc:	e76f      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPPollingTime,configptr);
 80106de:	4621      	mov	r1, r4
 80106e0:	4814      	ldr	r0, [pc, #80]	; (8010734 <extractModbusTCPConfiguration+0x198>)
 80106e2:	f002 fa73 	bl	8012bcc <strcpy>
				break;
 80106e6:	e76a      	b.n	80105be <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPResponseTime,configptr);
 80106e8:	4621      	mov	r1, r4
 80106ea:	4813      	ldr	r0, [pc, #76]	; (8010738 <extractModbusTCPConfiguration+0x19c>)
 80106ec:	f002 fa6e 	bl	8012bcc <strcpy>
				break;
 80106f0:	e765      	b.n	80105be <extractModbusTCPConfiguration+0x22>
			configptr = strtok(NULL, ",");
 80106f2:	4906      	ldr	r1, [pc, #24]	; (801070c <extractModbusTCPConfiguration+0x170>)
 80106f4:	2000      	movs	r0, #0
 80106f6:	f003 f8e1 	bl	80138bc <strtok>
 80106fa:	4604      	mov	r4, r0
 80106fc:	e765      	b.n	80105ca <extractModbusTCPConfiguration+0x2e>
	gu32ExtractParamCounter = 0;
 80106fe:	4b05      	ldr	r3, [pc, #20]	; (8010714 <extractModbusTCPConfiguration+0x178>)
 8010700:	2200      	movs	r2, #0
 8010702:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyModbusTCPConfigData();
 8010706:	f7ff fa69 	bl	800fbdc <verifyModbusTCPConfigData>
}
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	0801c738 	.word	0x0801c738
 8010710:	20001fb8 	.word	0x20001fb8
 8010714:	20004034 	.word	0x20004034
 8010718:	200041d8 	.word	0x200041d8
 801071c:	200041dc 	.word	0x200041dc
 8010720:	20004218 	.word	0x20004218
 8010724:	20004228 	.word	0x20004228
 8010728:	20004238 	.word	0x20004238
 801072c:	20004248 	.word	0x20004248
 8010730:	200041d0 	.word	0x200041d0
 8010734:	200041e0 	.word	0x200041e0
 8010738:	200041e8 	.word	0x200041e8

0801073c <getLastKnownConfiguration>:
{
	/* Read Sector 22 till we get FF */
	uint32_t flashAddress = ADDR_FLASH_SECTOR_22;
	uint32_t loopCounter = 0;

	if(strlen(tempconfig) == 0)
 801073c:	4bb3      	ldr	r3, [pc, #716]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 801073e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	f000 81d2 	beq.w	8010aee <getLastKnownConfiguration+0x3b2>
 801074a:	4770      	bx	lr
{
 801074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010750:	af00      	add	r7, sp, #0
			{
				/* Configuration End . Parse the configuration */
				if(strlen(gau8LastKnownConfiguration) != 0 )
				{
					/* Data corrupting hence coping into a var */
					memset(nwsof, 0, 5);
 8010752:	4cae      	ldr	r4, [pc, #696]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 8010754:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8010758:	2300      	movs	r3, #0
 801075a:	6013      	str	r3, [r2, #0]
 801075c:	7113      	strb	r3, [r2, #4]
					memset(nweof, 0, 5);
 801075e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	7113      	strb	r3, [r2, #4]
					memset(mb485sof, 0, 5);
 8010766:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 801076a:	6013      	str	r3, [r2, #0]
 801076c:	7113      	strb	r3, [r2, #4]
					memset(mb485eof, 0,5);
 801076e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8010772:	6013      	str	r3, [r2, #0]
 8010774:	7113      	strb	r3, [r2, #4]
					memset(mbTCPsof, 0, 5);
 8010776:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
 801077a:	6013      	str	r3, [r2, #0]
 801077c:	7113      	strb	r3, [r2, #4]
					memset(mbTCPeof, 0, 5);
 801077e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	7113      	strb	r3, [r2, #4]

					strcpy(gau8ConfigurationCopy, gau8LastKnownConfiguration);
 8010786:	4da2      	ldr	r5, [pc, #648]	; (8010a10 <getLastKnownConfiguration+0x2d4>)
 8010788:	4629      	mov	r1, r5
 801078a:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 801078e:	f002 fa1d 	bl	8012bcc <strcpy>
					/* Validate the configuration */
					nwsof = strstr(gau8LastKnownConfiguration,"NS,");
 8010792:	49a0      	ldr	r1, [pc, #640]	; (8010a14 <getLastKnownConfiguration+0x2d8>)
 8010794:	4628      	mov	r0, r5
 8010796:	f002 fa46 	bl	8012c26 <strstr>
 801079a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
					nweof = strstr(gau8LastKnownConfiguration,",NE");
 801079e:	499e      	ldr	r1, [pc, #632]	; (8010a18 <getLastKnownConfiguration+0x2dc>)
 80107a0:	4628      	mov	r0, r5
 80107a2:	f002 fa40 	bl	8012c26 <strstr>
 80107a6:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
					mb485sof =  strstr(gau8LastKnownConfiguration,"MS,");
 80107aa:	499c      	ldr	r1, [pc, #624]	; (8010a1c <getLastKnownConfiguration+0x2e0>)
 80107ac:	4628      	mov	r0, r5
 80107ae:	f002 fa3a 	bl	8012c26 <strstr>
 80107b2:	4606      	mov	r6, r0
 80107b4:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
					mb485eof =  strstr(gau8LastKnownConfiguration,",ME");
 80107b8:	4999      	ldr	r1, [pc, #612]	; (8010a20 <getLastKnownConfiguration+0x2e4>)
 80107ba:	4628      	mov	r0, r5
 80107bc:	f002 fa33 	bl	8012c26 <strstr>
 80107c0:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
//					mbTCPsof =  strstr(gau8LastKnownConfiguration,"ms,");
//					mbTCPeof =  strstr(gau8LastKnownConfiguration,",me");

					if((mb485sof == NULL )|(mb485eof == NULL))
 80107c4:	fab0 f380 	clz	r3, r0
 80107c8:	095b      	lsrs	r3, r3, #5
 80107ca:	2e00      	cmp	r6, #0
 80107cc:	bf08      	it	eq
 80107ce:	2301      	moveq	r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f000 8090 	beq.w	80108f6 <getLastKnownConfiguration+0x1ba>
					{
						/*SOF / EOF Not found . Raise Error */
						gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 80107d6:	4a93      	ldr	r2, [pc, #588]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 80107d8:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 80107dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107e0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
						}
						else
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
					}

					if((mbTCPsof == NULL )|(mbTCPeof == NULL))
 80107e4:	4b89      	ldr	r3, [pc, #548]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 80107e6:	f8d3 4190 	ldr.w	r4, [r3, #400]	; 0x190
 80107ea:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
 80107ee:	fab1 f381 	clz	r3, r1
 80107f2:	095b      	lsrs	r3, r3, #5
 80107f4:	2c00      	cmp	r4, #0
 80107f6:	bf08      	it	eq
 80107f8:	2301      	moveq	r3, #1
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	f000 809f 	beq.w	801093e <getLastKnownConfiguration+0x202>
					{
						/*SOF / EOF Not found . Raise Error */
						gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPCONFIGNOTFOUND);
 8010800:	4a88      	ldr	r2, [pc, #544]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010802:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010806:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801080a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
						else
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);

					}

					if((nwsof == NULL )|(nweof == NULL))
 801080e:	4b7f      	ldr	r3, [pc, #508]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 8010810:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8010814:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8010818:	fab1 f381 	clz	r3, r1
 801081c:	095b      	lsrs	r3, r3, #5
 801081e:	2c00      	cmp	r4, #0
 8010820:	bf08      	it	eq
 8010822:	2301      	moveq	r3, #1
 8010824:	2b00      	cmp	r3, #0
 8010826:	f000 80be 	beq.w	80109a6 <getLastKnownConfiguration+0x26a>
					{
						/*SOF / EOF Not found . Raise Error */
						gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);
 801082a:	4a7e      	ldr	r2, [pc, #504]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 801082c:	6853      	ldr	r3, [r2, #4]
 801082e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010832:	6053      	str	r3, [r2, #4]
						}
						else
							gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);

					}
					if((gu32ConfigNetworkErrorDatabase == 0 ) && (nwconfig != NULL))
 8010834:	4b7b      	ldr	r3, [pc, #492]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	bb73      	cbnz	r3, 8010898 <getLastKnownConfiguration+0x15c>
 801083a:	4b74      	ldr	r3, [pc, #464]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 801083c:	f8d3 3970 	ldr.w	r3, [r3, #2416]	; 0x970
 8010840:	b353      	cbz	r3, 8010898 <getLastKnownConfiguration+0x15c>
					{
						/* Update System with N/W Configuration */
						/* APN */
						memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
 8010842:	4e79      	ldr	r6, [pc, #484]	; (8010a28 <getLastKnownConfiguration+0x2ec>)
 8010844:	2564      	movs	r5, #100	; 0x64
 8010846:	462a      	mov	r2, r5
 8010848:	2100      	movs	r1, #0
 801084a:	4630      	mov	r0, r6
 801084c:	f002 f92e 	bl	8012aac <memset>
						memcpy(gau8GSM4G_apn,gau8ConfigNewtorkAPN, strlen(gau8ConfigNewtorkAPN));
 8010850:	4c6e      	ldr	r4, [pc, #440]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 8010852:	4620      	mov	r0, r4
 8010854:	f7ef fcd6 	bl	8000204 <strlen>
 8010858:	4602      	mov	r2, r0
 801085a:	4621      	mov	r1, r4
 801085c:	4630      	mov	r0, r6
 801085e:	f002 f8fd 	bl	8012a5c <memcpy>
						/* URL Commented for different API(other than bluestar) */
//						memset(gau8GSM_url,0x00,sizeof(char) * 100);
//						memcpy( gau8GSM_url, gau8ConfigNewtorkServerURL, strlen(gau8ConfigNewtorkServerURL));
						/* Config URL */
						memset(gau8RemoteConfigurationURL,0x00,sizeof(char) * 100);
 8010862:	4e72      	ldr	r6, [pc, #456]	; (8010a2c <getLastKnownConfiguration+0x2f0>)
 8010864:	462a      	mov	r2, r5
 8010866:	2100      	movs	r1, #0
 8010868:	4630      	mov	r0, r6
 801086a:	f002 f91f 	bl	8012aac <memset>
						memcpy( gau8RemoteConfigurationURL, gau8ConfigNewtorkConfigURL, strlen(gau8ConfigNewtorkConfigURL));
 801086e:	4d6d      	ldr	r5, [pc, #436]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010870:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 8010874:	4640      	mov	r0, r8
 8010876:	f7ef fcc5 	bl	8000204 <strlen>
 801087a:	4602      	mov	r2, r0
 801087c:	4641      	mov	r1, r8
 801087e:	4630      	mov	r0, r6
 8010880:	f002 f8ec 	bl	8012a5c <memcpy>
						/* Upload Time */
						gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
 8010884:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8010888:	f001 fe46 	bl	8012518 <atoi>
 801088c:	6360      	str	r0, [r4, #52]	; 0x34
						gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
 801088e:	f505 70a2 	add.w	r0, r5, #324	; 0x144
 8010892:	f001 fe41 	bl	8012518 <atoi>
 8010896:	63a0      	str	r0, [r4, #56]	; 0x38
					}
					if((gu32ConfigModbus485ErrorDatabase == 0 ) && (mb485config != NULL))
 8010898:	4b62      	ldr	r3, [pc, #392]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 801089a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 801089e:	2b00      	cmp	r3, #0
 80108a0:	f040 810e 	bne.w	8010ac0 <getLastKnownConfiguration+0x384>
 80108a4:	4b59      	ldr	r3, [pc, #356]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 80108a6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f000 8108 	beq.w	8010ac0 <getLastKnownConfiguration+0x384>
					{
						/* Update System with Modbus485 Configuration */
						gu32OperateModbus485 = atoi(gau8ConfigModbus485IsEnabled);
 80108b0:	4c5c      	ldr	r4, [pc, #368]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 80108b2:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 80108b6:	f001 fe2f 	bl	8012518 <atoi>
 80108ba:	4d54      	ldr	r5, [pc, #336]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 80108bc:	f8c5 0974 	str.w	r0, [r5, #2420]	; 0x974
						gu32Modbus485SlaveID = atoi(gau8ConfigModbus485SlaveID);
 80108c0:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 80108c4:	f001 fe28 	bl	8012518 <atoi>
 80108c8:	f8c5 0978 	str.w	r0, [r5, #2424]	; 0x978
						gu32Modbus485RegisterFetch = atoi(gau8ConfigModbus485DataPoints);
 80108cc:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 80108d0:	f001 fe22 	bl	8012518 <atoi>
 80108d4:	f8c5 097c 	str.w	r0, [r5, #2428]	; 0x97c
						gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
 80108d8:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 80108dc:	f001 fe1c 	bl	8012518 <atoi>
 80108e0:	6468      	str	r0, [r5, #68]	; 0x44
						gu32Modbus485ResponseTime = atoi(gau8ConfigModbus485ResponseTime);
 80108e2:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 80108e6:	f001 fe17 	bl	8012518 <atoi>
 80108ea:	f8c5 0980 	str.w	r0, [r5, #2432]	; 0x980
						gu32LoopCounter = 0;
 80108ee:	2300      	movs	r3, #0
 80108f0:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
						for(gu32LoopCounter = 0; gu32LoopCounter <gu32Modbus485RegisterFetch; gu32LoopCounter++)
 80108f4:	e0bf      	b.n	8010a76 <getLastKnownConfiguration+0x33a>
						mb485mlen = mb485eof - mb485sof;
 80108f6:	1b86      	subs	r6, r0, r6
 80108f8:	4b4a      	ldr	r3, [pc, #296]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 80108fa:	f8c3 61d4 	str.w	r6, [r3, #468]	; 0x1d4
						mb485config = (char *)malloc((sizeof(char) *mb485mlen));
 80108fe:	4630      	mov	r0, r6
 8010900:	f001 fe4c 	bl	801259c <malloc>
 8010904:	4b41      	ldr	r3, [pc, #260]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 8010906:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
						if(mb485config!= NULL)
 801090a:	b180      	cbz	r0, 801092e <getLastKnownConfiguration+0x1f2>
							memset(mb485config, 0, mb485mlen);
 801090c:	4632      	mov	r2, r6
 801090e:	2100      	movs	r1, #0
 8010910:	f002 f8cc 	bl	8012aac <memset>
							memcpy(mb485config,mb485sof,mb485mlen);
 8010914:	4b3d      	ldr	r3, [pc, #244]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 8010916:	4a43      	ldr	r2, [pc, #268]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010918:	f8d2 21d4 	ldr.w	r2, [r2, #468]	; 0x1d4
 801091c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 8010920:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 8010924:	f002 f89a 	bl	8012a5c <memcpy>
							extractModbus485Configuration();
 8010928:	f7ff fd24 	bl	8010374 <extractModbus485Configuration>
 801092c:	e75a      	b.n	80107e4 <getLastKnownConfiguration+0xa8>
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 801092e:	4a3d      	ldr	r2, [pc, #244]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010930:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8010934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010938:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 801093c:	e752      	b.n	80107e4 <getLastKnownConfiguration+0xa8>
						mbtcpmlen = mbTCPeof - mbTCPsof;
 801093e:	1b0c      	subs	r4, r1, r4
 8010940:	4b38      	ldr	r3, [pc, #224]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010942:	f8c3 41d8 	str.w	r4, [r3, #472]	; 0x1d8
						mbTCPconfig = (char *)malloc((sizeof(char) * mbtcpmlen));
 8010946:	4620      	mov	r0, r4
 8010948:	f001 fe28 	bl	801259c <malloc>
 801094c:	4b2f      	ldr	r3, [pc, #188]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 801094e:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
						if(mbTCPconfig!= NULL)
 8010952:	b300      	cbz	r0, 8010996 <getLastKnownConfiguration+0x25a>
						{
 8010954:	466d      	mov	r5, sp
							char u8temp_array[mbtcpmlen];
 8010956:	1de3      	adds	r3, r4, #7
 8010958:	f023 0307 	bic.w	r3, r3, #7
 801095c:	ebad 0d03 	sub.w	sp, sp, r3
							memset(mbTCPconfig, 0, mbtcpmlen);
 8010960:	4622      	mov	r2, r4
 8010962:	2100      	movs	r1, #0
 8010964:	f002 f8a2 	bl	8012aac <memset>
							memset(u8temp_array, 0, sizeof(u8temp_array));
 8010968:	4622      	mov	r2, r4
 801096a:	2100      	movs	r1, #0
 801096c:	4668      	mov	r0, sp
 801096e:	f002 f89d 	bl	8012aac <memset>
							memcpy(u8temp_array,mbTCPsof,mbtcpmlen);
 8010972:	4c26      	ldr	r4, [pc, #152]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 8010974:	4b2b      	ldr	r3, [pc, #172]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010976:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 801097a:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
 801097e:	4668      	mov	r0, sp
 8010980:	f002 f86c 	bl	8012a5c <memcpy>
							strcpy(mbTCPconfig,u8temp_array);
 8010984:	4669      	mov	r1, sp
 8010986:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
 801098a:	f002 f91f 	bl	8012bcc <strcpy>
							extractModbusTCPConfiguration();
 801098e:	f7ff fe05 	bl	801059c <extractModbusTCPConfiguration>
 8010992:	46ad      	mov	sp, r5
 8010994:	e73b      	b.n	801080e <getLastKnownConfiguration+0xd2>
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 8010996:	4a23      	ldr	r2, [pc, #140]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010998:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 801099c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80109a0:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80109a4:	e733      	b.n	801080e <getLastKnownConfiguration+0xd2>
						nwmlen = nweof - nwsof;
 80109a6:	1b0c      	subs	r4, r1, r4
 80109a8:	4b1e      	ldr	r3, [pc, #120]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 80109aa:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
						nwconfig = (char *)malloc((sizeof(char) *nwmlen));
 80109ae:	4620      	mov	r0, r4
 80109b0:	f001 fdf4 	bl	801259c <malloc>
 80109b4:	4b15      	ldr	r3, [pc, #84]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 80109b6:	f8c3 0970 	str.w	r0, [r3, #2416]	; 0x970
						if(nwconfig!= NULL)
 80109ba:	b300      	cbz	r0, 80109fe <getLastKnownConfiguration+0x2c2>
						{
 80109bc:	466d      	mov	r5, sp
							char u8temp_array[nwmlen];
 80109be:	1de3      	adds	r3, r4, #7
 80109c0:	f023 0307 	bic.w	r3, r3, #7
 80109c4:	ebad 0d03 	sub.w	sp, sp, r3
							memset(nwconfig, 0, nwmlen);
 80109c8:	4622      	mov	r2, r4
 80109ca:	2100      	movs	r1, #0
 80109cc:	f002 f86e 	bl	8012aac <memset>
							memset(u8temp_array, 0, sizeof(u8temp_array));
 80109d0:	4622      	mov	r2, r4
 80109d2:	2100      	movs	r1, #0
 80109d4:	4668      	mov	r0, sp
 80109d6:	f002 f869 	bl	8012aac <memset>
							memcpy(u8temp_array,nwsof,nwmlen);
 80109da:	4c0c      	ldr	r4, [pc, #48]	; (8010a0c <getLastKnownConfiguration+0x2d0>)
 80109dc:	4b11      	ldr	r3, [pc, #68]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 80109de:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 80109e2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 80109e6:	4668      	mov	r0, sp
 80109e8:	f002 f838 	bl	8012a5c <memcpy>
							strcpy(nwconfig,u8temp_array);
 80109ec:	4669      	mov	r1, sp
 80109ee:	f8d4 0970 	ldr.w	r0, [r4, #2416]	; 0x970
 80109f2:	f002 f8eb 	bl	8012bcc <strcpy>
							extractNewtorkConfiguration();
 80109f6:	f7ff fc43 	bl	8010280 <extractNewtorkConfiguration>
 80109fa:	46ad      	mov	sp, r5
 80109fc:	e71a      	b.n	8010834 <getLastKnownConfiguration+0xf8>
							gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);
 80109fe:	4a09      	ldr	r2, [pc, #36]	; (8010a24 <getLastKnownConfiguration+0x2e8>)
 8010a00:	6853      	ldr	r3, [r2, #4]
 8010a02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010a06:	6053      	str	r3, [r2, #4]
 8010a08:	e714      	b.n	8010834 <getLastKnownConfiguration+0xf8>
 8010a0a:	bf00      	nop
 8010a0c:	20001fb8 	.word	0x20001fb8
 8010a10:	2000fdc4 	.word	0x2000fdc4
 8010a14:	0801c8ac 	.word	0x0801c8ac
 8010a18:	0801c8b0 	.word	0x0801c8b0
 8010a1c:	0801c8b4 	.word	0x0801c8b4
 8010a20:	0801c8b8 	.word	0x0801c8b8
 8010a24:	20004034 	.word	0x20004034
 8010a28:	200004d8 	.word	0x200004d8
 8010a2c:	2000042c 	.word	0x2000042c
						{
							/*Copy MB485 Address/ FC / Points to respective array */
							gu32MBRTUClientAddress[gu32LoopCounter] = gau32ConfigModbus485Address[gu32LoopCounter];
 8010a30:	4a31      	ldr	r2, [pc, #196]	; (8010af8 <getLastKnownConfiguration+0x3bc>)
 8010a32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a36:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8010a38:	4930      	ldr	r1, [pc, #192]	; (8010afc <getLastKnownConfiguration+0x3c0>)
 8010a3a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBRTUClientFuncCode[gu32LoopCounter] = gau32ConfigModbus485DFunctionCode[gu32LoopCounter];
 8010a3e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8010a40:	492f      	ldr	r1, [pc, #188]	; (8010b00 <getLastKnownConfiguration+0x3c4>)
 8010a42:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBRTUClientNoofPoints[gu32LoopCounter] = gau32ConfigModbus485NoPoints[gu32LoopCounter];
 8010a46:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8010a4a:	492e      	ldr	r1, [pc, #184]	; (8010b04 <getLastKnownConfiguration+0x3c8>)
 8010a4c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							/*TCP */
							gu32MBTCPClientAddress[gu32LoopCounter] = gau32ConfigModbusTCPAddress[gu32LoopCounter];
 8010a50:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
 8010a54:	492c      	ldr	r1, [pc, #176]	; (8010b08 <getLastKnownConfiguration+0x3cc>)
 8010a56:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBTCPClientFuncCode[gu32LoopCounter] = gau32ConfigModbusTCPDFunctionCode[gu32LoopCounter];
 8010a5a:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 8010a5e:	492b      	ldr	r1, [pc, #172]	; (8010b0c <getLastKnownConfiguration+0x3d0>)
 8010a60:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBTCPClientNoofPoints[gu32LoopCounter] = gau32ConfigModbusTCPNoPoints[gu32LoopCounter];
 8010a64:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
 8010a68:	4a29      	ldr	r2, [pc, #164]	; (8010b10 <getLastKnownConfiguration+0x3d4>)
 8010a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for(gu32LoopCounter = 0; gu32LoopCounter <gu32Modbus485RegisterFetch; gu32LoopCounter++)
 8010a6e:	3301      	adds	r3, #1
 8010a70:	4a28      	ldr	r2, [pc, #160]	; (8010b14 <getLastKnownConfiguration+0x3d8>)
 8010a72:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8010a76:	4b27      	ldr	r3, [pc, #156]	; (8010b14 <getLastKnownConfiguration+0x3d8>)
 8010a78:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010a7c:	4a1e      	ldr	r2, [pc, #120]	; (8010af8 <getLastKnownConfiguration+0x3bc>)
 8010a7e:	f8d2 297c 	ldr.w	r2, [r2, #2428]	; 0x97c
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d3d4      	bcc.n	8010a30 <getLastKnownConfiguration+0x2f4>
						}
						/* TCP Added */
						inet_aton(gau8ConfigModbusTCPIPDEVICE,IP_ADDRESS);
 8010a86:	4c23      	ldr	r4, [pc, #140]	; (8010b14 <getLastKnownConfiguration+0x3d8>)
 8010a88:	4923      	ldr	r1, [pc, #140]	; (8010b18 <getLastKnownConfiguration+0x3dc>)
 8010a8a:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8010a8e:	f7fb f8a9 	bl	800bbe4 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPSUBNET,NETMASK_ADDRESS);
 8010a92:	4922      	ldr	r1, [pc, #136]	; (8010b1c <getLastKnownConfiguration+0x3e0>)
 8010a94:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 8010a98:	f7fb f8a4 	bl	800bbe4 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPGATEWAY,GATEWAY_ADDRESS);
 8010a9c:	4920      	ldr	r1, [pc, #128]	; (8010b20 <getLastKnownConfiguration+0x3e4>)
 8010a9e:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8010aa2:	f7fb f89f 	bl	800bbe4 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPSERVER,IP_ADDRESS_DESTI);
 8010aa6:	4d14      	ldr	r5, [pc, #80]	; (8010af8 <getLastKnownConfiguration+0x3bc>)
 8010aa8:	f605 1184 	addw	r1, r5, #2436	; 0x984
 8010aac:	f504 7001 	add.w	r0, r4, #516	; 0x204
 8010ab0:	f7fb f898 	bl	800bbe4 <ip4addr_aton>
						gu32ModbusTCPPort = atoi(gau8ConfigModbusTCPPORT);
 8010ab4:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8010ab8:	f001 fd2e 	bl	8012518 <atoi>
 8010abc:	f8c5 0988 	str.w	r0, [r5, #2440]	; 0x988
//						inet_aton(gau8ConfigModbusTCPIPGATEWAY,GATEWAY_ADDRESS);
//						inet_aton(gau8ConfigModbusTCPIPSERVER,IP_ADDRESS_DESTI);
//						gu32ModbusTCPPort = atoi(gau8ConfigModbusTCPPORT);
//					}
					/* Data corrupting hence coping into a var */
					strcpy(gau8LastKnownConfiguration,gau8ConfigurationCopy);
 8010ac0:	4918      	ldr	r1, [pc, #96]	; (8010b24 <getLastKnownConfiguration+0x3e8>)
 8010ac2:	4819      	ldr	r0, [pc, #100]	; (8010b28 <getLastKnownConfiguration+0x3ec>)
 8010ac4:	f002 f882 	bl	8012bcc <strcpy>
				gau8LastKnownConfiguration[loopCounter] = *(uint8_t *)flashAddress;
				flashAddress++;
			}
		}
	}
}
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				gau8LastKnownConfiguration[loopCounter] = *(uint8_t *)flashAddress;
 8010ace:	4816      	ldr	r0, [pc, #88]	; (8010b28 <getLastKnownConfiguration+0x3ec>)
 8010ad0:	54c1      	strb	r1, [r0, r3]
				flashAddress++;
 8010ad2:	3201      	adds	r2, #1
		for(loopCounter = 0 ; loopCounter < 2000; loopCounter++)
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010ada:	d20b      	bcs.n	8010af4 <getLastKnownConfiguration+0x3b8>
			if(*(uint8_t *)flashAddress == 0xFF)
 8010adc:	7811      	ldrb	r1, [r2, #0]
 8010ade:	29ff      	cmp	r1, #255	; 0xff
 8010ae0:	d1f5      	bne.n	8010ace <getLastKnownConfiguration+0x392>
				if(strlen(gau8LastKnownConfiguration) != 0 )
 8010ae2:	4b11      	ldr	r3, [pc, #68]	; (8010b28 <getLastKnownConfiguration+0x3ec>)
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f47f ae30 	bne.w	801074c <getLastKnownConfiguration+0x10>
 8010aec:	4770      	bx	lr
		for(loopCounter = 0 ; loopCounter < 2000; loopCounter++)
 8010aee:	2300      	movs	r3, #0
	uint32_t flashAddress = ADDR_FLASH_SECTOR_22;
 8010af0:	4a0e      	ldr	r2, [pc, #56]	; (8010b2c <getLastKnownConfiguration+0x3f0>)
 8010af2:	e7f0      	b.n	8010ad6 <getLastKnownConfiguration+0x39a>
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	20001fb8 	.word	0x20001fb8
 8010afc:	20000c60 	.word	0x20000c60
 8010b00:	20000c40 	.word	0x20000c40
 8010b04:	20000c80 	.word	0x20000c80
 8010b08:	20001560 	.word	0x20001560
 8010b0c:	20001540 	.word	0x20001540
 8010b10:	20001580 	.word	0x20001580
 8010b14:	20004034 	.word	0x20004034
 8010b18:	2000e834 	.word	0x2000e834
 8010b1c:	2000e830 	.word	0x2000e830
 8010b20:	2000e7f0 	.word	0x2000e7f0
 8010b24:	20002158 	.word	0x20002158
 8010b28:	2000fdc4 	.word	0x2000fdc4
 8010b2c:	081c0000 	.word	0x081c0000

08010b30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8010b30:	b510      	push	{r4, lr}
 8010b32:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8010b34:	2400      	movs	r4, #0
 8010b36:	940b      	str	r4, [sp, #44]	; 0x2c
 8010b38:	940c      	str	r4, [sp, #48]	; 0x30
 8010b3a:	940d      	str	r4, [sp, #52]	; 0x34
 8010b3c:	940e      	str	r4, [sp, #56]	; 0x38
 8010b3e:	940f      	str	r4, [sp, #60]	; 0x3c
  RTC_DateTypeDef sDate = {0};
 8010b40:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8010b42:	2228      	movs	r2, #40	; 0x28
 8010b44:	4621      	mov	r1, r4
 8010b46:	4668      	mov	r0, sp
 8010b48:	f001 ffb0 	bl	8012aac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8010b4c:	4834      	ldr	r0, [pc, #208]	; (8010c20 <MX_RTC_Init+0xf0>)
 8010b4e:	4b35      	ldr	r3, [pc, #212]	; (8010c24 <MX_RTC_Init+0xf4>)
 8010b50:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010b52:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 31;
 8010b54:	231f      	movs	r3, #31
 8010b56:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 1023;
 8010b58:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8010b5c:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010b5e:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8010b60:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010b62:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8010b64:	f7f3 ffb7 	bl	8004ad6 <HAL_RTC_Init>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d149      	bne.n	8010c00 <MX_RTC_Init+0xd0>
//
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8010b72:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8010b76:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010b7a:	930e      	str	r3, [sp, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010b7c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8010b7e:	2201      	movs	r2, #1
 8010b80:	a90b      	add	r1, sp, #44	; 0x2c
 8010b82:	4827      	ldr	r0, [pc, #156]	; (8010c20 <MX_RTC_Init+0xf0>)
 8010b84:	f7f3 fff9 	bl	8004b7a <HAL_RTC_SetTime>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d13c      	bne.n	8010c06 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  sDate.Month = RTC_MONTH_MAY;
 8010b92:	2305      	movs	r3, #5
 8010b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  sDate.Date = 0x16;
 8010b98:	2316      	movs	r3, #22
 8010b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  sDate.Year = 0x22;
 8010b9e:	2322      	movs	r3, #34	; 0x22
 8010ba0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8010ba4:	a90a      	add	r1, sp, #40	; 0x28
 8010ba6:	481e      	ldr	r0, [pc, #120]	; (8010c20 <MX_RTC_Init+0xf0>)
 8010ba8:	f7f4 f846 	bl	8004c38 <HAL_RTC_SetDate>
 8010bac:	bb70      	cbnz	r0, 8010c0c <MX_RTC_Init+0xdc>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x30;
 8010bb4:	2230      	movs	r2, #48	; 0x30
 8010bb6:	f88d 2001 	strb.w	r2, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8010bba:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8010bbe:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010bc0:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010bc2:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8010bc4:	4a18      	ldr	r2, [pc, #96]	; (8010c28 <MX_RTC_Init+0xf8>)
 8010bc6:	9205      	str	r2, [sp, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8010bc8:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8010bca:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8010bcc:	2201      	movs	r2, #1
 8010bce:	f88d 2020 	strb.w	r2, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8010bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bd6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8010bd8:	4669      	mov	r1, sp
 8010bda:	4811      	ldr	r0, [pc, #68]	; (8010c20 <MX_RTC_Init+0xf0>)
 8010bdc:	f7f4 f87a 	bl	8004cd4 <HAL_RTC_SetAlarm_IT>
 8010be0:	b9b8      	cbnz	r0, 8010c12 <MX_RTC_Init+0xe2>
    Error_Handler();
  }

  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8010be2:	480f      	ldr	r0, [pc, #60]	; (8010c20 <MX_RTC_Init+0xf0>)
 8010be4:	6802      	ldr	r2, [r0, #0]
 8010be6:	68d3      	ldr	r3, [r2, #12]
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8010bee:	60d3      	str	r3, [r2, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010bf6:	f7f4 f995 	bl	8004f24 <HAL_RTCEx_SetWakeUpTimer_IT>
 8010bfa:	b968      	cbnz	r0, 8010c18 <MX_RTC_Init+0xe8>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8010bfc:	b010      	add	sp, #64	; 0x40
 8010bfe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8010c00:	f7fd fdaa 	bl	800e758 <Error_Handler>
 8010c04:	e7b2      	b.n	8010b6c <MX_RTC_Init+0x3c>
    Error_Handler();
 8010c06:	f7fd fda7 	bl	800e758 <Error_Handler>
 8010c0a:	e7bf      	b.n	8010b8c <MX_RTC_Init+0x5c>
    Error_Handler();
 8010c0c:	f7fd fda4 	bl	800e758 <Error_Handler>
 8010c10:	e7cd      	b.n	8010bae <MX_RTC_Init+0x7e>
    Error_Handler();
 8010c12:	f7fd fda1 	bl	800e758 <Error_Handler>
 8010c16:	e7e4      	b.n	8010be2 <MX_RTC_Init+0xb2>
    Error_Handler();
 8010c18:	f7fd fd9e 	bl	800e758 <Error_Handler>
}
 8010c1c:	e7ee      	b.n	8010bfc <MX_RTC_Init+0xcc>
 8010c1e:	bf00      	nop
 8010c20:	200105ac 	.word	0x200105ac
 8010c24:	40002800 	.word	0x40002800
 8010c28:	80800080 	.word	0x80800080

08010c2c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8010c2c:	b510      	push	{r4, lr}
 8010c2e:	b08c      	sub	sp, #48	; 0x30
 8010c30:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010c32:	2230      	movs	r2, #48	; 0x30
 8010c34:	2100      	movs	r1, #0
 8010c36:	4668      	mov	r0, sp
 8010c38:	f001 ff38 	bl	8012aac <memset>
  if(rtcHandle->Instance==RTC)
 8010c3c:	6822      	ldr	r2, [r4, #0]
 8010c3e:	4b12      	ldr	r3, [pc, #72]	; (8010c88 <HAL_RTC_MspInit+0x5c>)
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d001      	beq.n	8010c48 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */
//
  /* USER CODE END RTC_MspInit 1 */
  }
}
 8010c44:	b00c      	add	sp, #48	; 0x30
 8010c46:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8010c48:	2320      	movs	r3, #32
 8010c4a:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8010c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c50:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010c52:	4668      	mov	r0, sp
 8010c54:	f7f3 fd7a 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 8010c58:	b998      	cbnz	r0, 8010c82 <HAL_RTC_MspInit+0x56>
    __HAL_RCC_RTC_ENABLE();
 8010c5a:	4b0c      	ldr	r3, [pc, #48]	; (8010c8c <HAL_RTC_MspInit+0x60>)
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8010c60:	2200      	movs	r2, #0
 8010c62:	4611      	mov	r1, r2
 8010c64:	2003      	movs	r0, #3
 8010c66:	f7f0 fe91 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8010c6a:	2003      	movs	r0, #3
 8010c6c:	f7f0 fec2 	bl	80019f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8010c70:	2200      	movs	r2, #0
 8010c72:	4611      	mov	r1, r2
 8010c74:	2029      	movs	r0, #41	; 0x29
 8010c76:	f7f0 fe89 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8010c7a:	2029      	movs	r0, #41	; 0x29
 8010c7c:	f7f0 feba 	bl	80019f4 <HAL_NVIC_EnableIRQ>
}
 8010c80:	e7e0      	b.n	8010c44 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8010c82:	f7fd fd69 	bl	800e758 <Error_Handler>
 8010c86:	e7e8      	b.n	8010c5a <HAL_RTC_MspInit+0x2e>
 8010c88:	40002800 	.word	0x40002800
 8010c8c:	42470e3c 	.word	0x42470e3c

08010c90 <GSM_CharReception_Callback>:
extern uint32_t gu32GSMCharacterTimeout;
volatile uint32_t u8GSMCharRcv = 0;
uint8_t u8gsmResponse = 0;
extern strctGSM gsmInstance;
void GSM_CharReception_Callback(void)
{
 8010c90:	b410      	push	{r4}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8010c92:	4b0c      	ldr	r3, [pc, #48]	; (8010cc4 <GSM_CharReception_Callback+0x34>)
 8010c94:	685a      	ldr	r2, [r3, #4]
 8010c96:	b2d2      	uxtb	r2, r2
	u8gsmResponse = LL_USART_ReceiveData8(UART4);
 8010c98:	490b      	ldr	r1, [pc, #44]	; (8010cc8 <GSM_CharReception_Callback+0x38>)
 8010c9a:	700a      	strb	r2, [r1, #0]
	gsmInstance.as8GSM_Response_Buff[gsmInstance.u8GSM_Response_Character_Counter++] = u8gsmResponse;
 8010c9c:	4b0b      	ldr	r3, [pc, #44]	; (8010ccc <GSM_CharReception_Callback+0x3c>)
 8010c9e:	f8d3 0e38 	ldr.w	r0, [r3, #3640]	; 0xe38
 8010ca2:	1c44      	adds	r4, r0, #1
 8010ca4:	f8c3 4e38 	str.w	r4, [r3, #3640]	; 0xe38
 8010ca8:	4403      	add	r3, r0
 8010caa:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
	gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 8010cae:	4b08      	ldr	r3, [pc, #32]	; (8010cd0 <GSM_CharReception_Callback+0x40>)
 8010cb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010cb4:	601a      	str	r2, [r3, #0]
	if(u8GSMCharRcv == 0)
 8010cb6:	684b      	ldr	r3, [r1, #4]
 8010cb8:	b90b      	cbnz	r3, 8010cbe <GSM_CharReception_Callback+0x2e>
		u8GSMCharRcv = 1;
 8010cba:	2201      	movs	r2, #1
 8010cbc:	604a      	str	r2, [r1, #4]
}
 8010cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	40004c00 	.word	0x40004c00
 8010cc8:	20004268 	.word	0x20004268
 8010ccc:	2000d5f0 	.word	0x2000d5f0
 8010cd0:	20004444 	.word	0x20004444

08010cd4 <MODBUS_CharReception_Callback>:
 8010cd4:	4b14      	ldr	r3, [pc, #80]	; (8010d28 <MODBUS_CharReception_Callback+0x54>)
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	b2db      	uxtb	r3, r3
uint8_t u8TestArrayCounter = 0;
volatile uint8_t gu8ModbusInterruptFlag = 0;
void MODBUS_CharReception_Callback(void)
{

	u8receivedChar =LL_USART_ReceiveData8(USART3);
 8010cda:	4a14      	ldr	r2, [pc, #80]	; (8010d2c <MODBUS_CharReception_Callback+0x58>)
 8010cdc:	7013      	strb	r3, [r2, #0]
//
//	 if(u8TestArrayCounter == 25)
//	 {
//		 u8TestArrayCounter = 0;
//	 }
	if(gu8MBResponseFlag == 0)
 8010cde:	4b14      	ldr	r3, [pc, #80]	; (8010d30 <MODBUS_CharReception_Callback+0x5c>)
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	b983      	cbnz	r3, 8010d06 <MODBUS_CharReception_Callback+0x32>
	{
		if(master.u8MBSlave_Address == u8receivedChar)
 8010ce4:	4b13      	ldr	r3, [pc, #76]	; (8010d34 <MODBUS_CharReception_Callback+0x60>)
 8010ce6:	781a      	ldrb	r2, [r3, #0]
 8010ce8:	4b10      	ldr	r3, [pc, #64]	; (8010d2c <MODBUS_CharReception_Callback+0x58>)
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d119      	bne.n	8010d26 <MODBUS_CharReception_Callback+0x52>
		{
			/* Response from slave is received */
			gu8MBResponseFlag = 1;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	4a0e      	ldr	r2, [pc, #56]	; (8010d30 <MODBUS_CharReception_Callback+0x5c>)
 8010cf6:	7013      	strb	r3, [r2, #0]
			gu32ModbusFrameEndTimer = gu32Modbus485ResponseTime;//ONE_SEC;//TWO_SEC;
 8010cf8:	4a0f      	ldr	r2, [pc, #60]	; (8010d38 <MODBUS_CharReception_Callback+0x64>)
 8010cfa:	6811      	ldr	r1, [r2, #0]
 8010cfc:	4a0f      	ldr	r2, [pc, #60]	; (8010d3c <MODBUS_CharReception_Callback+0x68>)
 8010cfe:	6011      	str	r1, [r2, #0]
			gu32MBRTUClientConnectedFlag = 1;
 8010d00:	4a0f      	ldr	r2, [pc, #60]	; (8010d40 <MODBUS_CharReception_Callback+0x6c>)
 8010d02:	6013      	str	r3, [r2, #0]
 8010d04:	4770      	bx	lr
		}
	}
	else
	{
		master.u8SlaveResponseArray[master.u8MBResponseCharacterCounter++] = u8receivedChar;
 8010d06:	4b09      	ldr	r3, [pc, #36]	; (8010d2c <MODBUS_CharReception_Callback+0x58>)
 8010d08:	7819      	ldrb	r1, [r3, #0]
 8010d0a:	4b0a      	ldr	r3, [pc, #40]	; (8010d34 <MODBUS_CharReception_Callback+0x60>)
 8010d0c:	f893 2520 	ldrb.w	r2, [r3, #1312]	; 0x520
 8010d10:	1c50      	adds	r0, r2, #1
 8010d12:	f883 0520 	strb.w	r0, [r3, #1312]	; 0x520
 8010d16:	3202      	adds	r2, #2
 8010d18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010d1c:	6059      	str	r1, [r3, #4]
		gu32ModbusFrameEndTimer = gu32Modbus485ResponseTime;//ONE_SEC;//TWO_SEC;
 8010d1e:	4b06      	ldr	r3, [pc, #24]	; (8010d38 <MODBUS_CharReception_Callback+0x64>)
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	4b06      	ldr	r3, [pc, #24]	; (8010d3c <MODBUS_CharReception_Callback+0x68>)
 8010d24:	601a      	str	r2, [r3, #0]
	}
}
 8010d26:	4770      	bx	lr
 8010d28:	40004800 	.word	0x40004800
 8010d2c:	200105ea 	.word	0x200105ea
 8010d30:	20003629 	.word	0x20003629
 8010d34:	2000e840 	.word	0x2000e840
 8010d38:	20002938 	.word	0x20002938
 8010d3c:	2000362c 	.word	0x2000362c
 8010d40:	20003638 	.word	0x20003638

08010d44 <SFlash_Chip_Select>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
void SFlash_Chip_Select(uint8_t state)
{
 8010d44:	b508      	push	{r3, lr}
	if(state == ENABLE)
 8010d46:	2801      	cmp	r0, #1
 8010d48:	d001      	beq.n	8010d4e <SFlash_Chip_Select+0xa>
	{
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_RESET);		// CE LOW
	}
	else if(state == DISABLE)
 8010d4a:	b138      	cbz	r0, 8010d5c <SFlash_Chip_Select+0x18>
	{
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_SET);		// CE High
	}
}
 8010d4c:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_RESET);		// CE LOW
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010d54:	4806      	ldr	r0, [pc, #24]	; (8010d70 <SFlash_Chip_Select+0x2c>)
 8010d56:	f7f1 ff81 	bl	8002c5c <HAL_GPIO_WritePin>
 8010d5a:	e7f7      	b.n	8010d4c <SFlash_Chip_Select+0x8>
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_SET);		// CE High
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010d62:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8010d66:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8010d6a:	f7f1 ff77 	bl	8002c5c <HAL_GPIO_WritePin>
}
 8010d6e:	e7ed      	b.n	8010d4c <SFlash_Chip_Select+0x8>
 8010d70:	40020400 	.word	0x40020400

08010d74 <SFlash_Read_Status_Register>:
{
 8010d74:	b500      	push	{lr}
 8010d76:	b083      	sub	sp, #12
	SFlash_Chip_Select(DISABLE);
 8010d78:	2000      	movs	r0, #0
 8010d7a:	f7ff ffe3 	bl	8010d44 <SFlash_Chip_Select>
	tx_var[0] = SFLASH_STATUS_REG_READ_CODE;
 8010d7e:	2305      	movs	r3, #5
 8010d80:	f88d 3004 	strb.w	r3, [sp, #4]
	SFlash_Chip_Select(ENABLE);
 8010d84:	2001      	movs	r0, #1
 8010d86:	f7ff ffdd 	bl	8010d44 <SFlash_Chip_Select>
	HAL_SPI_TransmitReceive_IT(&hspi1, tx_var, rx_var, 2);
 8010d8a:	2302      	movs	r3, #2
 8010d8c:	466a      	mov	r2, sp
 8010d8e:	a901      	add	r1, sp, #4
 8010d90:	4806      	ldr	r0, [pc, #24]	; (8010dac <SFlash_Read_Status_Register+0x38>)
 8010d92:	f7f4 faf7 	bl	8005384 <HAL_SPI_TransmitReceive_IT>
	HAL_Delay(20);
 8010d96:	2014      	movs	r0, #20
 8010d98:	f7f0 f998 	bl	80010cc <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	f7ff ffd1 	bl	8010d44 <SFlash_Chip_Select>
}
 8010da2:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8010da6:	b003      	add	sp, #12
 8010da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dac:	2001274c 	.word	0x2001274c

08010db0 <SFlash_Write_Enable>:
{
 8010db0:	b500      	push	{lr}
 8010db2:	b083      	sub	sp, #12
	tx_var[0] = SFLASH_WRITE_EN_CODE;	//0x06;
 8010db4:	2306      	movs	r3, #6
 8010db6:	f88d 3004 	strb.w	r3, [sp, #4]
	SFlash_Chip_Select(ENABLE);
 8010dba:	2001      	movs	r0, #1
 8010dbc:	f7ff ffc2 	bl	8010d44 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)tx_var, 1);
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	a901      	add	r1, sp, #4
 8010dc4:	4804      	ldr	r0, [pc, #16]	; (8010dd8 <SFlash_Write_Enable+0x28>)
 8010dc6:	f7f4 fa89 	bl	80052dc <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 8010dca:	2000      	movs	r0, #0
 8010dcc:	f7ff ffba 	bl	8010d44 <SFlash_Chip_Select>
}
 8010dd0:	b003      	add	sp, #12
 8010dd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dd6:	bf00      	nop
 8010dd8:	2001274c 	.word	0x2001274c

08010ddc <SFlash_Write_Disable>:
{
 8010ddc:	b500      	push	{lr}
 8010dde:	b083      	sub	sp, #12
	tx_var[0] = SFLASH_WRITE_DIS_CODE;	//0x04;
 8010de0:	2304      	movs	r3, #4
 8010de2:	f88d 3004 	strb.w	r3, [sp, #4]
	SFlash_Chip_Select(ENABLE);
 8010de6:	2001      	movs	r0, #1
 8010de8:	f7ff ffac 	bl	8010d44 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *) tx_var,1);
 8010dec:	2201      	movs	r2, #1
 8010dee:	a901      	add	r1, sp, #4
 8010df0:	4805      	ldr	r0, [pc, #20]	; (8010e08 <SFlash_Write_Disable+0x2c>)
 8010df2:	f7f4 fa73 	bl	80052dc <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 8010df6:	2000      	movs	r0, #0
 8010df8:	f7ff ffa4 	bl	8010d44 <SFlash_Chip_Select>
	HAL_Delay(20);
 8010dfc:	2014      	movs	r0, #20
 8010dfe:	f7f0 f965 	bl	80010cc <HAL_Delay>
}
 8010e02:	b003      	add	sp, #12
 8010e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e08:	2001274c 	.word	0x2001274c

08010e0c <SFlash_Read>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Read(uint32_t address, char * ptr_read_data, uint16_t size)
{
 8010e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e0e:	b085      	sub	sp, #20
 8010e10:	460d      	mov	r5, r1
 8010e12:	4616      	mov	r6, r2
	char tx_var[10];
	memset(tx_var, 0, sizeof(tx_var));
 8010e14:	2400      	movs	r4, #0
 8010e16:	f8cd 4009 	str.w	r4, [sp, #9]
 8010e1a:	f88d 400d 	strb.w	r4, [sp, #13]
	tx_var[0] = SFLASH_READ_HSPEED_CODE;
 8010e1e:	230b      	movs	r3, #11
 8010e20:	f88d 3004 	strb.w	r3, [sp, #4]
	tx_var[1] = (uint8_t)(address >> 16);
 8010e24:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e28:	f88d 3005 	strb.w	r3, [sp, #5]
	tx_var[2] = (uint8_t)(address >> 8);
 8010e2c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e30:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_var[3] = (uint8_t)(address >> 0);
 8010e34:	f88d 0007 	strb.w	r0, [sp, #7]
	tx_var[4] = 0;
 8010e38:	f88d 4008 	strb.w	r4, [sp, #8]
	SFlash_Chip_Select(ENABLE);
 8010e3c:	2001      	movs	r0, #1
 8010e3e:	f7ff ff81 	bl	8010d44 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)tx_var, 5);
 8010e42:	4f09      	ldr	r7, [pc, #36]	; (8010e68 <SFlash_Read+0x5c>)
 8010e44:	2205      	movs	r2, #5
 8010e46:	a901      	add	r1, sp, #4
 8010e48:	4638      	mov	r0, r7
 8010e4a:	f7f4 fa47 	bl	80052dc <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)ptr_read_data, size);
 8010e4e:	4632      	mov	r2, r6
 8010e50:	4629      	mov	r1, r5
 8010e52:	4638      	mov	r0, r7
 8010e54:	f7f4 fafa 	bl	800544c <HAL_SPI_Receive_IT>
	HAL_Delay(100);
 8010e58:	2064      	movs	r0, #100	; 0x64
 8010e5a:	f7f0 f937 	bl	80010cc <HAL_Delay>

	SFlash_Chip_Select(DISABLE);
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f7ff ff70 	bl	8010d44 <SFlash_Chip_Select>
}
 8010e64:	b005      	add	sp, #20
 8010e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e68:	2001274c 	.word	0x2001274c

08010e6c <SFlash_Arrange_Read_Data>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      04-05-2021			100229
******************************************************************************/
void SFlash_Arrange_Read_Data(void)
{
 8010e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e6e:	f6ad 3dc4 	subw	sp, sp, #3012	; 0xbc4
	char temparray[3000];
	const char endstart[] = "#*";
 8010e72:	4b34      	ldr	r3, [pc, #208]	; (8010f44 <SFlash_Arrange_Read_Data+0xd8>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010e7a:	0c1b      	lsrs	r3, r3, #16
 8010e7c:	f88d 3006 	strb.w	r3, [sp, #6]
	char *ptrchar = FlashStr.cSFlashHalfReadData;
	char *ptrendchar;
	uint16_t size = 0;

	if(strlen(FlashStr.cSFlashHalfReadData) == 0)
 8010e80:	4b31      	ldr	r3, [pc, #196]	; (8010f48 <SFlash_Arrange_Read_Data+0xdc>)
 8010e82:	f893 39da 	ldrb.w	r3, [r3, #2522]	; 0x9da
 8010e86:	bb03      	cbnz	r3, 8010eca <SFlash_Arrange_Read_Data+0x5e>
	{
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData) * sizeof(char));
 8010e88:	4c30      	ldr	r4, [pc, #192]	; (8010f4c <SFlash_Arrange_Read_Data+0xe0>)
 8010e8a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8010e8e:	2100      	movs	r1, #0
 8010e90:	4620      	mov	r0, r4
 8010e92:	f001 fe0b 	bl	8012aac <memset>
		memcpy(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData, sizeof(FlashStr.cSFlashTransmitData));
 8010e96:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010e9a:	f6a4 11c4 	subw	r1, r4, #2500	; 0x9c4
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f001 fddc 	bl	8012a5c <memcpy>
	}
	else
		strcat(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData);

	if(strstr(FlashStr.cSFlashHalfReadData, endstart) != NULL)
 8010ea4:	a901      	add	r1, sp, #4
 8010ea6:	4829      	ldr	r0, [pc, #164]	; (8010f4c <SFlash_Arrange_Read_Data+0xe0>)
 8010ea8:	f001 febd 	bl	8012c26 <strstr>
 8010eac:	2800      	cmp	r0, #0
 8010eae:	d041      	beq.n	8010f34 <SFlash_Arrange_Read_Data+0xc8>
	{
		ptrendchar = ptrchar;
 8010eb0:	4d26      	ldr	r5, [pc, #152]	; (8010f4c <SFlash_Arrange_Read_Data+0xe0>)
	char *ptrchar = FlashStr.cSFlashHalfReadData;
 8010eb2:	462b      	mov	r3, r5
		while( ptrchar != NULL)
 8010eb4:	b17b      	cbz	r3, 8010ed6 <SFlash_Arrange_Read_Data+0x6a>
		{
			ptrchar = strstr(ptrchar, endstart);
 8010eb6:	a901      	add	r1, sp, #4
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f001 feb4 	bl	8012c26 <strstr>
			if(ptrchar != NULL)
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d0f7      	beq.n	8010eb4 <SFlash_Arrange_Read_Data+0x48>
			{
				ptrendchar = ptrchar;
 8010ec4:	4605      	mov	r5, r0
				++ptrchar;
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	e7f4      	b.n	8010eb4 <SFlash_Arrange_Read_Data+0x48>
		strcat(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData);
 8010eca:	4921      	ldr	r1, [pc, #132]	; (8010f50 <SFlash_Arrange_Read_Data+0xe4>)
 8010ecc:	f601 10c4 	addw	r0, r1, #2500	; 0x9c4
 8010ed0:	f001 fe60 	bl	8012b94 <strcat>
 8010ed4:	e7e6      	b.n	8010ea4 <SFlash_Arrange_Read_Data+0x38>
			}
		}
		++ptrendchar;
 8010ed6:	3501      	adds	r5, #1
		size = ptrendchar - FlashStr.cSFlashHalfReadData;
 8010ed8:	4c1c      	ldr	r4, [pc, #112]	; (8010f4c <SFlash_Arrange_Read_Data+0xe0>)
 8010eda:	1b2c      	subs	r4, r5, r4
 8010edc:	b2a4      	uxth	r4, r4
		if(size > sizeof(FlashStr.cSFlashHalfReadData))
 8010ede:	f640 53ac 	movw	r3, #3500	; 0xdac
 8010ee2:	429c      	cmp	r4, r3
 8010ee4:	d901      	bls.n	8010eea <SFlash_Arrange_Read_Data+0x7e>
			size = sizeof (FlashStr.cSFlashHalfReadData) - 1;
 8010ee6:	f640 54ab 	movw	r4, #3499	; 0xdab
		memset(FlashStr.cSFlashTransmitData, 0x00, sizeof(FlashStr.cSFlashTransmitData));
 8010eea:	4f19      	ldr	r7, [pc, #100]	; (8010f50 <SFlash_Arrange_Read_Data+0xe4>)
 8010eec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	4638      	mov	r0, r7
 8010ef4:	f001 fdda 	bl	8012aac <memset>
		memcpy(FlashStr.cSFlashTransmitData, FlashStr.cSFlashHalfReadData, size);
 8010ef8:	f607 16c4 	addw	r6, r7, #2500	; 0x9c4
 8010efc:	4622      	mov	r2, r4
 8010efe:	4631      	mov	r1, r6
 8010f00:	4638      	mov	r0, r7
 8010f02:	f001 fdab 	bl	8012a5c <memcpy>
		memset(temparray, 0, sizeof(temparray));
 8010f06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8010f0a:	2100      	movs	r1, #0
 8010f0c:	a802      	add	r0, sp, #8
 8010f0e:	f001 fdcd 	bl	8012aac <memset>
		strcpy(temparray, ptrendchar);
 8010f12:	4629      	mov	r1, r5
 8010f14:	a802      	add	r0, sp, #8
 8010f16:	f001 fe59 	bl	8012bcc <strcpy>
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
 8010f1a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8010f1e:	2100      	movs	r1, #0
 8010f20:	4630      	mov	r0, r6
 8010f22:	f001 fdc3 	bl	8012aac <memset>
		strcpy(FlashStr.cSFlashHalfReadData, temparray);
 8010f26:	a902      	add	r1, sp, #8
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f001 fe4f 	bl	8012bcc <strcpy>
	else
	{
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
	}
	/* Single payload is copied in queue */
}
 8010f2e:	f60d 3dc4 	addw	sp, sp, #3012	; 0xbc4
 8010f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
 8010f34:	f640 52ac 	movw	r2, #3500	; 0xdac
 8010f38:	2100      	movs	r1, #0
 8010f3a:	4804      	ldr	r0, [pc, #16]	; (8010f4c <SFlash_Arrange_Read_Data+0xe0>)
 8010f3c:	f001 fdb6 	bl	8012aac <memset>
}
 8010f40:	e7f5      	b.n	8010f2e <SFlash_Arrange_Read_Data+0xc2>
 8010f42:	bf00      	nop
 8010f44:	0801c8bc 	.word	0x0801c8bc
 8010f48:	200105f4 	.word	0x200105f4
 8010f4c:	20010fce 	.word	0x20010fce
 8010f50:	2001060a 	.word	0x2001060a

08010f54 <getSFlashDataString>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
char * getSFlashDataString(char * chrptr, uint16_t memory_size)
{
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	4604      	mov	r4, r0
//	char * sflashPayload = malloc(sizeof(char) * SFLASH_PAYLOAD_MAX_SIZE);
	char * sflashPayload = malloc(sizeof(char) * memory_size);
 8010f58:	4608      	mov	r0, r1
 8010f5a:	f001 fb1f 	bl	801259c <malloc>
	if(sflashPayload != NULL)
 8010f5e:	4605      	mov	r5, r0
 8010f60:	b120      	cbz	r0, 8010f6c <getSFlashDataString+0x18>
	{
		memset((char *)sflashPayload, 0x00, (sizeof(sflashPayload) * sizeof(char)));
 8010f62:	2300      	movs	r3, #0
 8010f64:	6003      	str	r3, [r0, #0]
		strcpy((char *)sflashPayload, (char *)chrptr);
 8010f66:	4621      	mov	r1, r4
 8010f68:	f001 fe30 	bl	8012bcc <strcpy>
		return sflashPayload;
	}
	return NULL;
}
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}

08010f70 <SFlash_Chip_Erase>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Chip_Erase(void)
{
 8010f70:	b500      	push	{lr}
 8010f72:	b083      	sub	sp, #12
	uint8_t var = SFLASH_CHIP_ERASE_CODE;
 8010f74:	2360      	movs	r3, #96	; 0x60
 8010f76:	f88d 3007 	strb.w	r3, [sp, #7]
	SFlash_Write_Enable();
 8010f7a:	f7ff ff19 	bl	8010db0 <SFlash_Write_Enable>
	SFlash_Chip_Select(ENABLE);
 8010f7e:	2001      	movs	r0, #1
 8010f80:	f7ff fee0 	bl	8010d44 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, &var, 1);
 8010f84:	2201      	movs	r2, #1
 8010f86:	f10d 0107 	add.w	r1, sp, #7
 8010f8a:	4807      	ldr	r0, [pc, #28]	; (8010fa8 <SFlash_Chip_Erase+0x38>)
 8010f8c:	f7f4 f9a6 	bl	80052dc <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 8010f90:	2000      	movs	r0, #0
 8010f92:	f7ff fed7 	bl	8010d44 <SFlash_Chip_Select>
	HAL_Delay(200);		// Time to erase full chip 100 ms
 8010f96:	20c8      	movs	r0, #200	; 0xc8
 8010f98:	f7f0 f898 	bl	80010cc <HAL_Delay>
	SFlash_Write_Disable();
 8010f9c:	f7ff ff1e 	bl	8010ddc <SFlash_Write_Disable>
}
 8010fa0:	b003      	add	sp, #12
 8010fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fa6:	bf00      	nop
 8010fa8:	2001274c 	.word	0x2001274c

08010fac <SerialFlashFSM>:
	if(FlashStr.u32SerialFlashDelay != 0)
 8010fac:	4b88      	ldr	r3, [pc, #544]	; (80111d0 <SerialFlashFSM+0x224>)
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f040 829f 	bne.w	80114f4 <SerialFlashFSM+0x548>
{
 8010fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	b084      	sub	sp, #16
	switch(FlashStr.enmCurrentOperation)
 8010fbc:	4a84      	ldr	r2, [pc, #528]	; (80111d0 <SerialFlashFSM+0x224>)
 8010fbe:	f242 134f 	movw	r3, #8527	; 0x214f
 8010fc2:	5cd3      	ldrb	r3, [r2, r3]
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	2b03      	cmp	r3, #3
 8010fc8:	f200 828e 	bhi.w	80114e8 <SerialFlashFSM+0x53c>
 8010fcc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010fd0:	006e0004 	.word	0x006e0004
 8010fd4:	024f01b0 	.word	0x024f01b0
			FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 8010fd8:	4b7d      	ldr	r3, [pc, #500]	; (80111d0 <SerialFlashFSM+0x224>)
 8010fda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010fde:	611a      	str	r2, [r3, #16]
			if(isQueueEmpty(&gsmPayload) == 1 )
 8010fe0:	487c      	ldr	r0, [pc, #496]	; (80111d4 <SerialFlashFSM+0x228>)
 8010fe2:	f7fe fbc5 	bl	800f770 <isQueueEmpty>
 8010fe6:	2801      	cmp	r0, #1
 8010fe8:	d016      	beq.n	8011018 <SerialFlashFSM+0x6c>
			else if(GSMQueueFullFlag == 1)
 8010fea:	4b7b      	ldr	r3, [pc, #492]	; (80111d8 <SerialFlashFSM+0x22c>)
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d044      	beq.n	801107c <SerialFlashFSM+0xd0>
				if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE_FLASH) < SFLASH_SIZE)
 8010ff2:	4b77      	ldr	r3, [pc, #476]	; (80111d0 <SerialFlashFSM+0x224>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8010ffa:	4a78      	ldr	r2, [pc, #480]	; (80111dc <SerialFlashFSM+0x230>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d833      	bhi.n	8011068 <SerialFlashFSM+0xbc>
					GSMQueueFullFlag = 0;
 8011000:	2200      	movs	r2, #0
 8011002:	4b75      	ldr	r3, [pc, #468]	; (80111d8 <SerialFlashFSM+0x22c>)
 8011004:	701a      	strb	r2, [r3, #0]
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 8011006:	4b72      	ldr	r3, [pc, #456]	; (80111d0 <SerialFlashFSM+0x224>)
 8011008:	f242 114f 	movw	r1, #8527	; 0x214f
 801100c:	2001      	movs	r0, #1
 801100e:	5458      	strb	r0, [r3, r1]
					FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 8011010:	f242 1150 	movw	r1, #8528	; 0x2150
 8011014:	545a      	strb	r2, [r3, r1]
 8011016:	e264      	b.n	80114e2 <SerialFlashFSM+0x536>
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 8011018:	4b6d      	ldr	r3, [pc, #436]	; (80111d0 <SerialFlashFSM+0x224>)
 801101a:	6858      	ldr	r0, [r3, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4298      	cmp	r0, r3
 8011020:	f080 825f 	bcs.w	80114e2 <SerialFlashFSM+0x536>
					if((FlashStr.u32FlashReadAddress + SFLASH_UPLOAD_LENGTH) < SFLASH_SIZE)
 8011024:	f200 52dc 	addw	r2, r0, #1500	; 0x5dc
 8011028:	4b6c      	ldr	r3, [pc, #432]	; (80111dc <SerialFlashFSM+0x230>)
 801102a:	429a      	cmp	r2, r3
 801102c:	d809      	bhi.n	8011042 <SerialFlashFSM+0x96>
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 801102e:	4b68      	ldr	r3, [pc, #416]	; (80111d0 <SerialFlashFSM+0x224>)
 8011030:	f242 124f 	movw	r2, #8527	; 0x214f
 8011034:	2102      	movs	r1, #2
 8011036:	5499      	strb	r1, [r3, r2]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 8011038:	f242 1251 	movw	r2, #8529	; 0x2151
 801103c:	2100      	movs	r1, #0
 801103e:	5499      	strb	r1, [r3, r2]
 8011040:	e24f      	b.n	80114e2 <SerialFlashFSM+0x536>
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, (SFLASH_SIZE - FlashStr.u32FlashReadAddress));
 8011042:	43c2      	mvns	r2, r0
 8011044:	4c66      	ldr	r4, [pc, #408]	; (80111e0 <SerialFlashFSM+0x234>)
 8011046:	b292      	uxth	r2, r2
 8011048:	4621      	mov	r1, r4
 801104a:	f7ff fedf 	bl	8010e0c <SFlash_Read>
						FlashStr.u32FlashReadAddress = SFLASH_SIZE;
 801104e:	f1a4 0316 	sub.w	r3, r4, #22
 8011052:	4a64      	ldr	r2, [pc, #400]	; (80111e4 <SerialFlashFSM+0x238>)
 8011054:	f844 2c12 	str.w	r2, [r4, #-18]
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 8011058:	2202      	movs	r2, #2
 801105a:	f242 114f 	movw	r1, #8527	; 0x214f
 801105e:	545a      	strb	r2, [r3, r1]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 8011060:	f242 1151 	movw	r1, #8529	; 0x2151
 8011064:	545a      	strb	r2, [r3, r1]
 8011066:	e23c      	b.n	80114e2 <SerialFlashFSM+0x536>
					FlashStr.bitFlagMemoryFull = 1;
 8011068:	4b59      	ldr	r3, [pc, #356]	; (80111d0 <SerialFlashFSM+0x224>)
 801106a:	f242 124b 	movw	r2, #8523	; 0x214b
 801106e:	2101      	movs	r1, #1
 8011070:	5499      	strb	r1, [r3, r2]
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011072:	f242 124f 	movw	r2, #8527	; 0x214f
 8011076:	2100      	movs	r1, #0
 8011078:	5499      	strb	r1, [r3, r2]
 801107a:	e232      	b.n	80114e2 <SerialFlashFSM+0x536>
			else if(((FlashStr.u32FlashReadAddress != 0) && (FlashStr.u32FlashWriteAddress != 0)) && ((FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress) || (FlashStr.u32FlashReadAddress >= SFLASH_SIZE) || (FlashStr.u32FlashWriteAddress >= SFLASH_SIZE)))
 801107c:	4b54      	ldr	r3, [pc, #336]	; (80111d0 <SerialFlashFSM+0x224>)
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	f000 822e 	beq.w	80114e2 <SerialFlashFSM+0x536>
 8011086:	4a52      	ldr	r2, [pc, #328]	; (80111d0 <SerialFlashFSM+0x224>)
 8011088:	6812      	ldr	r2, [r2, #0]
 801108a:	2a00      	cmp	r2, #0
 801108c:	f000 8229 	beq.w	80114e2 <SerialFlashFSM+0x536>
 8011090:	4293      	cmp	r3, r2
 8011092:	d205      	bcs.n	80110a0 <SerialFlashFSM+0xf4>
 8011094:	4951      	ldr	r1, [pc, #324]	; (80111dc <SerialFlashFSM+0x230>)
 8011096:	428b      	cmp	r3, r1
 8011098:	d802      	bhi.n	80110a0 <SerialFlashFSM+0xf4>
 801109a:	428a      	cmp	r2, r1
 801109c:	f240 8221 	bls.w	80114e2 <SerialFlashFSM+0x536>
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
 80110a0:	4a4b      	ldr	r2, [pc, #300]	; (80111d0 <SerialFlashFSM+0x224>)
 80110a2:	f242 134f 	movw	r3, #8527	; 0x214f
 80110a6:	2103      	movs	r1, #3
 80110a8:	54d1      	strb	r1, [r2, r3]
 80110aa:	e21a      	b.n	80114e2 <SerialFlashFSM+0x536>
			switch(FlashStr.enmCurrentWriteState)
 80110ac:	4a48      	ldr	r2, [pc, #288]	; (80111d0 <SerialFlashFSM+0x224>)
 80110ae:	f242 1350 	movw	r3, #8528	; 0x2150
 80110b2:	5cd3      	ldrb	r3, [r2, r3]
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	2b03      	cmp	r3, #3
 80110b8:	f200 8134 	bhi.w	8011324 <SerialFlashFSM+0x378>
 80110bc:	e8df f003 	tbb	[pc, r3]
 80110c0:	98756b02 	.word	0x98756b02
					if(FlashStr.bitFlagQueueDataWrite == 1)
 80110c4:	4a42      	ldr	r2, [pc, #264]	; (80111d0 <SerialFlashFSM+0x224>)
 80110c6:	f242 134e 	movw	r3, #8526	; 0x214e
 80110ca:	5cd3      	ldrb	r3, [r2, r3]
 80110cc:	bb43      	cbnz	r3, 8011120 <SerialFlashFSM+0x174>
					u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 80110ce:	4846      	ldr	r0, [pc, #280]	; (80111e8 <SerialFlashFSM+0x23c>)
 80110d0:	f7ef f898 	bl	8000204 <strlen>
 80110d4:	b280      	uxth	r0, r0
 80110d6:	4b40      	ldr	r3, [pc, #256]	; (80111d8 <SerialFlashFSM+0x22c>)
 80110d8:	8058      	strh	r0, [r3, #2]
					if(u16writeDataSize > 200)
 80110da:	28c8      	cmp	r0, #200	; 0xc8
 80110dc:	d955      	bls.n	801118a <SerialFlashFSM+0x1de>
						FlashStr.cSFlashWriteData[u16writeDataSize - 3] = '9';
 80110de:	3803      	subs	r0, #3
 80110e0:	4b3b      	ldr	r3, [pc, #236]	; (80111d0 <SerialFlashFSM+0x224>)
 80110e2:	4418      	add	r0, r3
 80110e4:	f241 7386 	movw	r3, #6022	; 0x1786
 80110e8:	2239      	movs	r2, #57	; 0x39
 80110ea:	54c2      	strb	r2, [r0, r3]
						lptrsof = strstr((char *)FlashStr.cSFlashWriteData, "#*");
 80110ec:	493f      	ldr	r1, [pc, #252]	; (80111ec <SerialFlashFSM+0x240>)
 80110ee:	483e      	ldr	r0, [pc, #248]	; (80111e8 <SerialFlashFSM+0x23c>)
 80110f0:	f001 fd99 	bl	8012c26 <strstr>
						if(lptrsof != NULL)
 80110f4:	b110      	cbz	r0, 80110fc <SerialFlashFSM+0x150>
							*(lptrsof - 2) = '9';
 80110f6:	2239      	movs	r2, #57	; 0x39
 80110f8:	f800 2c02 	strb.w	r2, [r0, #-2]
						u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 80110fc:	483a      	ldr	r0, [pc, #232]	; (80111e8 <SerialFlashFSM+0x23c>)
 80110fe:	f7ef f881 	bl	8000204 <strlen>
 8011102:	4b35      	ldr	r3, [pc, #212]	; (80111d8 <SerialFlashFSM+0x22c>)
 8011104:	8058      	strh	r0, [r3, #2]
						FlashStr.u16FlashWriteIndex = 0;
 8011106:	4b32      	ldr	r3, [pc, #200]	; (80111d0 <SerialFlashFSM+0x224>)
 8011108:	2200      	movs	r2, #0
 801110a:	819a      	strh	r2, [r3, #12]
						u8Flash_Busy_status = SFlash_Read_Status_Register();
 801110c:	f7ff fe32 	bl	8010d74 <SFlash_Read_Status_Register>
						if(u8Flash_Busy_status == 1)
 8011110:	2801      	cmp	r0, #1
 8011112:	d032      	beq.n	801117a <SerialFlashFSM+0x1ce>
							FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 8011114:	4a2e      	ldr	r2, [pc, #184]	; (80111d0 <SerialFlashFSM+0x224>)
 8011116:	f242 1350 	movw	r3, #8528	; 0x2150
 801111a:	2101      	movs	r1, #1
 801111c:	54d1      	strb	r1, [r2, r3]
 801111e:	e1e0      	b.n	80114e2 <SerialFlashFSM+0x536>
						memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 8011120:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8011124:	2100      	movs	r1, #0
 8011126:	4830      	ldr	r0, [pc, #192]	; (80111e8 <SerialFlashFSM+0x23c>)
 8011128:	f001 fcc0 	bl	8012aac <memset>
						GSMQueueFullFlag = 1;
 801112c:	4b2a      	ldr	r3, [pc, #168]	; (80111d8 <SerialFlashFSM+0x22c>)
 801112e:	2201      	movs	r2, #1
 8011130:	701a      	strb	r2, [r3, #0]
						if(gsmPayload.data[FlashStr.u8QueueWriteCounter] != NULL)
 8011132:	4b27      	ldr	r3, [pc, #156]	; (80111d0 <SerialFlashFSM+0x224>)
 8011134:	7d5b      	ldrb	r3, [r3, #21]
 8011136:	1c99      	adds	r1, r3, #2
 8011138:	4a26      	ldr	r2, [pc, #152]	; (80111d4 <SerialFlashFSM+0x228>)
 801113a:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 801113e:	b174      	cbz	r4, 801115e <SerialFlashFSM+0x1b2>
							strcpy((char *)FlashStr.cSFlashWriteData, (char *)gsmPayload.data[FlashStr.u8QueueWriteCounter]);
 8011140:	4621      	mov	r1, r4
 8011142:	4829      	ldr	r0, [pc, #164]	; (80111e8 <SerialFlashFSM+0x23c>)
 8011144:	f001 fd42 	bl	8012bcc <strcpy>
							free(gsmPayload.data[FlashStr.u8QueueWriteCounter]);
 8011148:	4620      	mov	r0, r4
 801114a:	f001 fa2f 	bl	80125ac <free>
							gsmPayload.data[FlashStr.u8QueueWriteCounter] = NULL;
 801114e:	4b20      	ldr	r3, [pc, #128]	; (80111d0 <SerialFlashFSM+0x224>)
 8011150:	7d5b      	ldrb	r3, [r3, #21]
 8011152:	3302      	adds	r3, #2
 8011154:	4a1f      	ldr	r2, [pc, #124]	; (80111d4 <SerialFlashFSM+0x228>)
 8011156:	2100      	movs	r1, #0
 8011158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801115c:	e7b7      	b.n	80110ce <SerialFlashFSM+0x122>
							++FlashStr.u8QueueWriteCounter;
 801115e:	3301      	adds	r3, #1
 8011160:	b2db      	uxtb	r3, r3
 8011162:	4a1b      	ldr	r2, [pc, #108]	; (80111d0 <SerialFlashFSM+0x224>)
 8011164:	7553      	strb	r3, [r2, #21]
							if(FlashStr.u8QueueWriteCounter >= MAX_QUEUE_SIZE)
 8011166:	2b09      	cmp	r3, #9
 8011168:	d9b1      	bls.n	80110ce <SerialFlashFSM+0x122>
								FlashStr.u8QueueWriteCounter = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	7553      	strb	r3, [r2, #21]
								GSMQueueFullFlag = 0;
 801116e:	491a      	ldr	r1, [pc, #104]	; (80111d8 <SerialFlashFSM+0x22c>)
 8011170:	700b      	strb	r3, [r1, #0]
								FlashStr.bitFlagQueueDataWrite = 0;
 8011172:	f242 114e 	movw	r1, #8526	; 0x214e
 8011176:	5453      	strb	r3, [r2, r1]
 8011178:	e7a9      	b.n	80110ce <SerialFlashFSM+0x122>
							FlashStr.u32SerialFlashDelay = TWENTY_MS; //FIVEHUNDRED_MS;
 801117a:	4b15      	ldr	r3, [pc, #84]	; (80111d0 <SerialFlashFSM+0x224>)
 801117c:	2214      	movs	r2, #20
 801117e:	611a      	str	r2, [r3, #16]
							FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 8011180:	f242 1250 	movw	r2, #8528	; 0x2150
 8011184:	2100      	movs	r1, #0
 8011186:	5499      	strb	r1, [r3, r2]
 8011188:	e1ab      	b.n	80114e2 <SerialFlashFSM+0x536>
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 801118a:	4a11      	ldr	r2, [pc, #68]	; (80111d0 <SerialFlashFSM+0x224>)
 801118c:	f242 134f 	movw	r3, #8527	; 0x214f
 8011190:	2100      	movs	r1, #0
 8011192:	54d1      	strb	r1, [r2, r3]
 8011194:	e1a5      	b.n	80114e2 <SerialFlashFSM+0x536>
					SFlash_Write_Enable();
 8011196:	f7ff fe0b 	bl	8010db0 <SFlash_Write_Enable>
					FlashStr.enmCurrentWriteState = enmFlashWriteEnableCheck;
 801119a:	4b0d      	ldr	r3, [pc, #52]	; (80111d0 <SerialFlashFSM+0x224>)
 801119c:	f242 1250 	movw	r2, #8528	; 0x2150
 80111a0:	2102      	movs	r1, #2
 80111a2:	5499      	strb	r1, [r3, r2]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 80111a4:	2214      	movs	r2, #20
 80111a6:	611a      	str	r2, [r3, #16]
					break;
 80111a8:	e19b      	b.n	80114e2 <SerialFlashFSM+0x536>
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 80111aa:	f7ff fde3 	bl	8010d74 <SFlash_Read_Status_Register>
					if(u8Flash_Busy_status == 2)
 80111ae:	2802      	cmp	r0, #2
 80111b0:	d008      	beq.n	80111c4 <SerialFlashFSM+0x218>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 80111b2:	4a07      	ldr	r2, [pc, #28]	; (80111d0 <SerialFlashFSM+0x224>)
 80111b4:	f242 1350 	movw	r3, #8528	; 0x2150
 80111b8:	2101      	movs	r1, #1
 80111ba:	54d1      	strb	r1, [r2, r3]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 80111bc:	4b04      	ldr	r3, [pc, #16]	; (80111d0 <SerialFlashFSM+0x224>)
 80111be:	2214      	movs	r2, #20
 80111c0:	611a      	str	r2, [r3, #16]
					break;
 80111c2:	e18e      	b.n	80114e2 <SerialFlashFSM+0x536>
						FlashStr.enmCurrentWriteState = enmFlashWriteData;
 80111c4:	4a02      	ldr	r2, [pc, #8]	; (80111d0 <SerialFlashFSM+0x224>)
 80111c6:	f242 1350 	movw	r3, #8528	; 0x2150
 80111ca:	2103      	movs	r1, #3
 80111cc:	54d1      	strb	r1, [r2, r3]
 80111ce:	e7f5      	b.n	80111bc <SerialFlashFSM+0x210>
 80111d0:	200105f4 	.word	0x200105f4
 80111d4:	2000e760 	.word	0x2000e760
 80111d8:	2000427c 	.word	0x2000427c
 80111dc:	007ffffe 	.word	0x007ffffe
 80111e0:	2001060a 	.word	0x2001060a
 80111e4:	007fffff 	.word	0x007fffff
 80111e8:	20011d7a 	.word	0x20011d7a
 80111ec:	0801c8bc 	.word	0x0801c8bc
					u16tempVar = FlashStr.u32FlashWriteAddress / 256;
 80111f0:	49c1      	ldr	r1, [pc, #772]	; (80114f8 <SerialFlashFSM+0x54c>)
 80111f2:	680a      	ldr	r2, [r1, #0]
					u16tempVar *= 256;
 80111f4:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
					u16tempVar = FlashStr.u32FlashWriteAddress - u16tempVar;
 80111f8:	b290      	uxth	r0, r2
					FlashStr.u16FlashPageEmptyByte = 256 - u16tempVar;
 80111fa:	1a1b      	subs	r3, r3, r0
 80111fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011200:	b29b      	uxth	r3, r3
 8011202:	810b      	strh	r3, [r1, #8]
					if(u16writeDataSize > FlashStr.u16FlashPageEmptyByte)
 8011204:	49bd      	ldr	r1, [pc, #756]	; (80114fc <SerialFlashFSM+0x550>)
 8011206:	8849      	ldrh	r1, [r1, #2]
 8011208:	428b      	cmp	r3, r1
 801120a:	d242      	bcs.n	8011292 <SerialFlashFSM+0x2e6>
						FlashStr.u16FlashByteWriten = FlashStr.u16FlashPageEmptyByte;
 801120c:	49ba      	ldr	r1, [pc, #744]	; (80114f8 <SerialFlashFSM+0x54c>)
 801120e:	814b      	strh	r3, [r1, #10]
					memset(DataToWrite, 0, 5);
 8011210:	2500      	movs	r5, #0
 8011212:	f88d 500c 	strb.w	r5, [sp, #12]
					DataToWrite[0] = SFLASH_WRITE_PAGE_CODE;
 8011216:	2302      	movs	r3, #2
 8011218:	f88d 3008 	strb.w	r3, [sp, #8]
					DataToWrite[1] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 16);
 801121c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011220:	f88d 3009 	strb.w	r3, [sp, #9]
					DataToWrite[2] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 8);
 8011224:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011228:	f88d 300a 	strb.w	r3, [sp, #10]
					DataToWrite[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 0);
 801122c:	f88d 200b 	strb.w	r2, [sp, #11]
					SFlash_Chip_Select(ENABLE);
 8011230:	2001      	movs	r0, #1
 8011232:	f7ff fd87 	bl	8010d44 <SFlash_Chip_Select>
				  	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *) DataToWrite, 4);
 8011236:	4eb2      	ldr	r6, [pc, #712]	; (8011500 <SerialFlashFSM+0x554>)
 8011238:	2204      	movs	r2, #4
 801123a:	a902      	add	r1, sp, #8
 801123c:	4630      	mov	r0, r6
 801123e:	f7f4 f84d 	bl	80052dc <HAL_SPI_Transmit_IT>
				  	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *) &FlashStr.cSFlashWriteData[FlashStr.u16FlashWriteIndex], FlashStr.u16FlashByteWriten);
 8011242:	4cad      	ldr	r4, [pc, #692]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011244:	89a1      	ldrh	r1, [r4, #12]
 8011246:	f501 51bc 	add.w	r1, r1, #6016	; 0x1780
 801124a:	4421      	add	r1, r4
 801124c:	8962      	ldrh	r2, [r4, #10]
 801124e:	3106      	adds	r1, #6
 8011250:	4630      	mov	r0, r6
 8011252:	f7f4 f843 	bl	80052dc <HAL_SPI_Transmit_IT>
					HAL_Delay(20);
 8011256:	2014      	movs	r0, #20
 8011258:	f7ef ff38 	bl	80010cc <HAL_Delay>
					SFlash_Chip_Select(DISABLE);
 801125c:	4628      	mov	r0, r5
 801125e:	f7ff fd71 	bl	8010d44 <SFlash_Chip_Select>
					FlashStr.u32FlashWriteAddress += FlashStr.u16FlashByteWriten;
 8011262:	8961      	ldrh	r1, [r4, #10]
 8011264:	6825      	ldr	r5, [r4, #0]
 8011266:	440d      	add	r5, r1
 8011268:	6025      	str	r5, [r4, #0]
					FlashStr.u16FlashWriteIndex += FlashStr.u16FlashByteWriten;
 801126a:	89a3      	ldrh	r3, [r4, #12]
 801126c:	440b      	add	r3, r1
 801126e:	81a3      	strh	r3, [r4, #12]
					FlashStr.u16FlashPageEmptyByte -= FlashStr.u16FlashByteWriten;
 8011270:	8922      	ldrh	r2, [r4, #8]
 8011272:	1a52      	subs	r2, r2, r1
 8011274:	b292      	uxth	r2, r2
 8011276:	8122      	strh	r2, [r4, #8]
					u16writeDataSize -= FlashStr.u16FlashByteWriten;
 8011278:	48a0      	ldr	r0, [pc, #640]	; (80114fc <SerialFlashFSM+0x550>)
 801127a:	8843      	ldrh	r3, [r0, #2]
 801127c:	1a5b      	subs	r3, r3, r1
 801127e:	b29b      	uxth	r3, r3
 8011280:	8043      	strh	r3, [r0, #2]
					if(FlashStr.u16FlashPageEmptyByte >= u16writeDataSize)	// Write is over
 8011282:	429a      	cmp	r2, r3
 8011284:	d20c      	bcs.n	80112a0 <SerialFlashFSM+0x2f4>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 8011286:	4a9c      	ldr	r2, [pc, #624]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011288:	f242 1350 	movw	r3, #8528	; 0x2150
 801128c:	2101      	movs	r1, #1
 801128e:	54d1      	strb	r1, [r2, r3]
 8011290:	e127      	b.n	80114e2 <SerialFlashFSM+0x536>
						FlashStr.u16FlashByteWriten = u16writeDataSize;
 8011292:	4b99      	ldr	r3, [pc, #612]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011294:	8159      	strh	r1, [r3, #10]
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011296:	f242 114f 	movw	r1, #8527	; 0x214f
 801129a:	2000      	movs	r0, #0
 801129c:	5458      	strb	r0, [r3, r1]
 801129e:	e7b7      	b.n	8011210 <SerialFlashFSM+0x264>
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80112a0:	4626      	mov	r6, r4
 80112a2:	2400      	movs	r4, #0
 80112a4:	f242 134f 	movw	r3, #8527	; 0x214f
 80112a8:	54f4      	strb	r4, [r6, r3]
						memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 80112aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80112ae:	4621      	mov	r1, r4
 80112b0:	4894      	ldr	r0, [pc, #592]	; (8011504 <SerialFlashFSM+0x558>)
 80112b2:	f001 fbfb 	bl	8012aac <memset>
						memset(strI2cEeprom.pu8SFlashWriteMemLocAddress, 0x0, 5);
 80112b6:	4b94      	ldr	r3, [pc, #592]	; (8011508 <SerialFlashFSM+0x55c>)
 80112b8:	f883 4cdc 	strb.w	r4, [r3, #3292]	; 0xcdc
						strI2cEeprom.pu8SFlashWriteMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 24);
 80112bc:	0e2a      	lsrs	r2, r5, #24
 80112be:	f883 2cdb 	strb.w	r2, [r3, #3291]	; 0xcdb
						strI2cEeprom.pu8SFlashWriteMemLocAddress[2] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 16);
 80112c2:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80112c6:	f883 2cda 	strb.w	r2, [r3, #3290]	; 0xcda
						strI2cEeprom.pu8SFlashWriteMemLocAddress[1] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 8);
 80112ca:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80112ce:	f883 2cd9 	strb.w	r2, [r3, #3289]	; 0xcd9
						strI2cEeprom.pu8SFlashWriteMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashWriteAddress);
 80112d2:	f883 5cd8 	strb.w	r5, [r3, #3288]	; 0xcd8
						HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 288,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashWriteMemLocAddress,4);
 80112d6:	2204      	movs	r2, #4
 80112d8:	9201      	str	r2, [sp, #4]
 80112da:	f603 43d8 	addw	r3, r3, #3288	; 0xcd8
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	2310      	movs	r3, #16
 80112e2:	f44f 7290 	mov.w	r2, #288	; 0x120
 80112e6:	21a0      	movs	r1, #160	; 0xa0
 80112e8:	4888      	ldr	r0, [pc, #544]	; (801150c <SerialFlashFSM+0x560>)
 80112ea:	f7f1 ff65 	bl	80031b8 <HAL_I2C_Mem_Write_IT>
						HAL_Delay(10);
 80112ee:	200a      	movs	r0, #10
 80112f0:	f7ef feec 	bl	80010cc <HAL_Delay>
						if(FlashStr.bitFlagQueueDataWrite == 1)
 80112f4:	f242 134e 	movw	r3, #8526	; 0x214e
 80112f8:	5cf3      	ldrb	r3, [r6, r3]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f000 80f1 	beq.w	80114e2 <SerialFlashFSM+0x536>
							GSMQueueFullFlag = 1;
 8011300:	4b7e      	ldr	r3, [pc, #504]	; (80114fc <SerialFlashFSM+0x550>)
 8011302:	2201      	movs	r2, #1
 8011304:	701a      	strb	r2, [r3, #0]
							++FlashStr.u8QueueWriteCounter;
 8011306:	7d73      	ldrb	r3, [r6, #21]
 8011308:	3301      	adds	r3, #1
 801130a:	b2db      	uxtb	r3, r3
 801130c:	7573      	strb	r3, [r6, #21]
							if(FlashStr.u8QueueWriteCounter >= MAX_QUEUE_SIZE)
 801130e:	2b09      	cmp	r3, #9
 8011310:	f240 80e7 	bls.w	80114e2 <SerialFlashFSM+0x536>
								FlashStr.u8QueueWriteCounter = 1;
 8011314:	2201      	movs	r2, #1
 8011316:	7572      	strb	r2, [r6, #21]
								GSMQueueFullFlag = 0;
 8011318:	4978      	ldr	r1, [pc, #480]	; (80114fc <SerialFlashFSM+0x550>)
 801131a:	700c      	strb	r4, [r1, #0]
								FlashStr.bitFlagQueueDataWrite = 0;
 801131c:	f242 114e 	movw	r1, #8526	; 0x214e
 8011320:	5474      	strb	r4, [r6, r1]
 8011322:	e0de      	b.n	80114e2 <SerialFlashFSM+0x536>
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011324:	4a74      	ldr	r2, [pc, #464]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011326:	f242 134f 	movw	r3, #8527	; 0x214f
 801132a:	2100      	movs	r1, #0
 801132c:	54d1      	strb	r1, [r2, r3]
					break;
 801132e:	e0d8      	b.n	80114e2 <SerialFlashFSM+0x536>
			switch(FlashStr.enmCurrentReadState)
 8011330:	4a71      	ldr	r2, [pc, #452]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011332:	f242 1351 	movw	r3, #8529	; 0x2151
 8011336:	5cd3      	ldrb	r3, [r2, r3]
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b01      	cmp	r3, #1
 801133c:	d01a      	beq.n	8011374 <SerialFlashFSM+0x3c8>
 801133e:	2b02      	cmp	r3, #2
 8011340:	d04f      	beq.n	80113e2 <SerialFlashFSM+0x436>
 8011342:	b12b      	cbz	r3, 8011350 <SerialFlashFSM+0x3a4>
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011344:	4a6c      	ldr	r2, [pc, #432]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011346:	f242 134f 	movw	r3, #8527	; 0x214f
 801134a:	2100      	movs	r1, #0
 801134c:	54d1      	strb	r1, [r2, r3]
					break;
 801134e:	e0c8      	b.n	80114e2 <SerialFlashFSM+0x536>
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 8011350:	f7ff fd10 	bl	8010d74 <SFlash_Read_Status_Register>
					if(u8Flash_Busy_status == 1)
 8011354:	2801      	cmp	r0, #1
 8011356:	d005      	beq.n	8011364 <SerialFlashFSM+0x3b8>
						FlashStr.enmCurrentReadState = enmFlashReadData;
 8011358:	4a67      	ldr	r2, [pc, #412]	; (80114f8 <SerialFlashFSM+0x54c>)
 801135a:	f242 1351 	movw	r3, #8529	; 0x2151
 801135e:	2101      	movs	r1, #1
 8011360:	54d1      	strb	r1, [r2, r3]
 8011362:	e0be      	b.n	80114e2 <SerialFlashFSM+0x536>
						FlashStr.u32SerialFlashDelay = TWENTY_MS;
 8011364:	4b64      	ldr	r3, [pc, #400]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011366:	2214      	movs	r2, #20
 8011368:	611a      	str	r2, [r3, #16]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 801136a:	f242 1251 	movw	r2, #8529	; 0x2151
 801136e:	2100      	movs	r1, #0
 8011370:	5499      	strb	r1, [r3, r2]
 8011372:	e0b6      	b.n	80114e2 <SerialFlashFSM+0x536>
					FlashStr.bitFlagReadInProgress = 1;
 8011374:	4c60      	ldr	r4, [pc, #384]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011376:	f242 134d 	movw	r3, #8525	; 0x214d
 801137a:	2201      	movs	r2, #1
 801137c:	54e2      	strb	r2, [r4, r3]
					memset((char *)FlashStr.cSFlashTransmitData, 0, sizeof(FlashStr.cSFlashTransmitData));
 801137e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8011382:	2100      	movs	r1, #0
 8011384:	f104 0016 	add.w	r0, r4, #22
 8011388:	f001 fb90 	bl	8012aac <memset>
					if(FlashStr.u32FlashWriteAddress < (FlashStr.u32FlashReadAddress + SFLASH_UPLOAD_LENGTH))
 801138c:	6822      	ldr	r2, [r4, #0]
 801138e:	6860      	ldr	r0, [r4, #4]
 8011390:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
 8011394:	429a      	cmp	r2, r3
 8011396:	d211      	bcs.n	80113bc <SerialFlashFSM+0x410>
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, FlashStr.u32FlashWriteAddress - FlashStr.u32FlashReadAddress);
 8011398:	1a12      	subs	r2, r2, r0
 801139a:	3416      	adds	r4, #22
 801139c:	b292      	uxth	r2, r2
 801139e:	4621      	mov	r1, r4
 80113a0:	f7ff fd34 	bl	8010e0c <SFlash_Read>
						FlashStr.u32FlashReadAddress += SFLASH_UPLOAD_LENGTH;
 80113a4:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80113a8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80113ac:	f844 3c12 	str.w	r3, [r4, #-18]
					FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 80113b0:	4a51      	ldr	r2, [pc, #324]	; (80114f8 <SerialFlashFSM+0x54c>)
 80113b2:	f242 1351 	movw	r3, #8529	; 0x2151
 80113b6:	2102      	movs	r1, #2
 80113b8:	54d1      	strb	r1, [r2, r3]
					break;
 80113ba:	e092      	b.n	80114e2 <SerialFlashFSM+0x536>
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, SFLASH_UPLOAD_LENGTH);
 80113bc:	4c54      	ldr	r4, [pc, #336]	; (8011510 <SerialFlashFSM+0x564>)
 80113be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80113c2:	4621      	mov	r1, r4
 80113c4:	f7ff fd22 	bl	8010e0c <SFlash_Read>
						FlashStr.u32FlashReadAddress += SFLASH_UPLOAD_LENGTH;
 80113c8:	f1a4 0316 	sub.w	r3, r4, #22
 80113cc:	f854 2c12 	ldr.w	r2, [r4, #-18]
 80113d0:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80113d4:	f844 2c12 	str.w	r2, [r4, #-18]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 80113d8:	f242 1251 	movw	r2, #8529	; 0x2151
 80113dc:	2102      	movs	r1, #2
 80113de:	5499      	strb	r1, [r3, r2]
 80113e0:	e7e6      	b.n	80113b0 <SerialFlashFSM+0x404>
					SFlash_Arrange_Read_Data();
 80113e2:	f7ff fd43 	bl	8010e6c <SFlash_Arrange_Read_Data>
					if(strlen((char *)FlashStr.cSFlashTransmitData) > 10)
 80113e6:	484a      	ldr	r0, [pc, #296]	; (8011510 <SerialFlashFSM+0x564>)
 80113e8:	f7ee ff0c 	bl	8000204 <strlen>
 80113ec:	280a      	cmp	r0, #10
 80113ee:	d811      	bhi.n	8011414 <SerialFlashFSM+0x468>
					if(FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress)
 80113f0:	4b41      	ldr	r3, [pc, #260]	; (80114f8 <SerialFlashFSM+0x54c>)
 80113f2:	685a      	ldr	r2, [r3, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d303      	bcc.n	8011402 <SerialFlashFSM+0x456>
					  if(strlen((char *)FlashStr.cSFlashHalfReadData) != 0)
 80113fa:	4b3f      	ldr	r3, [pc, #252]	; (80114f8 <SerialFlashFSM+0x54c>)
 80113fc:	f893 39da 	ldrb.w	r3, [r3, #2522]	; 0x9da
 8011400:	b9fb      	cbnz	r3, 8011442 <SerialFlashFSM+0x496>
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011402:	4b3d      	ldr	r3, [pc, #244]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011404:	2200      	movs	r2, #0
 8011406:	f242 114f 	movw	r1, #8527	; 0x214f
 801140a:	545a      	strb	r2, [r3, r1]
					FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 801140c:	f242 1151 	movw	r1, #8529	; 0x2151
 8011410:	545a      	strb	r2, [r3, r1]
					break;
 8011412:	e066      	b.n	80114e2 <SerialFlashFSM+0x536>
						FlashStr.u8BufferQueueCounts = 0;
 8011414:	4c38      	ldr	r4, [pc, #224]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011416:	2300      	movs	r3, #0
 8011418:	7523      	strb	r3, [r4, #20]
						enqueue(&gsmPayload,(char *)getSFlashDataString((char *)FlashStr.cSFlashTransmitData, strlen(FlashStr.cSFlashTransmitData) + 10));
 801141a:	f104 0516 	add.w	r5, r4, #22
 801141e:	4628      	mov	r0, r5
 8011420:	f7ee fef0 	bl	8000204 <strlen>
 8011424:	f100 010a 	add.w	r1, r0, #10
 8011428:	b289      	uxth	r1, r1
 801142a:	4628      	mov	r0, r5
 801142c:	f7ff fd92 	bl	8010f54 <getSFlashDataString>
 8011430:	4601      	mov	r1, r0
 8011432:	4838      	ldr	r0, [pc, #224]	; (8011514 <SerialFlashFSM+0x568>)
 8011434:	f7fe f932 	bl	800f69c <enqueue>
						FlashStr.bitFlagSFlashData = 1;
 8011438:	f242 134c 	movw	r3, #8524	; 0x214c
 801143c:	2201      	movs	r2, #1
 801143e:	54e2      	strb	r2, [r4, r3]
 8011440:	e7d6      	b.n	80113f0 <SerialFlashFSM+0x444>
						  enqueue(&gsmPayload,(char *)getSFlashDataString((char *)FlashStr.cSFlashHalfReadData, strlen((char *)FlashStr.cSFlashHalfReadData)));
 8011442:	4c35      	ldr	r4, [pc, #212]	; (8011518 <SerialFlashFSM+0x56c>)
 8011444:	4620      	mov	r0, r4
 8011446:	f7ee fedd 	bl	8000204 <strlen>
 801144a:	b281      	uxth	r1, r0
 801144c:	4620      	mov	r0, r4
 801144e:	f7ff fd81 	bl	8010f54 <getSFlashDataString>
 8011452:	4601      	mov	r1, r0
 8011454:	482f      	ldr	r0, [pc, #188]	; (8011514 <SerialFlashFSM+0x568>)
 8011456:	f7fe f921 	bl	800f69c <enqueue>
						  FlashStr.bitFlagSFlashData = 1;
 801145a:	f6a4 14da 	subw	r4, r4, #2522	; 0x9da
 801145e:	f242 134c 	movw	r3, #8524	; 0x214c
 8011462:	2201      	movs	r2, #1
 8011464:	54e2      	strb	r2, [r4, r3]
						  FlashStr.u8BufferQueueCounts++;
 8011466:	7d23      	ldrb	r3, [r4, #20]
 8011468:	4413      	add	r3, r2
 801146a:	7523      	strb	r3, [r4, #20]
 801146c:	e7c9      	b.n	8011402 <SerialFlashFSM+0x456>
			  FlashStr.bitFlagReadInProgress = 0;
 801146e:	4e22      	ldr	r6, [pc, #136]	; (80114f8 <SerialFlashFSM+0x54c>)
 8011470:	2500      	movs	r5, #0
 8011472:	f242 134d 	movw	r3, #8525	; 0x214d
 8011476:	54f5      	strb	r5, [r6, r3]
			  SFlash_Chip_Erase();
 8011478:	f7ff fd7a 	bl	8010f70 <SFlash_Chip_Erase>
			  FlashStr.bitFlagMemoryFull = 0;
 801147c:	f242 134b 	movw	r3, #8523	; 0x214b
 8011480:	54f5      	strb	r5, [r6, r3]
			  FlashStr.u32FlashWriteAddress = 0;
 8011482:	6035      	str	r5, [r6, #0]
			  memset(strI2cEeprom.pu8SFlashWriteMemLocAddress, 0x0, 5);
 8011484:	4c25      	ldr	r4, [pc, #148]	; (801151c <SerialFlashFSM+0x570>)
 8011486:	6025      	str	r5, [r4, #0]
			  strI2cEeprom.pu8SFlashWriteMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 24);
 8011488:	70a5      	strb	r5, [r4, #2]
			  strI2cEeprom.pu8SFlashWriteMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashWriteAddress);
 801148a:	f804 5c01 	strb.w	r5, [r4, #-1]
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 288,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashWriteMemLocAddress,4);
 801148e:	4f1f      	ldr	r7, [pc, #124]	; (801150c <SerialFlashFSM+0x560>)
 8011490:	f04f 0804 	mov.w	r8, #4
 8011494:	f8cd 8004 	str.w	r8, [sp, #4]
 8011498:	1e63      	subs	r3, r4, #1
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	2310      	movs	r3, #16
 801149e:	f44f 7290 	mov.w	r2, #288	; 0x120
 80114a2:	21a0      	movs	r1, #160	; 0xa0
 80114a4:	4638      	mov	r0, r7
 80114a6:	f7f1 fe87 	bl	80031b8 <HAL_I2C_Mem_Write_IT>
			  HAL_Delay(100);
 80114aa:	2064      	movs	r0, #100	; 0x64
 80114ac:	f7ef fe0e 	bl	80010cc <HAL_Delay>
			  FlashStr.u32FlashReadAddress = 0;
 80114b0:	6075      	str	r5, [r6, #4]
			  memset(strI2cEeprom.pu8SFlashReadMemLocAddress, 0, sizeof(strI2cEeprom.pu8SFlashReadMemLocAddress)*sizeof(char));
 80114b2:	7225      	strb	r5, [r4, #8]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashReadAddress >> 24);
 80114b4:	71e5      	strb	r5, [r4, #7]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[2] = (uint8_t)(FlashStr.u32FlashReadAddress >> 16);
 80114b6:	71a5      	strb	r5, [r4, #6]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[1] = (uint8_t)(FlashStr.u32FlashReadAddress >> 8);
 80114b8:	7165      	strb	r5, [r4, #5]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashReadAddress);
 80114ba:	7125      	strb	r5, [r4, #4]
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 292,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashReadMemLocAddress,4);
 80114bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80114c0:	3404      	adds	r4, #4
 80114c2:	9400      	str	r4, [sp, #0]
 80114c4:	2310      	movs	r3, #16
 80114c6:	f44f 7292 	mov.w	r2, #292	; 0x124
 80114ca:	21a0      	movs	r1, #160	; 0xa0
 80114cc:	4638      	mov	r0, r7
 80114ce:	f7f1 fe73 	bl	80031b8 <HAL_I2C_Mem_Write_IT>
			  HAL_Delay(10);
 80114d2:	200a      	movs	r0, #10
 80114d4:	f7ef fdfa 	bl	80010cc <HAL_Delay>
			  FlashStr.u32SerialFlashDelay = TWO_MIN;
 80114d8:	4b11      	ldr	r3, [pc, #68]	; (8011520 <SerialFlashFSM+0x574>)
 80114da:	6133      	str	r3, [r6, #16]
			  FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80114dc:	f242 134f 	movw	r3, #8527	; 0x214f
 80114e0:	54f5      	strb	r5, [r6, r3]
}
 80114e2:	b004      	add	sp, #16
 80114e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80114e8:	4a03      	ldr	r2, [pc, #12]	; (80114f8 <SerialFlashFSM+0x54c>)
 80114ea:	f242 134f 	movw	r3, #8527	; 0x214f
 80114ee:	2100      	movs	r1, #0
 80114f0:	54d1      	strb	r1, [r2, r3]
			break;
 80114f2:	e7f6      	b.n	80114e2 <SerialFlashFSM+0x536>
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop
 80114f8:	200105f4 	.word	0x200105f4
 80114fc:	2000427c 	.word	0x2000427c
 8011500:	2001274c 	.word	0x2001274c
 8011504:	20011d7a 	.word	0x20011d7a
 8011508:	20007580 	.word	0x20007580
 801150c:	2000e790 	.word	0x2000e790
 8011510:	2001060a 	.word	0x2001060a
 8011514:	2000e760 	.word	0x2000e760
 8011518:	20010fce 	.word	0x20010fce
 801151c:	20008259 	.word	0x20008259
 8011520:	0001d4c0 	.word	0x0001d4c0

08011524 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011524:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011526:	480d      	ldr	r0, [pc, #52]	; (801155c <MX_SPI1_Init+0x38>)
 8011528:	4b0d      	ldr	r3, [pc, #52]	; (8011560 <MX_SPI1_Init+0x3c>)
 801152a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801152c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011530:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011532:	2300      	movs	r3, #0
 8011534:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011536:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011538:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801153a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801153c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011540:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011542:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011544:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011546:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011548:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801154a:	230a      	movs	r3, #10
 801154c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801154e:	f7f3 fe65 	bl	800521c <HAL_SPI_Init>
 8011552:	b900      	cbnz	r0, 8011556 <MX_SPI1_Init+0x32>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011554:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011556:	f7fd f8ff 	bl	800e758 <Error_Handler>
}
 801155a:	e7fb      	b.n	8011554 <MX_SPI1_Init+0x30>
 801155c:	2001274c 	.word	0x2001274c
 8011560:	40013000 	.word	0x40013000

08011564 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011564:	b510      	push	{r4, lr}
 8011566:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011568:	2300      	movs	r3, #0
 801156a:	9303      	str	r3, [sp, #12]
 801156c:	9304      	str	r3, [sp, #16]
 801156e:	9305      	str	r3, [sp, #20]
 8011570:	9306      	str	r3, [sp, #24]
 8011572:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8011574:	6802      	ldr	r2, [r0, #0]
 8011576:	4b19      	ldr	r3, [pc, #100]	; (80115dc <HAL_SPI_MspInit+0x78>)
 8011578:	429a      	cmp	r2, r3
 801157a:	d001      	beq.n	8011580 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 801157c:	b008      	add	sp, #32
 801157e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011580:	2400      	movs	r4, #0
 8011582:	9401      	str	r4, [sp, #4]
 8011584:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8011588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801158a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801158e:	645a      	str	r2, [r3, #68]	; 0x44
 8011590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011592:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011596:	9201      	str	r2, [sp, #4]
 8011598:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801159a:	9402      	str	r4, [sp, #8]
 801159c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801159e:	f042 0202 	orr.w	r2, r2, #2
 80115a2:	631a      	str	r2, [r3, #48]	; 0x30
 80115a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115a6:	f003 0302 	and.w	r3, r3, #2
 80115aa:	9302      	str	r3, [sp, #8]
 80115ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80115ae:	2338      	movs	r3, #56	; 0x38
 80115b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115b2:	2302      	movs	r3, #2
 80115b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115b6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115b8:	2303      	movs	r3, #3
 80115ba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80115bc:	2305      	movs	r3, #5
 80115be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80115c0:	a903      	add	r1, sp, #12
 80115c2:	4807      	ldr	r0, [pc, #28]	; (80115e0 <HAL_SPI_MspInit+0x7c>)
 80115c4:	f7f1 fa52 	bl	8002a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80115c8:	4622      	mov	r2, r4
 80115ca:	4621      	mov	r1, r4
 80115cc:	2023      	movs	r0, #35	; 0x23
 80115ce:	f7f0 f9dd 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80115d2:	2023      	movs	r0, #35	; 0x23
 80115d4:	f7f0 fa0e 	bl	80019f4 <HAL_NVIC_EnableIRQ>
}
 80115d8:	e7d0      	b.n	801157c <HAL_SPI_MspInit+0x18>
 80115da:	bf00      	nop
 80115dc:	40013000 	.word	0x40013000
 80115e0:	40020400 	.word	0x40020400

080115e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80115e4:	b510      	push	{r4, lr}
 80115e6:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80115e8:	2400      	movs	r4, #0
 80115ea:	9400      	str	r4, [sp, #0]
 80115ec:	4b16      	ldr	r3, [pc, #88]	; (8011648 <HAL_MspInit+0x64>)
 80115ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80115f4:	645a      	str	r2, [r3, #68]	; 0x44
 80115f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80115fc:	9200      	str	r2, [sp, #0]
 80115fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011600:	9401      	str	r4, [sp, #4]
 8011602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011608:	641a      	str	r2, [r3, #64]	; 0x40
 801160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8011614:	4622      	mov	r2, r4
 8011616:	2101      	movs	r1, #1
 8011618:	2004      	movs	r0, #4
 801161a:	f7f0 f9b7 	bl	800198c <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 801161e:	2004      	movs	r0, #4
 8011620:	f7f0 f9e8 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8011624:	4622      	mov	r2, r4
 8011626:	2101      	movs	r1, #1
 8011628:	2005      	movs	r0, #5
 801162a:	f7f0 f9af 	bl	800198c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 801162e:	2005      	movs	r0, #5
 8011630:	f7f0 f9e0 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8011634:	4622      	mov	r2, r4
 8011636:	2101      	movs	r1, #1
 8011638:	2005      	movs	r0, #5
 801163a:	f7f0 f9a7 	bl	800198c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 801163e:	2005      	movs	r0, #5
 8011640:	f7f0 f9d8 	bl	80019f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011644:	b002      	add	sp, #8
 8011646:	bd10      	pop	{r4, pc}
 8011648:	40023800 	.word	0x40023800

0801164c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801164c:	4770      	bx	lr

0801164e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801164e:	e7fe      	b.n	801164e <HardFault_Handler>

08011650 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011650:	e7fe      	b.n	8011650 <MemManage_Handler>

08011652 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011652:	e7fe      	b.n	8011652 <BusFault_Handler>

08011654 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011654:	e7fe      	b.n	8011654 <UsageFault_Handler>

08011656 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011656:	4770      	bx	lr

08011658 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011658:	4770      	bx	lr

0801165a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801165a:	4770      	bx	lr

0801165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801165c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801165e:	f7ef fd23 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011662:	bd08      	pop	{r3, pc}

08011664 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8011664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8011666:	4802      	ldr	r0, [pc, #8]	; (8011670 <RTC_WKUP_IRQHandler+0xc>)
 8011668:	f7f3 fcda 	bl	8005020 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 801166c:	bd08      	pop	{r3, pc}
 801166e:	bf00      	nop
 8011670:	200105ac 	.word	0x200105ac

08011674 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8011674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8011676:	f7f1 f827 	bl	80026c8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 801167a:	bd08      	pop	{r3, pc}

0801167c <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 801167c:	4770      	bx	lr
	...

08011680 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8011680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8011682:	4802      	ldr	r0, [pc, #8]	; (801168c <ADC_IRQHandler+0xc>)
 8011684:	f7ef ffb6 	bl	80015f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8011688:	bd08      	pop	{r3, pc}
 801168a:	bf00      	nop
 801168c:	200073e4 	.word	0x200073e4

08011690 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8011690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8011692:	4802      	ldr	r0, [pc, #8]	; (801169c <I2C1_EV_IRQHandler+0xc>)
 8011694:	f7f2 fb60 	bl	8003d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8011698:	bd08      	pop	{r3, pc}
 801169a:	bf00      	nop
 801169c:	2000e790 	.word	0x2000e790

080116a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80116a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80116a2:	4802      	ldr	r0, [pc, #8]	; (80116ac <I2C1_ER_IRQHandler+0xc>)
 80116a4:	f7f2 fc28 	bl	8003ef8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80116a8:	bd08      	pop	{r3, pc}
 80116aa:	bf00      	nop
 80116ac:	2000e790 	.word	0x2000e790

080116b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80116b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80116b2:	4802      	ldr	r0, [pc, #8]	; (80116bc <SPI1_IRQHandler+0xc>)
 80116b4:	f7f4 f8ba 	bl	800582c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80116b8:	bd08      	pop	{r3, pc}
 80116ba:	bf00      	nop
 80116bc:	2001274c 	.word	0x2001274c

080116c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80116c0:	b510      	push	{r4, lr}
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80116c2:	4b28      	ldr	r3, [pc, #160]	; (8011764 <USART3_IRQHandler+0xa4>)
 80116c4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3)!=RESET)
 80116c6:	f013 0f20 	tst.w	r3, #32
 80116ca:	d114      	bne.n	80116f6 <USART3_IRQHandler+0x36>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80116cc:	4b25      	ldr	r3, [pc, #148]	; (8011764 <USART3_IRQHandler+0xa4>)
 80116ce:	681b      	ldr	r3, [r3, #0]
	{
	/* RXNE flag will be cleared by reading of RDR register (done in call) */
	/* Call function in charge of handling Character reception */
		MODBUS_CharReception_Callback();
	}
	else if(LL_USART_IsActiveFlag_TC(USART3)!=RESET)
 80116d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80116d4:	d011      	beq.n	80116fa <USART3_IRQHandler+0x3a>
	{
		if(u8MBQueryCharacterCounter <= 7)
 80116d6:	4b24      	ldr	r3, [pc, #144]	; (8011768 <USART3_IRQHandler+0xa8>)
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	2b07      	cmp	r3, #7
 80116de:	d80d      	bhi.n	80116fc <USART3_IRQHandler+0x3c>
		{
			LL_USART_TransmitData8(USART3,master.u8QueryFrame[u8MBQueryCharacterCounter++]);
 80116e0:	4b21      	ldr	r3, [pc, #132]	; (8011768 <USART3_IRQHandler+0xa8>)
 80116e2:	7819      	ldrb	r1, [r3, #0]
 80116e4:	1c4a      	adds	r2, r1, #1
 80116e6:	b2d2      	uxtb	r2, r2
 80116e8:	701a      	strb	r2, [r3, #0]
 80116ea:	4b20      	ldr	r3, [pc, #128]	; (801176c <USART3_IRQHandler+0xac>)
 80116ec:	440b      	add	r3, r1
 80116ee:	785a      	ldrb	r2, [r3, #1]
  USARTx->DR = Value;
 80116f0:	4b1c      	ldr	r3, [pc, #112]	; (8011764 <USART3_IRQHandler+0xa4>)
 80116f2:	605a      	str	r2, [r3, #4]
}
 80116f4:	e001      	b.n	80116fa <USART3_IRQHandler+0x3a>
		MODBUS_CharReception_Callback();
 80116f6:	f7ff faed 	bl	8010cd4 <MODBUS_CharReception_Callback>
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80116fa:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_RESET);
 80116fc:	4c1c      	ldr	r4, [pc, #112]	; (8011770 <USART3_IRQHandler+0xb0>)
 80116fe:	2200      	movs	r2, #0
 8011700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011704:	4620      	mov	r0, r4
 8011706:	f7f1 faa9 	bl	8002c5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 801170a:	2200      	movs	r2, #0
 801170c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011710:	4620      	mov	r0, r4
 8011712:	f7f1 faa3 	bl	8002c5c <HAL_GPIO_WritePin>
			u8MBQueryCharacterCounter = 0;
 8011716:	2200      	movs	r2, #0
 8011718:	4b13      	ldr	r3, [pc, #76]	; (8011768 <USART3_IRQHandler+0xa8>)
 801171a:	701a      	strb	r2, [r3, #0]
			master.u8MBResponseCharacterCounter = 0;
 801171c:	4b13      	ldr	r3, [pc, #76]	; (801176c <USART3_IRQHandler+0xac>)
 801171e:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
			modbusState = enmMODBBUS_AWAIT_RESPONSE;
 8011722:	4a14      	ldr	r2, [pc, #80]	; (8011774 <USART3_IRQHandler+0xb4>)
 8011724:	2102      	movs	r1, #2
 8011726:	7011      	strb	r1, [r2, #0]
			gu32ModbusResponseTimeout = THREE_SEC;
 8011728:	4a13      	ldr	r2, [pc, #76]	; (8011778 <USART3_IRQHandler+0xb8>)
 801172a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 801172e:	6011      	str	r1, [r2, #0]
			gu8MBFrameTransmittedFlag = 1;
 8011730:	4a12      	ldr	r2, [pc, #72]	; (801177c <USART3_IRQHandler+0xbc>)
 8011732:	2101      	movs	r1, #1
 8011734:	7011      	strb	r1, [r2, #0]
			master.u32PollDelay = ONE_SEC;
 8011736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801173a:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 801173e:	4b10      	ldr	r3, [pc, #64]	; (8011780 <USART3_IRQHandler+0xc0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011740:	e853 2f00 	ldrex	r2, [r3]
 8011744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011748:	e843 2100 	strex	r1, r2, [r3]
 801174c:	2900      	cmp	r1, #0
 801174e:	d1f6      	bne.n	801173e <USART3_IRQHandler+0x7e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011750:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8011754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011758:	e843 2100 	strex	r1, r2, [r3]
 801175c:	2900      	cmp	r1, #0
 801175e:	d1f7      	bne.n	8011750 <USART3_IRQHandler+0x90>
 8011760:	e7cb      	b.n	80116fa <USART3_IRQHandler+0x3a>
 8011762:	bf00      	nop
 8011764:	40004800 	.word	0x40004800
 8011768:	20003628 	.word	0x20003628
 801176c:	2000e840 	.word	0x2000e840
 8011770:	40021000 	.word	0x40021000
 8011774:	2000361d 	.word	0x2000361d
 8011778:	20003630 	.word	0x20003630
 801177c:	20003af8 	.word	0x20003af8
 8011780:	4000480c 	.word	0x4000480c

08011784 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8011784:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8011786:	4802      	ldr	r0, [pc, #8]	; (8011790 <RTC_Alarm_IRQHandler+0xc>)
 8011788:	f7f3 f924 	bl	80049d4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 801178c:	bd08      	pop	{r3, pc}
 801178e:	bf00      	nop
 8011790:	200105ac 	.word	0x200105ac

08011794 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8011794:	b508      	push	{r3, lr}
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8011796:	4b04      	ldr	r3, [pc, #16]	; (80117a8 <UART4_IRQHandler+0x14>)
 8011798:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(UART4)!=RESET)
 801179a:	f013 0f20 	tst.w	r3, #32
 801179e:	d100      	bne.n	80117a2 <UART4_IRQHandler+0xe>
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80117a0:	bd08      	pop	{r3, pc}
		GSM_CharReception_Callback();
 80117a2:	f7ff fa75 	bl	8010c90 <GSM_CharReception_Callback>
}
 80117a6:	e7fb      	b.n	80117a0 <UART4_IRQHandler+0xc>
 80117a8:	40004c00 	.word	0x40004c00

080117ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80117ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80117ae:	4802      	ldr	r0, [pc, #8]	; (80117b8 <TIM7_IRQHandler+0xc>)
 80117b0:	f7f4 f91e 	bl	80059f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80117b4:	bd08      	pop	{r3, pc}
 80117b6:	bf00      	nop
 80117b8:	200127a4 	.word	0x200127a4

080117bc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80117bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80117be:	4802      	ldr	r0, [pc, #8]	; (80117c8 <DMA2_Stream4_IRQHandler+0xc>)
 80117c0:	f7f0 fab4 	bl	8001d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80117c4:	bd08      	pop	{r3, pc}
 80117c6:	bf00      	nop
 80117c8:	2000742c 	.word	0x2000742c

080117cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80117cc:	2001      	movs	r0, #1
 80117ce:	4770      	bx	lr

080117d0 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80117d0:	4b02      	ldr	r3, [pc, #8]	; (80117dc <_kill+0xc>)
 80117d2:	2216      	movs	r2, #22
 80117d4:	601a      	str	r2, [r3, #0]
	return -1;
}
 80117d6:	f04f 30ff 	mov.w	r0, #4294967295
 80117da:	4770      	bx	lr
 80117dc:	2001281c 	.word	0x2001281c

080117e0 <_exit>:

void _exit (int status)
{
 80117e0:	b508      	push	{r3, lr}
	_kill(status, -1);
 80117e2:	f04f 31ff 	mov.w	r1, #4294967295
 80117e6:	f7ff fff3 	bl	80117d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80117ea:	e7fe      	b.n	80117ea <_exit+0xa>

080117ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80117ec:	b570      	push	{r4, r5, r6, lr}
 80117ee:	460c      	mov	r4, r1
 80117f0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80117f2:	2500      	movs	r5, #0
 80117f4:	42b5      	cmp	r5, r6
 80117f6:	da07      	bge.n	8011808 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80117f8:	f3af 8000 	nop.w
 80117fc:	4621      	mov	r1, r4
 80117fe:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011802:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8011804:	460c      	mov	r4, r1
 8011806:	e7f5      	b.n	80117f4 <_read+0x8>
	}

return len;
}
 8011808:	4630      	mov	r0, r6
 801180a:	bd70      	pop	{r4, r5, r6, pc}

0801180c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801180c:	b570      	push	{r4, r5, r6, lr}
 801180e:	460c      	mov	r4, r1
 8011810:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011812:	2500      	movs	r5, #0
 8011814:	42b5      	cmp	r5, r6
 8011816:	da05      	bge.n	8011824 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8011818:	f814 0b01 	ldrb.w	r0, [r4], #1
 801181c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011820:	3501      	adds	r5, #1
 8011822:	e7f7      	b.n	8011814 <_write+0x8>
	}
	return len;
}
 8011824:	4630      	mov	r0, r6
 8011826:	bd70      	pop	{r4, r5, r6, pc}

08011828 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8011828:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801182a:	4a0b      	ldr	r2, [pc, #44]	; (8011858 <_sbrk+0x30>)
 801182c:	6812      	ldr	r2, [r2, #0]
 801182e:	b142      	cbz	r2, 8011842 <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 8011830:	4a09      	ldr	r2, [pc, #36]	; (8011858 <_sbrk+0x30>)
 8011832:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8011834:	4403      	add	r3, r0
 8011836:	466a      	mov	r2, sp
 8011838:	4293      	cmp	r3, r2
 801183a:	d806      	bhi.n	801184a <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 801183c:	4a06      	ldr	r2, [pc, #24]	; (8011858 <_sbrk+0x30>)
 801183e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8011840:	4770      	bx	lr
		heap_end = &end;
 8011842:	4a05      	ldr	r2, [pc, #20]	; (8011858 <_sbrk+0x30>)
 8011844:	4905      	ldr	r1, [pc, #20]	; (801185c <_sbrk+0x34>)
 8011846:	6011      	str	r1, [r2, #0]
 8011848:	e7f2      	b.n	8011830 <_sbrk+0x8>
		errno = ENOMEM;
 801184a:	4b05      	ldr	r3, [pc, #20]	; (8011860 <_sbrk+0x38>)
 801184c:	220c      	movs	r2, #12
 801184e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8011850:	f04f 30ff 	mov.w	r0, #4294967295
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop
 8011858:	20004280 	.word	0x20004280
 801185c:	20012830 	.word	0x20012830
 8011860:	2001281c 	.word	0x2001281c

08011864 <_close>:

int _close(int file)
{
	return -1;
}
 8011864:	f04f 30ff 	mov.w	r0, #4294967295
 8011868:	4770      	bx	lr

0801186a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 801186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801186e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8011870:	2000      	movs	r0, #0
 8011872:	4770      	bx	lr

08011874 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8011874:	2001      	movs	r0, #1
 8011876:	4770      	bx	lr

08011878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8011878:	2000      	movs	r0, #0
 801187a:	4770      	bx	lr

0801187c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801187c:	490f      	ldr	r1, [pc, #60]	; (80118bc <SystemInit+0x40>)
 801187e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8011882:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801188a:	4b0d      	ldr	r3, [pc, #52]	; (80118c0 <SystemInit+0x44>)
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	f042 0201 	orr.w	r2, r2, #1
 8011892:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011894:	2000      	movs	r0, #0
 8011896:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801189e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80118a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80118a4:	4a07      	ldr	r2, [pc, #28]	; (80118c4 <SystemInit+0x48>)
 80118a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80118ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80118b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80118b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80118b6:	608b      	str	r3, [r1, #8]
#endif
}
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	e000ed00 	.word	0xe000ed00
 80118c0:	40023800 	.word	0x40023800
 80118c4:	24003010 	.word	0x24003010

080118c8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80118c8:	b500      	push	{lr}
 80118ca:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80118cc:	2300      	movs	r3, #0
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80118d2:	480f      	ldr	r0, [pc, #60]	; (8011910 <MX_TIM7_Init+0x48>)
 80118d4:	4a0f      	ldr	r2, [pc, #60]	; (8011914 <MX_TIM7_Init+0x4c>)
 80118d6:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 1;
 80118d8:	2201      	movs	r2, #1
 80118da:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118dc:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 41999;
 80118de:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80118e2:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80118e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80118e6:	f7f4 f9a5 	bl	8005c34 <HAL_TIM_Base_Init>
 80118ea:	b950      	cbnz	r0, 8011902 <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80118ec:	2300      	movs	r3, #0
 80118ee:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80118f0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80118f2:	4669      	mov	r1, sp
 80118f4:	4806      	ldr	r0, [pc, #24]	; (8011910 <MX_TIM7_Init+0x48>)
 80118f6:	f7f4 f9c9 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 80118fa:	b928      	cbnz	r0, 8011908 <MX_TIM7_Init+0x40>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80118fc:	b003      	add	sp, #12
 80118fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011902:	f7fc ff29 	bl	800e758 <Error_Handler>
 8011906:	e7f1      	b.n	80118ec <MX_TIM7_Init+0x24>
    Error_Handler();
 8011908:	f7fc ff26 	bl	800e758 <Error_Handler>
}
 801190c:	e7f6      	b.n	80118fc <MX_TIM7_Init+0x34>
 801190e:	bf00      	nop
 8011910:	200127a4 	.word	0x200127a4
 8011914:	40001400 	.word	0x40001400

08011918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM7)
 8011918:	6802      	ldr	r2, [r0, #0]
 801191a:	4b0e      	ldr	r3, [pc, #56]	; (8011954 <HAL_TIM_Base_MspInit+0x3c>)
 801191c:	429a      	cmp	r2, r3
 801191e:	d000      	beq.n	8011922 <HAL_TIM_Base_MspInit+0xa>
 8011920:	4770      	bx	lr
{
 8011922:	b500      	push	{lr}
 8011924:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8011926:	2200      	movs	r2, #0
 8011928:	9201      	str	r2, [sp, #4]
 801192a:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 801192e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011930:	f041 0120 	orr.w	r1, r1, #32
 8011934:	6419      	str	r1, [r3, #64]	; 0x40
 8011936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011938:	f003 0320 	and.w	r3, r3, #32
 801193c:	9301      	str	r3, [sp, #4]
 801193e:	9b01      	ldr	r3, [sp, #4]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8011940:	2101      	movs	r1, #1
 8011942:	2037      	movs	r0, #55	; 0x37
 8011944:	f7f0 f822 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8011948:	2037      	movs	r0, #55	; 0x37
 801194a:	f7f0 f853 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 801194e:	b003      	add	sp, #12
 8011950:	f85d fb04 	ldr.w	pc, [sp], #4
 8011954:	40001400 	.word	0x40001400

08011958 <MX_UART4_Init>:
#include "externs.h"
/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8011958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801195a:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 801195c:	2400      	movs	r4, #0
 801195e:	9409      	str	r4, [sp, #36]	; 0x24
 8011960:	940a      	str	r4, [sp, #40]	; 0x28
 8011962:	940b      	str	r4, [sp, #44]	; 0x2c
 8011964:	940c      	str	r4, [sp, #48]	; 0x30
 8011966:	940d      	str	r4, [sp, #52]	; 0x34
 8011968:	940e      	str	r4, [sp, #56]	; 0x38
 801196a:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 801196c:	4b39      	ldr	r3, [pc, #228]	; (8011a54 <MX_UART4_Init+0xfc>)
 801196e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011970:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011974:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8011976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011978:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 801197c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 801197e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011982:	f042 0201 	orr.w	r2, r2, #1
 8011986:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801198a:	f002 0201 	and.w	r2, r2, #1
 801198e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8011990:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011994:	f042 0204 	orr.w	r2, r2, #4
 8011998:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 801199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801199c:	f003 0304 	and.w	r3, r3, #4
 80119a0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80119a2:	9b00      	ldr	r3, [sp, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
  /**UART4 GPIO Configuration
  PA0/WKUP   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80119a4:	2301      	movs	r3, #1
 80119a6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80119a8:	2702      	movs	r7, #2
 80119aa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80119ac:	2603      	movs	r6, #3
 80119ae:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80119b0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80119b2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80119b4:	2508      	movs	r5, #8
 80119b6:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80119b8:	a903      	add	r1, sp, #12
 80119ba:	4827      	ldr	r0, [pc, #156]	; (8011a58 <MX_UART4_Init+0x100>)
 80119bc:	f7f4 f9ac 	bl	8005d18 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80119c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119c4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80119c6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80119c8:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80119ca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80119cc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80119ce:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80119d0:	a903      	add	r1, sp, #12
 80119d2:	4822      	ldr	r0, [pc, #136]	; (8011a5c <MX_UART4_Init+0x104>)
 80119d4:	f7f4 f9a0 	bl	8005d18 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80119d8:	4b21      	ldr	r3, [pc, #132]	; (8011a60 <MX_UART4_Init+0x108>)
 80119da:	68da      	ldr	r2, [r3, #12]
 80119dc:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80119e0:	f1c2 0307 	rsb	r3, r2, #7
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	bf28      	it	cs
 80119e8:	2304      	movcs	r3, #4
 80119ea:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80119ec:	1d13      	adds	r3, r2, #4
 80119ee:	2b06      	cmp	r3, #6
 80119f0:	d92d      	bls.n	8011a4e <MX_UART4_Init+0xf6>
 80119f2:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295
 80119f8:	408b      	lsls	r3, r1
 80119fa:	43db      	mvns	r3, r3
 80119fc:	f003 0303 	and.w	r3, r3, #3
 8011a00:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a02:	011b      	lsls	r3, r3, #4
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	4a17      	ldr	r2, [pc, #92]	; (8011a64 <MX_UART4_Init+0x10c>)
 8011a08:	f882 3334 	strb.w	r3, [r2, #820]	; 0x334
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011a10:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(UART4_IRQn);

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8011a12:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8011a16:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8011a1c:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8011a1e:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8011a20:	220c      	movs	r2, #12
 8011a22:	920d      	str	r2, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8011a24:	930e      	str	r3, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8011a26:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(UART4, &USART_InitStruct);
 8011a28:	4c0f      	ldr	r4, [pc, #60]	; (8011a68 <MX_UART4_Init+0x110>)
 8011a2a:	a909      	add	r1, sp, #36	; 0x24
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f7f4 fa7b 	bl	8005f28 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8011a38:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8011a3a:	6963      	ldr	r3, [r4, #20]
 8011a3c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8011a40:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8011a42:	68e3      	ldr	r3, [r4, #12]
 8011a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011a48:	60e3      	str	r3, [r4, #12]
  LL_USART_Enable(UART4);
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8011a4a:	b011      	add	sp, #68	; 0x44
 8011a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011a4e:	2200      	movs	r2, #0
 8011a50:	e7d0      	b.n	80119f4 <MX_UART4_Init+0x9c>
 8011a52:	bf00      	nop
 8011a54:	40023800 	.word	0x40023800
 8011a58:	40020000 	.word	0x40020000
 8011a5c:	40020800 	.word	0x40020800
 8011a60:	e000ed00 	.word	0xe000ed00
 8011a64:	e000e100 	.word	0xe000e100
 8011a68:	40004c00 	.word	0x40004c00

08011a6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8011a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6e:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8011a70:	2400      	movs	r4, #0
 8011a72:	9409      	str	r4, [sp, #36]	; 0x24
 8011a74:	940a      	str	r4, [sp, #40]	; 0x28
 8011a76:	940b      	str	r4, [sp, #44]	; 0x2c
 8011a78:	940c      	str	r4, [sp, #48]	; 0x30
 8011a7a:	940d      	str	r4, [sp, #52]	; 0x34
 8011a7c:	940e      	str	r4, [sp, #56]	; 0x38
 8011a7e:	940f      	str	r4, [sp, #60]	; 0x3c
  SET_BIT(RCC->APB1ENR, Periphs);
 8011a80:	4b38      	ldr	r3, [pc, #224]	; (8011b64 <MX_USART3_UART_Init+0xf8>)
 8011a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a84:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011a88:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8011a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a8c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8011a90:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8011a92:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a96:	f042 0202 	orr.w	r2, r2, #2
 8011a9a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a9e:	f002 0202 	and.w	r2, r2, #2
 8011aa2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8011aa4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011aa8:	f042 0208 	orr.w	r2, r2, #8
 8011aac:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ab0:	f003 0308 	and.w	r3, r3, #8
 8011ab4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8011ab6:	9b00      	ldr	r3, [sp, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8011ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011abc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011abe:	2702      	movs	r7, #2
 8011ac0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011ac2:	2603      	movs	r6, #3
 8011ac4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011ac6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8011ac8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8011aca:	2507      	movs	r5, #7
 8011acc:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ace:	a903      	add	r1, sp, #12
 8011ad0:	4825      	ldr	r0, [pc, #148]	; (8011b68 <MX_USART3_UART_Init+0xfc>)
 8011ad2:	f7f4 f921 	bl	8005d18 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8011ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ada:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011adc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011ade:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011ae0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8011ae2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8011ae4:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011ae6:	a903      	add	r1, sp, #12
 8011ae8:	4820      	ldr	r0, [pc, #128]	; (8011b6c <MX_USART3_UART_Init+0x100>)
 8011aea:	f7f4 f915 	bl	8005d18 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011aee:	4b20      	ldr	r3, [pc, #128]	; (8011b70 <MX_USART3_UART_Init+0x104>)
 8011af0:	68da      	ldr	r2, [r3, #12]
 8011af2:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011af6:	1aab      	subs	r3, r5, r2
 8011af8:	2b04      	cmp	r3, #4
 8011afa:	bf28      	it	cs
 8011afc:	2304      	movcs	r3, #4
 8011afe:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011b00:	1d13      	adds	r3, r2, #4
 8011b02:	2b06      	cmp	r3, #6
 8011b04:	d92c      	bls.n	8011b60 <MX_USART3_UART_Init+0xf4>
 8011b06:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b08:	f04f 33ff 	mov.w	r3, #4294967295
 8011b0c:	408b      	lsls	r3, r1
 8011b0e:	43db      	mvns	r3, r3
 8011b10:	f003 0304 	and.w	r3, r3, #4
 8011b14:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b16:	011b      	lsls	r3, r3, #4
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	4a16      	ldr	r2, [pc, #88]	; (8011b74 <MX_USART3_UART_Init+0x108>)
 8011b1c:	f882 3327 	strb.w	r3, [r2, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011b20:	2380      	movs	r3, #128	; 0x80
 8011b22:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(USART3_IRQn);

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8011b24:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8011b28:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8011b2e:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8011b30:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8011b32:	220c      	movs	r2, #12
 8011b34:	920d      	str	r2, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8011b36:	930e      	str	r3, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8011b38:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(USART3, &USART_InitStruct);
 8011b3a:	4c0f      	ldr	r4, [pc, #60]	; (8011b78 <MX_USART3_UART_Init+0x10c>)
 8011b3c:	a909      	add	r1, sp, #36	; 0x24
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f7f4 f9f2 	bl	8005f28 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011b44:	6923      	ldr	r3, [r4, #16]
 8011b46:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8011b4a:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8011b4c:	6963      	ldr	r3, [r4, #20]
 8011b4e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8011b52:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8011b54:	68e3      	ldr	r3, [r4, #12]
 8011b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011b5a:	60e3      	str	r3, [r4, #12]
  LL_USART_Enable(USART3);
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8011b5c:	b011      	add	sp, #68	; 0x44
 8011b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011b60:	2200      	movs	r2, #0
 8011b62:	e7d1      	b.n	8011b08 <MX_USART3_UART_Init+0x9c>
 8011b64:	40023800 	.word	0x40023800
 8011b68:	40020400 	.word	0x40020400
 8011b6c:	40020c00 	.word	0x40020c00
 8011b70:	e000ed00 	.word	0xe000ed00
 8011b74:	e000e100 	.word	0xe000e100
 8011b78:	40004800 	.word	0x40004800
 8011b7c:	00000000 	.word	0x00000000

08011b80 <calculateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void calculateInputVoltage(void)
{
 8011b80:	b510      	push	{r4, lr}
 8011b82:	ed2d 8b02 	vpush	{d8}
	/* Calculate Input Votage from adc data */
//	gfInputSupplyVoltage = (float) ((MAX_INPUT_VTG * gau32BatteryProcessedData[ADC_VIN + 1])/ADC_RESOLUTION);
//	gfBatteryVoltage = ((((3.3 * ( 2 * gau32BatteryProcessedData[ADC_VIN])) / 4095) * 2 ) / 0.6 ) - 0.2;

	gfInputSupplyVoltage = (float)((gau32BatteryProcessedData[1] * 3.3) / 4095) * 10.1;
 8011b86:	4c28      	ldr	r4, [pc, #160]	; (8011c28 <calculateInputVoltage+0xa8>)
 8011b88:	6860      	ldr	r0, [r4, #4]
 8011b8a:	f7ee fcdb 	bl	8000544 <__aeabi_ui2d>
 8011b8e:	a320      	add	r3, pc, #128	; (adr r3, 8011c10 <calculateInputVoltage+0x90>)
 8011b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b94:	f7ee fd50 	bl	8000638 <__aeabi_dmul>
 8011b98:	a31f      	add	r3, pc, #124	; (adr r3, 8011c18 <calculateInputVoltage+0x98>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	f7ee fe75 	bl	800088c <__aeabi_ddiv>
 8011ba2:	f7ef f841 	bl	8000c28 <__aeabi_d2f>
 8011ba6:	f7ee fcef 	bl	8000588 <__aeabi_f2d>
 8011baa:	a31d      	add	r3, pc, #116	; (adr r3, 8011c20 <calculateInputVoltage+0xa0>)
 8011bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb0:	f7ee fd42 	bl	8000638 <__aeabi_dmul>
 8011bb4:	f7ef f838 	bl	8000c28 <__aeabi_d2f>
 8011bb8:	ee08 0a10 	vmov	s16, r0
 8011bbc:	60a0      	str	r0, [r4, #8]
	gfBatteryVoltage = (float)((gau32BatteryProcessedData[0] * 3.3) / 4095) * 1.5;
 8011bbe:	6820      	ldr	r0, [r4, #0]
 8011bc0:	f7ee fcc0 	bl	8000544 <__aeabi_ui2d>
 8011bc4:	a312      	add	r3, pc, #72	; (adr r3, 8011c10 <calculateInputVoltage+0x90>)
 8011bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bca:	f7ee fd35 	bl	8000638 <__aeabi_dmul>
 8011bce:	a312      	add	r3, pc, #72	; (adr r3, 8011c18 <calculateInputVoltage+0x98>)
 8011bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd4:	f7ee fe5a 	bl	800088c <__aeabi_ddiv>
 8011bd8:	f7ef f826 	bl	8000c28 <__aeabi_d2f>
 8011bdc:	ee07 0a90 	vmov	s15, r0
 8011be0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011be8:	edc4 7a03 	vstr	s15, [r4, #12]
	/* Add diode drop for actual voltage */
//	gfInputSupplyVoltage += INPUT_DIODE_DROP;
	/* Check if system is powered from 8.4 V dc battery pack */
	if(gfInputSupplyVoltage <= VIN_BATTERY_VTG)
 8011bec:	eef2 7a05 	vmov.f32	s15, #37	; 0x41280000  10.5
 8011bf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf8:	d804      	bhi.n	8011c04 <calculateInputVoltage+0x84>
	{
		gu32InputSupplySwitchedAlert = TRUE;
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	6122      	str	r2, [r4, #16]
	}
	else
	{
		gu32InputSupplySwitchedAlert = FALSE;
	}
}
 8011bfe:	ecbd 8b02 	vpop	{d8}
 8011c02:	bd10      	pop	{r4, pc}
		gu32InputSupplySwitchedAlert = FALSE;
 8011c04:	4b08      	ldr	r3, [pc, #32]	; (8011c28 <calculateInputVoltage+0xa8>)
 8011c06:	2200      	movs	r2, #0
 8011c08:	611a      	str	r2, [r3, #16]
}
 8011c0a:	e7f8      	b.n	8011bfe <calculateInputVoltage+0x7e>
 8011c0c:	f3af 8000 	nop.w
 8011c10:	66666666 	.word	0x66666666
 8011c14:	400a6666 	.word	0x400a6666
 8011c18:	00000000 	.word	0x00000000
 8011c1c:	40affe00 	.word	0x40affe00
 8011c20:	33333333 	.word	0x33333333
 8011c24:	40243333 	.word	0x40243333
 8011c28:	20004288 	.word	0x20004288

08011c2c <operateadc>:
{
 8011c2c:	b508      	push	{r3, lr}
	if(gu32ADCPollTimer)
 8011c2e:	4b34      	ldr	r3, [pc, #208]	; (8011d00 <operateadc+0xd4>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d150      	bne.n	8011cd8 <operateadc+0xac>
	switch(enmAdcSMCurrentState)
 8011c36:	4b33      	ldr	r3, [pc, #204]	; (8011d04 <operateadc+0xd8>)
 8011c38:	7d1b      	ldrb	r3, [r3, #20]
 8011c3a:	2b03      	cmp	r3, #3
 8011c3c:	d857      	bhi.n	8011cee <operateadc+0xc2>
 8011c3e:	e8df f003 	tbb	[pc, r3]
 8011c42:	1702      	.short	0x1702
 8011c44:	444c      	.short	0x444c
			if((HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gau32BatteryPeripheralData, 2) != HAL_OK))
 8011c46:	2202      	movs	r2, #2
 8011c48:	492f      	ldr	r1, [pc, #188]	; (8011d08 <operateadc+0xdc>)
 8011c4a:	4830      	ldr	r0, [pc, #192]	; (8011d0c <operateadc+0xe0>)
 8011c4c:	f7ef fbc0 	bl	80013d0 <HAL_ADC_Start_DMA>
 8011c50:	b118      	cbz	r0, 8011c5a <operateadc+0x2e>
				enmAdcSMCurrentState = enmADC_ERROR;
 8011c52:	4b2c      	ldr	r3, [pc, #176]	; (8011d04 <operateadc+0xd8>)
 8011c54:	2203      	movs	r2, #3
 8011c56:	751a      	strb	r2, [r3, #20]
 8011c58:	e03e      	b.n	8011cd8 <operateadc+0xac>
				HAL_ADC_Start_IT(&hadc1);
 8011c5a:	482c      	ldr	r0, [pc, #176]	; (8011d0c <operateadc+0xe0>)
 8011c5c:	f7ef fb10 	bl	8001280 <HAL_ADC_Start_IT>
				enmAdcSMCurrentState = enmADC_GETDATA;
 8011c60:	4b28      	ldr	r3, [pc, #160]	; (8011d04 <operateadc+0xd8>)
 8011c62:	2201      	movs	r2, #1
 8011c64:	751a      	strb	r2, [r3, #20]
				gu32ADCOperationTimer = ONE_MIN;
 8011c66:	4b2a      	ldr	r3, [pc, #168]	; (8011d10 <operateadc+0xe4>)
 8011c68:	f64e 2260 	movw	r2, #60000	; 0xea60
 8011c6c:	601a      	str	r2, [r3, #0]
 8011c6e:	e033      	b.n	8011cd8 <operateadc+0xac>
			if((g32AdcConversionStatusBatt == TRUE) && (gu32ADCOperationTimer != 0))
 8011c70:	4b24      	ldr	r3, [pc, #144]	; (8011d04 <operateadc+0xd8>)
 8011c72:	6a1b      	ldr	r3, [r3, #32]
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d013      	beq.n	8011ca0 <operateadc+0x74>
			else if((!g32AdcConversionStatus) | (!g32AdcConversionStatusBatt) | (gu32ADCOperationTimer == 0))
 8011c78:	4a22      	ldr	r2, [pc, #136]	; (8011d04 <operateadc+0xd8>)
 8011c7a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8011c7c:	6a13      	ldr	r3, [r2, #32]
 8011c7e:	fab3 f383 	clz	r3, r3
 8011c82:	095b      	lsrs	r3, r3, #5
 8011c84:	2900      	cmp	r1, #0
 8011c86:	bf08      	it	eq
 8011c88:	2301      	moveq	r3, #1
 8011c8a:	4a21      	ldr	r2, [pc, #132]	; (8011d10 <operateadc+0xe4>)
 8011c8c:	6812      	ldr	r2, [r2, #0]
 8011c8e:	fab2 f282 	clz	r2, r2
 8011c92:	0952      	lsrs	r2, r2, #5
 8011c94:	b9ab      	cbnz	r3, 8011cc2 <operateadc+0x96>
 8011c96:	b9a2      	cbnz	r2, 8011cc2 <operateadc+0x96>
			HAL_ADC_Stop_DMA(&hadc1);
 8011c98:	481c      	ldr	r0, [pc, #112]	; (8011d0c <operateadc+0xe0>)
 8011c9a:	f7ef fc67 	bl	800156c <HAL_ADC_Stop_DMA>
			break;
 8011c9e:	e01b      	b.n	8011cd8 <operateadc+0xac>
			if((g32AdcConversionStatusBatt == TRUE) && (gu32ADCOperationTimer != 0))
 8011ca0:	4b1b      	ldr	r3, [pc, #108]	; (8011d10 <operateadc+0xe4>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d0e7      	beq.n	8011c78 <operateadc+0x4c>
				gu32ADCOperationTimer = 0;
 8011ca8:	2200      	movs	r2, #0
 8011caa:	4b19      	ldr	r3, [pc, #100]	; (8011d10 <operateadc+0xe4>)
 8011cac:	601a      	str	r2, [r3, #0]
				gau32BatteryProcessedData[0] = gau32BatteryPeripheralData[0];
 8011cae:	4b15      	ldr	r3, [pc, #84]	; (8011d04 <operateadc+0xd8>)
 8011cb0:	6999      	ldr	r1, [r3, #24]
 8011cb2:	6019      	str	r1, [r3, #0]
				gau32BatteryProcessedData[1] = gau32BatteryPeripheralData[1];
 8011cb4:	69d9      	ldr	r1, [r3, #28]
 8011cb6:	6059      	str	r1, [r3, #4]
				enmAdcSMCurrentState = enmADC_PROCESSDATA;
 8011cb8:	2102      	movs	r1, #2
 8011cba:	7519      	strb	r1, [r3, #20]
				g32AdcConversionStatusBatt = FALSE;
 8011cbc:	621a      	str	r2, [r3, #32]
				g32AdcConversionStatus = FALSE;
 8011cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8011cc0:	e7ea      	b.n	8011c98 <operateadc+0x6c>
				enmAdcSMCurrentState = enmADC_IDLE;
 8011cc2:	4b10      	ldr	r3, [pc, #64]	; (8011d04 <operateadc+0xd8>)
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	751a      	strb	r2, [r3, #20]
 8011cc8:	e7e6      	b.n	8011c98 <operateadc+0x6c>
			gu32ADCPollTimer = TEN_SEC;
 8011cca:	4b0d      	ldr	r3, [pc, #52]	; (8011d00 <operateadc+0xd4>)
 8011ccc:	f242 7210 	movw	r2, #10000	; 0x2710
 8011cd0:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 8011cd2:	4b0c      	ldr	r3, [pc, #48]	; (8011d04 <operateadc+0xd8>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	751a      	strb	r2, [r3, #20]
}
 8011cd8:	bd08      	pop	{r3, pc}
			calculateInputVoltage();
 8011cda:	f7ff ff51 	bl	8011b80 <calculateInputVoltage>
			gu32ADCPollTimer = TEN_SEC;
 8011cde:	4b08      	ldr	r3, [pc, #32]	; (8011d00 <operateadc+0xd4>)
 8011ce0:	f242 7210 	movw	r2, #10000	; 0x2710
 8011ce4:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 8011ce6:	4b07      	ldr	r3, [pc, #28]	; (8011d04 <operateadc+0xd8>)
 8011ce8:	2200      	movs	r2, #0
 8011cea:	751a      	strb	r2, [r3, #20]
			break;
 8011cec:	e7f4      	b.n	8011cd8 <operateadc+0xac>
			gu32ADCPollTimer = TEN_SEC;
 8011cee:	4b04      	ldr	r3, [pc, #16]	; (8011d00 <operateadc+0xd4>)
 8011cf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8011cf4:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 8011cf6:	4b03      	ldr	r3, [pc, #12]	; (8011d04 <operateadc+0xd8>)
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	751a      	strb	r2, [r3, #20]
			break;
 8011cfc:	e7ec      	b.n	8011cd8 <operateadc+0xac>
 8011cfe:	bf00      	nop
 8011d00:	20004468 	.word	0x20004468
 8011d04:	20004288 	.word	0x20004288
 8011d08:	200042a0 	.word	0x200042a0
 8011d0c:	200073e4 	.word	0x200073e4
 8011d10:	20004464 	.word	0x20004464

08011d14 <HAL_ADC_ConvCpltCallback>:
 *
 * */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	/*Sequence conversion complete . Read Processed Value */
	if(hadc->Instance == ADC1)
 8011d14:	6803      	ldr	r3, [r0, #0]
 8011d16:	4a0b      	ldr	r2, [pc, #44]	; (8011d44 <HAL_ADC_ConvCpltCallback+0x30>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d003      	beq.n	8011d24 <HAL_ADC_ConvCpltCallback+0x10>
	{
		if(g32AdcConversionStatusBatt == FALSE)
			g32AdcConversionStatusBatt = TRUE;

	}
	else if(hadc->Instance == ADC3)
 8011d1c:	4a0a      	ldr	r2, [pc, #40]	; (8011d48 <HAL_ADC_ConvCpltCallback+0x34>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d008      	beq.n	8011d34 <HAL_ADC_ConvCpltCallback+0x20>
	}
	else
	{
		/* Unknown Interrupt */
	}
}
 8011d22:	4770      	bx	lr
		if(g32AdcConversionStatusBatt == FALSE)
 8011d24:	4b09      	ldr	r3, [pc, #36]	; (8011d4c <HAL_ADC_ConvCpltCallback+0x38>)
 8011d26:	6a1b      	ldr	r3, [r3, #32]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1fa      	bne.n	8011d22 <HAL_ADC_ConvCpltCallback+0xe>
			g32AdcConversionStatusBatt = TRUE;
 8011d2c:	4b07      	ldr	r3, [pc, #28]	; (8011d4c <HAL_ADC_ConvCpltCallback+0x38>)
 8011d2e:	2201      	movs	r2, #1
 8011d30:	621a      	str	r2, [r3, #32]
 8011d32:	4770      	bx	lr
		if(g32AdcConversionStatus == FALSE)
 8011d34:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <HAL_ADC_ConvCpltCallback+0x38>)
 8011d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d1f2      	bne.n	8011d22 <HAL_ADC_ConvCpltCallback+0xe>
			g32AdcConversionStatus = TRUE;
 8011d3c:	4b03      	ldr	r3, [pc, #12]	; (8011d4c <HAL_ADC_ConvCpltCallback+0x38>)
 8011d3e:	2201      	movs	r2, #1
 8011d40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011d42:	e7ee      	b.n	8011d22 <HAL_ADC_ConvCpltCallback+0xe>
 8011d44:	40012000 	.word	0x40012000
 8011d48:	40012200 	.word	0x40012200
 8011d4c:	20004288 	.word	0x20004288

08011d50 <HAL_I2C_ErrorCallback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011d50:	b508      	push	{r3, lr}
	assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 8011d52:	2101      	movs	r1, #1
 8011d54:	200e      	movs	r0, #14
 8011d56:	f7fa fdc5 	bl	800c8e4 <assertError>
}
 8011d5a:	bd08      	pop	{r3, pc}

08011d5c <initMemoryRead>:
* <hr>
*
*******************************************************************************/
void initMemoryRead(void)
{
	gau8MemoryOperationRead[0] = FALSE;
 8011d5c:	4b0b      	ldr	r3, [pc, #44]	; (8011d8c <initMemoryRead+0x30>)
 8011d5e:	2100      	movs	r1, #0
 8011d60:	7119      	strb	r1, [r3, #4]
	gau8MemoryOperationRead[1] = TRUE;
 8011d62:	2201      	movs	r2, #1
 8011d64:	715a      	strb	r2, [r3, #5]
	gau8MemoryOperationRead[2] = TRUE;
 8011d66:	719a      	strb	r2, [r3, #6]
	gau8MemoryOperationRead[3] = TRUE;
 8011d68:	71da      	strb	r2, [r3, #7]
	gau8MemoryOperationRead[4] = TRUE;
 8011d6a:	721a      	strb	r2, [r3, #8]
	gau8MemoryOperationRead[5] = TRUE;
 8011d6c:	725a      	strb	r2, [r3, #9]
	gau8MemoryOperationRead[6] = TRUE;
 8011d6e:	729a      	strb	r2, [r3, #10]
	gau8MemoryOperationRead[7] = TRUE;
 8011d70:	72da      	strb	r2, [r3, #11]
	gau8MemoryOperationRead[8] = TRUE;
 8011d72:	731a      	strb	r2, [r3, #12]
	gau8MemoryOperationRead[9] = TRUE;
 8011d74:	735a      	strb	r2, [r3, #13]
	gau8MemoryOperationRead[10] = TRUE;
 8011d76:	739a      	strb	r2, [r3, #14]
	gau8MemoryOperationRead[11] = TRUE;
 8011d78:	73da      	strb	r2, [r3, #15]
	gau8MemoryOperationRead[12] = TRUE;
 8011d7a:	741a      	strb	r2, [r3, #16]
	gau8MemoryOperationRead[13] = TRUE;
 8011d7c:	745a      	strb	r2, [r3, #17]
	gau8MemoryOperationRead[14] = TRUE;
 8011d7e:	749a      	strb	r2, [r3, #18]
	gau8MemoryOperationRead[15] = TRUE;
 8011d80:	74da      	strb	r2, [r3, #19]
	gau8MemoryOperationRead[16] = TRUE;
 8011d82:	751a      	strb	r2, [r3, #20]
	gau8MemoryOperationRead[17] = TRUE;
 8011d84:	755a      	strb	r2, [r3, #21]
	gu32MemoryOperation = EEPROM_OPR_READ;
 8011d86:	4b02      	ldr	r3, [pc, #8]	; (8011d90 <initMemoryRead+0x34>)
 8011d88:	7019      	strb	r1, [r3, #0]
}
 8011d8a:	4770      	bx	lr
 8011d8c:	200042c8 	.word	0x200042c8
 8011d90:	20002958 	.word	0x20002958

08011d94 <initSystemDefaultsfromMemory>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initSystemDefaultsfromMemory(void)
{
 8011d94:	b538      	push	{r3, r4, r5, lr}
	/* */
	if(strlen(strI2cEeprom.pu8NetworkAPN) != 0)
 8011d96:	4b26      	ldr	r3, [pc, #152]	; (8011e30 <initSystemDefaultsfromMemory+0x9c>)
 8011d98:	f893 3c16 	ldrb.w	r3, [r3, #3094]	; 0xc16
 8011d9c:	b9b3      	cbnz	r3, 8011dcc <initSystemDefaultsfromMemory+0x38>
	{
		memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
		memcpy(gau8GSM4G_apn,strI2cEeprom.pu8NetworkAPN, strlen(strI2cEeprom.pu8NetworkAPN));
	}
	if(strlen(strI2cEeprom.pu8RdServerURL) != 0)
 8011d9e:	4b24      	ldr	r3, [pc, #144]	; (8011e30 <initSystemDefaultsfromMemory+0x9c>)
 8011da0:	f893 3c2a 	ldrb.w	r3, [r3, #3114]	; 0xc2a
 8011da4:	bb13      	cbnz	r3, 8011dec <initSystemDefaultsfromMemory+0x58>
	{
		memset(gau8GSM_url,0x00,sizeof(char) * 100);
		memcpy( gau8GSM_url, strI2cEeprom.pu8RdServerURL, strlen(strI2cEeprom.pu8RdServerURL));
	}
	if(strlen(strI2cEeprom.pu8MobileNumber) != 0)
 8011da6:	4b22      	ldr	r3, [pc, #136]	; (8011e30 <initSystemDefaultsfromMemory+0x9c>)
 8011da8:	f893 3c07 	ldrb.w	r3, [r3, #3079]	; 0xc07
 8011dac:	bb73      	cbnz	r3, 8011e0c <initSystemDefaultsfromMemory+0x78>
	{
		memset(gau8GSM_smsto,0x00,sizeof(char) * 15);
		memcpy(gau8GSM_smsto, strI2cEeprom.pu8MobileNumber,strlen(strI2cEeprom.pu8MobileNumber));
	}
	gsmInstance.u32OFFPayloadUploadFreq = atoi(strI2cEeprom.pu8RdUploadOffFreq);
 8011dae:	4d21      	ldr	r5, [pc, #132]	; (8011e34 <initSystemDefaultsfromMemory+0xa0>)
 8011db0:	4628      	mov	r0, r5
 8011db2:	f000 fbb1 	bl	8012518 <atoi>
 8011db6:	4c20      	ldr	r4, [pc, #128]	; (8011e38 <initSystemDefaultsfromMemory+0xa4>)
 8011db8:	f8c4 0e28 	str.w	r0, [r4, #3624]	; 0xe28
	gsmInstance.u32ONPayloadUploadFreq = atoi(strI2cEeprom.pu8RdUploadOnFreq);
 8011dbc:	1f68      	subs	r0, r5, #5
 8011dbe:	f000 fbab 	bl	8012518 <atoi>
 8011dc2:	f8c4 0e24 	str.w	r0, [r4, #3620]	; 0xe24
	initGSMSIM868();
 8011dc6:	f7fa fef1 	bl	800cbac <initGSMSIM868>
}
 8011dca:	bd38      	pop	{r3, r4, r5, pc}
		memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
 8011dcc:	4c1b      	ldr	r4, [pc, #108]	; (8011e3c <initSystemDefaultsfromMemory+0xa8>)
 8011dce:	2264      	movs	r2, #100	; 0x64
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f000 fe6a 	bl	8012aac <memset>
		memcpy(gau8GSM4G_apn,strI2cEeprom.pu8NetworkAPN, strlen(strI2cEeprom.pu8NetworkAPN));
 8011dd8:	4d19      	ldr	r5, [pc, #100]	; (8011e40 <initSystemDefaultsfromMemory+0xac>)
 8011dda:	4628      	mov	r0, r5
 8011ddc:	f7ee fa12 	bl	8000204 <strlen>
 8011de0:	4602      	mov	r2, r0
 8011de2:	4629      	mov	r1, r5
 8011de4:	4620      	mov	r0, r4
 8011de6:	f000 fe39 	bl	8012a5c <memcpy>
 8011dea:	e7d8      	b.n	8011d9e <initSystemDefaultsfromMemory+0xa>
		memset(gau8GSM_url,0x00,sizeof(char) * 100);
 8011dec:	4c15      	ldr	r4, [pc, #84]	; (8011e44 <initSystemDefaultsfromMemory+0xb0>)
 8011dee:	2264      	movs	r2, #100	; 0x64
 8011df0:	2100      	movs	r1, #0
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 fe5a 	bl	8012aac <memset>
		memcpy( gau8GSM_url, strI2cEeprom.pu8RdServerURL, strlen(strI2cEeprom.pu8RdServerURL));
 8011df8:	4d13      	ldr	r5, [pc, #76]	; (8011e48 <initSystemDefaultsfromMemory+0xb4>)
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	f7ee fa02 	bl	8000204 <strlen>
 8011e00:	4602      	mov	r2, r0
 8011e02:	4629      	mov	r1, r5
 8011e04:	4620      	mov	r0, r4
 8011e06:	f000 fe29 	bl	8012a5c <memcpy>
 8011e0a:	e7cc      	b.n	8011da6 <initSystemDefaultsfromMemory+0x12>
		memset(gau8GSM_smsto,0x00,sizeof(char) * 15);
 8011e0c:	4c0f      	ldr	r4, [pc, #60]	; (8011e4c <initSystemDefaultsfromMemory+0xb8>)
 8011e0e:	2300      	movs	r3, #0
 8011e10:	6023      	str	r3, [r4, #0]
 8011e12:	6063      	str	r3, [r4, #4]
 8011e14:	60a3      	str	r3, [r4, #8]
 8011e16:	f8c4 300b 	str.w	r3, [r4, #11]
		memcpy(gau8GSM_smsto, strI2cEeprom.pu8MobileNumber,strlen(strI2cEeprom.pu8MobileNumber));
 8011e1a:	4d0d      	ldr	r5, [pc, #52]	; (8011e50 <initSystemDefaultsfromMemory+0xbc>)
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f7ee f9f1 	bl	8000204 <strlen>
 8011e22:	4602      	mov	r2, r0
 8011e24:	4629      	mov	r1, r5
 8011e26:	4620      	mov	r0, r4
 8011e28:	f000 fe18 	bl	8012a5c <memcpy>
 8011e2c:	e7bf      	b.n	8011dae <initSystemDefaultsfromMemory+0x1a>
 8011e2e:	bf00      	nop
 8011e30:	20007580 	.word	0x20007580
 8011e34:	20008245 	.word	0x20008245
 8011e38:	2000d5f0 	.word	0x2000d5f0
 8011e3c:	200004d8 	.word	0x200004d8
 8011e40:	20008196 	.word	0x20008196
 8011e44:	20000358 	.word	0x20000358
 8011e48:	200081aa 	.word	0x200081aa
 8011e4c:	2000024c 	.word	0x2000024c
 8011e50:	20008187 	.word	0x20008187

08011e54 <HAL_I2C_MemRxCpltCallback>:
{
 8011e54:	b508      	push	{r3, lr}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0)
 8011e56:	4b20      	ldr	r3, [pc, #128]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011e58:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d006      	beq.n	8011e6e <HAL_I2C_MemRxCpltCallback+0x1a>
		if(gu32EEPROMInitforSerialFlash == 0)
 8011e60:	4b1d      	ldr	r3, [pc, #116]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e64:	b913      	cbnz	r3, 8011e6c <HAL_I2C_MemRxCpltCallback+0x18>
			gu8SignatureReadFlag = TRUE;
 8011e66:	4b1c      	ldr	r3, [pc, #112]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011e68:	2201      	movs	r2, #1
 8011e6a:	701a      	strb	r2, [r3, #0]
}
 8011e6c:	bd08      	pop	{r3, pc}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0)
 8011e6e:	4b1b      	ldr	r3, [pc, #108]	; (8011edc <HAL_I2C_MemRxCpltCallback+0x88>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0f4      	beq.n	8011e60 <HAL_I2C_MemRxCpltCallback+0xc>
			&& (gu8OperateSystemStatus != FALSE))
 8011e76:	4b1a      	ldr	r3, [pc, #104]	; (8011ee0 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8011e78:	789b      	ldrb	r3, [r3, #2]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d0f0      	beq.n	8011e60 <HAL_I2C_MemRxCpltCallback+0xc>
		if(gau8MemoryOperationRead[u8RdMemLoopCounter] == TRUE)
 8011e7e:	4b16      	ldr	r3, [pc, #88]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011e80:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8011e84:	4413      	add	r3, r2
 8011e86:	791b      	ldrb	r3, [r3, #4]
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d006      	beq.n	8011e9a <HAL_I2C_MemRxCpltCallback+0x46>
		gu8MemoryOperationStatus = 0;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	4a12      	ldr	r2, [pc, #72]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011e90:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		gu32I2CMemoryOperationTimeout = 0;
 8011e94:	4a11      	ldr	r2, [pc, #68]	; (8011edc <HAL_I2C_MemRxCpltCallback+0x88>)
 8011e96:	6013      	str	r3, [r2, #0]
 8011e98:	e7e8      	b.n	8011e6c <HAL_I2C_MemRxCpltCallback+0x18>
			gau8MemoryOperationRead[u8RdMemLoopCounter] = FALSE;
 8011e9a:	4b0f      	ldr	r3, [pc, #60]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011e9c:	1899      	adds	r1, r3, r2
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	7108      	strb	r0, [r1, #4]
			u8RdMemLoopCounter ++;
 8011ea2:	3201      	adds	r2, #1
 8011ea4:	b2d2      	uxtb	r2, r2
 8011ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(u8RdMemLoopCounter >= I2CMEM_MAX_OPRATIONS)
 8011eaa:	2a0e      	cmp	r2, #14
 8011eac:	d9ee      	bls.n	8011e8c <HAL_I2C_MemRxCpltCallback+0x38>
				gu32MemoryOperation = EEPROM_OPR_IDLE;
 8011eae:	4a0c      	ldr	r2, [pc, #48]	; (8011ee0 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8011eb0:	2302      	movs	r3, #2
 8011eb2:	7013      	strb	r3, [r2, #0]
				u8RdMemLoopCounter = 0;
 8011eb4:	4b08      	ldr	r3, [pc, #32]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011eb6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
				gu8MemoryRdOperationFlag = TRUE;
 8011eba:	2101      	movs	r1, #1
 8011ebc:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
				gu8MemoryCycleComplete = TRUE;
 8011ec0:	7051      	strb	r1, [r2, #1]
				if(gu8RestoreSystemSettings == TRUE)
 8011ec2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011ec6:	428b      	cmp	r3, r1
 8011ec8:	d1e0      	bne.n	8011e8c <HAL_I2C_MemRxCpltCallback+0x38>
					initSystemDefaultsfromMemory();
 8011eca:	f7ff ff63 	bl	8011d94 <initSystemDefaultsfromMemory>
					gu8RestoreSystemSettings = FALSE;
 8011ece:	4b02      	ldr	r3, [pc, #8]	; (8011ed8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8011ed6:	e7d9      	b.n	8011e8c <HAL_I2C_MemRxCpltCallback+0x38>
 8011ed8:	200042c8 	.word	0x200042c8
 8011edc:	20004460 	.word	0x20004460
 8011ee0:	20002958 	.word	0x20002958

08011ee4 <systemReset>:
}


void systemReset(void)
{
	while(1);
 8011ee4:	e7fe      	b.n	8011ee4 <systemReset>
	...

08011ee8 <HAL_I2C_MemTxCpltCallback>:
{
 8011ee8:	b508      	push	{r3, lr}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0))
 8011eea:	4b25      	ldr	r3, [pc, #148]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011eec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d000      	beq.n	8011ef6 <HAL_I2C_MemTxCpltCallback+0xe>
}
 8011ef4:	bd08      	pop	{r3, pc}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0))
 8011ef6:	4b23      	ldr	r3, [pc, #140]	; (8011f84 <HAL_I2C_MemTxCpltCallback+0x9c>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d0fa      	beq.n	8011ef4 <HAL_I2C_MemTxCpltCallback+0xc>
		if(gau8MemoryOperationWrite[u8WrMemLoopCounter] == TRUE)
 8011efe:	4b20      	ldr	r3, [pc, #128]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f00:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8011f04:	4413      	add	r3, r2
 8011f06:	7d1b      	ldrb	r3, [r3, #20]
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d006      	beq.n	8011f1a <HAL_I2C_MemTxCpltCallback+0x32>
		gu8MemoryOperationStatus = 0;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	4a1c      	ldr	r2, [pc, #112]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f10:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		gu32I2CMemoryOperationTimeout = 0;
 8011f14:	4a1b      	ldr	r2, [pc, #108]	; (8011f84 <HAL_I2C_MemTxCpltCallback+0x9c>)
 8011f16:	6013      	str	r3, [r2, #0]
}
 8011f18:	e7ec      	b.n	8011ef4 <HAL_I2C_MemTxCpltCallback+0xc>
			if(gu8PageWriteCycle == TRUE)
 8011f1a:	4b19      	ldr	r3, [pc, #100]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d019      	beq.n	8011f58 <HAL_I2C_MemTxCpltCallback+0x70>
				gau8MemoryOperationWrite[u8WrMemLoopCounter] = FALSE;
 8011f24:	4b16      	ldr	r3, [pc, #88]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f26:	1899      	adds	r1, r3, r2
 8011f28:	2000      	movs	r0, #0
 8011f2a:	7508      	strb	r0, [r1, #20]
				u8WrMemLoopCounter ++;
 8011f2c:	3201      	adds	r2, #1
 8011f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			if(u8WrMemLoopCounter >= I2CMEM_MAX_OPRATIONS)
 8011f32:	4b13      	ldr	r3, [pc, #76]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f38:	2b0e      	cmp	r3, #14
 8011f3a:	d9e7      	bls.n	8011f0c <HAL_I2C_MemTxCpltCallback+0x24>
				gu32MemoryOperation = EEPROM_OPR_READ;
 8011f3c:	4b12      	ldr	r3, [pc, #72]	; (8011f88 <HAL_I2C_MemTxCpltCallback+0xa0>)
 8011f3e:	2200      	movs	r2, #0
 8011f40:	701a      	strb	r2, [r3, #0]
				if(u32DefautParamWriteStatus == TRUE)
 8011f42:	4b0f      	ldr	r3, [pc, #60]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d018      	beq.n	8011f7c <HAL_I2C_MemTxCpltCallback+0x94>
					initMemoryRead();
 8011f4a:	f7ff ff07 	bl	8011d5c <initMemoryRead>
				u8WrMemLoopCounter = 0;
 8011f4e:	4b0c      	ldr	r3, [pc, #48]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f50:	2200      	movs	r2, #0
 8011f52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8011f56:	e7d9      	b.n	8011f0c <HAL_I2C_MemTxCpltCallback+0x24>
				if(gu8PageWriteCounter > cycleRequired)
 8011f58:	4909      	ldr	r1, [pc, #36]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f5a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8011f5c:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8011f5e:	428b      	cmp	r3, r1
 8011f60:	d908      	bls.n	8011f74 <HAL_I2C_MemTxCpltCallback+0x8c>
					gau8MemoryOperationWrite[u8WrMemLoopCounter] = FALSE;
 8011f62:	4b07      	ldr	r3, [pc, #28]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f64:	1898      	adds	r0, r3, r2
 8011f66:	2100      	movs	r1, #0
 8011f68:	7501      	strb	r1, [r0, #20]
					u8WrMemLoopCounter ++;
 8011f6a:	3201      	adds	r2, #1
 8011f6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					gu8PageWriteCounter  = 0;
 8011f70:	6319      	str	r1, [r3, #48]	; 0x30
 8011f72:	e7de      	b.n	8011f32 <HAL_I2C_MemTxCpltCallback+0x4a>
					gu8PageWriteCounter ++;
 8011f74:	3301      	adds	r3, #1
 8011f76:	4a02      	ldr	r2, [pc, #8]	; (8011f80 <HAL_I2C_MemTxCpltCallback+0x98>)
 8011f78:	6313      	str	r3, [r2, #48]	; 0x30
 8011f7a:	e7da      	b.n	8011f32 <HAL_I2C_MemTxCpltCallback+0x4a>
					systemReset();						/* IDWT will reset the system */
 8011f7c:	f7ff ffb2 	bl	8011ee4 <systemReset>
 8011f80:	200042c8 	.word	0x200042c8
 8011f84:	20004460 	.word	0x20004460
 8011f88:	20002958 	.word	0x20002958

08011f8c <GetSector>:
  */
static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8011f8c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8011f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f94:	f0c0 809a 	bcc.w	80120cc <GetSector+0x140>
  {
    sector = FLASH_SECTOR_0;
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8011f98:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fa0:	f0c0 8096 	bcc.w	80120d0 <GetSector+0x144>
  {
    sector = FLASH_SECTOR_1;
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8011fa4:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8011fa8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8011fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fb0:	f0c0 8090 	bcc.w	80120d4 <GetSector+0x148>
  {
    sector = FLASH_SECTOR_2;
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8011fb4:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8011fb8:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8011fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fc0:	f0c0 808a 	bcc.w	80120d8 <GetSector+0x14c>
  {
    sector = FLASH_SECTOR_3;
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8011fc4:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8011fc8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fd0:	f0c0 8084 	bcc.w	80120dc <GetSector+0x150>
  {
    sector = FLASH_SECTOR_4;
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8011fd4:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8011fd8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8011fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011fe0:	d37e      	bcc.n	80120e0 <GetSector+0x154>
  {
    sector = FLASH_SECTOR_5;
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8011fe2:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8011fe6:	f503 037c 	add.w	r3, r3, #16515072	; 0xfc0000
 8011fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011fee:	d379      	bcc.n	80120e4 <GetSector+0x158>
  {
    sector = FLASH_SECTOR_6;
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8011ff0:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8011ff4:	f503 037a 	add.w	r3, r3, #16384000	; 0xfa0000
 8011ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ffc:	d374      	bcc.n	80120e8 <GetSector+0x15c>
  {
    sector = FLASH_SECTOR_7;
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8011ffe:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012002:	f503 0378 	add.w	r3, r3, #16252928	; 0xf80000
 8012006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801200a:	d36f      	bcc.n	80120ec <GetSector+0x160>
  {
    sector = FLASH_SECTOR_8;
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 801200c:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012010:	f503 0376 	add.w	r3, r3, #16121856	; 0xf60000
 8012014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012018:	d36a      	bcc.n	80120f0 <GetSector+0x164>
  {
    sector = FLASH_SECTOR_9;
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 801201a:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801201e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8012022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012026:	d365      	bcc.n	80120f4 <GetSector+0x168>
  {
    sector = FLASH_SECTOR_10;
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 8012028:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801202c:	f503 0372 	add.w	r3, r3, #15859712	; 0xf20000
 8012030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012034:	d360      	bcc.n	80120f8 <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_11;
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8012036:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 801203a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801203e:	d35d      	bcc.n	80120fc <GetSector+0x170>
  {
    sector = FLASH_SECTOR_12;
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 8012040:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012048:	d35a      	bcc.n	8012100 <GetSector+0x174>
  {
    sector = FLASH_SECTOR_13;
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 801204a:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 801204e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8012052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012056:	d355      	bcc.n	8012104 <GetSector+0x178>
  {
    sector = FLASH_SECTOR_14;
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8012058:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 801205c:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8012060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012064:	d350      	bcc.n	8012108 <GetSector+0x17c>
  {
    sector = FLASH_SECTOR_15;
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 8012066:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801206a:	f503 036f 	add.w	r3, r3, #15663104	; 0xef0000
 801206e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012072:	d34b      	bcc.n	801210c <GetSector+0x180>
  {
    sector = FLASH_SECTOR_16;
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 8012074:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012078:	f503 036e 	add.w	r3, r3, #15597568	; 0xee0000
 801207c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012080:	d346      	bcc.n	8012110 <GetSector+0x184>
  {
    sector = FLASH_SECTOR_17;
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 8012082:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012086:	f503 036c 	add.w	r3, r3, #15466496	; 0xec0000
 801208a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801208e:	d341      	bcc.n	8012114 <GetSector+0x188>
  {
    sector = FLASH_SECTOR_18;
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 8012090:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012094:	f503 036a 	add.w	r3, r3, #15335424	; 0xea0000
 8012098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801209c:	d33c      	bcc.n	8012118 <GetSector+0x18c>
  {
    sector = FLASH_SECTOR_19;
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 801209e:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80120a2:	f503 0368 	add.w	r3, r3, #15204352	; 0xe80000
 80120a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80120aa:	d337      	bcc.n	801211c <GetSector+0x190>
  {
    sector = FLASH_SECTOR_20;
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 80120ac:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80120b0:	f503 0366 	add.w	r3, r3, #15073280	; 0xe60000
 80120b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80120b8:	d332      	bcc.n	8012120 <GetSector+0x194>
  {
    sector = FLASH_SECTOR_21;
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 80120ba:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
 80120be:	f500 0064 	add.w	r0, r0, #14942208	; 0xe40000
 80120c2:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 80120c6:	d22d      	bcs.n	8012124 <GetSector+0x198>
  {
    sector = FLASH_SECTOR_22;
 80120c8:	2016      	movs	r0, #22
 80120ca:	4770      	bx	lr
    sector = FLASH_SECTOR_0;
 80120cc:	2000      	movs	r0, #0
 80120ce:	4770      	bx	lr
    sector = FLASH_SECTOR_1;
 80120d0:	2001      	movs	r0, #1
 80120d2:	4770      	bx	lr
    sector = FLASH_SECTOR_2;
 80120d4:	2002      	movs	r0, #2
 80120d6:	4770      	bx	lr
    sector = FLASH_SECTOR_3;
 80120d8:	2003      	movs	r0, #3
 80120da:	4770      	bx	lr
    sector = FLASH_SECTOR_4;
 80120dc:	2004      	movs	r0, #4
 80120de:	4770      	bx	lr
    sector = FLASH_SECTOR_5;
 80120e0:	2005      	movs	r0, #5
 80120e2:	4770      	bx	lr
    sector = FLASH_SECTOR_6;
 80120e4:	2006      	movs	r0, #6
 80120e6:	4770      	bx	lr
    sector = FLASH_SECTOR_7;
 80120e8:	2007      	movs	r0, #7
 80120ea:	4770      	bx	lr
    sector = FLASH_SECTOR_8;
 80120ec:	2008      	movs	r0, #8
 80120ee:	4770      	bx	lr
    sector = FLASH_SECTOR_9;
 80120f0:	2009      	movs	r0, #9
 80120f2:	4770      	bx	lr
    sector = FLASH_SECTOR_10;
 80120f4:	200a      	movs	r0, #10
 80120f6:	4770      	bx	lr
    sector = FLASH_SECTOR_11;
 80120f8:	200b      	movs	r0, #11
 80120fa:	4770      	bx	lr
    sector = FLASH_SECTOR_12;
 80120fc:	200c      	movs	r0, #12
 80120fe:	4770      	bx	lr
    sector = FLASH_SECTOR_13;
 8012100:	200d      	movs	r0, #13
 8012102:	4770      	bx	lr
    sector = FLASH_SECTOR_14;
 8012104:	200e      	movs	r0, #14
 8012106:	4770      	bx	lr
    sector = FLASH_SECTOR_15;
 8012108:	200f      	movs	r0, #15
 801210a:	4770      	bx	lr
    sector = FLASH_SECTOR_16;
 801210c:	2010      	movs	r0, #16
 801210e:	4770      	bx	lr
    sector = FLASH_SECTOR_17;
 8012110:	2011      	movs	r0, #17
 8012112:	4770      	bx	lr
    sector = FLASH_SECTOR_18;
 8012114:	2012      	movs	r0, #18
 8012116:	4770      	bx	lr
    sector = FLASH_SECTOR_19;
 8012118:	2013      	movs	r0, #19
 801211a:	4770      	bx	lr
    sector = FLASH_SECTOR_20;
 801211c:	2014      	movs	r0, #20
 801211e:	4770      	bx	lr
    sector = FLASH_SECTOR_21;
 8012120:	2015      	movs	r0, #21
 8012122:	4770      	bx	lr
  }
  else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23))*/
  {
    sector = FLASH_SECTOR_23;
 8012124:	2017      	movs	r0, #23
  }
  return sector;
}
 8012126:	4770      	bx	lr

08012128 <FLASH_If_Init>:
{
 8012128:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 801212a:	f7f0 fb49 	bl	80027c0 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 801212e:	4b02      	ldr	r3, [pc, #8]	; (8012138 <FLASH_If_Init+0x10>)
 8012130:	22f3      	movs	r2, #243	; 0xf3
 8012132:	60da      	str	r2, [r3, #12]
}
 8012134:	bd08      	pop	{r3, pc}
 8012136:	bf00      	nop
 8012138:	40023c00 	.word	0x40023c00

0801213c <FLASH_If_Erase>:
{
 801213c:	b510      	push	{r4, lr}
 801213e:	b086      	sub	sp, #24
 8012140:	4604      	mov	r4, r0
  FLASH_If_Init();
 8012142:	f7ff fff1 	bl	8012128 <FLASH_If_Init>
  UserStartSector = GetSector(StartSector);
 8012146:	4620      	mov	r0, r4
 8012148:	f7ff ff20 	bl	8011f8c <GetSector>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801214c:	2300      	movs	r3, #0
 801214e:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = UserStartSector;
 8012150:	9002      	str	r0, [sp, #8]
  pEraseInit.NbSectors = 1;
 8012152:	2301      	movs	r3, #1
 8012154:	9303      	str	r3, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8012156:	2302      	movs	r3, #2
 8012158:	9304      	str	r3, [sp, #16]
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 801215a:	a905      	add	r1, sp, #20
 801215c:	4668      	mov	r0, sp
 801215e:	f7f0 fc39 	bl	80029d4 <HAL_FLASHEx_Erase>
 8012162:	b908      	cbnz	r0, 8012168 <FLASH_If_Erase+0x2c>
}
 8012164:	b006      	add	sp, #24
 8012166:	bd10      	pop	{r4, pc}
     return (1);
 8012168:	2001      	movs	r0, #1
 801216a:	e7fb      	b.n	8012164 <FLASH_If_Erase+0x28>

0801216c <FLASH_If_Write>:
{
 801216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801216e:	4604      	mov	r4, r0
 8012170:	460e      	mov	r6, r1
 8012172:	4617      	mov	r7, r2
  for (i = 0; (i < (DataLength / 4)) && (FlashAddress <= (USER_FLASH_END_ADDRESS - 4)); i++)//USER_FLASH_END_ADDRESS
 8012174:	2500      	movs	r5, #0
 8012176:	e003      	b.n	8012180 <FLASH_If_Write+0x14>
      FlashAddress += 4;
 8012178:	3404      	adds	r4, #4
      u32LastMemoryWriteLocation = FlashAddress;
 801217a:	4b0f      	ldr	r3, [pc, #60]	; (80121b8 <FLASH_If_Write+0x4c>)
 801217c:	601c      	str	r4, [r3, #0]
  for (i = 0; (i < (DataLength / 4)) && (FlashAddress <= (USER_FLASH_END_ADDRESS - 4)); i++)//USER_FLASH_END_ADDRESS
 801217e:	3501      	adds	r5, #1
 8012180:	ebb5 0f97 	cmp.w	r5, r7, lsr #2
 8012184:	d211      	bcs.n	80121aa <FLASH_If_Write+0x3e>
 8012186:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <FLASH_If_Write+0x50>)
 8012188:	429c      	cmp	r4, r3
 801218a:	d80e      	bhi.n	80121aa <FLASH_If_Write+0x3e>
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)
 801218c:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8012190:	2300      	movs	r3, #0
 8012192:	4621      	mov	r1, r4
 8012194:	2002      	movs	r0, #2
 8012196:	f7f0 fb5b 	bl	8002850 <HAL_FLASH_Program>
 801219a:	b950      	cbnz	r0, 80121b2 <FLASH_If_Write+0x46>
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 801219c:	6821      	ldr	r1, [r4, #0]
 801219e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80121a2:	4299      	cmp	r1, r3
 80121a4:	d0e8      	beq.n	8012178 <FLASH_If_Write+0xc>
        return(FLASHIF_WRITINGCTRL_ERROR);
 80121a6:	2002      	movs	r0, #2
 80121a8:	e002      	b.n	80121b0 <FLASH_If_Write+0x44>
  u32LastMemoryWriteLocation = FlashAddress;
 80121aa:	4b03      	ldr	r3, [pc, #12]	; (80121b8 <FLASH_If_Write+0x4c>)
 80121ac:	601c      	str	r4, [r3, #0]
  return (FLASHIF_OK);
 80121ae:	2000      	movs	r0, #0
}
 80121b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (FLASHIF_WRITING_ERROR);
 80121b2:	2003      	movs	r0, #3
 80121b4:	e7fc      	b.n	80121b0 <FLASH_If_Write+0x44>
 80121b6:	bf00      	nop
 80121b8:	20004328 	.word	0x20004328
 80121bc:	081dfffc 	.word	0x081dfffc

080121c0 <WriteDatatoFlash>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      26-07-2021			Initial Definition
******************************************************************************/
uint32_t WriteDatatoFlash(uint32_t Sector,uint8_t *data,uint32_t configLen,uint32_t writeCycle)
{
 80121c0:	b508      	push	{r3, lr}
	if(FLASH_If_Write(Sector,(uint32_t*)data,configLen) == FLASHIF_OK)
 80121c2:	f7ff ffd3 	bl	801216c <FLASH_If_Write>
 80121c6:	b100      	cbz	r0, 80121ca <WriteDatatoFlash+0xa>
		return SUCCESS;
	else
		return ERROR;
 80121c8:	2001      	movs	r0, #1
}
 80121ca:	bd08      	pop	{r3, pc}

080121cc <HAL_RTCEx_WakeUpTimerEventCallback>:
*******************************************************************************/

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	//HAL_GPIO_TogglePin(LED_1_GPIO_Port,LED_1_Pin);
}
 80121cc:	4770      	bx	lr

080121ce <HAL_RTC_AlarmAEventCallback>:
*
*******************************************************************************/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{

}
 80121ce:	4770      	bx	lr

080121d0 <getRTCCalender>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void getRTCCalender(void)
{
 80121d0:	b570      	push	{r4, r5, r6, lr}
 80121d2:	b082      	sub	sp, #8

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80121d4:	4d11      	ldr	r5, [pc, #68]	; (801221c <getRTCCalender+0x4c>)
 80121d6:	4e12      	ldr	r6, [pc, #72]	; (8012220 <getRTCCalender+0x50>)
 80121d8:	2200      	movs	r2, #0
 80121da:	4629      	mov	r1, r5
 80121dc:	4630      	mov	r0, r6
 80121de:	f7f2 fe5c 	bl	8004e9a <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80121e2:	4c10      	ldr	r4, [pc, #64]	; (8012224 <getRTCCalender+0x54>)
 80121e4:	2200      	movs	r2, #0
 80121e6:	4621      	mov	r1, r4
 80121e8:	4630      	mov	r0, r6
 80121ea:	f7f2 fe7c 	bl	8004ee6 <HAL_RTC_GetDate>

  /* Display time Format : hh:mm:ss */
  sprintf((char*)aShowTimeStamp,"%.2d:%.2d:%.2d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 80121ee:	78ab      	ldrb	r3, [r5, #2]
 80121f0:	4e0d      	ldr	r6, [pc, #52]	; (8012228 <getRTCCalender+0x58>)
 80121f2:	9300      	str	r3, [sp, #0]
 80121f4:	786b      	ldrb	r3, [r5, #1]
 80121f6:	782a      	ldrb	r2, [r5, #0]
 80121f8:	490c      	ldr	r1, [pc, #48]	; (801222c <getRTCCalender+0x5c>)
 80121fa:	4630      	mov	r0, r6
 80121fc:	f000 fcaa 	bl	8012b54 <sprintf>
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aShowDateStamp,"%.2d/%.2d/%.2d",sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8012200:	78e3      	ldrb	r3, [r4, #3]
 8012202:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	7863      	ldrb	r3, [r4, #1]
 801220a:	78a2      	ldrb	r2, [r4, #2]
 801220c:	4908      	ldr	r1, [pc, #32]	; (8012230 <getRTCCalender+0x60>)
 801220e:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8012212:	f000 fc9f 	bl	8012b54 <sprintf>
}
 8012216:	b002      	add	sp, #8
 8012218:	bd70      	pop	{r4, r5, r6, pc}
 801221a:	bf00      	nop
 801221c:	20012808 	.word	0x20012808
 8012220:	200105ac 	.word	0x200105ac
 8012224:	200127ec 	.word	0x200127ec
 8012228:	2000433c 	.word	0x2000433c
 801222c:	0801c8c0 	.word	0x0801c8c0
 8012230:	0801c8d0 	.word	0x0801c8d0

08012234 <DecimalToBCD>:
* <hr>
*
*******************************************************************************/
uint32_t DecimalToBCD (uint32_t Decimal)
{
   return (((Decimal/10) << 4) | (Decimal % 10));
 8012234:	4b05      	ldr	r3, [pc, #20]	; (801224c <DecimalToBCD+0x18>)
 8012236:	fba3 2300 	umull	r2, r3, r3, r0
 801223a:	08db      	lsrs	r3, r3, #3
 801223c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012240:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
}
 8012244:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	cccccccd 	.word	0xcccccccd

08012250 <BCDToDecimal>:
* <hr>
*
*******************************************************************************/
uint32_t BCDToDecimal(uint32_t BCD)
{
   return (((BCD >> 4) * 10) + (BCD & 0xF));
 8012250:	0903      	lsrs	r3, r0, #4
 8012252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012256:	f000 000f 	and.w	r0, r0, #15
}
 801225a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801225e:	4770      	bx	lr

08012260 <getrtcStamp>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void getrtcStamp(void)
{
 8012260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_RTC_GetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 8012262:	4e22      	ldr	r6, [pc, #136]	; (80122ec <getrtcStamp+0x8c>)
 8012264:	4c22      	ldr	r4, [pc, #136]	; (80122f0 <getrtcStamp+0x90>)
 8012266:	2201      	movs	r2, #1
 8012268:	4631      	mov	r1, r6
 801226a:	4620      	mov	r0, r4
 801226c:	f7f2 fe15 	bl	8004e9a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 8012270:	4f20      	ldr	r7, [pc, #128]	; (80122f4 <getrtcStamp+0x94>)
 8012272:	2201      	movs	r2, #1
 8012274:	4639      	mov	r1, r7
 8012276:	4620      	mov	r0, r4
 8012278:	f7f2 fe35 	bl	8004ee6 <HAL_RTC_GetDate>
	itoa(BCDToDecimal(STime1.Hours),gau8Hour,PAYLOAD_DATA_STRING_RADIX);
	itoa(BCDToDecimal(STime1.Minutes),gau8Minutes,PAYLOAD_DATA_STRING_RADIX);
	itoa(BCDToDecimal(STime1.Seconds),gau8Seconds,PAYLOAD_DATA_STRING_RADIX);*/

	/* Time stamp length is fixed */
	sprintf(gau8Year, "%02i", (int)BCDToDecimal(SDate1.Year));
 801227c:	78f8      	ldrb	r0, [r7, #3]
 801227e:	f7ff ffe7 	bl	8012250 <BCDToDecimal>
 8012282:	4602      	mov	r2, r0
 8012284:	4d1c      	ldr	r5, [pc, #112]	; (80122f8 <getrtcStamp+0x98>)
 8012286:	4c1d      	ldr	r4, [pc, #116]	; (80122fc <getrtcStamp+0x9c>)
 8012288:	4629      	mov	r1, r5
 801228a:	4620      	mov	r0, r4
 801228c:	f000 fc62 	bl	8012b54 <sprintf>
	sprintf(gau8Month, "%02i", (int)BCDToDecimal(SDate1.Month));
 8012290:	7878      	ldrb	r0, [r7, #1]
 8012292:	f7ff ffdd 	bl	8012250 <BCDToDecimal>
 8012296:	4602      	mov	r2, r0
 8012298:	4629      	mov	r1, r5
 801229a:	f104 0008 	add.w	r0, r4, #8
 801229e:	f000 fc59 	bl	8012b54 <sprintf>
	sprintf(gau8Date, "%02i", (int)BCDToDecimal(SDate1.Date));
 80122a2:	78b8      	ldrb	r0, [r7, #2]
 80122a4:	f7ff ffd4 	bl	8012250 <BCDToDecimal>
 80122a8:	4602      	mov	r2, r0
 80122aa:	4629      	mov	r1, r5
 80122ac:	f104 0010 	add.w	r0, r4, #16
 80122b0:	f000 fc50 	bl	8012b54 <sprintf>
	sprintf(gau8Hour, "%02i", (int)BCDToDecimal(STime1.Hours));
 80122b4:	7830      	ldrb	r0, [r6, #0]
 80122b6:	f7ff ffcb 	bl	8012250 <BCDToDecimal>
 80122ba:	4602      	mov	r2, r0
 80122bc:	4629      	mov	r1, r5
 80122be:	f104 0018 	add.w	r0, r4, #24
 80122c2:	f000 fc47 	bl	8012b54 <sprintf>
	sprintf(gau8Minutes, "%02i", (int)BCDToDecimal(STime1.Minutes));
 80122c6:	7870      	ldrb	r0, [r6, #1]
 80122c8:	f7ff ffc2 	bl	8012250 <BCDToDecimal>
 80122cc:	4602      	mov	r2, r0
 80122ce:	4629      	mov	r1, r5
 80122d0:	f104 0020 	add.w	r0, r4, #32
 80122d4:	f000 fc3e 	bl	8012b54 <sprintf>
	sprintf(gau8Seconds, "%02i", (int)BCDToDecimal(STime1.Seconds));
 80122d8:	78b0      	ldrb	r0, [r6, #2]
 80122da:	f7ff ffb9 	bl	8012250 <BCDToDecimal>
 80122de:	4602      	mov	r2, r0
 80122e0:	4629      	mov	r1, r5
 80122e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80122e6:	f000 fc35 	bl	8012b54 <sprintf>
}
 80122ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ec:	20010598 	.word	0x20010598
 80122f0:	200105ac 	.word	0x200105ac
 80122f4:	20010594 	.word	0x20010594
 80122f8:	0801c8e0 	.word	0x0801c8e0
 80122fc:	20002970 	.word	0x20002970

08012300 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t gu32UploadFailTimer = TEN_MIN;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* Timer 7 . 1 ms Interrupt */
	if(htim->Instance == TIM7)
 8012300:	6802      	ldr	r2, [r0, #0]
 8012302:	4b64      	ldr	r3, [pc, #400]	; (8012494 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8012304:	429a      	cmp	r2, r3
 8012306:	d000      	beq.n	801230a <HAL_TIM_PeriodElapsedCallback+0xa>
		if(gu32UploadFailTimer)gu32UploadFailTimer--;

		/* Buffer */
		if(FlashStr.u32SerialFlashDelay)FlashStr.u32SerialFlashDelay--;
	}
}
 8012308:	4770      	bx	lr
		if(gu32MBTCPTimer)gu32MBTCPTimer--;
 801230a:	4b63      	ldr	r3, [pc, #396]	; (8012498 <HAL_TIM_PeriodElapsedCallback+0x198>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	b113      	cbz	r3, 8012316 <HAL_TIM_PeriodElapsedCallback+0x16>
 8012310:	3b01      	subs	r3, #1
 8012312:	4a61      	ldr	r2, [pc, #388]	; (8012498 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8012314:	6013      	str	r3, [r2, #0]
		if(gu32MBPOLLTimer)gu32MBPOLLTimer--;
 8012316:	4b61      	ldr	r3, [pc, #388]	; (801249c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	b113      	cbz	r3, 8012322 <HAL_TIM_PeriodElapsedCallback+0x22>
 801231c:	3b01      	subs	r3, #1
 801231e:	4a5f      	ldr	r2, [pc, #380]	; (801249c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8012320:	6013      	str	r3, [r2, #0]
		if(master.u32PollDelay)master.u32PollDelay--;
 8012322:	4b5f      	ldr	r3, [pc, #380]	; (80124a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8012324:	f8d3 3e4c 	ldr.w	r3, [r3, #3660]	; 0xe4c
 8012328:	b11b      	cbz	r3, 8012332 <HAL_TIM_PeriodElapsedCallback+0x32>
 801232a:	3b01      	subs	r3, #1
 801232c:	4a5c      	ldr	r2, [pc, #368]	; (80124a0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 801232e:	f8c2 3e4c 	str.w	r3, [r2, #3660]	; 0xe4c
		if(gu32MBCharacterDelay)gu32MBCharacterDelay--;
 8012332:	4b5c      	ldr	r3, [pc, #368]	; (80124a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	b113      	cbz	r3, 801233e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8012338:	3b01      	subs	r3, #1
 801233a:	4a5a      	ldr	r2, [pc, #360]	; (80124a4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 801233c:	6013      	str	r3, [r2, #0]
		if(gu32ModbusFrameEndTimer)gu32ModbusFrameEndTimer--;
 801233e:	4b5a      	ldr	r3, [pc, #360]	; (80124a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	b113      	cbz	r3, 801234a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8012344:	3b01      	subs	r3, #1
 8012346:	4a58      	ldr	r2, [pc, #352]	; (80124a8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8012348:	6013      	str	r3, [r2, #0]
		if(gu32ModbusResponseTimeout)gu32ModbusResponseTimeout--;
 801234a:	4b58      	ldr	r3, [pc, #352]	; (80124ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	b113      	cbz	r3, 8012356 <HAL_TIM_PeriodElapsedCallback+0x56>
 8012350:	3b01      	subs	r3, #1
 8012352:	4a56      	ldr	r2, [pc, #344]	; (80124ac <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8012354:	6013      	str	r3, [r2, #0]
		if(gu32LinkDisconnectTimer)gu32LinkDisconnectTimer--;
 8012356:	4b56      	ldr	r3, [pc, #344]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	b11b      	cbz	r3, 8012364 <HAL_TIM_PeriodElapsedCallback+0x64>
 801235c:	4a54      	ldr	r2, [pc, #336]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 801235e:	6813      	ldr	r3, [r2, #0]
 8012360:	3b01      	subs	r3, #1
 8012362:	6013      	str	r3, [r2, #0]
		if(gu32GSMCharacterTimeout)gu32GSMCharacterTimeout--;
 8012364:	4b53      	ldr	r3, [pc, #332]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	b113      	cbz	r3, 8012370 <HAL_TIM_PeriodElapsedCallback+0x70>
 801236a:	3b01      	subs	r3, #1
 801236c:	4a51      	ldr	r2, [pc, #324]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801236e:	6013      	str	r3, [r2, #0]
		if(gsmInstance.u32GSMTimer)gsmInstance.u32GSMTimer--;
 8012370:	4b51      	ldr	r3, [pc, #324]	; (80124b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8012372:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 8012376:	b12b      	cbz	r3, 8012384 <HAL_TIM_PeriodElapsedCallback+0x84>
 8012378:	4a4f      	ldr	r2, [pc, #316]	; (80124b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 801237a:	f8d2 3e20 	ldr.w	r3, [r2, #3616]	; 0xe20
 801237e:	3b01      	subs	r3, #1
 8012380:	f8c2 3e20 	str.w	r3, [r2, #3616]	; 0xe20
		if(gsmInstance.u32GSMResponseTimer)gsmInstance.u32GSMResponseTimer--;
 8012384:	4b4c      	ldr	r3, [pc, #304]	; (80124b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8012386:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 801238a:	b12b      	cbz	r3, 8012398 <HAL_TIM_PeriodElapsedCallback+0x98>
 801238c:	4a4a      	ldr	r2, [pc, #296]	; (80124b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 801238e:	f8d2 3e34 	ldr.w	r3, [r2, #3636]	; 0xe34
 8012392:	3b01      	subs	r3, #1
 8012394:	f8c2 3e34 	str.w	r3, [r2, #3636]	; 0xe34
		if(gsmInstance.u32GSMHeartbeatTimer)gsmInstance.u32GSMHeartbeatTimer--;
 8012398:	4b47      	ldr	r3, [pc, #284]	; (80124b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 801239a:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	; 0xe2c
 801239e:	b11b      	cbz	r3, 80123a8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 80123a0:	3b01      	subs	r3, #1
 80123a2:	4a45      	ldr	r2, [pc, #276]	; (80124b8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80123a4:	f8c2 3e2c 	str.w	r3, [r2, #3628]	; 0xe2c
		if(gu32GSMHangTimer)gu32GSMHangTimer--;
 80123a8:	4b42      	ldr	r3, [pc, #264]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	b11b      	cbz	r3, 80123b6 <HAL_TIM_PeriodElapsedCallback+0xb6>
 80123ae:	4a41      	ldr	r2, [pc, #260]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123b0:	6853      	ldr	r3, [r2, #4]
 80123b2:	3b01      	subs	r3, #1
 80123b4:	6053      	str	r3, [r2, #4]
		if(gu32GPSCharacterTimeout)gu32GPSCharacterTimeout--;
 80123b6:	4b3f      	ldr	r3, [pc, #252]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	b113      	cbz	r3, 80123c2 <HAL_TIM_PeriodElapsedCallback+0xc2>
 80123bc:	3b01      	subs	r3, #1
 80123be:	4a3d      	ldr	r2, [pc, #244]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123c0:	6093      	str	r3, [r2, #8]
		if(gu32PayloadQueueEnqueue)gu32PayloadQueueEnqueue--;
 80123c2:	4b3c      	ldr	r3, [pc, #240]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	b11b      	cbz	r3, 80123d0 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80123c8:	4a3a      	ldr	r2, [pc, #232]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123ca:	68d3      	ldr	r3, [r2, #12]
 80123cc:	3b01      	subs	r3, #1
 80123ce:	60d3      	str	r3, [r2, #12]
		if(gu32TempPayloadQueueEnqueue)gu32TempPayloadQueueEnqueue--;
 80123d0:	4b38      	ldr	r3, [pc, #224]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123d2:	691b      	ldr	r3, [r3, #16]
 80123d4:	b11b      	cbz	r3, 80123de <HAL_TIM_PeriodElapsedCallback+0xde>
 80123d6:	4a37      	ldr	r2, [pc, #220]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123d8:	6913      	ldr	r3, [r2, #16]
 80123da:	3b01      	subs	r3, #1
 80123dc:	6113      	str	r3, [r2, #16]
		if(gu32FotaFileReadTimer)gu32FotaFileReadTimer--;
 80123de:	4b35      	ldr	r3, [pc, #212]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123e0:	695b      	ldr	r3, [r3, #20]
 80123e2:	b11b      	cbz	r3, 80123ec <HAL_TIM_PeriodElapsedCallback+0xec>
 80123e4:	4a33      	ldr	r2, [pc, #204]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123e6:	6953      	ldr	r3, [r2, #20]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	6153      	str	r3, [r2, #20]
		if(gu32GSMRestartTimer)gu32GSMRestartTimer--; /* Added on 6/2/22 . Was Missing :P */
 80123ec:	4b30      	ldr	r3, [pc, #192]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	b11b      	cbz	r3, 80123fa <HAL_TIM_PeriodElapsedCallback+0xfa>
 80123f2:	4a2f      	ldr	r2, [pc, #188]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80123f4:	6853      	ldr	r3, [r2, #4]
 80123f6:	3b01      	subs	r3, #1
 80123f8:	6053      	str	r3, [r2, #4]
		if(gu32RTCUpdateTimer)gu32RTCUpdateTimer--;
 80123fa:	4b2e      	ldr	r3, [pc, #184]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80123fc:	699b      	ldr	r3, [r3, #24]
 80123fe:	b113      	cbz	r3, 8012406 <HAL_TIM_PeriodElapsedCallback+0x106>
 8012400:	3b01      	subs	r3, #1
 8012402:	4a2c      	ldr	r2, [pc, #176]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012404:	6193      	str	r3, [r2, #24]
		if(gu32I2CMemoryOperationTimeout)gu32I2CMemoryOperationTimeout--;
 8012406:	4b2b      	ldr	r3, [pc, #172]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012408:	69db      	ldr	r3, [r3, #28]
 801240a:	b113      	cbz	r3, 8012412 <HAL_TIM_PeriodElapsedCallback+0x112>
 801240c:	3b01      	subs	r3, #1
 801240e:	4a29      	ldr	r2, [pc, #164]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012410:	61d3      	str	r3, [r2, #28]
		if(gu32ADCOperationTimer)gu32ADCOperationTimer--;
 8012412:	4b28      	ldr	r3, [pc, #160]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012414:	6a1b      	ldr	r3, [r3, #32]
 8012416:	b113      	cbz	r3, 801241e <HAL_TIM_PeriodElapsedCallback+0x11e>
 8012418:	3b01      	subs	r3, #1
 801241a:	4a26      	ldr	r2, [pc, #152]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801241c:	6213      	str	r3, [r2, #32]
		if(gu32ADCPollTimer)gu32ADCPollTimer--;
 801241e:	4b25      	ldr	r3, [pc, #148]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012422:	b113      	cbz	r3, 801242a <HAL_TIM_PeriodElapsedCallback+0x12a>
 8012424:	3b01      	subs	r3, #1
 8012426:	4a23      	ldr	r2, [pc, #140]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012428:	6253      	str	r3, [r2, #36]	; 0x24
		if(gu32LedTimer)gu32LedTimer--;
 801242a:	4b22      	ldr	r3, [pc, #136]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801242e:	b11b      	cbz	r3, 8012438 <HAL_TIM_PeriodElapsedCallback+0x138>
 8012430:	4a20      	ldr	r2, [pc, #128]	; (80124b4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012432:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012434:	3b01      	subs	r3, #1
 8012436:	6293      	str	r3, [r2, #40]	; 0x28
		if(gu32GSMConfigCheckTimer)gu32GSMConfigCheckTimer--;
 8012438:	4b1d      	ldr	r3, [pc, #116]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	b11b      	cbz	r3, 8012446 <HAL_TIM_PeriodElapsedCallback+0x146>
 801243e:	4a1c      	ldr	r2, [pc, #112]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012440:	6893      	ldr	r3, [r2, #8]
 8012442:	3b01      	subs	r3, #1
 8012444:	6093      	str	r3, [r2, #8]
		if(gu32LinkDownTimer)gu32LinkDownTimer--;
 8012446:	4b1a      	ldr	r3, [pc, #104]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	b11b      	cbz	r3, 8012454 <HAL_TIM_PeriodElapsedCallback+0x154>
 801244c:	4a18      	ldr	r2, [pc, #96]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 801244e:	68d3      	ldr	r3, [r2, #12]
 8012450:	3b01      	subs	r3, #1
 8012452:	60d3      	str	r3, [r2, #12]
		if(gu32SystemResetTimer)gu32SystemResetTimer--;
 8012454:	4b16      	ldr	r3, [pc, #88]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012456:	691b      	ldr	r3, [r3, #16]
 8012458:	b11b      	cbz	r3, 8012462 <HAL_TIM_PeriodElapsedCallback+0x162>
 801245a:	4a15      	ldr	r2, [pc, #84]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 801245c:	6913      	ldr	r3, [r2, #16]
 801245e:	3b01      	subs	r3, #1
 8012460:	6113      	str	r3, [r2, #16]
		if(gu32ExtWatchDogResetTimer)gu32ExtWatchDogResetTimer--;
 8012462:	4b13      	ldr	r3, [pc, #76]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012464:	695b      	ldr	r3, [r3, #20]
 8012466:	b11b      	cbz	r3, 8012470 <HAL_TIM_PeriodElapsedCallback+0x170>
 8012468:	4a11      	ldr	r2, [pc, #68]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 801246a:	6953      	ldr	r3, [r2, #20]
 801246c:	3b01      	subs	r3, #1
 801246e:	6153      	str	r3, [r2, #20]
		if(gu32UploadFailTimer)gu32UploadFailTimer--;
 8012470:	4b0f      	ldr	r3, [pc, #60]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012472:	699b      	ldr	r3, [r3, #24]
 8012474:	b11b      	cbz	r3, 801247e <HAL_TIM_PeriodElapsedCallback+0x17e>
 8012476:	4a0e      	ldr	r2, [pc, #56]	; (80124b0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012478:	6993      	ldr	r3, [r2, #24]
 801247a:	3b01      	subs	r3, #1
 801247c:	6193      	str	r3, [r2, #24]
		if(FlashStr.u32SerialFlashDelay)FlashStr.u32SerialFlashDelay--;
 801247e:	4b0f      	ldr	r3, [pc, #60]	; (80124bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	2b00      	cmp	r3, #0
 8012484:	f43f af40 	beq.w	8012308 <HAL_TIM_PeriodElapsedCallback+0x8>
 8012488:	4a0c      	ldr	r2, [pc, #48]	; (80124bc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 801248a:	6913      	ldr	r3, [r2, #16]
 801248c:	3b01      	subs	r3, #1
 801248e:	6113      	str	r3, [r2, #16]
}
 8012490:	e73a      	b.n	8012308 <HAL_TIM_PeriodElapsedCallback+0x8>
 8012492:	bf00      	nop
 8012494:	40001400 	.word	0x40001400
 8012498:	20003b20 	.word	0x20003b20
 801249c:	20003ff0 	.word	0x20003ff0
 80124a0:	2000e840 	.word	0x2000e840
 80124a4:	20003afc 	.word	0x20003afc
 80124a8:	2000362c 	.word	0x2000362c
 80124ac:	20003630 	.word	0x20003630
 80124b0:	200029a0 	.word	0x200029a0
 80124b4:	20004444 	.word	0x20004444
 80124b8:	2000d5f0 	.word	0x2000d5f0
 80124bc:	200105f4 	.word	0x200105f4

080124c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80124c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80124f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80124c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80124c6:	e003      	b.n	80124d0 <LoopCopyDataInit>

080124c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80124c8:	4b0c      	ldr	r3, [pc, #48]	; (80124fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80124ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80124cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80124ce:	3104      	adds	r1, #4

080124d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80124d0:	480b      	ldr	r0, [pc, #44]	; (8012500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80124d2:	4b0c      	ldr	r3, [pc, #48]	; (8012504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80124d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80124d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80124d8:	d3f6      	bcc.n	80124c8 <CopyDataInit>
  ldr  r2, =_sbss
 80124da:	4a0b      	ldr	r2, [pc, #44]	; (8012508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80124dc:	e002      	b.n	80124e4 <LoopFillZerobss>

080124de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80124de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80124e0:	f842 3b04 	str.w	r3, [r2], #4

080124e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80124e4:	4b09      	ldr	r3, [pc, #36]	; (801250c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80124e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80124e8:	d3f9      	bcc.n	80124de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80124ea:	f7ff f9c7 	bl	801187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80124ee:	f000 f817 	bl	8012520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80124f2:	f7fb feb3 	bl	800e25c <main>
  bx  lr    
 80124f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80124f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80124fc:	0801cda4 	.word	0x0801cda4
  ldr  r0, =_sdata
 8012500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012504:	2000336c 	.word	0x2000336c
  ldr  r2, =_sbss
 8012508:	2000336c 	.word	0x2000336c
  ldr  r3, = _ebss
 801250c:	2001282c 	.word	0x2001282c

08012510 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012510:	e7fe      	b.n	8012510 <CAN1_RX0_IRQHandler>

08012512 <atof>:
 8012512:	2100      	movs	r1, #0
 8012514:	f001 b9c6 	b.w	80138a4 <strtod>

08012518 <atoi>:
 8012518:	220a      	movs	r2, #10
 801251a:	2100      	movs	r1, #0
 801251c:	f001 ba82 	b.w	8013a24 <strtol>

08012520 <__libc_init_array>:
 8012520:	b570      	push	{r4, r5, r6, lr}
 8012522:	4d0d      	ldr	r5, [pc, #52]	; (8012558 <__libc_init_array+0x38>)
 8012524:	4c0d      	ldr	r4, [pc, #52]	; (801255c <__libc_init_array+0x3c>)
 8012526:	1b64      	subs	r4, r4, r5
 8012528:	10a4      	asrs	r4, r4, #2
 801252a:	2600      	movs	r6, #0
 801252c:	42a6      	cmp	r6, r4
 801252e:	d109      	bne.n	8012544 <__libc_init_array+0x24>
 8012530:	4d0b      	ldr	r5, [pc, #44]	; (8012560 <__libc_init_array+0x40>)
 8012532:	4c0c      	ldr	r4, [pc, #48]	; (8012564 <__libc_init_array+0x44>)
 8012534:	f007 fc48 	bl	8019dc8 <_init>
 8012538:	1b64      	subs	r4, r4, r5
 801253a:	10a4      	asrs	r4, r4, #2
 801253c:	2600      	movs	r6, #0
 801253e:	42a6      	cmp	r6, r4
 8012540:	d105      	bne.n	801254e <__libc_init_array+0x2e>
 8012542:	bd70      	pop	{r4, r5, r6, pc}
 8012544:	f855 3b04 	ldr.w	r3, [r5], #4
 8012548:	4798      	blx	r3
 801254a:	3601      	adds	r6, #1
 801254c:	e7ee      	b.n	801252c <__libc_init_array+0xc>
 801254e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012552:	4798      	blx	r3
 8012554:	3601      	adds	r6, #1
 8012556:	e7f2      	b.n	801253e <__libc_init_array+0x1e>
 8012558:	0801cd98 	.word	0x0801cd98
 801255c:	0801cd98 	.word	0x0801cd98
 8012560:	0801cd98 	.word	0x0801cd98
 8012564:	0801cda0 	.word	0x0801cda0

08012568 <__itoa>:
 8012568:	1e93      	subs	r3, r2, #2
 801256a:	2b22      	cmp	r3, #34	; 0x22
 801256c:	b510      	push	{r4, lr}
 801256e:	460c      	mov	r4, r1
 8012570:	d904      	bls.n	801257c <__itoa+0x14>
 8012572:	2300      	movs	r3, #0
 8012574:	700b      	strb	r3, [r1, #0]
 8012576:	461c      	mov	r4, r3
 8012578:	4620      	mov	r0, r4
 801257a:	bd10      	pop	{r4, pc}
 801257c:	2a0a      	cmp	r2, #10
 801257e:	d109      	bne.n	8012594 <__itoa+0x2c>
 8012580:	2800      	cmp	r0, #0
 8012582:	da07      	bge.n	8012594 <__itoa+0x2c>
 8012584:	232d      	movs	r3, #45	; 0x2d
 8012586:	700b      	strb	r3, [r1, #0]
 8012588:	4240      	negs	r0, r0
 801258a:	2101      	movs	r1, #1
 801258c:	4421      	add	r1, r4
 801258e:	f002 fc41 	bl	8014e14 <__utoa>
 8012592:	e7f1      	b.n	8012578 <__itoa+0x10>
 8012594:	2100      	movs	r1, #0
 8012596:	e7f9      	b.n	801258c <__itoa+0x24>

08012598 <itoa>:
 8012598:	f7ff bfe6 	b.w	8012568 <__itoa>

0801259c <malloc>:
 801259c:	4b02      	ldr	r3, [pc, #8]	; (80125a8 <malloc+0xc>)
 801259e:	4601      	mov	r1, r0
 80125a0:	6818      	ldr	r0, [r3, #0]
 80125a2:	f000 b80b 	b.w	80125bc <_malloc_r>
 80125a6:	bf00      	nop
 80125a8:	200029bc 	.word	0x200029bc

080125ac <free>:
 80125ac:	4b02      	ldr	r3, [pc, #8]	; (80125b8 <free+0xc>)
 80125ae:	4601      	mov	r1, r0
 80125b0:	6818      	ldr	r0, [r3, #0]
 80125b2:	f004 bf41 	b.w	8017438 <_free_r>
 80125b6:	bf00      	nop
 80125b8:	200029bc 	.word	0x200029bc

080125bc <_malloc_r>:
 80125bc:	f101 030b 	add.w	r3, r1, #11
 80125c0:	2b16      	cmp	r3, #22
 80125c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c6:	4605      	mov	r5, r0
 80125c8:	d906      	bls.n	80125d8 <_malloc_r+0x1c>
 80125ca:	f033 0707 	bics.w	r7, r3, #7
 80125ce:	d504      	bpl.n	80125da <_malloc_r+0x1e>
 80125d0:	230c      	movs	r3, #12
 80125d2:	602b      	str	r3, [r5, #0]
 80125d4:	2400      	movs	r4, #0
 80125d6:	e1ae      	b.n	8012936 <_malloc_r+0x37a>
 80125d8:	2710      	movs	r7, #16
 80125da:	42b9      	cmp	r1, r7
 80125dc:	d8f8      	bhi.n	80125d0 <_malloc_r+0x14>
 80125de:	4628      	mov	r0, r5
 80125e0:	f000 fa6c 	bl	8012abc <__malloc_lock>
 80125e4:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80125e8:	4ec3      	ldr	r6, [pc, #780]	; (80128f8 <_malloc_r+0x33c>)
 80125ea:	d238      	bcs.n	801265e <_malloc_r+0xa2>
 80125ec:	f107 0208 	add.w	r2, r7, #8
 80125f0:	4432      	add	r2, r6
 80125f2:	f1a2 0108 	sub.w	r1, r2, #8
 80125f6:	6854      	ldr	r4, [r2, #4]
 80125f8:	428c      	cmp	r4, r1
 80125fa:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80125fe:	d102      	bne.n	8012606 <_malloc_r+0x4a>
 8012600:	68d4      	ldr	r4, [r2, #12]
 8012602:	42a2      	cmp	r2, r4
 8012604:	d010      	beq.n	8012628 <_malloc_r+0x6c>
 8012606:	6863      	ldr	r3, [r4, #4]
 8012608:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801260c:	f023 0303 	bic.w	r3, r3, #3
 8012610:	60ca      	str	r2, [r1, #12]
 8012612:	4423      	add	r3, r4
 8012614:	6091      	str	r1, [r2, #8]
 8012616:	685a      	ldr	r2, [r3, #4]
 8012618:	f042 0201 	orr.w	r2, r2, #1
 801261c:	605a      	str	r2, [r3, #4]
 801261e:	4628      	mov	r0, r5
 8012620:	f000 fa52 	bl	8012ac8 <__malloc_unlock>
 8012624:	3408      	adds	r4, #8
 8012626:	e186      	b.n	8012936 <_malloc_r+0x37a>
 8012628:	3302      	adds	r3, #2
 801262a:	4ab4      	ldr	r2, [pc, #720]	; (80128fc <_malloc_r+0x340>)
 801262c:	6934      	ldr	r4, [r6, #16]
 801262e:	4294      	cmp	r4, r2
 8012630:	4611      	mov	r1, r2
 8012632:	d077      	beq.n	8012724 <_malloc_r+0x168>
 8012634:	6860      	ldr	r0, [r4, #4]
 8012636:	f020 0c03 	bic.w	ip, r0, #3
 801263a:	ebac 0007 	sub.w	r0, ip, r7
 801263e:	280f      	cmp	r0, #15
 8012640:	dd48      	ble.n	80126d4 <_malloc_r+0x118>
 8012642:	19e1      	adds	r1, r4, r7
 8012644:	f040 0301 	orr.w	r3, r0, #1
 8012648:	f047 0701 	orr.w	r7, r7, #1
 801264c:	6067      	str	r7, [r4, #4]
 801264e:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8012652:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8012656:	604b      	str	r3, [r1, #4]
 8012658:	f844 000c 	str.w	r0, [r4, ip]
 801265c:	e7df      	b.n	801261e <_malloc_r+0x62>
 801265e:	0a7b      	lsrs	r3, r7, #9
 8012660:	d02a      	beq.n	80126b8 <_malloc_r+0xfc>
 8012662:	2b04      	cmp	r3, #4
 8012664:	d812      	bhi.n	801268c <_malloc_r+0xd0>
 8012666:	09bb      	lsrs	r3, r7, #6
 8012668:	3338      	adds	r3, #56	; 0x38
 801266a:	1c5a      	adds	r2, r3, #1
 801266c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8012670:	f1a2 0c08 	sub.w	ip, r2, #8
 8012674:	6854      	ldr	r4, [r2, #4]
 8012676:	4564      	cmp	r4, ip
 8012678:	d006      	beq.n	8012688 <_malloc_r+0xcc>
 801267a:	6862      	ldr	r2, [r4, #4]
 801267c:	f022 0203 	bic.w	r2, r2, #3
 8012680:	1bd0      	subs	r0, r2, r7
 8012682:	280f      	cmp	r0, #15
 8012684:	dd1c      	ble.n	80126c0 <_malloc_r+0x104>
 8012686:	3b01      	subs	r3, #1
 8012688:	3301      	adds	r3, #1
 801268a:	e7ce      	b.n	801262a <_malloc_r+0x6e>
 801268c:	2b14      	cmp	r3, #20
 801268e:	d801      	bhi.n	8012694 <_malloc_r+0xd8>
 8012690:	335b      	adds	r3, #91	; 0x5b
 8012692:	e7ea      	b.n	801266a <_malloc_r+0xae>
 8012694:	2b54      	cmp	r3, #84	; 0x54
 8012696:	d802      	bhi.n	801269e <_malloc_r+0xe2>
 8012698:	0b3b      	lsrs	r3, r7, #12
 801269a:	336e      	adds	r3, #110	; 0x6e
 801269c:	e7e5      	b.n	801266a <_malloc_r+0xae>
 801269e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80126a2:	d802      	bhi.n	80126aa <_malloc_r+0xee>
 80126a4:	0bfb      	lsrs	r3, r7, #15
 80126a6:	3377      	adds	r3, #119	; 0x77
 80126a8:	e7df      	b.n	801266a <_malloc_r+0xae>
 80126aa:	f240 5254 	movw	r2, #1364	; 0x554
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d804      	bhi.n	80126bc <_malloc_r+0x100>
 80126b2:	0cbb      	lsrs	r3, r7, #18
 80126b4:	337c      	adds	r3, #124	; 0x7c
 80126b6:	e7d8      	b.n	801266a <_malloc_r+0xae>
 80126b8:	233f      	movs	r3, #63	; 0x3f
 80126ba:	e7d6      	b.n	801266a <_malloc_r+0xae>
 80126bc:	237e      	movs	r3, #126	; 0x7e
 80126be:	e7d4      	b.n	801266a <_malloc_r+0xae>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	68e1      	ldr	r1, [r4, #12]
 80126c4:	db04      	blt.n	80126d0 <_malloc_r+0x114>
 80126c6:	68a3      	ldr	r3, [r4, #8]
 80126c8:	60d9      	str	r1, [r3, #12]
 80126ca:	608b      	str	r3, [r1, #8]
 80126cc:	18a3      	adds	r3, r4, r2
 80126ce:	e7a2      	b.n	8012616 <_malloc_r+0x5a>
 80126d0:	460c      	mov	r4, r1
 80126d2:	e7d0      	b.n	8012676 <_malloc_r+0xba>
 80126d4:	2800      	cmp	r0, #0
 80126d6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80126da:	db07      	blt.n	80126ec <_malloc_r+0x130>
 80126dc:	44a4      	add	ip, r4
 80126de:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80126e2:	f043 0301 	orr.w	r3, r3, #1
 80126e6:	f8cc 3004 	str.w	r3, [ip, #4]
 80126ea:	e798      	b.n	801261e <_malloc_r+0x62>
 80126ec:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80126f0:	6870      	ldr	r0, [r6, #4]
 80126f2:	f080 809e 	bcs.w	8012832 <_malloc_r+0x276>
 80126f6:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80126fa:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80126fe:	f04f 0c01 	mov.w	ip, #1
 8012702:	3201      	adds	r2, #1
 8012704:	fa0c fc0e 	lsl.w	ip, ip, lr
 8012708:	ea4c 0000 	orr.w	r0, ip, r0
 801270c:	6070      	str	r0, [r6, #4]
 801270e:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8012712:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8012716:	3808      	subs	r0, #8
 8012718:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801271c:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8012720:	f8cc 400c 	str.w	r4, [ip, #12]
 8012724:	2001      	movs	r0, #1
 8012726:	109a      	asrs	r2, r3, #2
 8012728:	fa00 f202 	lsl.w	r2, r0, r2
 801272c:	6870      	ldr	r0, [r6, #4]
 801272e:	4290      	cmp	r0, r2
 8012730:	d326      	bcc.n	8012780 <_malloc_r+0x1c4>
 8012732:	4210      	tst	r0, r2
 8012734:	d106      	bne.n	8012744 <_malloc_r+0x188>
 8012736:	f023 0303 	bic.w	r3, r3, #3
 801273a:	0052      	lsls	r2, r2, #1
 801273c:	4210      	tst	r0, r2
 801273e:	f103 0304 	add.w	r3, r3, #4
 8012742:	d0fa      	beq.n	801273a <_malloc_r+0x17e>
 8012744:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8012748:	46c1      	mov	r9, r8
 801274a:	469e      	mov	lr, r3
 801274c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012750:	454c      	cmp	r4, r9
 8012752:	f040 80b3 	bne.w	80128bc <_malloc_r+0x300>
 8012756:	f10e 0e01 	add.w	lr, lr, #1
 801275a:	f01e 0f03 	tst.w	lr, #3
 801275e:	f109 0908 	add.w	r9, r9, #8
 8012762:	d1f3      	bne.n	801274c <_malloc_r+0x190>
 8012764:	0798      	lsls	r0, r3, #30
 8012766:	f040 80ec 	bne.w	8012942 <_malloc_r+0x386>
 801276a:	6873      	ldr	r3, [r6, #4]
 801276c:	ea23 0302 	bic.w	r3, r3, r2
 8012770:	6073      	str	r3, [r6, #4]
 8012772:	6870      	ldr	r0, [r6, #4]
 8012774:	0052      	lsls	r2, r2, #1
 8012776:	4290      	cmp	r0, r2
 8012778:	d302      	bcc.n	8012780 <_malloc_r+0x1c4>
 801277a:	2a00      	cmp	r2, #0
 801277c:	f040 80ee 	bne.w	801295c <_malloc_r+0x3a0>
 8012780:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8012784:	f8db 1004 	ldr.w	r1, [fp, #4]
 8012788:	f021 0903 	bic.w	r9, r1, #3
 801278c:	45b9      	cmp	r9, r7
 801278e:	d304      	bcc.n	801279a <_malloc_r+0x1de>
 8012790:	eba9 0207 	sub.w	r2, r9, r7
 8012794:	2a0f      	cmp	r2, #15
 8012796:	f300 8149 	bgt.w	8012a2c <_malloc_r+0x470>
 801279a:	4a59      	ldr	r2, [pc, #356]	; (8012900 <_malloc_r+0x344>)
 801279c:	6811      	ldr	r1, [r2, #0]
 801279e:	3110      	adds	r1, #16
 80127a0:	eb0b 0309 	add.w	r3, fp, r9
 80127a4:	4439      	add	r1, r7
 80127a6:	2008      	movs	r0, #8
 80127a8:	9301      	str	r3, [sp, #4]
 80127aa:	9100      	str	r1, [sp, #0]
 80127ac:	f002 fb24 	bl	8014df8 <sysconf>
 80127b0:	4a54      	ldr	r2, [pc, #336]	; (8012904 <_malloc_r+0x348>)
 80127b2:	e9dd 1300 	ldrd	r1, r3, [sp]
 80127b6:	4680      	mov	r8, r0
 80127b8:	6810      	ldr	r0, [r2, #0]
 80127ba:	3001      	adds	r0, #1
 80127bc:	bf1f      	itttt	ne
 80127be:	f101 31ff 	addne.w	r1, r1, #4294967295
 80127c2:	4441      	addne	r1, r8
 80127c4:	f1c8 0000 	rsbne	r0, r8, #0
 80127c8:	4001      	andne	r1, r0
 80127ca:	4628      	mov	r0, r5
 80127cc:	e9cd 1300 	strd	r1, r3, [sp]
 80127d0:	f000 f9b0 	bl	8012b34 <_sbrk_r>
 80127d4:	1c42      	adds	r2, r0, #1
 80127d6:	4604      	mov	r4, r0
 80127d8:	f000 80fc 	beq.w	80129d4 <_malloc_r+0x418>
 80127dc:	9b01      	ldr	r3, [sp, #4]
 80127de:	9900      	ldr	r1, [sp, #0]
 80127e0:	4a48      	ldr	r2, [pc, #288]	; (8012904 <_malloc_r+0x348>)
 80127e2:	4283      	cmp	r3, r0
 80127e4:	d902      	bls.n	80127ec <_malloc_r+0x230>
 80127e6:	45b3      	cmp	fp, r6
 80127e8:	f040 80f4 	bne.w	80129d4 <_malloc_r+0x418>
 80127ec:	f8df a120 	ldr.w	sl, [pc, #288]	; 8012910 <_malloc_r+0x354>
 80127f0:	f8da 0000 	ldr.w	r0, [sl]
 80127f4:	42a3      	cmp	r3, r4
 80127f6:	eb00 0e01 	add.w	lr, r0, r1
 80127fa:	f8ca e000 	str.w	lr, [sl]
 80127fe:	f108 3cff 	add.w	ip, r8, #4294967295
 8012802:	f040 80ad 	bne.w	8012960 <_malloc_r+0x3a4>
 8012806:	ea13 0f0c 	tst.w	r3, ip
 801280a:	f040 80a9 	bne.w	8012960 <_malloc_r+0x3a4>
 801280e:	68b3      	ldr	r3, [r6, #8]
 8012810:	4449      	add	r1, r9
 8012812:	f041 0101 	orr.w	r1, r1, #1
 8012816:	6059      	str	r1, [r3, #4]
 8012818:	4a3b      	ldr	r2, [pc, #236]	; (8012908 <_malloc_r+0x34c>)
 801281a:	f8da 3000 	ldr.w	r3, [sl]
 801281e:	6811      	ldr	r1, [r2, #0]
 8012820:	428b      	cmp	r3, r1
 8012822:	bf88      	it	hi
 8012824:	6013      	strhi	r3, [r2, #0]
 8012826:	4a39      	ldr	r2, [pc, #228]	; (801290c <_malloc_r+0x350>)
 8012828:	6811      	ldr	r1, [r2, #0]
 801282a:	428b      	cmp	r3, r1
 801282c:	bf88      	it	hi
 801282e:	6013      	strhi	r3, [r2, #0]
 8012830:	e0d0      	b.n	80129d4 <_malloc_r+0x418>
 8012832:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8012836:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801283a:	d218      	bcs.n	801286e <_malloc_r+0x2b2>
 801283c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8012840:	3238      	adds	r2, #56	; 0x38
 8012842:	f102 0e01 	add.w	lr, r2, #1
 8012846:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801284a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801284e:	45f0      	cmp	r8, lr
 8012850:	d12b      	bne.n	80128aa <_malloc_r+0x2ee>
 8012852:	1092      	asrs	r2, r2, #2
 8012854:	f04f 0c01 	mov.w	ip, #1
 8012858:	fa0c f202 	lsl.w	r2, ip, r2
 801285c:	4310      	orrs	r0, r2
 801285e:	6070      	str	r0, [r6, #4]
 8012860:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012864:	f8c8 4008 	str.w	r4, [r8, #8]
 8012868:	f8ce 400c 	str.w	r4, [lr, #12]
 801286c:	e75a      	b.n	8012724 <_malloc_r+0x168>
 801286e:	2a14      	cmp	r2, #20
 8012870:	d801      	bhi.n	8012876 <_malloc_r+0x2ba>
 8012872:	325b      	adds	r2, #91	; 0x5b
 8012874:	e7e5      	b.n	8012842 <_malloc_r+0x286>
 8012876:	2a54      	cmp	r2, #84	; 0x54
 8012878:	d803      	bhi.n	8012882 <_malloc_r+0x2c6>
 801287a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801287e:	326e      	adds	r2, #110	; 0x6e
 8012880:	e7df      	b.n	8012842 <_malloc_r+0x286>
 8012882:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012886:	d803      	bhi.n	8012890 <_malloc_r+0x2d4>
 8012888:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801288c:	3277      	adds	r2, #119	; 0x77
 801288e:	e7d8      	b.n	8012842 <_malloc_r+0x286>
 8012890:	f240 5e54 	movw	lr, #1364	; 0x554
 8012894:	4572      	cmp	r2, lr
 8012896:	bf9a      	itte	ls
 8012898:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801289c:	327c      	addls	r2, #124	; 0x7c
 801289e:	227e      	movhi	r2, #126	; 0x7e
 80128a0:	e7cf      	b.n	8012842 <_malloc_r+0x286>
 80128a2:	f8de e008 	ldr.w	lr, [lr, #8]
 80128a6:	45f0      	cmp	r8, lr
 80128a8:	d005      	beq.n	80128b6 <_malloc_r+0x2fa>
 80128aa:	f8de 2004 	ldr.w	r2, [lr, #4]
 80128ae:	f022 0203 	bic.w	r2, r2, #3
 80128b2:	4562      	cmp	r2, ip
 80128b4:	d8f5      	bhi.n	80128a2 <_malloc_r+0x2e6>
 80128b6:	f8de 800c 	ldr.w	r8, [lr, #12]
 80128ba:	e7d1      	b.n	8012860 <_malloc_r+0x2a4>
 80128bc:	6860      	ldr	r0, [r4, #4]
 80128be:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80128c2:	f020 0003 	bic.w	r0, r0, #3
 80128c6:	eba0 0a07 	sub.w	sl, r0, r7
 80128ca:	f1ba 0f0f 	cmp.w	sl, #15
 80128ce:	dd21      	ble.n	8012914 <_malloc_r+0x358>
 80128d0:	68a3      	ldr	r3, [r4, #8]
 80128d2:	19e2      	adds	r2, r4, r7
 80128d4:	f047 0701 	orr.w	r7, r7, #1
 80128d8:	6067      	str	r7, [r4, #4]
 80128da:	f8c3 c00c 	str.w	ip, [r3, #12]
 80128de:	f8cc 3008 	str.w	r3, [ip, #8]
 80128e2:	f04a 0301 	orr.w	r3, sl, #1
 80128e6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80128ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80128ee:	6053      	str	r3, [r2, #4]
 80128f0:	f844 a000 	str.w	sl, [r4, r0]
 80128f4:	e693      	b.n	801261e <_malloc_r+0x62>
 80128f6:	bf00      	nop
 80128f8:	20002de8 	.word	0x20002de8
 80128fc:	20002df0 	.word	0x20002df0
 8012900:	200044b0 	.word	0x200044b0
 8012904:	200031f0 	.word	0x200031f0
 8012908:	200044a8 	.word	0x200044a8
 801290c:	200044ac 	.word	0x200044ac
 8012910:	20004480 	.word	0x20004480
 8012914:	f1ba 0f00 	cmp.w	sl, #0
 8012918:	db11      	blt.n	801293e <_malloc_r+0x382>
 801291a:	4420      	add	r0, r4
 801291c:	6843      	ldr	r3, [r0, #4]
 801291e:	f043 0301 	orr.w	r3, r3, #1
 8012922:	6043      	str	r3, [r0, #4]
 8012924:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8012928:	4628      	mov	r0, r5
 801292a:	f8c3 c00c 	str.w	ip, [r3, #12]
 801292e:	f8cc 3008 	str.w	r3, [ip, #8]
 8012932:	f000 f8c9 	bl	8012ac8 <__malloc_unlock>
 8012936:	4620      	mov	r0, r4
 8012938:	b003      	add	sp, #12
 801293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293e:	4664      	mov	r4, ip
 8012940:	e706      	b.n	8012750 <_malloc_r+0x194>
 8012942:	f858 0908 	ldr.w	r0, [r8], #-8
 8012946:	4540      	cmp	r0, r8
 8012948:	f103 33ff 	add.w	r3, r3, #4294967295
 801294c:	f43f af0a 	beq.w	8012764 <_malloc_r+0x1a8>
 8012950:	e70f      	b.n	8012772 <_malloc_r+0x1b6>
 8012952:	3304      	adds	r3, #4
 8012954:	0052      	lsls	r2, r2, #1
 8012956:	4210      	tst	r0, r2
 8012958:	d0fb      	beq.n	8012952 <_malloc_r+0x396>
 801295a:	e6f3      	b.n	8012744 <_malloc_r+0x188>
 801295c:	4673      	mov	r3, lr
 801295e:	e7fa      	b.n	8012956 <_malloc_r+0x39a>
 8012960:	6810      	ldr	r0, [r2, #0]
 8012962:	3001      	adds	r0, #1
 8012964:	bf1b      	ittet	ne
 8012966:	1ae3      	subne	r3, r4, r3
 8012968:	4473      	addne	r3, lr
 801296a:	6014      	streq	r4, [r2, #0]
 801296c:	f8ca 3000 	strne.w	r3, [sl]
 8012970:	f014 0307 	ands.w	r3, r4, #7
 8012974:	bf1a      	itte	ne
 8012976:	f1c3 0008 	rsbne	r0, r3, #8
 801297a:	1824      	addne	r4, r4, r0
 801297c:	4618      	moveq	r0, r3
 801297e:	1862      	adds	r2, r4, r1
 8012980:	ea02 010c 	and.w	r1, r2, ip
 8012984:	4480      	add	r8, r0
 8012986:	eba8 0801 	sub.w	r8, r8, r1
 801298a:	ea08 080c 	and.w	r8, r8, ip
 801298e:	4641      	mov	r1, r8
 8012990:	4628      	mov	r0, r5
 8012992:	9301      	str	r3, [sp, #4]
 8012994:	9200      	str	r2, [sp, #0]
 8012996:	f000 f8cd 	bl	8012b34 <_sbrk_r>
 801299a:	1c43      	adds	r3, r0, #1
 801299c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129a0:	d105      	bne.n	80129ae <_malloc_r+0x3f2>
 80129a2:	b32b      	cbz	r3, 80129f0 <_malloc_r+0x434>
 80129a4:	f1a3 0008 	sub.w	r0, r3, #8
 80129a8:	4410      	add	r0, r2
 80129aa:	f04f 0800 	mov.w	r8, #0
 80129ae:	f8da 2000 	ldr.w	r2, [sl]
 80129b2:	60b4      	str	r4, [r6, #8]
 80129b4:	1b00      	subs	r0, r0, r4
 80129b6:	4440      	add	r0, r8
 80129b8:	4442      	add	r2, r8
 80129ba:	f040 0001 	orr.w	r0, r0, #1
 80129be:	45b3      	cmp	fp, r6
 80129c0:	f8ca 2000 	str.w	r2, [sl]
 80129c4:	6060      	str	r0, [r4, #4]
 80129c6:	f43f af27 	beq.w	8012818 <_malloc_r+0x25c>
 80129ca:	f1b9 0f0f 	cmp.w	r9, #15
 80129ce:	d812      	bhi.n	80129f6 <_malloc_r+0x43a>
 80129d0:	2301      	movs	r3, #1
 80129d2:	6063      	str	r3, [r4, #4]
 80129d4:	68b3      	ldr	r3, [r6, #8]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	f023 0303 	bic.w	r3, r3, #3
 80129dc:	42bb      	cmp	r3, r7
 80129de:	eba3 0207 	sub.w	r2, r3, r7
 80129e2:	d301      	bcc.n	80129e8 <_malloc_r+0x42c>
 80129e4:	2a0f      	cmp	r2, #15
 80129e6:	dc21      	bgt.n	8012a2c <_malloc_r+0x470>
 80129e8:	4628      	mov	r0, r5
 80129ea:	f000 f86d 	bl	8012ac8 <__malloc_unlock>
 80129ee:	e5f1      	b.n	80125d4 <_malloc_r+0x18>
 80129f0:	4610      	mov	r0, r2
 80129f2:	4698      	mov	r8, r3
 80129f4:	e7db      	b.n	80129ae <_malloc_r+0x3f2>
 80129f6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80129fa:	f1a9 090c 	sub.w	r9, r9, #12
 80129fe:	f029 0907 	bic.w	r9, r9, #7
 8012a02:	f003 0301 	and.w	r3, r3, #1
 8012a06:	ea43 0309 	orr.w	r3, r3, r9
 8012a0a:	f8cb 3004 	str.w	r3, [fp, #4]
 8012a0e:	2205      	movs	r2, #5
 8012a10:	eb0b 0309 	add.w	r3, fp, r9
 8012a14:	f1b9 0f0f 	cmp.w	r9, #15
 8012a18:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8012a1c:	f67f aefc 	bls.w	8012818 <_malloc_r+0x25c>
 8012a20:	f10b 0108 	add.w	r1, fp, #8
 8012a24:	4628      	mov	r0, r5
 8012a26:	f004 fd07 	bl	8017438 <_free_r>
 8012a2a:	e6f5      	b.n	8012818 <_malloc_r+0x25c>
 8012a2c:	68b4      	ldr	r4, [r6, #8]
 8012a2e:	f047 0301 	orr.w	r3, r7, #1
 8012a32:	4427      	add	r7, r4
 8012a34:	f042 0201 	orr.w	r2, r2, #1
 8012a38:	6063      	str	r3, [r4, #4]
 8012a3a:	60b7      	str	r7, [r6, #8]
 8012a3c:	607a      	str	r2, [r7, #4]
 8012a3e:	e5ee      	b.n	801261e <_malloc_r+0x62>

08012a40 <memcmp>:
 8012a40:	b530      	push	{r4, r5, lr}
 8012a42:	3901      	subs	r1, #1
 8012a44:	2400      	movs	r4, #0
 8012a46:	42a2      	cmp	r2, r4
 8012a48:	d101      	bne.n	8012a4e <memcmp+0xe>
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	e005      	b.n	8012a5a <memcmp+0x1a>
 8012a4e:	5d03      	ldrb	r3, [r0, r4]
 8012a50:	3401      	adds	r4, #1
 8012a52:	5d0d      	ldrb	r5, [r1, r4]
 8012a54:	42ab      	cmp	r3, r5
 8012a56:	d0f6      	beq.n	8012a46 <memcmp+0x6>
 8012a58:	1b58      	subs	r0, r3, r5
 8012a5a:	bd30      	pop	{r4, r5, pc}

08012a5c <memcpy>:
 8012a5c:	440a      	add	r2, r1
 8012a5e:	4291      	cmp	r1, r2
 8012a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a64:	d100      	bne.n	8012a68 <memcpy+0xc>
 8012a66:	4770      	bx	lr
 8012a68:	b510      	push	{r4, lr}
 8012a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a72:	4291      	cmp	r1, r2
 8012a74:	d1f9      	bne.n	8012a6a <memcpy+0xe>
 8012a76:	bd10      	pop	{r4, pc}

08012a78 <memmove>:
 8012a78:	4288      	cmp	r0, r1
 8012a7a:	b510      	push	{r4, lr}
 8012a7c:	eb01 0402 	add.w	r4, r1, r2
 8012a80:	d902      	bls.n	8012a88 <memmove+0x10>
 8012a82:	4284      	cmp	r4, r0
 8012a84:	4623      	mov	r3, r4
 8012a86:	d807      	bhi.n	8012a98 <memmove+0x20>
 8012a88:	1e43      	subs	r3, r0, #1
 8012a8a:	42a1      	cmp	r1, r4
 8012a8c:	d008      	beq.n	8012aa0 <memmove+0x28>
 8012a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a96:	e7f8      	b.n	8012a8a <memmove+0x12>
 8012a98:	4402      	add	r2, r0
 8012a9a:	4601      	mov	r1, r0
 8012a9c:	428a      	cmp	r2, r1
 8012a9e:	d100      	bne.n	8012aa2 <memmove+0x2a>
 8012aa0:	bd10      	pop	{r4, pc}
 8012aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012aaa:	e7f7      	b.n	8012a9c <memmove+0x24>

08012aac <memset>:
 8012aac:	4402      	add	r2, r0
 8012aae:	4603      	mov	r3, r0
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d100      	bne.n	8012ab6 <memset+0xa>
 8012ab4:	4770      	bx	lr
 8012ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8012aba:	e7f9      	b.n	8012ab0 <memset+0x4>

08012abc <__malloc_lock>:
 8012abc:	4801      	ldr	r0, [pc, #4]	; (8012ac4 <__malloc_lock+0x8>)
 8012abe:	f005 b915 	b.w	8017cec <__retarget_lock_acquire_recursive>
 8012ac2:	bf00      	nop
 8012ac4:	20012824 	.word	0x20012824

08012ac8 <__malloc_unlock>:
 8012ac8:	4801      	ldr	r0, [pc, #4]	; (8012ad0 <__malloc_unlock+0x8>)
 8012aca:	f005 b910 	b.w	8017cee <__retarget_lock_release_recursive>
 8012ace:	bf00      	nop
 8012ad0:	20012824 	.word	0x20012824

08012ad4 <printf>:
 8012ad4:	b40f      	push	{r0, r1, r2, r3}
 8012ad6:	b507      	push	{r0, r1, r2, lr}
 8012ad8:	4906      	ldr	r1, [pc, #24]	; (8012af4 <printf+0x20>)
 8012ada:	ab04      	add	r3, sp, #16
 8012adc:	6808      	ldr	r0, [r1, #0]
 8012ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ae2:	6881      	ldr	r1, [r0, #8]
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	f002 f9d7 	bl	8014e98 <_vfprintf_r>
 8012aea:	b003      	add	sp, #12
 8012aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8012af0:	b004      	add	sp, #16
 8012af2:	4770      	bx	lr
 8012af4:	200029bc 	.word	0x200029bc

08012af8 <rand>:
 8012af8:	4b0b      	ldr	r3, [pc, #44]	; (8012b28 <rand+0x30>)
 8012afa:	480c      	ldr	r0, [pc, #48]	; (8012b2c <rand+0x34>)
 8012afc:	6819      	ldr	r1, [r3, #0]
 8012afe:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 8012b02:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 8012b06:	b510      	push	{r4, lr}
 8012b08:	4c09      	ldr	r4, [pc, #36]	; (8012b30 <rand+0x38>)
 8012b0a:	4350      	muls	r0, r2
 8012b0c:	fb04 0003 	mla	r0, r4, r3, r0
 8012b10:	fba2 3404 	umull	r3, r4, r2, r4
 8012b14:	1c5a      	adds	r2, r3, #1
 8012b16:	4404      	add	r4, r0
 8012b18:	f144 0000 	adc.w	r0, r4, #0
 8012b1c:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 8012b20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012b24:	bd10      	pop	{r4, pc}
 8012b26:	bf00      	nop
 8012b28:	200029bc 	.word	0x200029bc
 8012b2c:	5851f42d 	.word	0x5851f42d
 8012b30:	4c957f2d 	.word	0x4c957f2d

08012b34 <_sbrk_r>:
 8012b34:	b538      	push	{r3, r4, r5, lr}
 8012b36:	4d06      	ldr	r5, [pc, #24]	; (8012b50 <_sbrk_r+0x1c>)
 8012b38:	2300      	movs	r3, #0
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	4608      	mov	r0, r1
 8012b3e:	602b      	str	r3, [r5, #0]
 8012b40:	f7fe fe72 	bl	8011828 <_sbrk>
 8012b44:	1c43      	adds	r3, r0, #1
 8012b46:	d102      	bne.n	8012b4e <_sbrk_r+0x1a>
 8012b48:	682b      	ldr	r3, [r5, #0]
 8012b4a:	b103      	cbz	r3, 8012b4e <_sbrk_r+0x1a>
 8012b4c:	6023      	str	r3, [r4, #0]
 8012b4e:	bd38      	pop	{r3, r4, r5, pc}
 8012b50:	2001281c 	.word	0x2001281c

08012b54 <sprintf>:
 8012b54:	b40e      	push	{r1, r2, r3}
 8012b56:	b500      	push	{lr}
 8012b58:	b09c      	sub	sp, #112	; 0x70
 8012b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8012b5c:	9002      	str	r0, [sp, #8]
 8012b5e:	9006      	str	r0, [sp, #24]
 8012b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b64:	4809      	ldr	r0, [pc, #36]	; (8012b8c <sprintf+0x38>)
 8012b66:	9107      	str	r1, [sp, #28]
 8012b68:	9104      	str	r1, [sp, #16]
 8012b6a:	4909      	ldr	r1, [pc, #36]	; (8012b90 <sprintf+0x3c>)
 8012b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b70:	9105      	str	r1, [sp, #20]
 8012b72:	6800      	ldr	r0, [r0, #0]
 8012b74:	9301      	str	r3, [sp, #4]
 8012b76:	a902      	add	r1, sp, #8
 8012b78:	f000 ff5e 	bl	8013a38 <_svfprintf_r>
 8012b7c:	9b02      	ldr	r3, [sp, #8]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	701a      	strb	r2, [r3, #0]
 8012b82:	b01c      	add	sp, #112	; 0x70
 8012b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b88:	b003      	add	sp, #12
 8012b8a:	4770      	bx	lr
 8012b8c:	200029bc 	.word	0x200029bc
 8012b90:	ffff0208 	.word	0xffff0208

08012b94 <strcat>:
 8012b94:	b510      	push	{r4, lr}
 8012b96:	4602      	mov	r2, r0
 8012b98:	7814      	ldrb	r4, [r2, #0]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	3201      	adds	r2, #1
 8012b9e:	2c00      	cmp	r4, #0
 8012ba0:	d1fa      	bne.n	8012b98 <strcat+0x4>
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ba8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012bac:	2a00      	cmp	r2, #0
 8012bae:	d1f9      	bne.n	8012ba4 <strcat+0x10>
 8012bb0:	bd10      	pop	{r4, pc}

08012bb2 <strchr>:
 8012bb2:	b2c9      	uxtb	r1, r1
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bba:	b11a      	cbz	r2, 8012bc4 <strchr+0x12>
 8012bbc:	428a      	cmp	r2, r1
 8012bbe:	d1f9      	bne.n	8012bb4 <strchr+0x2>
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	4770      	bx	lr
 8012bc4:	2900      	cmp	r1, #0
 8012bc6:	bf18      	it	ne
 8012bc8:	2300      	movne	r3, #0
 8012bca:	e7f9      	b.n	8012bc0 <strchr+0xe>

08012bcc <strcpy>:
 8012bcc:	4603      	mov	r3, r0
 8012bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bd2:	f803 2b01 	strb.w	r2, [r3], #1
 8012bd6:	2a00      	cmp	r2, #0
 8012bd8:	d1f9      	bne.n	8012bce <strcpy+0x2>
 8012bda:	4770      	bx	lr

08012bdc <strncat>:
 8012bdc:	b530      	push	{r4, r5, lr}
 8012bde:	4604      	mov	r4, r0
 8012be0:	7825      	ldrb	r5, [r4, #0]
 8012be2:	4623      	mov	r3, r4
 8012be4:	3401      	adds	r4, #1
 8012be6:	2d00      	cmp	r5, #0
 8012be8:	d1fa      	bne.n	8012be0 <strncat+0x4>
 8012bea:	3a01      	subs	r2, #1
 8012bec:	d304      	bcc.n	8012bf8 <strncat+0x1c>
 8012bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bf2:	f803 4b01 	strb.w	r4, [r3], #1
 8012bf6:	b904      	cbnz	r4, 8012bfa <strncat+0x1e>
 8012bf8:	bd30      	pop	{r4, r5, pc}
 8012bfa:	2a00      	cmp	r2, #0
 8012bfc:	d1f5      	bne.n	8012bea <strncat+0xe>
 8012bfe:	701a      	strb	r2, [r3, #0]
 8012c00:	e7f3      	b.n	8012bea <strncat+0xe>

08012c02 <strncmp>:
 8012c02:	b510      	push	{r4, lr}
 8012c04:	b16a      	cbz	r2, 8012c22 <strncmp+0x20>
 8012c06:	3901      	subs	r1, #1
 8012c08:	1884      	adds	r4, r0, r2
 8012c0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012c0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d103      	bne.n	8012c1e <strncmp+0x1c>
 8012c16:	42a0      	cmp	r0, r4
 8012c18:	d001      	beq.n	8012c1e <strncmp+0x1c>
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d1f5      	bne.n	8012c0a <strncmp+0x8>
 8012c1e:	1a98      	subs	r0, r3, r2
 8012c20:	bd10      	pop	{r4, pc}
 8012c22:	4610      	mov	r0, r2
 8012c24:	e7fc      	b.n	8012c20 <strncmp+0x1e>

08012c26 <strstr>:
 8012c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c28:	780c      	ldrb	r4, [r1, #0]
 8012c2a:	b164      	cbz	r4, 8012c46 <strstr+0x20>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	781a      	ldrb	r2, [r3, #0]
 8012c30:	4618      	mov	r0, r3
 8012c32:	1c5e      	adds	r6, r3, #1
 8012c34:	b90a      	cbnz	r2, 8012c3a <strstr+0x14>
 8012c36:	4610      	mov	r0, r2
 8012c38:	e005      	b.n	8012c46 <strstr+0x20>
 8012c3a:	4294      	cmp	r4, r2
 8012c3c:	d108      	bne.n	8012c50 <strstr+0x2a>
 8012c3e:	460d      	mov	r5, r1
 8012c40:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8012c44:	b902      	cbnz	r2, 8012c48 <strstr+0x22>
 8012c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c48:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012c4c:	4297      	cmp	r7, r2
 8012c4e:	d0f7      	beq.n	8012c40 <strstr+0x1a>
 8012c50:	4633      	mov	r3, r6
 8012c52:	e7ec      	b.n	8012c2e <strstr+0x8>

08012c54 <sulp>:
 8012c54:	b570      	push	{r4, r5, r6, lr}
 8012c56:	4604      	mov	r4, r0
 8012c58:	460d      	mov	r5, r1
 8012c5a:	ec45 4b10 	vmov	d0, r4, r5
 8012c5e:	4616      	mov	r6, r2
 8012c60:	f005 fbe2 	bl	8018428 <__ulp>
 8012c64:	ec51 0b10 	vmov	r0, r1, d0
 8012c68:	b17e      	cbz	r6, 8012c8a <sulp+0x36>
 8012c6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	dd09      	ble.n	8012c8a <sulp+0x36>
 8012c76:	051b      	lsls	r3, r3, #20
 8012c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012c7c:	2400      	movs	r4, #0
 8012c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012c82:	4622      	mov	r2, r4
 8012c84:	462b      	mov	r3, r5
 8012c86:	f7ed fcd7 	bl	8000638 <__aeabi_dmul>
 8012c8a:	bd70      	pop	{r4, r5, r6, pc}
 8012c8c:	0000      	movs	r0, r0
	...

08012c90 <_strtod_l>:
 8012c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c94:	b0a3      	sub	sp, #140	; 0x8c
 8012c96:	461f      	mov	r7, r3
 8012c98:	2300      	movs	r3, #0
 8012c9a:	931e      	str	r3, [sp, #120]	; 0x78
 8012c9c:	4ba4      	ldr	r3, [pc, #656]	; (8012f30 <_strtod_l+0x2a0>)
 8012c9e:	9219      	str	r2, [sp, #100]	; 0x64
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	9307      	str	r3, [sp, #28]
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	4688      	mov	r8, r1
 8012caa:	f7ed faab 	bl	8000204 <strlen>
 8012cae:	f04f 0a00 	mov.w	sl, #0
 8012cb2:	4605      	mov	r5, r0
 8012cb4:	f04f 0b00 	mov.w	fp, #0
 8012cb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012cbe:	781a      	ldrb	r2, [r3, #0]
 8012cc0:	2a2b      	cmp	r2, #43	; 0x2b
 8012cc2:	d04c      	beq.n	8012d5e <_strtod_l+0xce>
 8012cc4:	d839      	bhi.n	8012d3a <_strtod_l+0xaa>
 8012cc6:	2a0d      	cmp	r2, #13
 8012cc8:	d832      	bhi.n	8012d30 <_strtod_l+0xa0>
 8012cca:	2a08      	cmp	r2, #8
 8012ccc:	d832      	bhi.n	8012d34 <_strtod_l+0xa4>
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	d03c      	beq.n	8012d4c <_strtod_l+0xbc>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8012cd6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012cd8:	7833      	ldrb	r3, [r6, #0]
 8012cda:	2b30      	cmp	r3, #48	; 0x30
 8012cdc:	f040 80b4 	bne.w	8012e48 <_strtod_l+0x1b8>
 8012ce0:	7873      	ldrb	r3, [r6, #1]
 8012ce2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ce6:	2b58      	cmp	r3, #88	; 0x58
 8012ce8:	d16c      	bne.n	8012dc4 <_strtod_l+0x134>
 8012cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cec:	9301      	str	r3, [sp, #4]
 8012cee:	ab1e      	add	r3, sp, #120	; 0x78
 8012cf0:	9702      	str	r7, [sp, #8]
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	4a8f      	ldr	r2, [pc, #572]	; (8012f34 <_strtod_l+0x2a4>)
 8012cf6:	ab1f      	add	r3, sp, #124	; 0x7c
 8012cf8:	a91d      	add	r1, sp, #116	; 0x74
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f004 fce2 	bl	80176c4 <__gethex>
 8012d00:	f010 0707 	ands.w	r7, r0, #7
 8012d04:	4605      	mov	r5, r0
 8012d06:	d005      	beq.n	8012d14 <_strtod_l+0x84>
 8012d08:	2f06      	cmp	r7, #6
 8012d0a:	d12a      	bne.n	8012d62 <_strtod_l+0xd2>
 8012d0c:	3601      	adds	r6, #1
 8012d0e:	2300      	movs	r3, #0
 8012d10:	961d      	str	r6, [sp, #116]	; 0x74
 8012d12:	930e      	str	r3, [sp, #56]	; 0x38
 8012d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f040 8596 	bne.w	8013848 <_strtod_l+0xbb8>
 8012d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d1e:	b1db      	cbz	r3, 8012d58 <_strtod_l+0xc8>
 8012d20:	4652      	mov	r2, sl
 8012d22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012d26:	ec43 2b10 	vmov	d0, r2, r3
 8012d2a:	b023      	add	sp, #140	; 0x8c
 8012d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d30:	2a20      	cmp	r2, #32
 8012d32:	d1ce      	bne.n	8012cd2 <_strtod_l+0x42>
 8012d34:	3301      	adds	r3, #1
 8012d36:	931d      	str	r3, [sp, #116]	; 0x74
 8012d38:	e7c0      	b.n	8012cbc <_strtod_l+0x2c>
 8012d3a:	2a2d      	cmp	r2, #45	; 0x2d
 8012d3c:	d1c9      	bne.n	8012cd2 <_strtod_l+0x42>
 8012d3e:	2201      	movs	r2, #1
 8012d40:	920e      	str	r2, [sp, #56]	; 0x38
 8012d42:	1c5a      	adds	r2, r3, #1
 8012d44:	921d      	str	r2, [sp, #116]	; 0x74
 8012d46:	785b      	ldrb	r3, [r3, #1]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d1c4      	bne.n	8012cd6 <_strtod_l+0x46>
 8012d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f040 8576 	bne.w	8013844 <_strtod_l+0xbb4>
 8012d58:	4652      	mov	r2, sl
 8012d5a:	465b      	mov	r3, fp
 8012d5c:	e7e3      	b.n	8012d26 <_strtod_l+0x96>
 8012d5e:	2200      	movs	r2, #0
 8012d60:	e7ee      	b.n	8012d40 <_strtod_l+0xb0>
 8012d62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012d64:	b13a      	cbz	r2, 8012d76 <_strtod_l+0xe6>
 8012d66:	2135      	movs	r1, #53	; 0x35
 8012d68:	a820      	add	r0, sp, #128	; 0x80
 8012d6a:	f005 fc68 	bl	801863e <__copybits>
 8012d6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012d70:	4620      	mov	r0, r4
 8012d72:	f005 f860 	bl	8017e36 <_Bfree>
 8012d76:	3f01      	subs	r7, #1
 8012d78:	2f05      	cmp	r7, #5
 8012d7a:	d807      	bhi.n	8012d8c <_strtod_l+0xfc>
 8012d7c:	e8df f007 	tbb	[pc, r7]
 8012d80:	1d180b0e 	.word	0x1d180b0e
 8012d84:	030e      	.short	0x030e
 8012d86:	f04f 0b00 	mov.w	fp, #0
 8012d8a:	46da      	mov	sl, fp
 8012d8c:	0728      	lsls	r0, r5, #28
 8012d8e:	d5c1      	bpl.n	8012d14 <_strtod_l+0x84>
 8012d90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012d94:	e7be      	b.n	8012d14 <_strtod_l+0x84>
 8012d96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012d9a:	e7f7      	b.n	8012d8c <_strtod_l+0xfc>
 8012d9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012da0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012da6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012daa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012dae:	e7ed      	b.n	8012d8c <_strtod_l+0xfc>
 8012db0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012f38 <_strtod_l+0x2a8>
 8012db4:	f04f 0a00 	mov.w	sl, #0
 8012db8:	e7e8      	b.n	8012d8c <_strtod_l+0xfc>
 8012dba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012dbe:	f04f 3aff 	mov.w	sl, #4294967295
 8012dc2:	e7e3      	b.n	8012d8c <_strtod_l+0xfc>
 8012dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012dc6:	1c5a      	adds	r2, r3, #1
 8012dc8:	921d      	str	r2, [sp, #116]	; 0x74
 8012dca:	785b      	ldrb	r3, [r3, #1]
 8012dcc:	2b30      	cmp	r3, #48	; 0x30
 8012dce:	d0f9      	beq.n	8012dc4 <_strtod_l+0x134>
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d09f      	beq.n	8012d14 <_strtod_l+0x84>
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	f04f 0900 	mov.w	r9, #0
 8012dda:	9304      	str	r3, [sp, #16]
 8012ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012dde:	930a      	str	r3, [sp, #40]	; 0x28
 8012de0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012de4:	464f      	mov	r7, r9
 8012de6:	220a      	movs	r2, #10
 8012de8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012dea:	7806      	ldrb	r6, [r0, #0]
 8012dec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012df0:	b2d9      	uxtb	r1, r3
 8012df2:	2909      	cmp	r1, #9
 8012df4:	d92a      	bls.n	8012e4c <_strtod_l+0x1bc>
 8012df6:	9907      	ldr	r1, [sp, #28]
 8012df8:	462a      	mov	r2, r5
 8012dfa:	f7ff ff02 	bl	8012c02 <strncmp>
 8012dfe:	b398      	cbz	r0, 8012e68 <_strtod_l+0x1d8>
 8012e00:	2000      	movs	r0, #0
 8012e02:	4633      	mov	r3, r6
 8012e04:	463d      	mov	r5, r7
 8012e06:	9007      	str	r0, [sp, #28]
 8012e08:	4602      	mov	r2, r0
 8012e0a:	2b65      	cmp	r3, #101	; 0x65
 8012e0c:	d001      	beq.n	8012e12 <_strtod_l+0x182>
 8012e0e:	2b45      	cmp	r3, #69	; 0x45
 8012e10:	d118      	bne.n	8012e44 <_strtod_l+0x1b4>
 8012e12:	b91d      	cbnz	r5, 8012e1c <_strtod_l+0x18c>
 8012e14:	9b04      	ldr	r3, [sp, #16]
 8012e16:	4303      	orrs	r3, r0
 8012e18:	d098      	beq.n	8012d4c <_strtod_l+0xbc>
 8012e1a:	2500      	movs	r5, #0
 8012e1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012e20:	f108 0301 	add.w	r3, r8, #1
 8012e24:	931d      	str	r3, [sp, #116]	; 0x74
 8012e26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012e2a:	2b2b      	cmp	r3, #43	; 0x2b
 8012e2c:	d075      	beq.n	8012f1a <_strtod_l+0x28a>
 8012e2e:	2b2d      	cmp	r3, #45	; 0x2d
 8012e30:	d07b      	beq.n	8012f2a <_strtod_l+0x29a>
 8012e32:	f04f 0c00 	mov.w	ip, #0
 8012e36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012e3a:	2909      	cmp	r1, #9
 8012e3c:	f240 8082 	bls.w	8012f44 <_strtod_l+0x2b4>
 8012e40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012e44:	2600      	movs	r6, #0
 8012e46:	e09d      	b.n	8012f84 <_strtod_l+0x2f4>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e7c4      	b.n	8012dd6 <_strtod_l+0x146>
 8012e4c:	2f08      	cmp	r7, #8
 8012e4e:	bfd8      	it	le
 8012e50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012e52:	f100 0001 	add.w	r0, r0, #1
 8012e56:	bfda      	itte	le
 8012e58:	fb02 3301 	mlale	r3, r2, r1, r3
 8012e5c:	9309      	strle	r3, [sp, #36]	; 0x24
 8012e5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012e62:	3701      	adds	r7, #1
 8012e64:	901d      	str	r0, [sp, #116]	; 0x74
 8012e66:	e7bf      	b.n	8012de8 <_strtod_l+0x158>
 8012e68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e6a:	195a      	adds	r2, r3, r5
 8012e6c:	921d      	str	r2, [sp, #116]	; 0x74
 8012e6e:	5d5b      	ldrb	r3, [r3, r5]
 8012e70:	2f00      	cmp	r7, #0
 8012e72:	d037      	beq.n	8012ee4 <_strtod_l+0x254>
 8012e74:	9007      	str	r0, [sp, #28]
 8012e76:	463d      	mov	r5, r7
 8012e78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012e7c:	2a09      	cmp	r2, #9
 8012e7e:	d912      	bls.n	8012ea6 <_strtod_l+0x216>
 8012e80:	2201      	movs	r2, #1
 8012e82:	e7c2      	b.n	8012e0a <_strtod_l+0x17a>
 8012e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e86:	1c5a      	adds	r2, r3, #1
 8012e88:	921d      	str	r2, [sp, #116]	; 0x74
 8012e8a:	785b      	ldrb	r3, [r3, #1]
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	2b30      	cmp	r3, #48	; 0x30
 8012e90:	d0f8      	beq.n	8012e84 <_strtod_l+0x1f4>
 8012e92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012e96:	2a08      	cmp	r2, #8
 8012e98:	f200 84db 	bhi.w	8013852 <_strtod_l+0xbc2>
 8012e9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012e9e:	9007      	str	r0, [sp, #28]
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	920a      	str	r2, [sp, #40]	; 0x28
 8012ea4:	4605      	mov	r5, r0
 8012ea6:	3b30      	subs	r3, #48	; 0x30
 8012ea8:	f100 0201 	add.w	r2, r0, #1
 8012eac:	d014      	beq.n	8012ed8 <_strtod_l+0x248>
 8012eae:	9907      	ldr	r1, [sp, #28]
 8012eb0:	4411      	add	r1, r2
 8012eb2:	9107      	str	r1, [sp, #28]
 8012eb4:	462a      	mov	r2, r5
 8012eb6:	eb00 0e05 	add.w	lr, r0, r5
 8012eba:	210a      	movs	r1, #10
 8012ebc:	4572      	cmp	r2, lr
 8012ebe:	d113      	bne.n	8012ee8 <_strtod_l+0x258>
 8012ec0:	182a      	adds	r2, r5, r0
 8012ec2:	2a08      	cmp	r2, #8
 8012ec4:	f105 0501 	add.w	r5, r5, #1
 8012ec8:	4405      	add	r5, r0
 8012eca:	dc1c      	bgt.n	8012f06 <_strtod_l+0x276>
 8012ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ece:	220a      	movs	r2, #10
 8012ed0:	fb02 3301 	mla	r3, r2, r1, r3
 8012ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012eda:	1c59      	adds	r1, r3, #1
 8012edc:	911d      	str	r1, [sp, #116]	; 0x74
 8012ede:	785b      	ldrb	r3, [r3, #1]
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	e7c9      	b.n	8012e78 <_strtod_l+0x1e8>
 8012ee4:	4638      	mov	r0, r7
 8012ee6:	e7d2      	b.n	8012e8e <_strtod_l+0x1fe>
 8012ee8:	2a08      	cmp	r2, #8
 8012eea:	dc04      	bgt.n	8012ef6 <_strtod_l+0x266>
 8012eec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012eee:	434e      	muls	r6, r1
 8012ef0:	9609      	str	r6, [sp, #36]	; 0x24
 8012ef2:	3201      	adds	r2, #1
 8012ef4:	e7e2      	b.n	8012ebc <_strtod_l+0x22c>
 8012ef6:	f102 0c01 	add.w	ip, r2, #1
 8012efa:	f1bc 0f10 	cmp.w	ip, #16
 8012efe:	bfd8      	it	le
 8012f00:	fb01 f909 	mulle.w	r9, r1, r9
 8012f04:	e7f5      	b.n	8012ef2 <_strtod_l+0x262>
 8012f06:	2d10      	cmp	r5, #16
 8012f08:	bfdc      	itt	le
 8012f0a:	220a      	movle	r2, #10
 8012f0c:	fb02 3909 	mlale	r9, r2, r9, r3
 8012f10:	e7e1      	b.n	8012ed6 <_strtod_l+0x246>
 8012f12:	2300      	movs	r3, #0
 8012f14:	9307      	str	r3, [sp, #28]
 8012f16:	2201      	movs	r2, #1
 8012f18:	e77c      	b.n	8012e14 <_strtod_l+0x184>
 8012f1a:	f04f 0c00 	mov.w	ip, #0
 8012f1e:	f108 0302 	add.w	r3, r8, #2
 8012f22:	931d      	str	r3, [sp, #116]	; 0x74
 8012f24:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012f28:	e785      	b.n	8012e36 <_strtod_l+0x1a6>
 8012f2a:	f04f 0c01 	mov.w	ip, #1
 8012f2e:	e7f6      	b.n	8012f1e <_strtod_l+0x28e>
 8012f30:	0801cbc0 	.word	0x0801cbc0
 8012f34:	0801c9ec 	.word	0x0801c9ec
 8012f38:	7ff00000 	.word	0x7ff00000
 8012f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f3e:	1c59      	adds	r1, r3, #1
 8012f40:	911d      	str	r1, [sp, #116]	; 0x74
 8012f42:	785b      	ldrb	r3, [r3, #1]
 8012f44:	2b30      	cmp	r3, #48	; 0x30
 8012f46:	d0f9      	beq.n	8012f3c <_strtod_l+0x2ac>
 8012f48:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012f4c:	2908      	cmp	r1, #8
 8012f4e:	f63f af79 	bhi.w	8012e44 <_strtod_l+0x1b4>
 8012f52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012f56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f58:	9308      	str	r3, [sp, #32]
 8012f5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f5c:	1c59      	adds	r1, r3, #1
 8012f5e:	911d      	str	r1, [sp, #116]	; 0x74
 8012f60:	785b      	ldrb	r3, [r3, #1]
 8012f62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012f66:	2e09      	cmp	r6, #9
 8012f68:	d937      	bls.n	8012fda <_strtod_l+0x34a>
 8012f6a:	9e08      	ldr	r6, [sp, #32]
 8012f6c:	1b89      	subs	r1, r1, r6
 8012f6e:	2908      	cmp	r1, #8
 8012f70:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012f74:	dc02      	bgt.n	8012f7c <_strtod_l+0x2ec>
 8012f76:	4576      	cmp	r6, lr
 8012f78:	bfa8      	it	ge
 8012f7a:	4676      	movge	r6, lr
 8012f7c:	f1bc 0f00 	cmp.w	ip, #0
 8012f80:	d000      	beq.n	8012f84 <_strtod_l+0x2f4>
 8012f82:	4276      	negs	r6, r6
 8012f84:	2d00      	cmp	r5, #0
 8012f86:	d14f      	bne.n	8013028 <_strtod_l+0x398>
 8012f88:	9904      	ldr	r1, [sp, #16]
 8012f8a:	4301      	orrs	r1, r0
 8012f8c:	f47f aec2 	bne.w	8012d14 <_strtod_l+0x84>
 8012f90:	2a00      	cmp	r2, #0
 8012f92:	f47f aedb 	bne.w	8012d4c <_strtod_l+0xbc>
 8012f96:	2b69      	cmp	r3, #105	; 0x69
 8012f98:	d027      	beq.n	8012fea <_strtod_l+0x35a>
 8012f9a:	dc24      	bgt.n	8012fe6 <_strtod_l+0x356>
 8012f9c:	2b49      	cmp	r3, #73	; 0x49
 8012f9e:	d024      	beq.n	8012fea <_strtod_l+0x35a>
 8012fa0:	2b4e      	cmp	r3, #78	; 0x4e
 8012fa2:	f47f aed3 	bne.w	8012d4c <_strtod_l+0xbc>
 8012fa6:	499e      	ldr	r1, [pc, #632]	; (8013220 <_strtod_l+0x590>)
 8012fa8:	a81d      	add	r0, sp, #116	; 0x74
 8012faa:	f004 fde3 	bl	8017b74 <__match>
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	f43f aecc 	beq.w	8012d4c <_strtod_l+0xbc>
 8012fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	2b28      	cmp	r3, #40	; 0x28
 8012fba:	d12d      	bne.n	8013018 <_strtod_l+0x388>
 8012fbc:	4999      	ldr	r1, [pc, #612]	; (8013224 <_strtod_l+0x594>)
 8012fbe:	aa20      	add	r2, sp, #128	; 0x80
 8012fc0:	a81d      	add	r0, sp, #116	; 0x74
 8012fc2:	f004 fdeb 	bl	8017b9c <__hexnan>
 8012fc6:	2805      	cmp	r0, #5
 8012fc8:	d126      	bne.n	8013018 <_strtod_l+0x388>
 8012fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fcc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012fd0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012fd4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012fd8:	e69c      	b.n	8012d14 <_strtod_l+0x84>
 8012fda:	210a      	movs	r1, #10
 8012fdc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012fe0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012fe4:	e7b9      	b.n	8012f5a <_strtod_l+0x2ca>
 8012fe6:	2b6e      	cmp	r3, #110	; 0x6e
 8012fe8:	e7db      	b.n	8012fa2 <_strtod_l+0x312>
 8012fea:	498f      	ldr	r1, [pc, #572]	; (8013228 <_strtod_l+0x598>)
 8012fec:	a81d      	add	r0, sp, #116	; 0x74
 8012fee:	f004 fdc1 	bl	8017b74 <__match>
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	f43f aeaa 	beq.w	8012d4c <_strtod_l+0xbc>
 8012ff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ffa:	498c      	ldr	r1, [pc, #560]	; (801322c <_strtod_l+0x59c>)
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	a81d      	add	r0, sp, #116	; 0x74
 8013000:	931d      	str	r3, [sp, #116]	; 0x74
 8013002:	f004 fdb7 	bl	8017b74 <__match>
 8013006:	b910      	cbnz	r0, 801300e <_strtod_l+0x37e>
 8013008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801300a:	3301      	adds	r3, #1
 801300c:	931d      	str	r3, [sp, #116]	; 0x74
 801300e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801323c <_strtod_l+0x5ac>
 8013012:	f04f 0a00 	mov.w	sl, #0
 8013016:	e67d      	b.n	8012d14 <_strtod_l+0x84>
 8013018:	4885      	ldr	r0, [pc, #532]	; (8013230 <_strtod_l+0x5a0>)
 801301a:	f005 fb8d 	bl	8018738 <nan>
 801301e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013022:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013026:	e675      	b.n	8012d14 <_strtod_l+0x84>
 8013028:	9b07      	ldr	r3, [sp, #28]
 801302a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801302c:	1af3      	subs	r3, r6, r3
 801302e:	2f00      	cmp	r7, #0
 8013030:	bf08      	it	eq
 8013032:	462f      	moveq	r7, r5
 8013034:	2d10      	cmp	r5, #16
 8013036:	9308      	str	r3, [sp, #32]
 8013038:	46a8      	mov	r8, r5
 801303a:	bfa8      	it	ge
 801303c:	f04f 0810 	movge.w	r8, #16
 8013040:	f7ed fa80 	bl	8000544 <__aeabi_ui2d>
 8013044:	2d09      	cmp	r5, #9
 8013046:	4682      	mov	sl, r0
 8013048:	468b      	mov	fp, r1
 801304a:	dd13      	ble.n	8013074 <_strtod_l+0x3e4>
 801304c:	4b79      	ldr	r3, [pc, #484]	; (8013234 <_strtod_l+0x5a4>)
 801304e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013052:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013056:	f7ed faef 	bl	8000638 <__aeabi_dmul>
 801305a:	4682      	mov	sl, r0
 801305c:	4648      	mov	r0, r9
 801305e:	468b      	mov	fp, r1
 8013060:	f7ed fa70 	bl	8000544 <__aeabi_ui2d>
 8013064:	4602      	mov	r2, r0
 8013066:	460b      	mov	r3, r1
 8013068:	4650      	mov	r0, sl
 801306a:	4659      	mov	r1, fp
 801306c:	f7ed f92e 	bl	80002cc <__adddf3>
 8013070:	4682      	mov	sl, r0
 8013072:	468b      	mov	fp, r1
 8013074:	2d0f      	cmp	r5, #15
 8013076:	dc38      	bgt.n	80130ea <_strtod_l+0x45a>
 8013078:	9b08      	ldr	r3, [sp, #32]
 801307a:	2b00      	cmp	r3, #0
 801307c:	f43f ae4a 	beq.w	8012d14 <_strtod_l+0x84>
 8013080:	dd24      	ble.n	80130cc <_strtod_l+0x43c>
 8013082:	2b16      	cmp	r3, #22
 8013084:	dc0b      	bgt.n	801309e <_strtod_l+0x40e>
 8013086:	4d6b      	ldr	r5, [pc, #428]	; (8013234 <_strtod_l+0x5a4>)
 8013088:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801308c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013090:	4652      	mov	r2, sl
 8013092:	465b      	mov	r3, fp
 8013094:	f7ed fad0 	bl	8000638 <__aeabi_dmul>
 8013098:	4682      	mov	sl, r0
 801309a:	468b      	mov	fp, r1
 801309c:	e63a      	b.n	8012d14 <_strtod_l+0x84>
 801309e:	9a08      	ldr	r2, [sp, #32]
 80130a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80130a4:	4293      	cmp	r3, r2
 80130a6:	db20      	blt.n	80130ea <_strtod_l+0x45a>
 80130a8:	4c62      	ldr	r4, [pc, #392]	; (8013234 <_strtod_l+0x5a4>)
 80130aa:	f1c5 050f 	rsb	r5, r5, #15
 80130ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80130b2:	4652      	mov	r2, sl
 80130b4:	465b      	mov	r3, fp
 80130b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130ba:	f7ed fabd 	bl	8000638 <__aeabi_dmul>
 80130be:	9b08      	ldr	r3, [sp, #32]
 80130c0:	1b5d      	subs	r5, r3, r5
 80130c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80130c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80130ca:	e7e3      	b.n	8013094 <_strtod_l+0x404>
 80130cc:	9b08      	ldr	r3, [sp, #32]
 80130ce:	3316      	adds	r3, #22
 80130d0:	db0b      	blt.n	80130ea <_strtod_l+0x45a>
 80130d2:	9b07      	ldr	r3, [sp, #28]
 80130d4:	4a57      	ldr	r2, [pc, #348]	; (8013234 <_strtod_l+0x5a4>)
 80130d6:	1b9e      	subs	r6, r3, r6
 80130d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80130dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80130e0:	4650      	mov	r0, sl
 80130e2:	4659      	mov	r1, fp
 80130e4:	f7ed fbd2 	bl	800088c <__aeabi_ddiv>
 80130e8:	e7d6      	b.n	8013098 <_strtod_l+0x408>
 80130ea:	9b08      	ldr	r3, [sp, #32]
 80130ec:	eba5 0808 	sub.w	r8, r5, r8
 80130f0:	4498      	add	r8, r3
 80130f2:	f1b8 0f00 	cmp.w	r8, #0
 80130f6:	dd71      	ble.n	80131dc <_strtod_l+0x54c>
 80130f8:	f018 030f 	ands.w	r3, r8, #15
 80130fc:	d00a      	beq.n	8013114 <_strtod_l+0x484>
 80130fe:	494d      	ldr	r1, [pc, #308]	; (8013234 <_strtod_l+0x5a4>)
 8013100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013104:	4652      	mov	r2, sl
 8013106:	465b      	mov	r3, fp
 8013108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801310c:	f7ed fa94 	bl	8000638 <__aeabi_dmul>
 8013110:	4682      	mov	sl, r0
 8013112:	468b      	mov	fp, r1
 8013114:	f038 080f 	bics.w	r8, r8, #15
 8013118:	d04d      	beq.n	80131b6 <_strtod_l+0x526>
 801311a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801311e:	dd22      	ble.n	8013166 <_strtod_l+0x4d6>
 8013120:	2500      	movs	r5, #0
 8013122:	462e      	mov	r6, r5
 8013124:	9509      	str	r5, [sp, #36]	; 0x24
 8013126:	9507      	str	r5, [sp, #28]
 8013128:	2322      	movs	r3, #34	; 0x22
 801312a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801323c <_strtod_l+0x5ac>
 801312e:	6023      	str	r3, [r4, #0]
 8013130:	f04f 0a00 	mov.w	sl, #0
 8013134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013136:	2b00      	cmp	r3, #0
 8013138:	f43f adec 	beq.w	8012d14 <_strtod_l+0x84>
 801313c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801313e:	4620      	mov	r0, r4
 8013140:	f004 fe79 	bl	8017e36 <_Bfree>
 8013144:	9907      	ldr	r1, [sp, #28]
 8013146:	4620      	mov	r0, r4
 8013148:	f004 fe75 	bl	8017e36 <_Bfree>
 801314c:	4631      	mov	r1, r6
 801314e:	4620      	mov	r0, r4
 8013150:	f004 fe71 	bl	8017e36 <_Bfree>
 8013154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013156:	4620      	mov	r0, r4
 8013158:	f004 fe6d 	bl	8017e36 <_Bfree>
 801315c:	4629      	mov	r1, r5
 801315e:	4620      	mov	r0, r4
 8013160:	f004 fe69 	bl	8017e36 <_Bfree>
 8013164:	e5d6      	b.n	8012d14 <_strtod_l+0x84>
 8013166:	2300      	movs	r3, #0
 8013168:	ea4f 1828 	mov.w	r8, r8, asr #4
 801316c:	4650      	mov	r0, sl
 801316e:	4659      	mov	r1, fp
 8013170:	4699      	mov	r9, r3
 8013172:	f1b8 0f01 	cmp.w	r8, #1
 8013176:	dc21      	bgt.n	80131bc <_strtod_l+0x52c>
 8013178:	b10b      	cbz	r3, 801317e <_strtod_l+0x4ee>
 801317a:	4682      	mov	sl, r0
 801317c:	468b      	mov	fp, r1
 801317e:	4b2e      	ldr	r3, [pc, #184]	; (8013238 <_strtod_l+0x5a8>)
 8013180:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013184:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013188:	4652      	mov	r2, sl
 801318a:	465b      	mov	r3, fp
 801318c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013190:	f7ed fa52 	bl	8000638 <__aeabi_dmul>
 8013194:	4b29      	ldr	r3, [pc, #164]	; (801323c <_strtod_l+0x5ac>)
 8013196:	460a      	mov	r2, r1
 8013198:	400b      	ands	r3, r1
 801319a:	4929      	ldr	r1, [pc, #164]	; (8013240 <_strtod_l+0x5b0>)
 801319c:	428b      	cmp	r3, r1
 801319e:	4682      	mov	sl, r0
 80131a0:	d8be      	bhi.n	8013120 <_strtod_l+0x490>
 80131a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80131a6:	428b      	cmp	r3, r1
 80131a8:	bf86      	itte	hi
 80131aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013244 <_strtod_l+0x5b4>
 80131ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80131b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80131b6:	2300      	movs	r3, #0
 80131b8:	9304      	str	r3, [sp, #16]
 80131ba:	e081      	b.n	80132c0 <_strtod_l+0x630>
 80131bc:	f018 0f01 	tst.w	r8, #1
 80131c0:	d007      	beq.n	80131d2 <_strtod_l+0x542>
 80131c2:	4b1d      	ldr	r3, [pc, #116]	; (8013238 <_strtod_l+0x5a8>)
 80131c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80131c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131cc:	f7ed fa34 	bl	8000638 <__aeabi_dmul>
 80131d0:	2301      	movs	r3, #1
 80131d2:	f109 0901 	add.w	r9, r9, #1
 80131d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80131da:	e7ca      	b.n	8013172 <_strtod_l+0x4e2>
 80131dc:	d0eb      	beq.n	80131b6 <_strtod_l+0x526>
 80131de:	f1c8 0800 	rsb	r8, r8, #0
 80131e2:	f018 020f 	ands.w	r2, r8, #15
 80131e6:	d00a      	beq.n	80131fe <_strtod_l+0x56e>
 80131e8:	4b12      	ldr	r3, [pc, #72]	; (8013234 <_strtod_l+0x5a4>)
 80131ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131ee:	4650      	mov	r0, sl
 80131f0:	4659      	mov	r1, fp
 80131f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f6:	f7ed fb49 	bl	800088c <__aeabi_ddiv>
 80131fa:	4682      	mov	sl, r0
 80131fc:	468b      	mov	fp, r1
 80131fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013202:	d0d8      	beq.n	80131b6 <_strtod_l+0x526>
 8013204:	f1b8 0f1f 	cmp.w	r8, #31
 8013208:	dd1e      	ble.n	8013248 <_strtod_l+0x5b8>
 801320a:	2500      	movs	r5, #0
 801320c:	462e      	mov	r6, r5
 801320e:	9509      	str	r5, [sp, #36]	; 0x24
 8013210:	9507      	str	r5, [sp, #28]
 8013212:	2322      	movs	r3, #34	; 0x22
 8013214:	f04f 0a00 	mov.w	sl, #0
 8013218:	f04f 0b00 	mov.w	fp, #0
 801321c:	6023      	str	r3, [r4, #0]
 801321e:	e789      	b.n	8013134 <_strtod_l+0x4a4>
 8013220:	0801ca4d 	.word	0x0801ca4d
 8013224:	0801ca00 	.word	0x0801ca00
 8013228:	0801ca45 	.word	0x0801ca45
 801322c:	0801cae0 	.word	0x0801cae0
 8013230:	0801cd8f 	.word	0x0801cd8f
 8013234:	0801cc60 	.word	0x0801cc60
 8013238:	0801cc38 	.word	0x0801cc38
 801323c:	7ff00000 	.word	0x7ff00000
 8013240:	7ca00000 	.word	0x7ca00000
 8013244:	7fefffff 	.word	0x7fefffff
 8013248:	f018 0310 	ands.w	r3, r8, #16
 801324c:	bf18      	it	ne
 801324e:	236a      	movne	r3, #106	; 0x6a
 8013250:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013608 <_strtod_l+0x978>
 8013254:	9304      	str	r3, [sp, #16]
 8013256:	4650      	mov	r0, sl
 8013258:	4659      	mov	r1, fp
 801325a:	2300      	movs	r3, #0
 801325c:	f018 0f01 	tst.w	r8, #1
 8013260:	d004      	beq.n	801326c <_strtod_l+0x5dc>
 8013262:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013266:	f7ed f9e7 	bl	8000638 <__aeabi_dmul>
 801326a:	2301      	movs	r3, #1
 801326c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013270:	f109 0908 	add.w	r9, r9, #8
 8013274:	d1f2      	bne.n	801325c <_strtod_l+0x5cc>
 8013276:	b10b      	cbz	r3, 801327c <_strtod_l+0x5ec>
 8013278:	4682      	mov	sl, r0
 801327a:	468b      	mov	fp, r1
 801327c:	9b04      	ldr	r3, [sp, #16]
 801327e:	b1bb      	cbz	r3, 80132b0 <_strtod_l+0x620>
 8013280:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013284:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013288:	2b00      	cmp	r3, #0
 801328a:	4659      	mov	r1, fp
 801328c:	dd10      	ble.n	80132b0 <_strtod_l+0x620>
 801328e:	2b1f      	cmp	r3, #31
 8013290:	f340 8128 	ble.w	80134e4 <_strtod_l+0x854>
 8013294:	2b34      	cmp	r3, #52	; 0x34
 8013296:	bfde      	ittt	le
 8013298:	3b20      	suble	r3, #32
 801329a:	f04f 32ff 	movle.w	r2, #4294967295
 801329e:	fa02 f303 	lslle.w	r3, r2, r3
 80132a2:	f04f 0a00 	mov.w	sl, #0
 80132a6:	bfcc      	ite	gt
 80132a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80132ac:	ea03 0b01 	andle.w	fp, r3, r1
 80132b0:	2200      	movs	r2, #0
 80132b2:	2300      	movs	r3, #0
 80132b4:	4650      	mov	r0, sl
 80132b6:	4659      	mov	r1, fp
 80132b8:	f7ed fc26 	bl	8000b08 <__aeabi_dcmpeq>
 80132bc:	2800      	cmp	r0, #0
 80132be:	d1a4      	bne.n	801320a <_strtod_l+0x57a>
 80132c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132c2:	9300      	str	r3, [sp, #0]
 80132c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80132c6:	462b      	mov	r3, r5
 80132c8:	463a      	mov	r2, r7
 80132ca:	4620      	mov	r0, r4
 80132cc:	f004 fe06 	bl	8017edc <__s2b>
 80132d0:	9009      	str	r0, [sp, #36]	; 0x24
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f43f af24 	beq.w	8013120 <_strtod_l+0x490>
 80132d8:	9b07      	ldr	r3, [sp, #28]
 80132da:	1b9e      	subs	r6, r3, r6
 80132dc:	9b08      	ldr	r3, [sp, #32]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	bfb4      	ite	lt
 80132e2:	4633      	movlt	r3, r6
 80132e4:	2300      	movge	r3, #0
 80132e6:	9310      	str	r3, [sp, #64]	; 0x40
 80132e8:	9b08      	ldr	r3, [sp, #32]
 80132ea:	2500      	movs	r5, #0
 80132ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132f0:	9318      	str	r3, [sp, #96]	; 0x60
 80132f2:	462e      	mov	r6, r5
 80132f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f6:	4620      	mov	r0, r4
 80132f8:	6859      	ldr	r1, [r3, #4]
 80132fa:	f004 fd77 	bl	8017dec <_Balloc>
 80132fe:	9007      	str	r0, [sp, #28]
 8013300:	2800      	cmp	r0, #0
 8013302:	f43f af11 	beq.w	8013128 <_strtod_l+0x498>
 8013306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013308:	691a      	ldr	r2, [r3, #16]
 801330a:	3202      	adds	r2, #2
 801330c:	f103 010c 	add.w	r1, r3, #12
 8013310:	0092      	lsls	r2, r2, #2
 8013312:	300c      	adds	r0, #12
 8013314:	f7ff fba2 	bl	8012a5c <memcpy>
 8013318:	ec4b ab10 	vmov	d0, sl, fp
 801331c:	aa20      	add	r2, sp, #128	; 0x80
 801331e:	a91f      	add	r1, sp, #124	; 0x7c
 8013320:	4620      	mov	r0, r4
 8013322:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013326:	f005 f8fb 	bl	8018520 <__d2b>
 801332a:	901e      	str	r0, [sp, #120]	; 0x78
 801332c:	2800      	cmp	r0, #0
 801332e:	f43f aefb 	beq.w	8013128 <_strtod_l+0x498>
 8013332:	2101      	movs	r1, #1
 8013334:	4620      	mov	r0, r4
 8013336:	f004 fe6b 	bl	8018010 <__i2b>
 801333a:	4606      	mov	r6, r0
 801333c:	2800      	cmp	r0, #0
 801333e:	f43f aef3 	beq.w	8013128 <_strtod_l+0x498>
 8013342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013344:	9904      	ldr	r1, [sp, #16]
 8013346:	2b00      	cmp	r3, #0
 8013348:	bfab      	itete	ge
 801334a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801334c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801334e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013350:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8013354:	bfac      	ite	ge
 8013356:	eb03 0902 	addge.w	r9, r3, r2
 801335a:	1ad7      	sublt	r7, r2, r3
 801335c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801335e:	eba3 0801 	sub.w	r8, r3, r1
 8013362:	4490      	add	r8, r2
 8013364:	4ba3      	ldr	r3, [pc, #652]	; (80135f4 <_strtod_l+0x964>)
 8013366:	f108 38ff 	add.w	r8, r8, #4294967295
 801336a:	4598      	cmp	r8, r3
 801336c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013370:	f280 80cc 	bge.w	801350c <_strtod_l+0x87c>
 8013374:	eba3 0308 	sub.w	r3, r3, r8
 8013378:	2b1f      	cmp	r3, #31
 801337a:	eba2 0203 	sub.w	r2, r2, r3
 801337e:	f04f 0101 	mov.w	r1, #1
 8013382:	f300 80b6 	bgt.w	80134f2 <_strtod_l+0x862>
 8013386:	fa01 f303 	lsl.w	r3, r1, r3
 801338a:	9311      	str	r3, [sp, #68]	; 0x44
 801338c:	2300      	movs	r3, #0
 801338e:	930c      	str	r3, [sp, #48]	; 0x30
 8013390:	eb09 0802 	add.w	r8, r9, r2
 8013394:	9b04      	ldr	r3, [sp, #16]
 8013396:	45c1      	cmp	r9, r8
 8013398:	4417      	add	r7, r2
 801339a:	441f      	add	r7, r3
 801339c:	464b      	mov	r3, r9
 801339e:	bfa8      	it	ge
 80133a0:	4643      	movge	r3, r8
 80133a2:	42bb      	cmp	r3, r7
 80133a4:	bfa8      	it	ge
 80133a6:	463b      	movge	r3, r7
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	bfc2      	ittt	gt
 80133ac:	eba8 0803 	subgt.w	r8, r8, r3
 80133b0:	1aff      	subgt	r7, r7, r3
 80133b2:	eba9 0903 	subgt.w	r9, r9, r3
 80133b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	dd17      	ble.n	80133ec <_strtod_l+0x75c>
 80133bc:	4631      	mov	r1, r6
 80133be:	461a      	mov	r2, r3
 80133c0:	4620      	mov	r0, r4
 80133c2:	f004 fee1 	bl	8018188 <__pow5mult>
 80133c6:	4606      	mov	r6, r0
 80133c8:	2800      	cmp	r0, #0
 80133ca:	f43f aead 	beq.w	8013128 <_strtod_l+0x498>
 80133ce:	4601      	mov	r1, r0
 80133d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80133d2:	4620      	mov	r0, r4
 80133d4:	f004 fe32 	bl	801803c <__multiply>
 80133d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80133da:	2800      	cmp	r0, #0
 80133dc:	f43f aea4 	beq.w	8013128 <_strtod_l+0x498>
 80133e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80133e2:	4620      	mov	r0, r4
 80133e4:	f004 fd27 	bl	8017e36 <_Bfree>
 80133e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133ea:	931e      	str	r3, [sp, #120]	; 0x78
 80133ec:	f1b8 0f00 	cmp.w	r8, #0
 80133f0:	f300 8091 	bgt.w	8013516 <_strtod_l+0x886>
 80133f4:	9b08      	ldr	r3, [sp, #32]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	dd08      	ble.n	801340c <_strtod_l+0x77c>
 80133fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80133fc:	9907      	ldr	r1, [sp, #28]
 80133fe:	4620      	mov	r0, r4
 8013400:	f004 fec2 	bl	8018188 <__pow5mult>
 8013404:	9007      	str	r0, [sp, #28]
 8013406:	2800      	cmp	r0, #0
 8013408:	f43f ae8e 	beq.w	8013128 <_strtod_l+0x498>
 801340c:	2f00      	cmp	r7, #0
 801340e:	dd08      	ble.n	8013422 <_strtod_l+0x792>
 8013410:	9907      	ldr	r1, [sp, #28]
 8013412:	463a      	mov	r2, r7
 8013414:	4620      	mov	r0, r4
 8013416:	f004 fef7 	bl	8018208 <__lshift>
 801341a:	9007      	str	r0, [sp, #28]
 801341c:	2800      	cmp	r0, #0
 801341e:	f43f ae83 	beq.w	8013128 <_strtod_l+0x498>
 8013422:	f1b9 0f00 	cmp.w	r9, #0
 8013426:	dd08      	ble.n	801343a <_strtod_l+0x7aa>
 8013428:	4631      	mov	r1, r6
 801342a:	464a      	mov	r2, r9
 801342c:	4620      	mov	r0, r4
 801342e:	f004 feeb 	bl	8018208 <__lshift>
 8013432:	4606      	mov	r6, r0
 8013434:	2800      	cmp	r0, #0
 8013436:	f43f ae77 	beq.w	8013128 <_strtod_l+0x498>
 801343a:	9a07      	ldr	r2, [sp, #28]
 801343c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801343e:	4620      	mov	r0, r4
 8013440:	f004 ff6a 	bl	8018318 <__mdiff>
 8013444:	4605      	mov	r5, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	f43f ae6e 	beq.w	8013128 <_strtod_l+0x498>
 801344c:	68c3      	ldr	r3, [r0, #12]
 801344e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013450:	2300      	movs	r3, #0
 8013452:	60c3      	str	r3, [r0, #12]
 8013454:	4631      	mov	r1, r6
 8013456:	f004 ff43 	bl	80182e0 <__mcmp>
 801345a:	2800      	cmp	r0, #0
 801345c:	da65      	bge.n	801352a <_strtod_l+0x89a>
 801345e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013460:	ea53 030a 	orrs.w	r3, r3, sl
 8013464:	f040 8087 	bne.w	8013576 <_strtod_l+0x8e6>
 8013468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801346c:	2b00      	cmp	r3, #0
 801346e:	f040 8082 	bne.w	8013576 <_strtod_l+0x8e6>
 8013472:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013476:	0d1b      	lsrs	r3, r3, #20
 8013478:	051b      	lsls	r3, r3, #20
 801347a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801347e:	d97a      	bls.n	8013576 <_strtod_l+0x8e6>
 8013480:	696b      	ldr	r3, [r5, #20]
 8013482:	b913      	cbnz	r3, 801348a <_strtod_l+0x7fa>
 8013484:	692b      	ldr	r3, [r5, #16]
 8013486:	2b01      	cmp	r3, #1
 8013488:	dd75      	ble.n	8013576 <_strtod_l+0x8e6>
 801348a:	4629      	mov	r1, r5
 801348c:	2201      	movs	r2, #1
 801348e:	4620      	mov	r0, r4
 8013490:	f004 feba 	bl	8018208 <__lshift>
 8013494:	4631      	mov	r1, r6
 8013496:	4605      	mov	r5, r0
 8013498:	f004 ff22 	bl	80182e0 <__mcmp>
 801349c:	2800      	cmp	r0, #0
 801349e:	dd6a      	ble.n	8013576 <_strtod_l+0x8e6>
 80134a0:	9904      	ldr	r1, [sp, #16]
 80134a2:	4a55      	ldr	r2, [pc, #340]	; (80135f8 <_strtod_l+0x968>)
 80134a4:	465b      	mov	r3, fp
 80134a6:	2900      	cmp	r1, #0
 80134a8:	f000 8085 	beq.w	80135b6 <_strtod_l+0x926>
 80134ac:	ea02 010b 	and.w	r1, r2, fp
 80134b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80134b4:	dc7f      	bgt.n	80135b6 <_strtod_l+0x926>
 80134b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80134ba:	f77f aeaa 	ble.w	8013212 <_strtod_l+0x582>
 80134be:	4a4f      	ldr	r2, [pc, #316]	; (80135fc <_strtod_l+0x96c>)
 80134c0:	2300      	movs	r3, #0
 80134c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80134c6:	4650      	mov	r0, sl
 80134c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80134cc:	4659      	mov	r1, fp
 80134ce:	f7ed f8b3 	bl	8000638 <__aeabi_dmul>
 80134d2:	460b      	mov	r3, r1
 80134d4:	4303      	orrs	r3, r0
 80134d6:	bf08      	it	eq
 80134d8:	2322      	moveq	r3, #34	; 0x22
 80134da:	4682      	mov	sl, r0
 80134dc:	468b      	mov	fp, r1
 80134de:	bf08      	it	eq
 80134e0:	6023      	streq	r3, [r4, #0]
 80134e2:	e62b      	b.n	801313c <_strtod_l+0x4ac>
 80134e4:	f04f 32ff 	mov.w	r2, #4294967295
 80134e8:	fa02 f303 	lsl.w	r3, r2, r3
 80134ec:	ea03 0a0a 	and.w	sl, r3, sl
 80134f0:	e6de      	b.n	80132b0 <_strtod_l+0x620>
 80134f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80134f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80134fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80134fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013502:	fa01 f308 	lsl.w	r3, r1, r8
 8013506:	930c      	str	r3, [sp, #48]	; 0x30
 8013508:	9111      	str	r1, [sp, #68]	; 0x44
 801350a:	e741      	b.n	8013390 <_strtod_l+0x700>
 801350c:	2300      	movs	r3, #0
 801350e:	930c      	str	r3, [sp, #48]	; 0x30
 8013510:	2301      	movs	r3, #1
 8013512:	9311      	str	r3, [sp, #68]	; 0x44
 8013514:	e73c      	b.n	8013390 <_strtod_l+0x700>
 8013516:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013518:	4642      	mov	r2, r8
 801351a:	4620      	mov	r0, r4
 801351c:	f004 fe74 	bl	8018208 <__lshift>
 8013520:	901e      	str	r0, [sp, #120]	; 0x78
 8013522:	2800      	cmp	r0, #0
 8013524:	f47f af66 	bne.w	80133f4 <_strtod_l+0x764>
 8013528:	e5fe      	b.n	8013128 <_strtod_l+0x498>
 801352a:	465f      	mov	r7, fp
 801352c:	d16e      	bne.n	801360c <_strtod_l+0x97c>
 801352e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013534:	b342      	cbz	r2, 8013588 <_strtod_l+0x8f8>
 8013536:	4a32      	ldr	r2, [pc, #200]	; (8013600 <_strtod_l+0x970>)
 8013538:	4293      	cmp	r3, r2
 801353a:	d128      	bne.n	801358e <_strtod_l+0x8fe>
 801353c:	9b04      	ldr	r3, [sp, #16]
 801353e:	4650      	mov	r0, sl
 8013540:	b1eb      	cbz	r3, 801357e <_strtod_l+0x8ee>
 8013542:	4a2d      	ldr	r2, [pc, #180]	; (80135f8 <_strtod_l+0x968>)
 8013544:	403a      	ands	r2, r7
 8013546:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801354a:	f04f 31ff 	mov.w	r1, #4294967295
 801354e:	d819      	bhi.n	8013584 <_strtod_l+0x8f4>
 8013550:	0d12      	lsrs	r2, r2, #20
 8013552:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013556:	fa01 f303 	lsl.w	r3, r1, r3
 801355a:	4298      	cmp	r0, r3
 801355c:	d117      	bne.n	801358e <_strtod_l+0x8fe>
 801355e:	4b29      	ldr	r3, [pc, #164]	; (8013604 <_strtod_l+0x974>)
 8013560:	429f      	cmp	r7, r3
 8013562:	d102      	bne.n	801356a <_strtod_l+0x8da>
 8013564:	3001      	adds	r0, #1
 8013566:	f43f addf 	beq.w	8013128 <_strtod_l+0x498>
 801356a:	4b23      	ldr	r3, [pc, #140]	; (80135f8 <_strtod_l+0x968>)
 801356c:	403b      	ands	r3, r7
 801356e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013572:	f04f 0a00 	mov.w	sl, #0
 8013576:	9b04      	ldr	r3, [sp, #16]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d1a0      	bne.n	80134be <_strtod_l+0x82e>
 801357c:	e5de      	b.n	801313c <_strtod_l+0x4ac>
 801357e:	f04f 33ff 	mov.w	r3, #4294967295
 8013582:	e7ea      	b.n	801355a <_strtod_l+0x8ca>
 8013584:	460b      	mov	r3, r1
 8013586:	e7e8      	b.n	801355a <_strtod_l+0x8ca>
 8013588:	ea53 030a 	orrs.w	r3, r3, sl
 801358c:	d088      	beq.n	80134a0 <_strtod_l+0x810>
 801358e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013590:	b1db      	cbz	r3, 80135ca <_strtod_l+0x93a>
 8013592:	423b      	tst	r3, r7
 8013594:	d0ef      	beq.n	8013576 <_strtod_l+0x8e6>
 8013596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013598:	9a04      	ldr	r2, [sp, #16]
 801359a:	4650      	mov	r0, sl
 801359c:	4659      	mov	r1, fp
 801359e:	b1c3      	cbz	r3, 80135d2 <_strtod_l+0x942>
 80135a0:	f7ff fb58 	bl	8012c54 <sulp>
 80135a4:	4602      	mov	r2, r0
 80135a6:	460b      	mov	r3, r1
 80135a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80135ac:	f7ec fe8e 	bl	80002cc <__adddf3>
 80135b0:	4682      	mov	sl, r0
 80135b2:	468b      	mov	fp, r1
 80135b4:	e7df      	b.n	8013576 <_strtod_l+0x8e6>
 80135b6:	4013      	ands	r3, r2
 80135b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80135bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80135c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80135c4:	f04f 3aff 	mov.w	sl, #4294967295
 80135c8:	e7d5      	b.n	8013576 <_strtod_l+0x8e6>
 80135ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80135cc:	ea13 0f0a 	tst.w	r3, sl
 80135d0:	e7e0      	b.n	8013594 <_strtod_l+0x904>
 80135d2:	f7ff fb3f 	bl	8012c54 <sulp>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80135de:	f7ec fe73 	bl	80002c8 <__aeabi_dsub>
 80135e2:	2200      	movs	r2, #0
 80135e4:	2300      	movs	r3, #0
 80135e6:	4682      	mov	sl, r0
 80135e8:	468b      	mov	fp, r1
 80135ea:	f7ed fa8d 	bl	8000b08 <__aeabi_dcmpeq>
 80135ee:	2800      	cmp	r0, #0
 80135f0:	d0c1      	beq.n	8013576 <_strtod_l+0x8e6>
 80135f2:	e60e      	b.n	8013212 <_strtod_l+0x582>
 80135f4:	fffffc02 	.word	0xfffffc02
 80135f8:	7ff00000 	.word	0x7ff00000
 80135fc:	39500000 	.word	0x39500000
 8013600:	000fffff 	.word	0x000fffff
 8013604:	7fefffff 	.word	0x7fefffff
 8013608:	0801ca18 	.word	0x0801ca18
 801360c:	4631      	mov	r1, r6
 801360e:	4628      	mov	r0, r5
 8013610:	f004 ffe2 	bl	80185d8 <__ratio>
 8013614:	ec59 8b10 	vmov	r8, r9, d0
 8013618:	ee10 0a10 	vmov	r0, s0
 801361c:	2200      	movs	r2, #0
 801361e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013622:	4649      	mov	r1, r9
 8013624:	f7ed fa84 	bl	8000b30 <__aeabi_dcmple>
 8013628:	2800      	cmp	r0, #0
 801362a:	d07c      	beq.n	8013726 <_strtod_l+0xa96>
 801362c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801362e:	2b00      	cmp	r3, #0
 8013630:	d04c      	beq.n	80136cc <_strtod_l+0xa3c>
 8013632:	4b95      	ldr	r3, [pc, #596]	; (8013888 <_strtod_l+0xbf8>)
 8013634:	2200      	movs	r2, #0
 8013636:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801363a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013888 <_strtod_l+0xbf8>
 801363e:	f04f 0800 	mov.w	r8, #0
 8013642:	4b92      	ldr	r3, [pc, #584]	; (801388c <_strtod_l+0xbfc>)
 8013644:	403b      	ands	r3, r7
 8013646:	9311      	str	r3, [sp, #68]	; 0x44
 8013648:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801364a:	4b91      	ldr	r3, [pc, #580]	; (8013890 <_strtod_l+0xc00>)
 801364c:	429a      	cmp	r2, r3
 801364e:	f040 80b2 	bne.w	80137b6 <_strtod_l+0xb26>
 8013652:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801365a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801365e:	ec4b ab10 	vmov	d0, sl, fp
 8013662:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013666:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801366a:	f004 fedd 	bl	8018428 <__ulp>
 801366e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013672:	ec53 2b10 	vmov	r2, r3, d0
 8013676:	f7ec ffdf 	bl	8000638 <__aeabi_dmul>
 801367a:	4652      	mov	r2, sl
 801367c:	465b      	mov	r3, fp
 801367e:	f7ec fe25 	bl	80002cc <__adddf3>
 8013682:	460b      	mov	r3, r1
 8013684:	4981      	ldr	r1, [pc, #516]	; (801388c <_strtod_l+0xbfc>)
 8013686:	4a83      	ldr	r2, [pc, #524]	; (8013894 <_strtod_l+0xc04>)
 8013688:	4019      	ands	r1, r3
 801368a:	4291      	cmp	r1, r2
 801368c:	4682      	mov	sl, r0
 801368e:	d95e      	bls.n	801374e <_strtod_l+0xabe>
 8013690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013692:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013696:	4293      	cmp	r3, r2
 8013698:	d103      	bne.n	80136a2 <_strtod_l+0xa12>
 801369a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801369c:	3301      	adds	r3, #1
 801369e:	f43f ad43 	beq.w	8013128 <_strtod_l+0x498>
 80136a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80138a0 <_strtod_l+0xc10>
 80136a6:	f04f 3aff 	mov.w	sl, #4294967295
 80136aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80136ac:	4620      	mov	r0, r4
 80136ae:	f004 fbc2 	bl	8017e36 <_Bfree>
 80136b2:	9907      	ldr	r1, [sp, #28]
 80136b4:	4620      	mov	r0, r4
 80136b6:	f004 fbbe 	bl	8017e36 <_Bfree>
 80136ba:	4631      	mov	r1, r6
 80136bc:	4620      	mov	r0, r4
 80136be:	f004 fbba 	bl	8017e36 <_Bfree>
 80136c2:	4629      	mov	r1, r5
 80136c4:	4620      	mov	r0, r4
 80136c6:	f004 fbb6 	bl	8017e36 <_Bfree>
 80136ca:	e613      	b.n	80132f4 <_strtod_l+0x664>
 80136cc:	f1ba 0f00 	cmp.w	sl, #0
 80136d0:	d11b      	bne.n	801370a <_strtod_l+0xa7a>
 80136d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136d6:	b9f3      	cbnz	r3, 8013716 <_strtod_l+0xa86>
 80136d8:	4b6b      	ldr	r3, [pc, #428]	; (8013888 <_strtod_l+0xbf8>)
 80136da:	2200      	movs	r2, #0
 80136dc:	4640      	mov	r0, r8
 80136de:	4649      	mov	r1, r9
 80136e0:	f7ed fa1c 	bl	8000b1c <__aeabi_dcmplt>
 80136e4:	b9d0      	cbnz	r0, 801371c <_strtod_l+0xa8c>
 80136e6:	4640      	mov	r0, r8
 80136e8:	4649      	mov	r1, r9
 80136ea:	4b6b      	ldr	r3, [pc, #428]	; (8013898 <_strtod_l+0xc08>)
 80136ec:	2200      	movs	r2, #0
 80136ee:	f7ec ffa3 	bl	8000638 <__aeabi_dmul>
 80136f2:	4680      	mov	r8, r0
 80136f4:	4689      	mov	r9, r1
 80136f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80136fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80136fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8013700:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013704:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013708:	e79b      	b.n	8013642 <_strtod_l+0x9b2>
 801370a:	f1ba 0f01 	cmp.w	sl, #1
 801370e:	d102      	bne.n	8013716 <_strtod_l+0xa86>
 8013710:	2f00      	cmp	r7, #0
 8013712:	f43f ad7e 	beq.w	8013212 <_strtod_l+0x582>
 8013716:	4b61      	ldr	r3, [pc, #388]	; (801389c <_strtod_l+0xc0c>)
 8013718:	2200      	movs	r2, #0
 801371a:	e78c      	b.n	8013636 <_strtod_l+0x9a6>
 801371c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013898 <_strtod_l+0xc08>
 8013720:	f04f 0800 	mov.w	r8, #0
 8013724:	e7e7      	b.n	80136f6 <_strtod_l+0xa66>
 8013726:	4b5c      	ldr	r3, [pc, #368]	; (8013898 <_strtod_l+0xc08>)
 8013728:	4640      	mov	r0, r8
 801372a:	4649      	mov	r1, r9
 801372c:	2200      	movs	r2, #0
 801372e:	f7ec ff83 	bl	8000638 <__aeabi_dmul>
 8013732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013734:	4680      	mov	r8, r0
 8013736:	4689      	mov	r9, r1
 8013738:	b933      	cbnz	r3, 8013748 <_strtod_l+0xab8>
 801373a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801373e:	9012      	str	r0, [sp, #72]	; 0x48
 8013740:	9313      	str	r3, [sp, #76]	; 0x4c
 8013742:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013746:	e7dd      	b.n	8013704 <_strtod_l+0xa74>
 8013748:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801374c:	e7f9      	b.n	8013742 <_strtod_l+0xab2>
 801374e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013752:	9b04      	ldr	r3, [sp, #16]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d1a8      	bne.n	80136aa <_strtod_l+0xa1a>
 8013758:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801375c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801375e:	0d1b      	lsrs	r3, r3, #20
 8013760:	051b      	lsls	r3, r3, #20
 8013762:	429a      	cmp	r2, r3
 8013764:	d1a1      	bne.n	80136aa <_strtod_l+0xa1a>
 8013766:	4640      	mov	r0, r8
 8013768:	4649      	mov	r1, r9
 801376a:	f7ed fac5 	bl	8000cf8 <__aeabi_d2lz>
 801376e:	f7ec ff35 	bl	80005dc <__aeabi_l2d>
 8013772:	4602      	mov	r2, r0
 8013774:	460b      	mov	r3, r1
 8013776:	4640      	mov	r0, r8
 8013778:	4649      	mov	r1, r9
 801377a:	f7ec fda5 	bl	80002c8 <__aeabi_dsub>
 801377e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013784:	ea43 030a 	orr.w	r3, r3, sl
 8013788:	4313      	orrs	r3, r2
 801378a:	4680      	mov	r8, r0
 801378c:	4689      	mov	r9, r1
 801378e:	d053      	beq.n	8013838 <_strtod_l+0xba8>
 8013790:	a335      	add	r3, pc, #212	; (adr r3, 8013868 <_strtod_l+0xbd8>)
 8013792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013796:	f7ed f9c1 	bl	8000b1c <__aeabi_dcmplt>
 801379a:	2800      	cmp	r0, #0
 801379c:	f47f acce 	bne.w	801313c <_strtod_l+0x4ac>
 80137a0:	a333      	add	r3, pc, #204	; (adr r3, 8013870 <_strtod_l+0xbe0>)
 80137a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a6:	4640      	mov	r0, r8
 80137a8:	4649      	mov	r1, r9
 80137aa:	f7ed f9d5 	bl	8000b58 <__aeabi_dcmpgt>
 80137ae:	2800      	cmp	r0, #0
 80137b0:	f43f af7b 	beq.w	80136aa <_strtod_l+0xa1a>
 80137b4:	e4c2      	b.n	801313c <_strtod_l+0x4ac>
 80137b6:	9b04      	ldr	r3, [sp, #16]
 80137b8:	b333      	cbz	r3, 8013808 <_strtod_l+0xb78>
 80137ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80137c0:	d822      	bhi.n	8013808 <_strtod_l+0xb78>
 80137c2:	a32d      	add	r3, pc, #180	; (adr r3, 8013878 <_strtod_l+0xbe8>)
 80137c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c8:	4640      	mov	r0, r8
 80137ca:	4649      	mov	r1, r9
 80137cc:	f7ed f9b0 	bl	8000b30 <__aeabi_dcmple>
 80137d0:	b1a0      	cbz	r0, 80137fc <_strtod_l+0xb6c>
 80137d2:	4649      	mov	r1, r9
 80137d4:	4640      	mov	r0, r8
 80137d6:	f7ed fa07 	bl	8000be8 <__aeabi_d2uiz>
 80137da:	2801      	cmp	r0, #1
 80137dc:	bf38      	it	cc
 80137de:	2001      	movcc	r0, #1
 80137e0:	f7ec feb0 	bl	8000544 <__aeabi_ui2d>
 80137e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137e6:	4680      	mov	r8, r0
 80137e8:	4689      	mov	r9, r1
 80137ea:	bb13      	cbnz	r3, 8013832 <_strtod_l+0xba2>
 80137ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137f0:	9014      	str	r0, [sp, #80]	; 0x50
 80137f2:	9315      	str	r3, [sp, #84]	; 0x54
 80137f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80137f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80137fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013800:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013804:	1a9b      	subs	r3, r3, r2
 8013806:	930d      	str	r3, [sp, #52]	; 0x34
 8013808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801380c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013814:	f004 fe08 	bl	8018428 <__ulp>
 8013818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801381c:	ec53 2b10 	vmov	r2, r3, d0
 8013820:	f7ec ff0a 	bl	8000638 <__aeabi_dmul>
 8013824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013828:	f7ec fd50 	bl	80002cc <__adddf3>
 801382c:	4682      	mov	sl, r0
 801382e:	468b      	mov	fp, r1
 8013830:	e78f      	b.n	8013752 <_strtod_l+0xac2>
 8013832:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013836:	e7dd      	b.n	80137f4 <_strtod_l+0xb64>
 8013838:	a311      	add	r3, pc, #68	; (adr r3, 8013880 <_strtod_l+0xbf0>)
 801383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383e:	f7ed f96d 	bl	8000b1c <__aeabi_dcmplt>
 8013842:	e7b4      	b.n	80137ae <_strtod_l+0xb1e>
 8013844:	2300      	movs	r3, #0
 8013846:	930e      	str	r3, [sp, #56]	; 0x38
 8013848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801384a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801384c:	6013      	str	r3, [r2, #0]
 801384e:	f7ff ba65 	b.w	8012d1c <_strtod_l+0x8c>
 8013852:	2b65      	cmp	r3, #101	; 0x65
 8013854:	f43f ab5d 	beq.w	8012f12 <_strtod_l+0x282>
 8013858:	2b45      	cmp	r3, #69	; 0x45
 801385a:	f43f ab5a 	beq.w	8012f12 <_strtod_l+0x282>
 801385e:	2201      	movs	r2, #1
 8013860:	f7ff bb92 	b.w	8012f88 <_strtod_l+0x2f8>
 8013864:	f3af 8000 	nop.w
 8013868:	94a03595 	.word	0x94a03595
 801386c:	3fdfffff 	.word	0x3fdfffff
 8013870:	35afe535 	.word	0x35afe535
 8013874:	3fe00000 	.word	0x3fe00000
 8013878:	ffc00000 	.word	0xffc00000
 801387c:	41dfffff 	.word	0x41dfffff
 8013880:	94a03595 	.word	0x94a03595
 8013884:	3fcfffff 	.word	0x3fcfffff
 8013888:	3ff00000 	.word	0x3ff00000
 801388c:	7ff00000 	.word	0x7ff00000
 8013890:	7fe00000 	.word	0x7fe00000
 8013894:	7c9fffff 	.word	0x7c9fffff
 8013898:	3fe00000 	.word	0x3fe00000
 801389c:	bff00000 	.word	0xbff00000
 80138a0:	7fefffff 	.word	0x7fefffff

080138a4 <strtod>:
 80138a4:	460a      	mov	r2, r1
 80138a6:	4601      	mov	r1, r0
 80138a8:	4802      	ldr	r0, [pc, #8]	; (80138b4 <strtod+0x10>)
 80138aa:	4b03      	ldr	r3, [pc, #12]	; (80138b8 <strtod+0x14>)
 80138ac:	6800      	ldr	r0, [r0, #0]
 80138ae:	f7ff b9ef 	b.w	8012c90 <_strtod_l>
 80138b2:	bf00      	nop
 80138b4:	200029bc 	.word	0x200029bc
 80138b8:	20003200 	.word	0x20003200

080138bc <strtok>:
 80138bc:	4b02      	ldr	r3, [pc, #8]	; (80138c8 <strtok+0xc>)
 80138be:	681a      	ldr	r2, [r3, #0]
 80138c0:	2301      	movs	r3, #1
 80138c2:	325c      	adds	r2, #92	; 0x5c
 80138c4:	f000 b802 	b.w	80138cc <__strtok_r>
 80138c8:	200029bc 	.word	0x200029bc

080138cc <__strtok_r>:
 80138cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ce:	b908      	cbnz	r0, 80138d4 <__strtok_r+0x8>
 80138d0:	6810      	ldr	r0, [r2, #0]
 80138d2:	b188      	cbz	r0, 80138f8 <__strtok_r+0x2c>
 80138d4:	4604      	mov	r4, r0
 80138d6:	4620      	mov	r0, r4
 80138d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80138dc:	460f      	mov	r7, r1
 80138de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80138e2:	b91e      	cbnz	r6, 80138ec <__strtok_r+0x20>
 80138e4:	b965      	cbnz	r5, 8013900 <__strtok_r+0x34>
 80138e6:	6015      	str	r5, [r2, #0]
 80138e8:	4628      	mov	r0, r5
 80138ea:	e005      	b.n	80138f8 <__strtok_r+0x2c>
 80138ec:	42b5      	cmp	r5, r6
 80138ee:	d1f6      	bne.n	80138de <__strtok_r+0x12>
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d1f0      	bne.n	80138d6 <__strtok_r+0xa>
 80138f4:	6014      	str	r4, [r2, #0]
 80138f6:	7003      	strb	r3, [r0, #0]
 80138f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138fa:	461c      	mov	r4, r3
 80138fc:	e00c      	b.n	8013918 <__strtok_r+0x4c>
 80138fe:	b915      	cbnz	r5, 8013906 <__strtok_r+0x3a>
 8013900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013904:	460e      	mov	r6, r1
 8013906:	f816 5b01 	ldrb.w	r5, [r6], #1
 801390a:	42ab      	cmp	r3, r5
 801390c:	d1f7      	bne.n	80138fe <__strtok_r+0x32>
 801390e:	2b00      	cmp	r3, #0
 8013910:	d0f3      	beq.n	80138fa <__strtok_r+0x2e>
 8013912:	2300      	movs	r3, #0
 8013914:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013918:	6014      	str	r4, [r2, #0]
 801391a:	e7ed      	b.n	80138f8 <__strtok_r+0x2c>

0801391c <_strtol_l.isra.0>:
 801391c:	2b01      	cmp	r3, #1
 801391e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013922:	d001      	beq.n	8013928 <_strtol_l.isra.0+0xc>
 8013924:	2b24      	cmp	r3, #36	; 0x24
 8013926:	d906      	bls.n	8013936 <_strtol_l.isra.0+0x1a>
 8013928:	f003 fbf6 	bl	8017118 <__errno>
 801392c:	2316      	movs	r3, #22
 801392e:	6003      	str	r3, [r0, #0]
 8013930:	2000      	movs	r0, #0
 8013932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013936:	4f3a      	ldr	r7, [pc, #232]	; (8013a20 <_strtol_l.isra.0+0x104>)
 8013938:	468e      	mov	lr, r1
 801393a:	4676      	mov	r6, lr
 801393c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013940:	5de5      	ldrb	r5, [r4, r7]
 8013942:	f015 0508 	ands.w	r5, r5, #8
 8013946:	d1f8      	bne.n	801393a <_strtol_l.isra.0+0x1e>
 8013948:	2c2d      	cmp	r4, #45	; 0x2d
 801394a:	d134      	bne.n	80139b6 <_strtol_l.isra.0+0x9a>
 801394c:	f89e 4000 	ldrb.w	r4, [lr]
 8013950:	f04f 0801 	mov.w	r8, #1
 8013954:	f106 0e02 	add.w	lr, r6, #2
 8013958:	2b00      	cmp	r3, #0
 801395a:	d05c      	beq.n	8013a16 <_strtol_l.isra.0+0xfa>
 801395c:	2b10      	cmp	r3, #16
 801395e:	d10c      	bne.n	801397a <_strtol_l.isra.0+0x5e>
 8013960:	2c30      	cmp	r4, #48	; 0x30
 8013962:	d10a      	bne.n	801397a <_strtol_l.isra.0+0x5e>
 8013964:	f89e 4000 	ldrb.w	r4, [lr]
 8013968:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801396c:	2c58      	cmp	r4, #88	; 0x58
 801396e:	d14d      	bne.n	8013a0c <_strtol_l.isra.0+0xf0>
 8013970:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013974:	2310      	movs	r3, #16
 8013976:	f10e 0e02 	add.w	lr, lr, #2
 801397a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801397e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013982:	2600      	movs	r6, #0
 8013984:	fbbc f9f3 	udiv	r9, ip, r3
 8013988:	4635      	mov	r5, r6
 801398a:	fb03 ca19 	mls	sl, r3, r9, ip
 801398e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013992:	2f09      	cmp	r7, #9
 8013994:	d818      	bhi.n	80139c8 <_strtol_l.isra.0+0xac>
 8013996:	463c      	mov	r4, r7
 8013998:	42a3      	cmp	r3, r4
 801399a:	dd24      	ble.n	80139e6 <_strtol_l.isra.0+0xca>
 801399c:	2e00      	cmp	r6, #0
 801399e:	db1f      	blt.n	80139e0 <_strtol_l.isra.0+0xc4>
 80139a0:	45a9      	cmp	r9, r5
 80139a2:	d31d      	bcc.n	80139e0 <_strtol_l.isra.0+0xc4>
 80139a4:	d101      	bne.n	80139aa <_strtol_l.isra.0+0x8e>
 80139a6:	45a2      	cmp	sl, r4
 80139a8:	db1a      	blt.n	80139e0 <_strtol_l.isra.0+0xc4>
 80139aa:	fb05 4503 	mla	r5, r5, r3, r4
 80139ae:	2601      	movs	r6, #1
 80139b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80139b4:	e7eb      	b.n	801398e <_strtol_l.isra.0+0x72>
 80139b6:	2c2b      	cmp	r4, #43	; 0x2b
 80139b8:	bf08      	it	eq
 80139ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 80139be:	46a8      	mov	r8, r5
 80139c0:	bf08      	it	eq
 80139c2:	f106 0e02 	addeq.w	lr, r6, #2
 80139c6:	e7c7      	b.n	8013958 <_strtol_l.isra.0+0x3c>
 80139c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80139cc:	2f19      	cmp	r7, #25
 80139ce:	d801      	bhi.n	80139d4 <_strtol_l.isra.0+0xb8>
 80139d0:	3c37      	subs	r4, #55	; 0x37
 80139d2:	e7e1      	b.n	8013998 <_strtol_l.isra.0+0x7c>
 80139d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80139d8:	2f19      	cmp	r7, #25
 80139da:	d804      	bhi.n	80139e6 <_strtol_l.isra.0+0xca>
 80139dc:	3c57      	subs	r4, #87	; 0x57
 80139de:	e7db      	b.n	8013998 <_strtol_l.isra.0+0x7c>
 80139e0:	f04f 36ff 	mov.w	r6, #4294967295
 80139e4:	e7e4      	b.n	80139b0 <_strtol_l.isra.0+0x94>
 80139e6:	2e00      	cmp	r6, #0
 80139e8:	da05      	bge.n	80139f6 <_strtol_l.isra.0+0xda>
 80139ea:	2322      	movs	r3, #34	; 0x22
 80139ec:	6003      	str	r3, [r0, #0]
 80139ee:	4665      	mov	r5, ip
 80139f0:	b942      	cbnz	r2, 8013a04 <_strtol_l.isra.0+0xe8>
 80139f2:	4628      	mov	r0, r5
 80139f4:	e79d      	b.n	8013932 <_strtol_l.isra.0+0x16>
 80139f6:	f1b8 0f00 	cmp.w	r8, #0
 80139fa:	d000      	beq.n	80139fe <_strtol_l.isra.0+0xe2>
 80139fc:	426d      	negs	r5, r5
 80139fe:	2a00      	cmp	r2, #0
 8013a00:	d0f7      	beq.n	80139f2 <_strtol_l.isra.0+0xd6>
 8013a02:	b10e      	cbz	r6, 8013a08 <_strtol_l.isra.0+0xec>
 8013a04:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013a08:	6011      	str	r1, [r2, #0]
 8013a0a:	e7f2      	b.n	80139f2 <_strtol_l.isra.0+0xd6>
 8013a0c:	2430      	movs	r4, #48	; 0x30
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d1b3      	bne.n	801397a <_strtol_l.isra.0+0x5e>
 8013a12:	2308      	movs	r3, #8
 8013a14:	e7b1      	b.n	801397a <_strtol_l.isra.0+0x5e>
 8013a16:	2c30      	cmp	r4, #48	; 0x30
 8013a18:	d0a4      	beq.n	8013964 <_strtol_l.isra.0+0x48>
 8013a1a:	230a      	movs	r3, #10
 8013a1c:	e7ad      	b.n	801397a <_strtol_l.isra.0+0x5e>
 8013a1e:	bf00      	nop
 8013a20:	0801c8e6 	.word	0x0801c8e6

08013a24 <strtol>:
 8013a24:	4613      	mov	r3, r2
 8013a26:	460a      	mov	r2, r1
 8013a28:	4601      	mov	r1, r0
 8013a2a:	4802      	ldr	r0, [pc, #8]	; (8013a34 <strtol+0x10>)
 8013a2c:	6800      	ldr	r0, [r0, #0]
 8013a2e:	f7ff bf75 	b.w	801391c <_strtol_l.isra.0>
 8013a32:	bf00      	nop
 8013a34:	200029bc 	.word	0x200029bc

08013a38 <_svfprintf_r>:
 8013a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3c:	ed2d 8b04 	vpush	{d8-d9}
 8013a40:	b0cf      	sub	sp, #316	; 0x13c
 8013a42:	4689      	mov	r9, r1
 8013a44:	4693      	mov	fp, r2
 8013a46:	461e      	mov	r6, r3
 8013a48:	4682      	mov	sl, r0
 8013a4a:	f004 f949 	bl	8017ce0 <_localeconv_r>
 8013a4e:	6803      	ldr	r3, [r0, #0]
 8013a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ec fbd6 	bl	8000204 <strlen>
 8013a58:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013a5c:	900e      	str	r0, [sp, #56]	; 0x38
 8013a5e:	0618      	lsls	r0, r3, #24
 8013a60:	d51a      	bpl.n	8013a98 <_svfprintf_r+0x60>
 8013a62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013a66:	b9bb      	cbnz	r3, 8013a98 <_svfprintf_r+0x60>
 8013a68:	2140      	movs	r1, #64	; 0x40
 8013a6a:	4650      	mov	r0, sl
 8013a6c:	f7fe fda6 	bl	80125bc <_malloc_r>
 8013a70:	f8c9 0000 	str.w	r0, [r9]
 8013a74:	f8c9 0010 	str.w	r0, [r9, #16]
 8013a78:	b958      	cbnz	r0, 8013a92 <_svfprintf_r+0x5a>
 8013a7a:	230c      	movs	r3, #12
 8013a7c:	f8ca 3000 	str.w	r3, [sl]
 8013a80:	f04f 33ff 	mov.w	r3, #4294967295
 8013a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013a88:	b04f      	add	sp, #316	; 0x13c
 8013a8a:	ecbd 8b04 	vpop	{d8-d9}
 8013a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a92:	2340      	movs	r3, #64	; 0x40
 8013a94:	f8c9 3014 	str.w	r3, [r9, #20]
 8013a98:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8013ce8 <_svfprintf_r+0x2b0>
 8013a9c:	2500      	movs	r5, #0
 8013a9e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8013aa2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013aa6:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8013aaa:	ac25      	add	r4, sp, #148	; 0x94
 8013aac:	9422      	str	r4, [sp, #136]	; 0x88
 8013aae:	9505      	str	r5, [sp, #20]
 8013ab0:	950a      	str	r5, [sp, #40]	; 0x28
 8013ab2:	9512      	str	r5, [sp, #72]	; 0x48
 8013ab4:	9514      	str	r5, [sp, #80]	; 0x50
 8013ab6:	950f      	str	r5, [sp, #60]	; 0x3c
 8013ab8:	465b      	mov	r3, fp
 8013aba:	461d      	mov	r5, r3
 8013abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ac0:	b10a      	cbz	r2, 8013ac6 <_svfprintf_r+0x8e>
 8013ac2:	2a25      	cmp	r2, #37	; 0x25
 8013ac4:	d1f9      	bne.n	8013aba <_svfprintf_r+0x82>
 8013ac6:	ebb5 070b 	subs.w	r7, r5, fp
 8013aca:	d00d      	beq.n	8013ae8 <_svfprintf_r+0xb0>
 8013acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ace:	443b      	add	r3, r7
 8013ad0:	9324      	str	r3, [sp, #144]	; 0x90
 8013ad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	2b07      	cmp	r3, #7
 8013ad8:	e9c4 b700 	strd	fp, r7, [r4]
 8013adc:	9323      	str	r3, [sp, #140]	; 0x8c
 8013ade:	dc79      	bgt.n	8013bd4 <_svfprintf_r+0x19c>
 8013ae0:	3408      	adds	r4, #8
 8013ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ae4:	443b      	add	r3, r7
 8013ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ae8:	782b      	ldrb	r3, [r5, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	f001 8140 	beq.w	8014d70 <_svfprintf_r+0x1338>
 8013af0:	2300      	movs	r3, #0
 8013af2:	f04f 32ff 	mov.w	r2, #4294967295
 8013af6:	3501      	adds	r5, #1
 8013af8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8013afc:	9204      	str	r2, [sp, #16]
 8013afe:	9310      	str	r3, [sp, #64]	; 0x40
 8013b00:	4698      	mov	r8, r3
 8013b02:	270a      	movs	r7, #10
 8013b04:	212b      	movs	r1, #43	; 0x2b
 8013b06:	462a      	mov	r2, r5
 8013b08:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013b0c:	9307      	str	r3, [sp, #28]
 8013b0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8013b10:	9b07      	ldr	r3, [sp, #28]
 8013b12:	3b20      	subs	r3, #32
 8013b14:	2b5a      	cmp	r3, #90	; 0x5a
 8013b16:	f200 85b4 	bhi.w	8014682 <_svfprintf_r+0xc4a>
 8013b1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013b1e:	007e      	.short	0x007e
 8013b20:	05b205b2 	.word	0x05b205b2
 8013b24:	05b20086 	.word	0x05b20086
 8013b28:	05b205b2 	.word	0x05b205b2
 8013b2c:	05b20065 	.word	0x05b20065
 8013b30:	008905b2 	.word	0x008905b2
 8013b34:	05b20093 	.word	0x05b20093
 8013b38:	00960090 	.word	0x00960090
 8013b3c:	00b305b2 	.word	0x00b305b2
 8013b40:	00b600b6 	.word	0x00b600b6
 8013b44:	00b600b6 	.word	0x00b600b6
 8013b48:	00b600b6 	.word	0x00b600b6
 8013b4c:	00b600b6 	.word	0x00b600b6
 8013b50:	05b200b6 	.word	0x05b200b6
 8013b54:	05b205b2 	.word	0x05b205b2
 8013b58:	05b205b2 	.word	0x05b205b2
 8013b5c:	05b205b2 	.word	0x05b205b2
 8013b60:	05b20127 	.word	0x05b20127
 8013b64:	00fc00e9 	.word	0x00fc00e9
 8013b68:	01270127 	.word	0x01270127
 8013b6c:	05b20127 	.word	0x05b20127
 8013b70:	05b205b2 	.word	0x05b205b2
 8013b74:	00c605b2 	.word	0x00c605b2
 8013b78:	05b205b2 	.word	0x05b205b2
 8013b7c:	05b20492 	.word	0x05b20492
 8013b80:	05b205b2 	.word	0x05b205b2
 8013b84:	05b204d9 	.word	0x05b204d9
 8013b88:	05b204fa 	.word	0x05b204fa
 8013b8c:	051905b2 	.word	0x051905b2
 8013b90:	05b205b2 	.word	0x05b205b2
 8013b94:	05b205b2 	.word	0x05b205b2
 8013b98:	05b205b2 	.word	0x05b205b2
 8013b9c:	05b205b2 	.word	0x05b205b2
 8013ba0:	05b20127 	.word	0x05b20127
 8013ba4:	00fe00e9 	.word	0x00fe00e9
 8013ba8:	01270127 	.word	0x01270127
 8013bac:	00c90127 	.word	0x00c90127
 8013bb0:	00dd00fe 	.word	0x00dd00fe
 8013bb4:	00d605b2 	.word	0x00d605b2
 8013bb8:	046f05b2 	.word	0x046f05b2
 8013bbc:	04c80494 	.word	0x04c80494
 8013bc0:	05b200dd 	.word	0x05b200dd
 8013bc4:	007c04d9 	.word	0x007c04d9
 8013bc8:	05b204fc 	.word	0x05b204fc
 8013bcc:	053605b2 	.word	0x053605b2
 8013bd0:	007c05b2 	.word	0x007c05b2
 8013bd4:	aa22      	add	r2, sp, #136	; 0x88
 8013bd6:	4649      	mov	r1, r9
 8013bd8:	4650      	mov	r0, sl
 8013bda:	f004 fe0b 	bl	80187f4 <__ssprint_r>
 8013bde:	2800      	cmp	r0, #0
 8013be0:	f040 8132 	bne.w	8013e48 <_svfprintf_r+0x410>
 8013be4:	ac25      	add	r4, sp, #148	; 0x94
 8013be6:	e77c      	b.n	8013ae2 <_svfprintf_r+0xaa>
 8013be8:	4650      	mov	r0, sl
 8013bea:	f004 f879 	bl	8017ce0 <_localeconv_r>
 8013bee:	6843      	ldr	r3, [r0, #4]
 8013bf0:	9314      	str	r3, [sp, #80]	; 0x50
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7ec fb06 	bl	8000204 <strlen>
 8013bf8:	9012      	str	r0, [sp, #72]	; 0x48
 8013bfa:	4650      	mov	r0, sl
 8013bfc:	f004 f870 	bl	8017ce0 <_localeconv_r>
 8013c00:	6883      	ldr	r3, [r0, #8]
 8013c02:	930a      	str	r3, [sp, #40]	; 0x28
 8013c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c06:	212b      	movs	r1, #43	; 0x2b
 8013c08:	b12b      	cbz	r3, 8013c16 <_svfprintf_r+0x1de>
 8013c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c0c:	b11b      	cbz	r3, 8013c16 <_svfprintf_r+0x1de>
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	b10b      	cbz	r3, 8013c16 <_svfprintf_r+0x1de>
 8013c12:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8013c16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013c18:	e775      	b.n	8013b06 <_svfprintf_r+0xce>
 8013c1a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d1f9      	bne.n	8013c16 <_svfprintf_r+0x1de>
 8013c22:	2320      	movs	r3, #32
 8013c24:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8013c28:	e7f5      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013c2a:	f048 0801 	orr.w	r8, r8, #1
 8013c2e:	e7f2      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013c30:	f856 3b04 	ldr.w	r3, [r6], #4
 8013c34:	9310      	str	r3, [sp, #64]	; 0x40
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	daed      	bge.n	8013c16 <_svfprintf_r+0x1de>
 8013c3a:	425b      	negs	r3, r3
 8013c3c:	9310      	str	r3, [sp, #64]	; 0x40
 8013c3e:	f048 0804 	orr.w	r8, r8, #4
 8013c42:	e7e8      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013c44:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8013c48:	e7e5      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013c4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c4c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013c50:	9307      	str	r3, [sp, #28]
 8013c52:	2b2a      	cmp	r3, #42	; 0x2a
 8013c54:	d113      	bne.n	8013c7e <_svfprintf_r+0x246>
 8013c56:	f856 0b04 	ldr.w	r0, [r6], #4
 8013c5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8013c5c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8013c60:	9304      	str	r3, [sp, #16]
 8013c62:	e7d8      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013c64:	9804      	ldr	r0, [sp, #16]
 8013c66:	fb07 3300 	mla	r3, r7, r0, r3
 8013c6a:	9304      	str	r3, [sp, #16]
 8013c6c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013c70:	9307      	str	r3, [sp, #28]
 8013c72:	9b07      	ldr	r3, [sp, #28]
 8013c74:	3b30      	subs	r3, #48	; 0x30
 8013c76:	2b09      	cmp	r3, #9
 8013c78:	d9f4      	bls.n	8013c64 <_svfprintf_r+0x22c>
 8013c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8013c7c:	e748      	b.n	8013b10 <_svfprintf_r+0xd8>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	9304      	str	r3, [sp, #16]
 8013c82:	e7f6      	b.n	8013c72 <_svfprintf_r+0x23a>
 8013c84:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8013c88:	e7c5      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c8e:	9310      	str	r3, [sp, #64]	; 0x40
 8013c90:	9b07      	ldr	r3, [sp, #28]
 8013c92:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013c94:	3b30      	subs	r3, #48	; 0x30
 8013c96:	fb07 3300 	mla	r3, r7, r0, r3
 8013c9a:	9310      	str	r3, [sp, #64]	; 0x40
 8013c9c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013ca0:	9307      	str	r3, [sp, #28]
 8013ca2:	3b30      	subs	r3, #48	; 0x30
 8013ca4:	2b09      	cmp	r3, #9
 8013ca6:	d9f3      	bls.n	8013c90 <_svfprintf_r+0x258>
 8013ca8:	e7e7      	b.n	8013c7a <_svfprintf_r+0x242>
 8013caa:	f048 0808 	orr.w	r8, r8, #8
 8013cae:	e7b2      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	2b68      	cmp	r3, #104	; 0x68
 8013cb6:	bf01      	itttt	eq
 8013cb8:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8013cba:	3301      	addeq	r3, #1
 8013cbc:	930b      	streq	r3, [sp, #44]	; 0x2c
 8013cbe:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8013cc2:	bf18      	it	ne
 8013cc4:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8013cc8:	e7a5      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	2b6c      	cmp	r3, #108	; 0x6c
 8013cd0:	d105      	bne.n	8013cde <_svfprintf_r+0x2a6>
 8013cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cd8:	f048 0820 	orr.w	r8, r8, #32
 8013cdc:	e79b      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013cde:	f048 0810 	orr.w	r8, r8, #16
 8013ce2:	e798      	b.n	8013c16 <_svfprintf_r+0x1de>
 8013ce4:	f3af 8000 	nop.w
	...
 8013cf0:	4632      	mov	r2, r6
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	f852 3b04 	ldr.w	r3, [r2], #4
 8013cf8:	9206      	str	r2, [sp, #24]
 8013cfa:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8013cfe:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8013d02:	2301      	movs	r3, #1
 8013d04:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8013d08:	9003      	str	r0, [sp, #12]
 8013d0a:	9304      	str	r3, [sp, #16]
 8013d0c:	4606      	mov	r6, r0
 8013d0e:	4605      	mov	r5, r0
 8013d10:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8013d14:	e1b8      	b.n	8014088 <_svfprintf_r+0x650>
 8013d16:	f048 0810 	orr.w	r8, r8, #16
 8013d1a:	f018 0f20 	tst.w	r8, #32
 8013d1e:	d012      	beq.n	8013d46 <_svfprintf_r+0x30e>
 8013d20:	3607      	adds	r6, #7
 8013d22:	f026 0307 	bic.w	r3, r6, #7
 8013d26:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8013d2a:	9306      	str	r3, [sp, #24]
 8013d2c:	2e00      	cmp	r6, #0
 8013d2e:	f177 0300 	sbcs.w	r3, r7, #0
 8013d32:	da06      	bge.n	8013d42 <_svfprintf_r+0x30a>
 8013d34:	4276      	negs	r6, r6
 8013d36:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8013d3a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8013d3e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8013d42:	2301      	movs	r3, #1
 8013d44:	e38e      	b.n	8014464 <_svfprintf_r+0xa2c>
 8013d46:	1d33      	adds	r3, r6, #4
 8013d48:	f018 0f10 	tst.w	r8, #16
 8013d4c:	9306      	str	r3, [sp, #24]
 8013d4e:	d002      	beq.n	8013d56 <_svfprintf_r+0x31e>
 8013d50:	6836      	ldr	r6, [r6, #0]
 8013d52:	17f7      	asrs	r7, r6, #31
 8013d54:	e7ea      	b.n	8013d2c <_svfprintf_r+0x2f4>
 8013d56:	f018 0f40 	tst.w	r8, #64	; 0x40
 8013d5a:	6836      	ldr	r6, [r6, #0]
 8013d5c:	d001      	beq.n	8013d62 <_svfprintf_r+0x32a>
 8013d5e:	b236      	sxth	r6, r6
 8013d60:	e7f7      	b.n	8013d52 <_svfprintf_r+0x31a>
 8013d62:	f418 7f00 	tst.w	r8, #512	; 0x200
 8013d66:	bf18      	it	ne
 8013d68:	b276      	sxtbne	r6, r6
 8013d6a:	e7f2      	b.n	8013d52 <_svfprintf_r+0x31a>
 8013d6c:	3607      	adds	r6, #7
 8013d6e:	f026 0307 	bic.w	r3, r6, #7
 8013d72:	ecb3 7b02 	vldmia	r3!, {d7}
 8013d76:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013d7a:	9306      	str	r3, [sp, #24]
 8013d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d7e:	ee09 3a10 	vmov	s18, r3
 8013d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d88:	ee09 3a90 	vmov	s19, r3
 8013d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d90:	4b3a      	ldr	r3, [pc, #232]	; (8013e7c <_svfprintf_r+0x444>)
 8013d92:	ec51 0b19 	vmov	r0, r1, d9
 8013d96:	f7ec fee9 	bl	8000b6c <__aeabi_dcmpun>
 8013d9a:	bb10      	cbnz	r0, 8013de2 <_svfprintf_r+0x3aa>
 8013d9c:	4b37      	ldr	r3, [pc, #220]	; (8013e7c <_svfprintf_r+0x444>)
 8013d9e:	ec51 0b19 	vmov	r0, r1, d9
 8013da2:	f04f 32ff 	mov.w	r2, #4294967295
 8013da6:	f7ec fec3 	bl	8000b30 <__aeabi_dcmple>
 8013daa:	b9d0      	cbnz	r0, 8013de2 <_svfprintf_r+0x3aa>
 8013dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013db0:	2200      	movs	r2, #0
 8013db2:	2300      	movs	r3, #0
 8013db4:	f7ec feb2 	bl	8000b1c <__aeabi_dcmplt>
 8013db8:	b110      	cbz	r0, 8013dc0 <_svfprintf_r+0x388>
 8013dba:	232d      	movs	r3, #45	; 0x2d
 8013dbc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8013dc0:	4a2f      	ldr	r2, [pc, #188]	; (8013e80 <_svfprintf_r+0x448>)
 8013dc2:	4830      	ldr	r0, [pc, #192]	; (8013e84 <_svfprintf_r+0x44c>)
 8013dc4:	9b07      	ldr	r3, [sp, #28]
 8013dc6:	2100      	movs	r1, #0
 8013dc8:	2b47      	cmp	r3, #71	; 0x47
 8013dca:	bfd4      	ite	le
 8013dcc:	4693      	movle	fp, r2
 8013dce:	4683      	movgt	fp, r0
 8013dd0:	2303      	movs	r3, #3
 8013dd2:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8013dd6:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8013dda:	2600      	movs	r6, #0
 8013ddc:	4633      	mov	r3, r6
 8013dde:	f001 b802 	b.w	8014de6 <_svfprintf_r+0x13ae>
 8013de2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013de6:	4610      	mov	r0, r2
 8013de8:	4619      	mov	r1, r3
 8013dea:	f7ec febf 	bl	8000b6c <__aeabi_dcmpun>
 8013dee:	b140      	cbz	r0, 8013e02 <_svfprintf_r+0x3ca>
 8013df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013df2:	4a25      	ldr	r2, [pc, #148]	; (8013e88 <_svfprintf_r+0x450>)
 8013df4:	4825      	ldr	r0, [pc, #148]	; (8013e8c <_svfprintf_r+0x454>)
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	bfbc      	itt	lt
 8013dfa:	232d      	movlt	r3, #45	; 0x2d
 8013dfc:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8013e00:	e7e0      	b.n	8013dc4 <_svfprintf_r+0x38c>
 8013e02:	9b07      	ldr	r3, [sp, #28]
 8013e04:	f023 0320 	bic.w	r3, r3, #32
 8013e08:	2b41      	cmp	r3, #65	; 0x41
 8013e0a:	9308      	str	r3, [sp, #32]
 8013e0c:	d125      	bne.n	8013e5a <_svfprintf_r+0x422>
 8013e0e:	2330      	movs	r3, #48	; 0x30
 8013e10:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8013e14:	9b07      	ldr	r3, [sp, #28]
 8013e16:	2b61      	cmp	r3, #97	; 0x61
 8013e18:	bf0c      	ite	eq
 8013e1a:	2378      	moveq	r3, #120	; 0x78
 8013e1c:	2358      	movne	r3, #88	; 0x58
 8013e1e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8013e22:	9b04      	ldr	r3, [sp, #16]
 8013e24:	2b63      	cmp	r3, #99	; 0x63
 8013e26:	f048 0802 	orr.w	r8, r8, #2
 8013e2a:	dd31      	ble.n	8013e90 <_svfprintf_r+0x458>
 8013e2c:	1c59      	adds	r1, r3, #1
 8013e2e:	4650      	mov	r0, sl
 8013e30:	f7fe fbc4 	bl	80125bc <_malloc_r>
 8013e34:	4683      	mov	fp, r0
 8013e36:	2800      	cmp	r0, #0
 8013e38:	f040 81fe 	bne.w	8014238 <_svfprintf_r+0x800>
 8013e3c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e44:	f8a9 300c 	strh.w	r3, [r9, #12]
 8013e48:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013e4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e52:	bf18      	it	ne
 8013e54:	f04f 33ff 	movne.w	r3, #4294967295
 8013e58:	e614      	b.n	8013a84 <_svfprintf_r+0x4c>
 8013e5a:	9b04      	ldr	r3, [sp, #16]
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	f000 81ed 	beq.w	801423c <_svfprintf_r+0x804>
 8013e62:	9b08      	ldr	r3, [sp, #32]
 8013e64:	2b47      	cmp	r3, #71	; 0x47
 8013e66:	f040 81ec 	bne.w	8014242 <_svfprintf_r+0x80a>
 8013e6a:	9b04      	ldr	r3, [sp, #16]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f040 81e8 	bne.w	8014242 <_svfprintf_r+0x80a>
 8013e72:	9303      	str	r3, [sp, #12]
 8013e74:	2301      	movs	r3, #1
 8013e76:	9304      	str	r3, [sp, #16]
 8013e78:	e00d      	b.n	8013e96 <_svfprintf_r+0x45e>
 8013e7a:	bf00      	nop
 8013e7c:	7fefffff 	.word	0x7fefffff
 8013e80:	0801ca40 	.word	0x0801ca40
 8013e84:	0801ca44 	.word	0x0801ca44
 8013e88:	0801ca48 	.word	0x0801ca48
 8013e8c:	0801ca4c 	.word	0x0801ca4c
 8013e90:	9003      	str	r0, [sp, #12]
 8013e92:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8013e96:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8013e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8013e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	f280 81d1 	bge.w	8014246 <_svfprintf_r+0x80e>
 8013ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ea6:	ee08 3a10 	vmov	s16, r3
 8013eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013eb0:	ee08 3a90 	vmov	s17, r3
 8013eb4:	232d      	movs	r3, #45	; 0x2d
 8013eb6:	9318      	str	r3, [sp, #96]	; 0x60
 8013eb8:	9b08      	ldr	r3, [sp, #32]
 8013eba:	2b41      	cmp	r3, #65	; 0x41
 8013ebc:	f040 81e1 	bne.w	8014282 <_svfprintf_r+0x84a>
 8013ec0:	eeb0 0a48 	vmov.f32	s0, s16
 8013ec4:	eef0 0a68 	vmov.f32	s1, s17
 8013ec8:	a81c      	add	r0, sp, #112	; 0x70
 8013eca:	f004 fbfd 	bl	80186c8 <frexp>
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013ed4:	ec51 0b10 	vmov	r0, r1, d0
 8013ed8:	f7ec fbae 	bl	8000638 <__aeabi_dmul>
 8013edc:	2200      	movs	r2, #0
 8013ede:	2300      	movs	r3, #0
 8013ee0:	4606      	mov	r6, r0
 8013ee2:	460f      	mov	r7, r1
 8013ee4:	f7ec fe10 	bl	8000b08 <__aeabi_dcmpeq>
 8013ee8:	b108      	cbz	r0, 8013eee <_svfprintf_r+0x4b6>
 8013eea:	2301      	movs	r3, #1
 8013eec:	931c      	str	r3, [sp, #112]	; 0x70
 8013eee:	4bb4      	ldr	r3, [pc, #720]	; (80141c0 <_svfprintf_r+0x788>)
 8013ef0:	4ab4      	ldr	r2, [pc, #720]	; (80141c4 <_svfprintf_r+0x78c>)
 8013ef2:	9907      	ldr	r1, [sp, #28]
 8013ef4:	2961      	cmp	r1, #97	; 0x61
 8013ef6:	bf18      	it	ne
 8013ef8:	461a      	movne	r2, r3
 8013efa:	9b04      	ldr	r3, [sp, #16]
 8013efc:	9217      	str	r2, [sp, #92]	; 0x5c
 8013efe:	3b01      	subs	r3, #1
 8013f00:	9305      	str	r3, [sp, #20]
 8013f02:	465d      	mov	r5, fp
 8013f04:	4bb0      	ldr	r3, [pc, #704]	; (80141c8 <_svfprintf_r+0x790>)
 8013f06:	2200      	movs	r2, #0
 8013f08:	4630      	mov	r0, r6
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	f7ec fb94 	bl	8000638 <__aeabi_dmul>
 8013f10:	460f      	mov	r7, r1
 8013f12:	4606      	mov	r6, r0
 8013f14:	f7ec fe40 	bl	8000b98 <__aeabi_d2iz>
 8013f18:	9019      	str	r0, [sp, #100]	; 0x64
 8013f1a:	f7ec fb23 	bl	8000564 <__aeabi_i2d>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	460b      	mov	r3, r1
 8013f22:	4630      	mov	r0, r6
 8013f24:	4639      	mov	r1, r7
 8013f26:	f7ec f9cf 	bl	80002c8 <__aeabi_dsub>
 8013f2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013f2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f2e:	5c9b      	ldrb	r3, [r3, r2]
 8013f30:	f805 3b01 	strb.w	r3, [r5], #1
 8013f34:	9b05      	ldr	r3, [sp, #20]
 8013f36:	9309      	str	r3, [sp, #36]	; 0x24
 8013f38:	1c5a      	adds	r2, r3, #1
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	460f      	mov	r7, r1
 8013f3e:	d007      	beq.n	8013f50 <_svfprintf_r+0x518>
 8013f40:	3b01      	subs	r3, #1
 8013f42:	9305      	str	r3, [sp, #20]
 8013f44:	2200      	movs	r2, #0
 8013f46:	2300      	movs	r3, #0
 8013f48:	f7ec fdde 	bl	8000b08 <__aeabi_dcmpeq>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d0d9      	beq.n	8013f04 <_svfprintf_r+0x4cc>
 8013f50:	4b9e      	ldr	r3, [pc, #632]	; (80141cc <_svfprintf_r+0x794>)
 8013f52:	2200      	movs	r2, #0
 8013f54:	4630      	mov	r0, r6
 8013f56:	4639      	mov	r1, r7
 8013f58:	f7ec fdfe 	bl	8000b58 <__aeabi_dcmpgt>
 8013f5c:	b960      	cbnz	r0, 8013f78 <_svfprintf_r+0x540>
 8013f5e:	4b9b      	ldr	r3, [pc, #620]	; (80141cc <_svfprintf_r+0x794>)
 8013f60:	2200      	movs	r2, #0
 8013f62:	4630      	mov	r0, r6
 8013f64:	4639      	mov	r1, r7
 8013f66:	f7ec fdcf 	bl	8000b08 <__aeabi_dcmpeq>
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	f000 8184 	beq.w	8014278 <_svfprintf_r+0x840>
 8013f70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f72:	07df      	lsls	r7, r3, #31
 8013f74:	f140 8180 	bpl.w	8014278 <_svfprintf_r+0x840>
 8013f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f7a:	9520      	str	r5, [sp, #128]	; 0x80
 8013f7c:	7bd9      	ldrb	r1, [r3, #15]
 8013f7e:	2030      	movs	r0, #48	; 0x30
 8013f80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013f82:	1e53      	subs	r3, r2, #1
 8013f84:	9320      	str	r3, [sp, #128]	; 0x80
 8013f86:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8013f8a:	428b      	cmp	r3, r1
 8013f8c:	f000 8163 	beq.w	8014256 <_svfprintf_r+0x81e>
 8013f90:	2b39      	cmp	r3, #57	; 0x39
 8013f92:	bf0b      	itete	eq
 8013f94:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8013f96:	3301      	addne	r3, #1
 8013f98:	7a9b      	ldrbeq	r3, [r3, #10]
 8013f9a:	b2db      	uxtbne	r3, r3
 8013f9c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013fa0:	eba5 030b 	sub.w	r3, r5, fp
 8013fa4:	9305      	str	r3, [sp, #20]
 8013fa6:	9b08      	ldr	r3, [sp, #32]
 8013fa8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8013faa:	2b47      	cmp	r3, #71	; 0x47
 8013fac:	f040 81b1 	bne.w	8014312 <_svfprintf_r+0x8da>
 8013fb0:	1cee      	adds	r6, r5, #3
 8013fb2:	db03      	blt.n	8013fbc <_svfprintf_r+0x584>
 8013fb4:	9b04      	ldr	r3, [sp, #16]
 8013fb6:	42ab      	cmp	r3, r5
 8013fb8:	f280 81d6 	bge.w	8014368 <_svfprintf_r+0x930>
 8013fbc:	9b07      	ldr	r3, [sp, #28]
 8013fbe:	3b02      	subs	r3, #2
 8013fc0:	9307      	str	r3, [sp, #28]
 8013fc2:	9907      	ldr	r1, [sp, #28]
 8013fc4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8013fc8:	f021 0120 	bic.w	r1, r1, #32
 8013fcc:	2941      	cmp	r1, #65	; 0x41
 8013fce:	bf08      	it	eq
 8013fd0:	320f      	addeq	r2, #15
 8013fd2:	f105 33ff 	add.w	r3, r5, #4294967295
 8013fd6:	bf06      	itte	eq
 8013fd8:	b2d2      	uxtbeq	r2, r2
 8013fda:	2101      	moveq	r1, #1
 8013fdc:	2100      	movne	r1, #0
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	931c      	str	r3, [sp, #112]	; 0x70
 8013fe2:	bfb8      	it	lt
 8013fe4:	f1c5 0301 	rsblt	r3, r5, #1
 8013fe8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8013fec:	bfb4      	ite	lt
 8013fee:	222d      	movlt	r2, #45	; 0x2d
 8013ff0:	222b      	movge	r2, #43	; 0x2b
 8013ff2:	2b09      	cmp	r3, #9
 8013ff4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8013ff8:	f340 81a4 	ble.w	8014344 <_svfprintf_r+0x90c>
 8013ffc:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8014000:	260a      	movs	r6, #10
 8014002:	4611      	mov	r1, r2
 8014004:	fb93 f5f6 	sdiv	r5, r3, r6
 8014008:	fb06 3015 	mls	r0, r6, r5, r3
 801400c:	3030      	adds	r0, #48	; 0x30
 801400e:	f801 0c01 	strb.w	r0, [r1, #-1]
 8014012:	4618      	mov	r0, r3
 8014014:	2863      	cmp	r0, #99	; 0x63
 8014016:	f102 32ff 	add.w	r2, r2, #4294967295
 801401a:	462b      	mov	r3, r5
 801401c:	dcf1      	bgt.n	8014002 <_svfprintf_r+0x5ca>
 801401e:	3330      	adds	r3, #48	; 0x30
 8014020:	1e88      	subs	r0, r1, #2
 8014022:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014026:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801402a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801402e:	4603      	mov	r3, r0
 8014030:	42ab      	cmp	r3, r5
 8014032:	f0c0 8182 	bcc.w	801433a <_svfprintf_r+0x902>
 8014036:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801403a:	1a52      	subs	r2, r2, r1
 801403c:	42a8      	cmp	r0, r5
 801403e:	bf88      	it	hi
 8014040:	2200      	movhi	r2, #0
 8014042:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8014046:	441a      	add	r2, r3
 8014048:	ab1e      	add	r3, sp, #120	; 0x78
 801404a:	1ad3      	subs	r3, r2, r3
 801404c:	9a05      	ldr	r2, [sp, #20]
 801404e:	9315      	str	r3, [sp, #84]	; 0x54
 8014050:	2a01      	cmp	r2, #1
 8014052:	4413      	add	r3, r2
 8014054:	9304      	str	r3, [sp, #16]
 8014056:	dc02      	bgt.n	801405e <_svfprintf_r+0x626>
 8014058:	f018 0f01 	tst.w	r8, #1
 801405c:	d003      	beq.n	8014066 <_svfprintf_r+0x62e>
 801405e:	9b04      	ldr	r3, [sp, #16]
 8014060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014062:	4413      	add	r3, r2
 8014064:	9304      	str	r3, [sp, #16]
 8014066:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801406e:	9311      	str	r3, [sp, #68]	; 0x44
 8014070:	2300      	movs	r3, #0
 8014072:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014076:	461d      	mov	r5, r3
 8014078:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801407a:	b113      	cbz	r3, 8014082 <_svfprintf_r+0x64a>
 801407c:	232d      	movs	r3, #45	; 0x2d
 801407e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014082:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8014086:	2600      	movs	r6, #0
 8014088:	9b04      	ldr	r3, [sp, #16]
 801408a:	42b3      	cmp	r3, r6
 801408c:	bfb8      	it	lt
 801408e:	4633      	movlt	r3, r6
 8014090:	9311      	str	r3, [sp, #68]	; 0x44
 8014092:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8014096:	b113      	cbz	r3, 801409e <_svfprintf_r+0x666>
 8014098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801409a:	3301      	adds	r3, #1
 801409c:	9311      	str	r3, [sp, #68]	; 0x44
 801409e:	f018 0302 	ands.w	r3, r8, #2
 80140a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80140a4:	bf1e      	ittt	ne
 80140a6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80140a8:	3302      	addne	r3, #2
 80140aa:	9311      	strne	r3, [sp, #68]	; 0x44
 80140ac:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80140b0:	9318      	str	r3, [sp, #96]	; 0x60
 80140b2:	d11f      	bne.n	80140f4 <_svfprintf_r+0x6bc>
 80140b4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80140b8:	1a9f      	subs	r7, r3, r2
 80140ba:	2f00      	cmp	r7, #0
 80140bc:	dd1a      	ble.n	80140f4 <_svfprintf_r+0x6bc>
 80140be:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80140c2:	4843      	ldr	r0, [pc, #268]	; (80141d0 <_svfprintf_r+0x798>)
 80140c4:	6020      	str	r0, [r4, #0]
 80140c6:	2f10      	cmp	r7, #16
 80140c8:	f103 0301 	add.w	r3, r3, #1
 80140cc:	f104 0108 	add.w	r1, r4, #8
 80140d0:	f300 82e6 	bgt.w	80146a0 <_svfprintf_r+0xc68>
 80140d4:	6067      	str	r7, [r4, #4]
 80140d6:	2b07      	cmp	r3, #7
 80140d8:	4417      	add	r7, r2
 80140da:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80140de:	f340 82f2 	ble.w	80146c6 <_svfprintf_r+0xc8e>
 80140e2:	aa22      	add	r2, sp, #136	; 0x88
 80140e4:	4649      	mov	r1, r9
 80140e6:	4650      	mov	r0, sl
 80140e8:	f004 fb84 	bl	80187f4 <__ssprint_r>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	f040 861d 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80140f2:	ac25      	add	r4, sp, #148	; 0x94
 80140f4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80140f8:	b173      	cbz	r3, 8014118 <_svfprintf_r+0x6e0>
 80140fa:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80140fe:	6023      	str	r3, [r4, #0]
 8014100:	2301      	movs	r3, #1
 8014102:	6063      	str	r3, [r4, #4]
 8014104:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014106:	3301      	adds	r3, #1
 8014108:	9324      	str	r3, [sp, #144]	; 0x90
 801410a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801410c:	3301      	adds	r3, #1
 801410e:	2b07      	cmp	r3, #7
 8014110:	9323      	str	r3, [sp, #140]	; 0x8c
 8014112:	f300 82da 	bgt.w	80146ca <_svfprintf_r+0xc92>
 8014116:	3408      	adds	r4, #8
 8014118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801411a:	b16b      	cbz	r3, 8014138 <_svfprintf_r+0x700>
 801411c:	ab1b      	add	r3, sp, #108	; 0x6c
 801411e:	6023      	str	r3, [r4, #0]
 8014120:	2302      	movs	r3, #2
 8014122:	6063      	str	r3, [r4, #4]
 8014124:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014126:	3302      	adds	r3, #2
 8014128:	9324      	str	r3, [sp, #144]	; 0x90
 801412a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801412c:	3301      	adds	r3, #1
 801412e:	2b07      	cmp	r3, #7
 8014130:	9323      	str	r3, [sp, #140]	; 0x8c
 8014132:	f300 82d4 	bgt.w	80146de <_svfprintf_r+0xca6>
 8014136:	3408      	adds	r4, #8
 8014138:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801413a:	2b80      	cmp	r3, #128	; 0x80
 801413c:	d11f      	bne.n	801417e <_svfprintf_r+0x746>
 801413e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8014142:	1a9f      	subs	r7, r3, r2
 8014144:	2f00      	cmp	r7, #0
 8014146:	dd1a      	ble.n	801417e <_svfprintf_r+0x746>
 8014148:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801414c:	4821      	ldr	r0, [pc, #132]	; (80141d4 <_svfprintf_r+0x79c>)
 801414e:	6020      	str	r0, [r4, #0]
 8014150:	2f10      	cmp	r7, #16
 8014152:	f103 0301 	add.w	r3, r3, #1
 8014156:	f104 0108 	add.w	r1, r4, #8
 801415a:	f300 82ca 	bgt.w	80146f2 <_svfprintf_r+0xcba>
 801415e:	6067      	str	r7, [r4, #4]
 8014160:	2b07      	cmp	r3, #7
 8014162:	4417      	add	r7, r2
 8014164:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8014168:	f340 82d6 	ble.w	8014718 <_svfprintf_r+0xce0>
 801416c:	aa22      	add	r2, sp, #136	; 0x88
 801416e:	4649      	mov	r1, r9
 8014170:	4650      	mov	r0, sl
 8014172:	f004 fb3f 	bl	80187f4 <__ssprint_r>
 8014176:	2800      	cmp	r0, #0
 8014178:	f040 85d8 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 801417c:	ac25      	add	r4, sp, #148	; 0x94
 801417e:	9b04      	ldr	r3, [sp, #16]
 8014180:	1af6      	subs	r6, r6, r3
 8014182:	2e00      	cmp	r6, #0
 8014184:	dd28      	ble.n	80141d8 <_svfprintf_r+0x7a0>
 8014186:	4f13      	ldr	r7, [pc, #76]	; (80141d4 <_svfprintf_r+0x79c>)
 8014188:	6027      	str	r7, [r4, #0]
 801418a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801418e:	2e10      	cmp	r6, #16
 8014190:	f103 0301 	add.w	r3, r3, #1
 8014194:	f104 0108 	add.w	r1, r4, #8
 8014198:	f300 82c0 	bgt.w	801471c <_svfprintf_r+0xce4>
 801419c:	6066      	str	r6, [r4, #4]
 801419e:	2b07      	cmp	r3, #7
 80141a0:	4416      	add	r6, r2
 80141a2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80141a6:	f340 82cc 	ble.w	8014742 <_svfprintf_r+0xd0a>
 80141aa:	aa22      	add	r2, sp, #136	; 0x88
 80141ac:	4649      	mov	r1, r9
 80141ae:	4650      	mov	r0, sl
 80141b0:	f004 fb20 	bl	80187f4 <__ssprint_r>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	f040 85b9 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80141ba:	ac25      	add	r4, sp, #148	; 0x94
 80141bc:	e00c      	b.n	80141d8 <_svfprintf_r+0x7a0>
 80141be:	bf00      	nop
 80141c0:	0801ca61 	.word	0x0801ca61
 80141c4:	0801ca50 	.word	0x0801ca50
 80141c8:	40300000 	.word	0x40300000
 80141cc:	3fe00000 	.word	0x3fe00000
 80141d0:	0801ca74 	.word	0x0801ca74
 80141d4:	0801ca84 	.word	0x0801ca84
 80141d8:	f418 7f80 	tst.w	r8, #256	; 0x100
 80141dc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80141de:	f040 82b7 	bne.w	8014750 <_svfprintf_r+0xd18>
 80141e2:	9b04      	ldr	r3, [sp, #16]
 80141e4:	f8c4 b000 	str.w	fp, [r4]
 80141e8:	441e      	add	r6, r3
 80141ea:	6063      	str	r3, [r4, #4]
 80141ec:	9624      	str	r6, [sp, #144]	; 0x90
 80141ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80141f0:	3301      	adds	r3, #1
 80141f2:	2b07      	cmp	r3, #7
 80141f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80141f6:	f300 82f0 	bgt.w	80147da <_svfprintf_r+0xda2>
 80141fa:	3408      	adds	r4, #8
 80141fc:	f018 0f04 	tst.w	r8, #4
 8014200:	f040 8576 	bne.w	8014cf0 <_svfprintf_r+0x12b8>
 8014204:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8014208:	9911      	ldr	r1, [sp, #68]	; 0x44
 801420a:	428a      	cmp	r2, r1
 801420c:	bfac      	ite	ge
 801420e:	189b      	addge	r3, r3, r2
 8014210:	185b      	addlt	r3, r3, r1
 8014212:	930f      	str	r3, [sp, #60]	; 0x3c
 8014214:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014216:	b13b      	cbz	r3, 8014228 <_svfprintf_r+0x7f0>
 8014218:	aa22      	add	r2, sp, #136	; 0x88
 801421a:	4649      	mov	r1, r9
 801421c:	4650      	mov	r0, sl
 801421e:	f004 fae9 	bl	80187f4 <__ssprint_r>
 8014222:	2800      	cmp	r0, #0
 8014224:	f040 8582 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014228:	2300      	movs	r3, #0
 801422a:	9323      	str	r3, [sp, #140]	; 0x8c
 801422c:	9b03      	ldr	r3, [sp, #12]
 801422e:	2b00      	cmp	r3, #0
 8014230:	f040 8598 	bne.w	8014d64 <_svfprintf_r+0x132c>
 8014234:	ac25      	add	r4, sp, #148	; 0x94
 8014236:	e0ed      	b.n	8014414 <_svfprintf_r+0x9dc>
 8014238:	9003      	str	r0, [sp, #12]
 801423a:	e62c      	b.n	8013e96 <_svfprintf_r+0x45e>
 801423c:	9003      	str	r0, [sp, #12]
 801423e:	2306      	movs	r3, #6
 8014240:	e619      	b.n	8013e76 <_svfprintf_r+0x43e>
 8014242:	9003      	str	r0, [sp, #12]
 8014244:	e627      	b.n	8013e96 <_svfprintf_r+0x45e>
 8014246:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801424a:	2300      	movs	r3, #0
 801424c:	eeb0 8a47 	vmov.f32	s16, s14
 8014250:	eef0 8a67 	vmov.f32	s17, s15
 8014254:	e62f      	b.n	8013eb6 <_svfprintf_r+0x47e>
 8014256:	f802 0c01 	strb.w	r0, [r2, #-1]
 801425a:	e691      	b.n	8013f80 <_svfprintf_r+0x548>
 801425c:	f803 0b01 	strb.w	r0, [r3], #1
 8014260:	1aca      	subs	r2, r1, r3
 8014262:	2a00      	cmp	r2, #0
 8014264:	dafa      	bge.n	801425c <_svfprintf_r+0x824>
 8014266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801426a:	3201      	adds	r2, #1
 801426c:	f103 0301 	add.w	r3, r3, #1
 8014270:	bfb8      	it	lt
 8014272:	2300      	movlt	r3, #0
 8014274:	441d      	add	r5, r3
 8014276:	e693      	b.n	8013fa0 <_svfprintf_r+0x568>
 8014278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801427a:	462b      	mov	r3, r5
 801427c:	18a9      	adds	r1, r5, r2
 801427e:	2030      	movs	r0, #48	; 0x30
 8014280:	e7ee      	b.n	8014260 <_svfprintf_r+0x828>
 8014282:	9b08      	ldr	r3, [sp, #32]
 8014284:	2b46      	cmp	r3, #70	; 0x46
 8014286:	d005      	beq.n	8014294 <_svfprintf_r+0x85c>
 8014288:	2b45      	cmp	r3, #69	; 0x45
 801428a:	d11b      	bne.n	80142c4 <_svfprintf_r+0x88c>
 801428c:	9b04      	ldr	r3, [sp, #16]
 801428e:	1c5d      	adds	r5, r3, #1
 8014290:	2102      	movs	r1, #2
 8014292:	e001      	b.n	8014298 <_svfprintf_r+0x860>
 8014294:	9d04      	ldr	r5, [sp, #16]
 8014296:	2103      	movs	r1, #3
 8014298:	ab20      	add	r3, sp, #128	; 0x80
 801429a:	9301      	str	r3, [sp, #4]
 801429c:	ab1d      	add	r3, sp, #116	; 0x74
 801429e:	9300      	str	r3, [sp, #0]
 80142a0:	462a      	mov	r2, r5
 80142a2:	ab1c      	add	r3, sp, #112	; 0x70
 80142a4:	4650      	mov	r0, sl
 80142a6:	eeb0 0a48 	vmov.f32	s0, s16
 80142aa:	eef0 0a68 	vmov.f32	s1, s17
 80142ae:	f002 f95f 	bl	8016570 <_dtoa_r>
 80142b2:	9b08      	ldr	r3, [sp, #32]
 80142b4:	2b47      	cmp	r3, #71	; 0x47
 80142b6:	4683      	mov	fp, r0
 80142b8:	d106      	bne.n	80142c8 <_svfprintf_r+0x890>
 80142ba:	f018 0f01 	tst.w	r8, #1
 80142be:	d103      	bne.n	80142c8 <_svfprintf_r+0x890>
 80142c0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80142c2:	e66d      	b.n	8013fa0 <_svfprintf_r+0x568>
 80142c4:	9d04      	ldr	r5, [sp, #16]
 80142c6:	e7e3      	b.n	8014290 <_svfprintf_r+0x858>
 80142c8:	9b08      	ldr	r3, [sp, #32]
 80142ca:	2b46      	cmp	r3, #70	; 0x46
 80142cc:	eb0b 0605 	add.w	r6, fp, r5
 80142d0:	d10f      	bne.n	80142f2 <_svfprintf_r+0x8ba>
 80142d2:	f89b 3000 	ldrb.w	r3, [fp]
 80142d6:	2b30      	cmp	r3, #48	; 0x30
 80142d8:	d109      	bne.n	80142ee <_svfprintf_r+0x8b6>
 80142da:	ec51 0b18 	vmov	r0, r1, d8
 80142de:	2200      	movs	r2, #0
 80142e0:	2300      	movs	r3, #0
 80142e2:	f7ec fc11 	bl	8000b08 <__aeabi_dcmpeq>
 80142e6:	b910      	cbnz	r0, 80142ee <_svfprintf_r+0x8b6>
 80142e8:	f1c5 0501 	rsb	r5, r5, #1
 80142ec:	951c      	str	r5, [sp, #112]	; 0x70
 80142ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80142f0:	441e      	add	r6, r3
 80142f2:	ec51 0b18 	vmov	r0, r1, d8
 80142f6:	2200      	movs	r2, #0
 80142f8:	2300      	movs	r3, #0
 80142fa:	f7ec fc05 	bl	8000b08 <__aeabi_dcmpeq>
 80142fe:	b100      	cbz	r0, 8014302 <_svfprintf_r+0x8ca>
 8014300:	9620      	str	r6, [sp, #128]	; 0x80
 8014302:	2230      	movs	r2, #48	; 0x30
 8014304:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014306:	429e      	cmp	r6, r3
 8014308:	d9da      	bls.n	80142c0 <_svfprintf_r+0x888>
 801430a:	1c59      	adds	r1, r3, #1
 801430c:	9120      	str	r1, [sp, #128]	; 0x80
 801430e:	701a      	strb	r2, [r3, #0]
 8014310:	e7f8      	b.n	8014304 <_svfprintf_r+0x8cc>
 8014312:	9b08      	ldr	r3, [sp, #32]
 8014314:	2b46      	cmp	r3, #70	; 0x46
 8014316:	f47f ae54 	bne.w	8013fc2 <_svfprintf_r+0x58a>
 801431a:	9a04      	ldr	r2, [sp, #16]
 801431c:	f008 0301 	and.w	r3, r8, #1
 8014320:	2d00      	cmp	r5, #0
 8014322:	ea43 0302 	orr.w	r3, r3, r2
 8014326:	dd1a      	ble.n	801435e <_svfprintf_r+0x926>
 8014328:	2b00      	cmp	r3, #0
 801432a:	d034      	beq.n	8014396 <_svfprintf_r+0x95e>
 801432c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801432e:	18eb      	adds	r3, r5, r3
 8014330:	441a      	add	r2, r3
 8014332:	9204      	str	r2, [sp, #16]
 8014334:	2366      	movs	r3, #102	; 0x66
 8014336:	9307      	str	r3, [sp, #28]
 8014338:	e033      	b.n	80143a2 <_svfprintf_r+0x96a>
 801433a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801433e:	f802 6b01 	strb.w	r6, [r2], #1
 8014342:	e675      	b.n	8014030 <_svfprintf_r+0x5f8>
 8014344:	b941      	cbnz	r1, 8014358 <_svfprintf_r+0x920>
 8014346:	2230      	movs	r2, #48	; 0x30
 8014348:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801434c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8014350:	3330      	adds	r3, #48	; 0x30
 8014352:	f802 3b01 	strb.w	r3, [r2], #1
 8014356:	e677      	b.n	8014048 <_svfprintf_r+0x610>
 8014358:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801435c:	e7f8      	b.n	8014350 <_svfprintf_r+0x918>
 801435e:	b1e3      	cbz	r3, 801439a <_svfprintf_r+0x962>
 8014360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014362:	9a04      	ldr	r2, [sp, #16]
 8014364:	3301      	adds	r3, #1
 8014366:	e7e3      	b.n	8014330 <_svfprintf_r+0x8f8>
 8014368:	9b05      	ldr	r3, [sp, #20]
 801436a:	429d      	cmp	r5, r3
 801436c:	db07      	blt.n	801437e <_svfprintf_r+0x946>
 801436e:	f018 0f01 	tst.w	r8, #1
 8014372:	d02d      	beq.n	80143d0 <_svfprintf_r+0x998>
 8014374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014376:	18eb      	adds	r3, r5, r3
 8014378:	9304      	str	r3, [sp, #16]
 801437a:	2367      	movs	r3, #103	; 0x67
 801437c:	e7db      	b.n	8014336 <_svfprintf_r+0x8fe>
 801437e:	9b05      	ldr	r3, [sp, #20]
 8014380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014382:	2d00      	cmp	r5, #0
 8014384:	4413      	add	r3, r2
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	dcf7      	bgt.n	801437a <_svfprintf_r+0x942>
 801438a:	9a04      	ldr	r2, [sp, #16]
 801438c:	f1c5 0301 	rsb	r3, r5, #1
 8014390:	441a      	add	r2, r3
 8014392:	4613      	mov	r3, r2
 8014394:	e7f0      	b.n	8014378 <_svfprintf_r+0x940>
 8014396:	9504      	str	r5, [sp, #16]
 8014398:	e7cc      	b.n	8014334 <_svfprintf_r+0x8fc>
 801439a:	2366      	movs	r3, #102	; 0x66
 801439c:	9307      	str	r3, [sp, #28]
 801439e:	2301      	movs	r3, #1
 80143a0:	9304      	str	r3, [sp, #16]
 80143a2:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 80143a6:	9309      	str	r3, [sp, #36]	; 0x24
 80143a8:	d025      	beq.n	80143f6 <_svfprintf_r+0x9be>
 80143aa:	2300      	movs	r3, #0
 80143ac:	2d00      	cmp	r5, #0
 80143ae:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80143b2:	f77f ae61 	ble.w	8014078 <_svfprintf_r+0x640>
 80143b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	2bff      	cmp	r3, #255	; 0xff
 80143bc:	d10a      	bne.n	80143d4 <_svfprintf_r+0x99c>
 80143be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80143c2:	9904      	ldr	r1, [sp, #16]
 80143c4:	4413      	add	r3, r2
 80143c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143c8:	fb02 1303 	mla	r3, r2, r3, r1
 80143cc:	9304      	str	r3, [sp, #16]
 80143ce:	e653      	b.n	8014078 <_svfprintf_r+0x640>
 80143d0:	9504      	str	r5, [sp, #16]
 80143d2:	e7d2      	b.n	801437a <_svfprintf_r+0x942>
 80143d4:	42ab      	cmp	r3, r5
 80143d6:	daf2      	bge.n	80143be <_svfprintf_r+0x986>
 80143d8:	1aed      	subs	r5, r5, r3
 80143da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143dc:	785b      	ldrb	r3, [r3, #1]
 80143de:	b133      	cbz	r3, 80143ee <_svfprintf_r+0x9b6>
 80143e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143e2:	3301      	adds	r3, #1
 80143e4:	9309      	str	r3, [sp, #36]	; 0x24
 80143e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143e8:	3301      	adds	r3, #1
 80143ea:	930a      	str	r3, [sp, #40]	; 0x28
 80143ec:	e7e3      	b.n	80143b6 <_svfprintf_r+0x97e>
 80143ee:	9b08      	ldr	r3, [sp, #32]
 80143f0:	3301      	adds	r3, #1
 80143f2:	9308      	str	r3, [sp, #32]
 80143f4:	e7df      	b.n	80143b6 <_svfprintf_r+0x97e>
 80143f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143f8:	9308      	str	r3, [sp, #32]
 80143fa:	e63d      	b.n	8014078 <_svfprintf_r+0x640>
 80143fc:	4632      	mov	r2, r6
 80143fe:	f018 0f20 	tst.w	r8, #32
 8014402:	f852 3b04 	ldr.w	r3, [r2], #4
 8014406:	9206      	str	r2, [sp, #24]
 8014408:	d009      	beq.n	801441e <_svfprintf_r+0x9e6>
 801440a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801440c:	4610      	mov	r0, r2
 801440e:	17d1      	asrs	r1, r2, #31
 8014410:	e9c3 0100 	strd	r0, r1, [r3]
 8014414:	9e06      	ldr	r6, [sp, #24]
 8014416:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801441a:	f7ff bb4d 	b.w	8013ab8 <_svfprintf_r+0x80>
 801441e:	f018 0f10 	tst.w	r8, #16
 8014422:	d002      	beq.n	801442a <_svfprintf_r+0x9f2>
 8014424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014426:	601a      	str	r2, [r3, #0]
 8014428:	e7f4      	b.n	8014414 <_svfprintf_r+0x9dc>
 801442a:	f018 0f40 	tst.w	r8, #64	; 0x40
 801442e:	d002      	beq.n	8014436 <_svfprintf_r+0x9fe>
 8014430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014432:	801a      	strh	r2, [r3, #0]
 8014434:	e7ee      	b.n	8014414 <_svfprintf_r+0x9dc>
 8014436:	f418 7f00 	tst.w	r8, #512	; 0x200
 801443a:	d0f3      	beq.n	8014424 <_svfprintf_r+0x9ec>
 801443c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801443e:	701a      	strb	r2, [r3, #0]
 8014440:	e7e8      	b.n	8014414 <_svfprintf_r+0x9dc>
 8014442:	f048 0810 	orr.w	r8, r8, #16
 8014446:	f018 0f20 	tst.w	r8, #32
 801444a:	d01e      	beq.n	801448a <_svfprintf_r+0xa52>
 801444c:	3607      	adds	r6, #7
 801444e:	f026 0307 	bic.w	r3, r6, #7
 8014452:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8014456:	9306      	str	r3, [sp, #24]
 8014458:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801445c:	2300      	movs	r3, #0
 801445e:	2200      	movs	r2, #0
 8014460:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8014464:	9a04      	ldr	r2, [sp, #16]
 8014466:	3201      	adds	r2, #1
 8014468:	f000 848d 	beq.w	8014d86 <_svfprintf_r+0x134e>
 801446c:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8014470:	9203      	str	r2, [sp, #12]
 8014472:	ea56 0207 	orrs.w	r2, r6, r7
 8014476:	f040 848c 	bne.w	8014d92 <_svfprintf_r+0x135a>
 801447a:	9a04      	ldr	r2, [sp, #16]
 801447c:	2a00      	cmp	r2, #0
 801447e:	f000 80f5 	beq.w	801466c <_svfprintf_r+0xc34>
 8014482:	2b01      	cmp	r3, #1
 8014484:	f040 8488 	bne.w	8014d98 <_svfprintf_r+0x1360>
 8014488:	e097      	b.n	80145ba <_svfprintf_r+0xb82>
 801448a:	1d33      	adds	r3, r6, #4
 801448c:	f018 0f10 	tst.w	r8, #16
 8014490:	9306      	str	r3, [sp, #24]
 8014492:	d001      	beq.n	8014498 <_svfprintf_r+0xa60>
 8014494:	6836      	ldr	r6, [r6, #0]
 8014496:	e003      	b.n	80144a0 <_svfprintf_r+0xa68>
 8014498:	f018 0f40 	tst.w	r8, #64	; 0x40
 801449c:	d002      	beq.n	80144a4 <_svfprintf_r+0xa6c>
 801449e:	8836      	ldrh	r6, [r6, #0]
 80144a0:	2700      	movs	r7, #0
 80144a2:	e7d9      	b.n	8014458 <_svfprintf_r+0xa20>
 80144a4:	f418 7f00 	tst.w	r8, #512	; 0x200
 80144a8:	d0f4      	beq.n	8014494 <_svfprintf_r+0xa5c>
 80144aa:	7836      	ldrb	r6, [r6, #0]
 80144ac:	e7f8      	b.n	80144a0 <_svfprintf_r+0xa68>
 80144ae:	4633      	mov	r3, r6
 80144b0:	2278      	movs	r2, #120	; 0x78
 80144b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80144b6:	9306      	str	r3, [sp, #24]
 80144b8:	f647 0330 	movw	r3, #30768	; 0x7830
 80144bc:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 80144c0:	4ba1      	ldr	r3, [pc, #644]	; (8014748 <_svfprintf_r+0xd10>)
 80144c2:	9316      	str	r3, [sp, #88]	; 0x58
 80144c4:	2700      	movs	r7, #0
 80144c6:	f048 0802 	orr.w	r8, r8, #2
 80144ca:	2302      	movs	r3, #2
 80144cc:	9207      	str	r2, [sp, #28]
 80144ce:	e7c6      	b.n	801445e <_svfprintf_r+0xa26>
 80144d0:	4633      	mov	r3, r6
 80144d2:	2500      	movs	r5, #0
 80144d4:	f853 bb04 	ldr.w	fp, [r3], #4
 80144d8:	9306      	str	r3, [sp, #24]
 80144da:	9b04      	ldr	r3, [sp, #16]
 80144dc:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80144e0:	1c59      	adds	r1, r3, #1
 80144e2:	d010      	beq.n	8014506 <_svfprintf_r+0xace>
 80144e4:	461a      	mov	r2, r3
 80144e6:	4629      	mov	r1, r5
 80144e8:	4658      	mov	r0, fp
 80144ea:	f7eb fe99 	bl	8000220 <memchr>
 80144ee:	9003      	str	r0, [sp, #12]
 80144f0:	2800      	cmp	r0, #0
 80144f2:	f000 80d2 	beq.w	801469a <_svfprintf_r+0xc62>
 80144f6:	eba0 030b 	sub.w	r3, r0, fp
 80144fa:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80144fe:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8014502:	462e      	mov	r6, r5
 8014504:	e5c0      	b.n	8014088 <_svfprintf_r+0x650>
 8014506:	4658      	mov	r0, fp
 8014508:	f7eb fe7c 	bl	8000204 <strlen>
 801450c:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8014510:	e463      	b.n	8013dda <_svfprintf_r+0x3a2>
 8014512:	f048 0810 	orr.w	r8, r8, #16
 8014516:	f018 0f20 	tst.w	r8, #32
 801451a:	d007      	beq.n	801452c <_svfprintf_r+0xaf4>
 801451c:	3607      	adds	r6, #7
 801451e:	f026 0307 	bic.w	r3, r6, #7
 8014522:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8014526:	9306      	str	r3, [sp, #24]
 8014528:	2301      	movs	r3, #1
 801452a:	e798      	b.n	801445e <_svfprintf_r+0xa26>
 801452c:	1d33      	adds	r3, r6, #4
 801452e:	f018 0f10 	tst.w	r8, #16
 8014532:	9306      	str	r3, [sp, #24]
 8014534:	d001      	beq.n	801453a <_svfprintf_r+0xb02>
 8014536:	6836      	ldr	r6, [r6, #0]
 8014538:	e003      	b.n	8014542 <_svfprintf_r+0xb0a>
 801453a:	f018 0f40 	tst.w	r8, #64	; 0x40
 801453e:	d002      	beq.n	8014546 <_svfprintf_r+0xb0e>
 8014540:	8836      	ldrh	r6, [r6, #0]
 8014542:	2700      	movs	r7, #0
 8014544:	e7f0      	b.n	8014528 <_svfprintf_r+0xaf0>
 8014546:	f418 7f00 	tst.w	r8, #512	; 0x200
 801454a:	d0f4      	beq.n	8014536 <_svfprintf_r+0xafe>
 801454c:	7836      	ldrb	r6, [r6, #0]
 801454e:	e7f8      	b.n	8014542 <_svfprintf_r+0xb0a>
 8014550:	4b7e      	ldr	r3, [pc, #504]	; (801474c <_svfprintf_r+0xd14>)
 8014552:	9316      	str	r3, [sp, #88]	; 0x58
 8014554:	f018 0f20 	tst.w	r8, #32
 8014558:	d019      	beq.n	801458e <_svfprintf_r+0xb56>
 801455a:	3607      	adds	r6, #7
 801455c:	f026 0307 	bic.w	r3, r6, #7
 8014560:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8014564:	9306      	str	r3, [sp, #24]
 8014566:	f018 0f01 	tst.w	r8, #1
 801456a:	d00a      	beq.n	8014582 <_svfprintf_r+0xb4a>
 801456c:	ea56 0307 	orrs.w	r3, r6, r7
 8014570:	d007      	beq.n	8014582 <_svfprintf_r+0xb4a>
 8014572:	2330      	movs	r3, #48	; 0x30
 8014574:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8014578:	9b07      	ldr	r3, [sp, #28]
 801457a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801457e:	f048 0802 	orr.w	r8, r8, #2
 8014582:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8014586:	2302      	movs	r3, #2
 8014588:	e769      	b.n	801445e <_svfprintf_r+0xa26>
 801458a:	4b6f      	ldr	r3, [pc, #444]	; (8014748 <_svfprintf_r+0xd10>)
 801458c:	e7e1      	b.n	8014552 <_svfprintf_r+0xb1a>
 801458e:	1d33      	adds	r3, r6, #4
 8014590:	f018 0f10 	tst.w	r8, #16
 8014594:	9306      	str	r3, [sp, #24]
 8014596:	d001      	beq.n	801459c <_svfprintf_r+0xb64>
 8014598:	6836      	ldr	r6, [r6, #0]
 801459a:	e003      	b.n	80145a4 <_svfprintf_r+0xb6c>
 801459c:	f018 0f40 	tst.w	r8, #64	; 0x40
 80145a0:	d002      	beq.n	80145a8 <_svfprintf_r+0xb70>
 80145a2:	8836      	ldrh	r6, [r6, #0]
 80145a4:	2700      	movs	r7, #0
 80145a6:	e7de      	b.n	8014566 <_svfprintf_r+0xb2e>
 80145a8:	f418 7f00 	tst.w	r8, #512	; 0x200
 80145ac:	d0f4      	beq.n	8014598 <_svfprintf_r+0xb60>
 80145ae:	7836      	ldrb	r6, [r6, #0]
 80145b0:	e7f8      	b.n	80145a4 <_svfprintf_r+0xb6c>
 80145b2:	2f00      	cmp	r7, #0
 80145b4:	bf08      	it	eq
 80145b6:	2e0a      	cmpeq	r6, #10
 80145b8:	d206      	bcs.n	80145c8 <_svfprintf_r+0xb90>
 80145ba:	3630      	adds	r6, #48	; 0x30
 80145bc:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80145c0:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 80145c4:	f000 bc06 	b.w	8014dd4 <_svfprintf_r+0x139c>
 80145c8:	2300      	movs	r3, #0
 80145ca:	9305      	str	r3, [sp, #20]
 80145cc:	9b03      	ldr	r3, [sp, #12]
 80145ce:	ad4e      	add	r5, sp, #312	; 0x138
 80145d0:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 80145d4:	220a      	movs	r2, #10
 80145d6:	2300      	movs	r3, #0
 80145d8:	4630      	mov	r0, r6
 80145da:	4639      	mov	r1, r7
 80145dc:	f7ec fb74 	bl	8000cc8 <__aeabi_uldivmod>
 80145e0:	9b05      	ldr	r3, [sp, #20]
 80145e2:	3230      	adds	r2, #48	; 0x30
 80145e4:	3301      	adds	r3, #1
 80145e6:	f105 3bff 	add.w	fp, r5, #4294967295
 80145ea:	f805 2c01 	strb.w	r2, [r5, #-1]
 80145ee:	9305      	str	r3, [sp, #20]
 80145f0:	f1b8 0f00 	cmp.w	r8, #0
 80145f4:	d019      	beq.n	801462a <_svfprintf_r+0xbf2>
 80145f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145f8:	9a05      	ldr	r2, [sp, #20]
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d114      	bne.n	801462a <_svfprintf_r+0xbf2>
 8014600:	2aff      	cmp	r2, #255	; 0xff
 8014602:	d012      	beq.n	801462a <_svfprintf_r+0xbf2>
 8014604:	2f00      	cmp	r7, #0
 8014606:	bf08      	it	eq
 8014608:	2e0a      	cmpeq	r6, #10
 801460a:	d30e      	bcc.n	801462a <_svfprintf_r+0xbf2>
 801460c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801460e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014610:	ebab 0b03 	sub.w	fp, fp, r3
 8014614:	461a      	mov	r2, r3
 8014616:	4658      	mov	r0, fp
 8014618:	f004 f8d9 	bl	80187ce <strncpy>
 801461c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801461e:	785d      	ldrb	r5, [r3, #1]
 8014620:	b195      	cbz	r5, 8014648 <_svfprintf_r+0xc10>
 8014622:	3301      	adds	r3, #1
 8014624:	930a      	str	r3, [sp, #40]	; 0x28
 8014626:	2300      	movs	r3, #0
 8014628:	9305      	str	r3, [sp, #20]
 801462a:	220a      	movs	r2, #10
 801462c:	2300      	movs	r3, #0
 801462e:	4630      	mov	r0, r6
 8014630:	4639      	mov	r1, r7
 8014632:	f7ec fb49 	bl	8000cc8 <__aeabi_uldivmod>
 8014636:	2f00      	cmp	r7, #0
 8014638:	bf08      	it	eq
 801463a:	2e0a      	cmpeq	r6, #10
 801463c:	f0c0 83ca 	bcc.w	8014dd4 <_svfprintf_r+0x139c>
 8014640:	4606      	mov	r6, r0
 8014642:	460f      	mov	r7, r1
 8014644:	465d      	mov	r5, fp
 8014646:	e7c5      	b.n	80145d4 <_svfprintf_r+0xb9c>
 8014648:	9505      	str	r5, [sp, #20]
 801464a:	e7ee      	b.n	801462a <_svfprintf_r+0xbf2>
 801464c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801464e:	f006 030f 	and.w	r3, r6, #15
 8014652:	5cd3      	ldrb	r3, [r2, r3]
 8014654:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8014658:	0933      	lsrs	r3, r6, #4
 801465a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801465e:	093a      	lsrs	r2, r7, #4
 8014660:	461e      	mov	r6, r3
 8014662:	4617      	mov	r7, r2
 8014664:	ea56 0307 	orrs.w	r3, r6, r7
 8014668:	d1f0      	bne.n	801464c <_svfprintf_r+0xc14>
 801466a:	e3b3      	b.n	8014dd4 <_svfprintf_r+0x139c>
 801466c:	b933      	cbnz	r3, 801467c <_svfprintf_r+0xc44>
 801466e:	f018 0f01 	tst.w	r8, #1
 8014672:	d003      	beq.n	801467c <_svfprintf_r+0xc44>
 8014674:	2330      	movs	r3, #48	; 0x30
 8014676:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801467a:	e7a1      	b.n	80145c0 <_svfprintf_r+0xb88>
 801467c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8014680:	e3a8      	b.n	8014dd4 <_svfprintf_r+0x139c>
 8014682:	9b07      	ldr	r3, [sp, #28]
 8014684:	2b00      	cmp	r3, #0
 8014686:	f000 8373 	beq.w	8014d70 <_svfprintf_r+0x1338>
 801468a:	2000      	movs	r0, #0
 801468c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8014690:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8014694:	9606      	str	r6, [sp, #24]
 8014696:	f7ff bb34 	b.w	8013d02 <_svfprintf_r+0x2ca>
 801469a:	9e03      	ldr	r6, [sp, #12]
 801469c:	f7ff bb9e 	b.w	8013ddc <_svfprintf_r+0x3a4>
 80146a0:	2010      	movs	r0, #16
 80146a2:	4402      	add	r2, r0
 80146a4:	2b07      	cmp	r3, #7
 80146a6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80146aa:	6060      	str	r0, [r4, #4]
 80146ac:	dd08      	ble.n	80146c0 <_svfprintf_r+0xc88>
 80146ae:	aa22      	add	r2, sp, #136	; 0x88
 80146b0:	4649      	mov	r1, r9
 80146b2:	4650      	mov	r0, sl
 80146b4:	f004 f89e 	bl	80187f4 <__ssprint_r>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	f040 8337 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80146be:	a925      	add	r1, sp, #148	; 0x94
 80146c0:	3f10      	subs	r7, #16
 80146c2:	460c      	mov	r4, r1
 80146c4:	e4fb      	b.n	80140be <_svfprintf_r+0x686>
 80146c6:	460c      	mov	r4, r1
 80146c8:	e514      	b.n	80140f4 <_svfprintf_r+0x6bc>
 80146ca:	aa22      	add	r2, sp, #136	; 0x88
 80146cc:	4649      	mov	r1, r9
 80146ce:	4650      	mov	r0, sl
 80146d0:	f004 f890 	bl	80187f4 <__ssprint_r>
 80146d4:	2800      	cmp	r0, #0
 80146d6:	f040 8329 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80146da:	ac25      	add	r4, sp, #148	; 0x94
 80146dc:	e51c      	b.n	8014118 <_svfprintf_r+0x6e0>
 80146de:	aa22      	add	r2, sp, #136	; 0x88
 80146e0:	4649      	mov	r1, r9
 80146e2:	4650      	mov	r0, sl
 80146e4:	f004 f886 	bl	80187f4 <__ssprint_r>
 80146e8:	2800      	cmp	r0, #0
 80146ea:	f040 831f 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80146ee:	ac25      	add	r4, sp, #148	; 0x94
 80146f0:	e522      	b.n	8014138 <_svfprintf_r+0x700>
 80146f2:	2010      	movs	r0, #16
 80146f4:	4402      	add	r2, r0
 80146f6:	2b07      	cmp	r3, #7
 80146f8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80146fc:	6060      	str	r0, [r4, #4]
 80146fe:	dd08      	ble.n	8014712 <_svfprintf_r+0xcda>
 8014700:	aa22      	add	r2, sp, #136	; 0x88
 8014702:	4649      	mov	r1, r9
 8014704:	4650      	mov	r0, sl
 8014706:	f004 f875 	bl	80187f4 <__ssprint_r>
 801470a:	2800      	cmp	r0, #0
 801470c:	f040 830e 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014710:	a925      	add	r1, sp, #148	; 0x94
 8014712:	3f10      	subs	r7, #16
 8014714:	460c      	mov	r4, r1
 8014716:	e517      	b.n	8014148 <_svfprintf_r+0x710>
 8014718:	460c      	mov	r4, r1
 801471a:	e530      	b.n	801417e <_svfprintf_r+0x746>
 801471c:	2010      	movs	r0, #16
 801471e:	4402      	add	r2, r0
 8014720:	2b07      	cmp	r3, #7
 8014722:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014726:	6060      	str	r0, [r4, #4]
 8014728:	dd08      	ble.n	801473c <_svfprintf_r+0xd04>
 801472a:	aa22      	add	r2, sp, #136	; 0x88
 801472c:	4649      	mov	r1, r9
 801472e:	4650      	mov	r0, sl
 8014730:	f004 f860 	bl	80187f4 <__ssprint_r>
 8014734:	2800      	cmp	r0, #0
 8014736:	f040 82f9 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 801473a:	a925      	add	r1, sp, #148	; 0x94
 801473c:	3e10      	subs	r6, #16
 801473e:	460c      	mov	r4, r1
 8014740:	e522      	b.n	8014188 <_svfprintf_r+0x750>
 8014742:	460c      	mov	r4, r1
 8014744:	e548      	b.n	80141d8 <_svfprintf_r+0x7a0>
 8014746:	bf00      	nop
 8014748:	0801ca50 	.word	0x0801ca50
 801474c:	0801ca61 	.word	0x0801ca61
 8014750:	9b07      	ldr	r3, [sp, #28]
 8014752:	2b65      	cmp	r3, #101	; 0x65
 8014754:	f340 8232 	ble.w	8014bbc <_svfprintf_r+0x1184>
 8014758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801475c:	2200      	movs	r2, #0
 801475e:	2300      	movs	r3, #0
 8014760:	f7ec f9d2 	bl	8000b08 <__aeabi_dcmpeq>
 8014764:	2800      	cmp	r0, #0
 8014766:	d068      	beq.n	801483a <_svfprintf_r+0xe02>
 8014768:	4b6d      	ldr	r3, [pc, #436]	; (8014920 <_svfprintf_r+0xee8>)
 801476a:	6023      	str	r3, [r4, #0]
 801476c:	2301      	movs	r3, #1
 801476e:	441e      	add	r6, r3
 8014770:	6063      	str	r3, [r4, #4]
 8014772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014774:	9624      	str	r6, [sp, #144]	; 0x90
 8014776:	3301      	adds	r3, #1
 8014778:	2b07      	cmp	r3, #7
 801477a:	9323      	str	r3, [sp, #140]	; 0x8c
 801477c:	dc37      	bgt.n	80147ee <_svfprintf_r+0xdb6>
 801477e:	3408      	adds	r4, #8
 8014780:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014782:	9a05      	ldr	r2, [sp, #20]
 8014784:	4293      	cmp	r3, r2
 8014786:	db03      	blt.n	8014790 <_svfprintf_r+0xd58>
 8014788:	f018 0f01 	tst.w	r8, #1
 801478c:	f43f ad36 	beq.w	80141fc <_svfprintf_r+0x7c4>
 8014790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014792:	6023      	str	r3, [r4, #0]
 8014794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014798:	6063      	str	r3, [r4, #4]
 801479a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801479c:	4413      	add	r3, r2
 801479e:	9324      	str	r3, [sp, #144]	; 0x90
 80147a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80147a2:	3301      	adds	r3, #1
 80147a4:	2b07      	cmp	r3, #7
 80147a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80147a8:	dc2b      	bgt.n	8014802 <_svfprintf_r+0xdca>
 80147aa:	3408      	adds	r4, #8
 80147ac:	9b05      	ldr	r3, [sp, #20]
 80147ae:	1e5d      	subs	r5, r3, #1
 80147b0:	2d00      	cmp	r5, #0
 80147b2:	f77f ad23 	ble.w	80141fc <_svfprintf_r+0x7c4>
 80147b6:	4e5b      	ldr	r6, [pc, #364]	; (8014924 <_svfprintf_r+0xeec>)
 80147b8:	2710      	movs	r7, #16
 80147ba:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80147be:	2d10      	cmp	r5, #16
 80147c0:	f103 0301 	add.w	r3, r3, #1
 80147c4:	f104 0108 	add.w	r1, r4, #8
 80147c8:	6026      	str	r6, [r4, #0]
 80147ca:	dc24      	bgt.n	8014816 <_svfprintf_r+0xdde>
 80147cc:	6065      	str	r5, [r4, #4]
 80147ce:	2b07      	cmp	r3, #7
 80147d0:	4415      	add	r5, r2
 80147d2:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80147d6:	f340 8288 	ble.w	8014cea <_svfprintf_r+0x12b2>
 80147da:	aa22      	add	r2, sp, #136	; 0x88
 80147dc:	4649      	mov	r1, r9
 80147de:	4650      	mov	r0, sl
 80147e0:	f004 f808 	bl	80187f4 <__ssprint_r>
 80147e4:	2800      	cmp	r0, #0
 80147e6:	f040 82a1 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80147ea:	ac25      	add	r4, sp, #148	; 0x94
 80147ec:	e506      	b.n	80141fc <_svfprintf_r+0x7c4>
 80147ee:	aa22      	add	r2, sp, #136	; 0x88
 80147f0:	4649      	mov	r1, r9
 80147f2:	4650      	mov	r0, sl
 80147f4:	f003 fffe 	bl	80187f4 <__ssprint_r>
 80147f8:	2800      	cmp	r0, #0
 80147fa:	f040 8297 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80147fe:	ac25      	add	r4, sp, #148	; 0x94
 8014800:	e7be      	b.n	8014780 <_svfprintf_r+0xd48>
 8014802:	aa22      	add	r2, sp, #136	; 0x88
 8014804:	4649      	mov	r1, r9
 8014806:	4650      	mov	r0, sl
 8014808:	f003 fff4 	bl	80187f4 <__ssprint_r>
 801480c:	2800      	cmp	r0, #0
 801480e:	f040 828d 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014812:	ac25      	add	r4, sp, #148	; 0x94
 8014814:	e7ca      	b.n	80147ac <_svfprintf_r+0xd74>
 8014816:	3210      	adds	r2, #16
 8014818:	2b07      	cmp	r3, #7
 801481a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801481e:	6067      	str	r7, [r4, #4]
 8014820:	dd08      	ble.n	8014834 <_svfprintf_r+0xdfc>
 8014822:	aa22      	add	r2, sp, #136	; 0x88
 8014824:	4649      	mov	r1, r9
 8014826:	4650      	mov	r0, sl
 8014828:	f003 ffe4 	bl	80187f4 <__ssprint_r>
 801482c:	2800      	cmp	r0, #0
 801482e:	f040 827d 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014832:	a925      	add	r1, sp, #148	; 0x94
 8014834:	3d10      	subs	r5, #16
 8014836:	460c      	mov	r4, r1
 8014838:	e7bf      	b.n	80147ba <_svfprintf_r+0xd82>
 801483a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801483c:	2b00      	cmp	r3, #0
 801483e:	dc73      	bgt.n	8014928 <_svfprintf_r+0xef0>
 8014840:	4b37      	ldr	r3, [pc, #220]	; (8014920 <_svfprintf_r+0xee8>)
 8014842:	6023      	str	r3, [r4, #0]
 8014844:	2301      	movs	r3, #1
 8014846:	441e      	add	r6, r3
 8014848:	6063      	str	r3, [r4, #4]
 801484a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801484c:	9624      	str	r6, [sp, #144]	; 0x90
 801484e:	3301      	adds	r3, #1
 8014850:	2b07      	cmp	r3, #7
 8014852:	9323      	str	r3, [sp, #140]	; 0x8c
 8014854:	dc3d      	bgt.n	80148d2 <_svfprintf_r+0xe9a>
 8014856:	3408      	adds	r4, #8
 8014858:	9905      	ldr	r1, [sp, #20]
 801485a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801485c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801485e:	430a      	orrs	r2, r1
 8014860:	f008 0101 	and.w	r1, r8, #1
 8014864:	430a      	orrs	r2, r1
 8014866:	f43f acc9 	beq.w	80141fc <_svfprintf_r+0x7c4>
 801486a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801486c:	6022      	str	r2, [r4, #0]
 801486e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014870:	6062      	str	r2, [r4, #4]
 8014872:	4413      	add	r3, r2
 8014874:	9324      	str	r3, [sp, #144]	; 0x90
 8014876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014878:	3301      	adds	r3, #1
 801487a:	2b07      	cmp	r3, #7
 801487c:	9323      	str	r3, [sp, #140]	; 0x8c
 801487e:	dc32      	bgt.n	80148e6 <_svfprintf_r+0xeae>
 8014880:	3408      	adds	r4, #8
 8014882:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8014884:	2d00      	cmp	r5, #0
 8014886:	da1b      	bge.n	80148c0 <_svfprintf_r+0xe88>
 8014888:	4e26      	ldr	r6, [pc, #152]	; (8014924 <_svfprintf_r+0xeec>)
 801488a:	426d      	negs	r5, r5
 801488c:	4623      	mov	r3, r4
 801488e:	2710      	movs	r7, #16
 8014890:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8014894:	2d10      	cmp	r5, #16
 8014896:	f102 0201 	add.w	r2, r2, #1
 801489a:	f104 0408 	add.w	r4, r4, #8
 801489e:	601e      	str	r6, [r3, #0]
 80148a0:	dc2b      	bgt.n	80148fa <_svfprintf_r+0xec2>
 80148a2:	605d      	str	r5, [r3, #4]
 80148a4:	2a07      	cmp	r2, #7
 80148a6:	440d      	add	r5, r1
 80148a8:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80148ac:	dd08      	ble.n	80148c0 <_svfprintf_r+0xe88>
 80148ae:	aa22      	add	r2, sp, #136	; 0x88
 80148b0:	4649      	mov	r1, r9
 80148b2:	4650      	mov	r0, sl
 80148b4:	f003 ff9e 	bl	80187f4 <__ssprint_r>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	f040 8237 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80148be:	ac25      	add	r4, sp, #148	; 0x94
 80148c0:	9b05      	ldr	r3, [sp, #20]
 80148c2:	9a05      	ldr	r2, [sp, #20]
 80148c4:	6063      	str	r3, [r4, #4]
 80148c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80148c8:	f8c4 b000 	str.w	fp, [r4]
 80148cc:	4413      	add	r3, r2
 80148ce:	9324      	str	r3, [sp, #144]	; 0x90
 80148d0:	e48d      	b.n	80141ee <_svfprintf_r+0x7b6>
 80148d2:	aa22      	add	r2, sp, #136	; 0x88
 80148d4:	4649      	mov	r1, r9
 80148d6:	4650      	mov	r0, sl
 80148d8:	f003 ff8c 	bl	80187f4 <__ssprint_r>
 80148dc:	2800      	cmp	r0, #0
 80148de:	f040 8225 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80148e2:	ac25      	add	r4, sp, #148	; 0x94
 80148e4:	e7b8      	b.n	8014858 <_svfprintf_r+0xe20>
 80148e6:	aa22      	add	r2, sp, #136	; 0x88
 80148e8:	4649      	mov	r1, r9
 80148ea:	4650      	mov	r0, sl
 80148ec:	f003 ff82 	bl	80187f4 <__ssprint_r>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	f040 821b 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 80148f6:	ac25      	add	r4, sp, #148	; 0x94
 80148f8:	e7c3      	b.n	8014882 <_svfprintf_r+0xe4a>
 80148fa:	3110      	adds	r1, #16
 80148fc:	2a07      	cmp	r2, #7
 80148fe:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8014902:	605f      	str	r7, [r3, #4]
 8014904:	dd08      	ble.n	8014918 <_svfprintf_r+0xee0>
 8014906:	aa22      	add	r2, sp, #136	; 0x88
 8014908:	4649      	mov	r1, r9
 801490a:	4650      	mov	r0, sl
 801490c:	f003 ff72 	bl	80187f4 <__ssprint_r>
 8014910:	2800      	cmp	r0, #0
 8014912:	f040 820b 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014916:	ac25      	add	r4, sp, #148	; 0x94
 8014918:	3d10      	subs	r5, #16
 801491a:	4623      	mov	r3, r4
 801491c:	e7b8      	b.n	8014890 <_svfprintf_r+0xe58>
 801491e:	bf00      	nop
 8014920:	0801ca72 	.word	0x0801ca72
 8014924:	0801ca84 	.word	0x0801ca84
 8014928:	9b05      	ldr	r3, [sp, #20]
 801492a:	42ab      	cmp	r3, r5
 801492c:	bfa8      	it	ge
 801492e:	462b      	movge	r3, r5
 8014930:	2b00      	cmp	r3, #0
 8014932:	461f      	mov	r7, r3
 8014934:	dd0a      	ble.n	801494c <_svfprintf_r+0xf14>
 8014936:	441e      	add	r6, r3
 8014938:	e9c4 b300 	strd	fp, r3, [r4]
 801493c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801493e:	9624      	str	r6, [sp, #144]	; 0x90
 8014940:	3301      	adds	r3, #1
 8014942:	2b07      	cmp	r3, #7
 8014944:	9323      	str	r3, [sp, #140]	; 0x8c
 8014946:	f300 8086 	bgt.w	8014a56 <_svfprintf_r+0x101e>
 801494a:	3408      	adds	r4, #8
 801494c:	2f00      	cmp	r7, #0
 801494e:	bfac      	ite	ge
 8014950:	1bee      	subge	r6, r5, r7
 8014952:	462e      	movlt	r6, r5
 8014954:	2e00      	cmp	r6, #0
 8014956:	dd19      	ble.n	801498c <_svfprintf_r+0xf54>
 8014958:	4f97      	ldr	r7, [pc, #604]	; (8014bb8 <_svfprintf_r+0x1180>)
 801495a:	6027      	str	r7, [r4, #0]
 801495c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014960:	2e10      	cmp	r6, #16
 8014962:	f103 0301 	add.w	r3, r3, #1
 8014966:	f104 0108 	add.w	r1, r4, #8
 801496a:	dc7e      	bgt.n	8014a6a <_svfprintf_r+0x1032>
 801496c:	6066      	str	r6, [r4, #4]
 801496e:	2b07      	cmp	r3, #7
 8014970:	4416      	add	r6, r2
 8014972:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8014976:	f340 808b 	ble.w	8014a90 <_svfprintf_r+0x1058>
 801497a:	aa22      	add	r2, sp, #136	; 0x88
 801497c:	4649      	mov	r1, r9
 801497e:	4650      	mov	r0, sl
 8014980:	f003 ff38 	bl	80187f4 <__ssprint_r>
 8014984:	2800      	cmp	r0, #0
 8014986:	f040 81d1 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 801498a:	ac25      	add	r4, sp, #148	; 0x94
 801498c:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8014990:	445d      	add	r5, fp
 8014992:	d00b      	beq.n	80149ac <_svfprintf_r+0xf74>
 8014994:	4e88      	ldr	r6, [pc, #544]	; (8014bb8 <_svfprintf_r+0x1180>)
 8014996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014998:	2b00      	cmp	r3, #0
 801499a:	d17b      	bne.n	8014a94 <_svfprintf_r+0x105c>
 801499c:	9b08      	ldr	r3, [sp, #32]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d17b      	bne.n	8014a9a <_svfprintf_r+0x1062>
 80149a2:	9b05      	ldr	r3, [sp, #20]
 80149a4:	445b      	add	r3, fp
 80149a6:	429d      	cmp	r5, r3
 80149a8:	bf28      	it	cs
 80149aa:	461d      	movcs	r5, r3
 80149ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80149ae:	9a05      	ldr	r2, [sp, #20]
 80149b0:	4293      	cmp	r3, r2
 80149b2:	db02      	blt.n	80149ba <_svfprintf_r+0xf82>
 80149b4:	f018 0f01 	tst.w	r8, #1
 80149b8:	d00e      	beq.n	80149d8 <_svfprintf_r+0xfa0>
 80149ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80149bc:	6023      	str	r3, [r4, #0]
 80149be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80149c2:	6063      	str	r3, [r4, #4]
 80149c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80149c6:	4413      	add	r3, r2
 80149c8:	9324      	str	r3, [sp, #144]	; 0x90
 80149ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80149cc:	3301      	adds	r3, #1
 80149ce:	2b07      	cmp	r3, #7
 80149d0:	9323      	str	r3, [sp, #140]	; 0x8c
 80149d2:	f300 80dd 	bgt.w	8014b90 <_svfprintf_r+0x1158>
 80149d6:	3408      	adds	r4, #8
 80149d8:	9b05      	ldr	r3, [sp, #20]
 80149da:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80149dc:	eb0b 0203 	add.w	r2, fp, r3
 80149e0:	1b9e      	subs	r6, r3, r6
 80149e2:	1b52      	subs	r2, r2, r5
 80149e4:	4296      	cmp	r6, r2
 80149e6:	bfa8      	it	ge
 80149e8:	4616      	movge	r6, r2
 80149ea:	2e00      	cmp	r6, #0
 80149ec:	dd0b      	ble.n	8014a06 <_svfprintf_r+0xfce>
 80149ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80149f0:	4433      	add	r3, r6
 80149f2:	9324      	str	r3, [sp, #144]	; 0x90
 80149f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80149f6:	3301      	adds	r3, #1
 80149f8:	2b07      	cmp	r3, #7
 80149fa:	e9c4 5600 	strd	r5, r6, [r4]
 80149fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8014a00:	f300 80d0 	bgt.w	8014ba4 <_svfprintf_r+0x116c>
 8014a04:	3408      	adds	r4, #8
 8014a06:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8014a08:	9b05      	ldr	r3, [sp, #20]
 8014a0a:	2e00      	cmp	r6, #0
 8014a0c:	eba3 0505 	sub.w	r5, r3, r5
 8014a10:	bfa8      	it	ge
 8014a12:	1bad      	subge	r5, r5, r6
 8014a14:	2d00      	cmp	r5, #0
 8014a16:	f77f abf1 	ble.w	80141fc <_svfprintf_r+0x7c4>
 8014a1a:	4e67      	ldr	r6, [pc, #412]	; (8014bb8 <_svfprintf_r+0x1180>)
 8014a1c:	2710      	movs	r7, #16
 8014a1e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014a22:	2d10      	cmp	r5, #16
 8014a24:	f103 0301 	add.w	r3, r3, #1
 8014a28:	f104 0108 	add.w	r1, r4, #8
 8014a2c:	6026      	str	r6, [r4, #0]
 8014a2e:	f77f aecd 	ble.w	80147cc <_svfprintf_r+0xd94>
 8014a32:	3210      	adds	r2, #16
 8014a34:	2b07      	cmp	r3, #7
 8014a36:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014a3a:	6067      	str	r7, [r4, #4]
 8014a3c:	dd08      	ble.n	8014a50 <_svfprintf_r+0x1018>
 8014a3e:	aa22      	add	r2, sp, #136	; 0x88
 8014a40:	4649      	mov	r1, r9
 8014a42:	4650      	mov	r0, sl
 8014a44:	f003 fed6 	bl	80187f4 <__ssprint_r>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	f040 816f 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014a4e:	a925      	add	r1, sp, #148	; 0x94
 8014a50:	3d10      	subs	r5, #16
 8014a52:	460c      	mov	r4, r1
 8014a54:	e7e3      	b.n	8014a1e <_svfprintf_r+0xfe6>
 8014a56:	aa22      	add	r2, sp, #136	; 0x88
 8014a58:	4649      	mov	r1, r9
 8014a5a:	4650      	mov	r0, sl
 8014a5c:	f003 feca 	bl	80187f4 <__ssprint_r>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	f040 8163 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014a66:	ac25      	add	r4, sp, #148	; 0x94
 8014a68:	e770      	b.n	801494c <_svfprintf_r+0xf14>
 8014a6a:	2010      	movs	r0, #16
 8014a6c:	4402      	add	r2, r0
 8014a6e:	2b07      	cmp	r3, #7
 8014a70:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014a74:	6060      	str	r0, [r4, #4]
 8014a76:	dd08      	ble.n	8014a8a <_svfprintf_r+0x1052>
 8014a78:	aa22      	add	r2, sp, #136	; 0x88
 8014a7a:	4649      	mov	r1, r9
 8014a7c:	4650      	mov	r0, sl
 8014a7e:	f003 feb9 	bl	80187f4 <__ssprint_r>
 8014a82:	2800      	cmp	r0, #0
 8014a84:	f040 8152 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014a88:	a925      	add	r1, sp, #148	; 0x94
 8014a8a:	3e10      	subs	r6, #16
 8014a8c:	460c      	mov	r4, r1
 8014a8e:	e764      	b.n	801495a <_svfprintf_r+0xf22>
 8014a90:	460c      	mov	r4, r1
 8014a92:	e77b      	b.n	801498c <_svfprintf_r+0xf54>
 8014a94:	9b08      	ldr	r3, [sp, #32]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d04a      	beq.n	8014b30 <_svfprintf_r+0x10f8>
 8014a9a:	9b08      	ldr	r3, [sp, #32]
 8014a9c:	3b01      	subs	r3, #1
 8014a9e:	9308      	str	r3, [sp, #32]
 8014aa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014aa2:	6023      	str	r3, [r4, #0]
 8014aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014aa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014aa8:	6063      	str	r3, [r4, #4]
 8014aaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014aac:	4413      	add	r3, r2
 8014aae:	9324      	str	r3, [sp, #144]	; 0x90
 8014ab0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	2b07      	cmp	r3, #7
 8014ab6:	9323      	str	r3, [sp, #140]	; 0x8c
 8014ab8:	dc41      	bgt.n	8014b3e <_svfprintf_r+0x1106>
 8014aba:	3408      	adds	r4, #8
 8014abc:	9b05      	ldr	r3, [sp, #20]
 8014abe:	445b      	add	r3, fp
 8014ac0:	1b5a      	subs	r2, r3, r5
 8014ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	bfa8      	it	ge
 8014aca:	4613      	movge	r3, r2
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	461f      	mov	r7, r3
 8014ad0:	dd0a      	ble.n	8014ae8 <_svfprintf_r+0x10b0>
 8014ad2:	e9c4 5300 	strd	r5, r3, [r4]
 8014ad6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014ad8:	443b      	add	r3, r7
 8014ada:	9324      	str	r3, [sp, #144]	; 0x90
 8014adc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014ade:	3301      	adds	r3, #1
 8014ae0:	2b07      	cmp	r3, #7
 8014ae2:	9323      	str	r3, [sp, #140]	; 0x8c
 8014ae4:	dc35      	bgt.n	8014b52 <_svfprintf_r+0x111a>
 8014ae6:	3408      	adds	r4, #8
 8014ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014aea:	781b      	ldrb	r3, [r3, #0]
 8014aec:	2f00      	cmp	r7, #0
 8014aee:	bfac      	ite	ge
 8014af0:	1bdf      	subge	r7, r3, r7
 8014af2:	461f      	movlt	r7, r3
 8014af4:	2f00      	cmp	r7, #0
 8014af6:	dd17      	ble.n	8014b28 <_svfprintf_r+0x10f0>
 8014af8:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8014afc:	2f10      	cmp	r7, #16
 8014afe:	f102 0201 	add.w	r2, r2, #1
 8014b02:	f104 0108 	add.w	r1, r4, #8
 8014b06:	6026      	str	r6, [r4, #0]
 8014b08:	dc2d      	bgt.n	8014b66 <_svfprintf_r+0x112e>
 8014b0a:	443b      	add	r3, r7
 8014b0c:	2a07      	cmp	r2, #7
 8014b0e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8014b12:	6067      	str	r7, [r4, #4]
 8014b14:	dd3a      	ble.n	8014b8c <_svfprintf_r+0x1154>
 8014b16:	aa22      	add	r2, sp, #136	; 0x88
 8014b18:	4649      	mov	r1, r9
 8014b1a:	4650      	mov	r0, sl
 8014b1c:	f003 fe6a 	bl	80187f4 <__ssprint_r>
 8014b20:	2800      	cmp	r0, #0
 8014b22:	f040 8103 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014b26:	ac25      	add	r4, sp, #148	; 0x94
 8014b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	441d      	add	r5, r3
 8014b2e:	e732      	b.n	8014996 <_svfprintf_r+0xf5e>
 8014b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b32:	3b01      	subs	r3, #1
 8014b34:	930a      	str	r3, [sp, #40]	; 0x28
 8014b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8014b3c:	e7b0      	b.n	8014aa0 <_svfprintf_r+0x1068>
 8014b3e:	aa22      	add	r2, sp, #136	; 0x88
 8014b40:	4649      	mov	r1, r9
 8014b42:	4650      	mov	r0, sl
 8014b44:	f003 fe56 	bl	80187f4 <__ssprint_r>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	f040 80ef 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014b4e:	ac25      	add	r4, sp, #148	; 0x94
 8014b50:	e7b4      	b.n	8014abc <_svfprintf_r+0x1084>
 8014b52:	aa22      	add	r2, sp, #136	; 0x88
 8014b54:	4649      	mov	r1, r9
 8014b56:	4650      	mov	r0, sl
 8014b58:	f003 fe4c 	bl	80187f4 <__ssprint_r>
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	f040 80e5 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014b62:	ac25      	add	r4, sp, #148	; 0x94
 8014b64:	e7c0      	b.n	8014ae8 <_svfprintf_r+0x10b0>
 8014b66:	2010      	movs	r0, #16
 8014b68:	4403      	add	r3, r0
 8014b6a:	2a07      	cmp	r2, #7
 8014b6c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8014b70:	6060      	str	r0, [r4, #4]
 8014b72:	dd08      	ble.n	8014b86 <_svfprintf_r+0x114e>
 8014b74:	aa22      	add	r2, sp, #136	; 0x88
 8014b76:	4649      	mov	r1, r9
 8014b78:	4650      	mov	r0, sl
 8014b7a:	f003 fe3b 	bl	80187f4 <__ssprint_r>
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	f040 80d4 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014b84:	a925      	add	r1, sp, #148	; 0x94
 8014b86:	3f10      	subs	r7, #16
 8014b88:	460c      	mov	r4, r1
 8014b8a:	e7b5      	b.n	8014af8 <_svfprintf_r+0x10c0>
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	e7cb      	b.n	8014b28 <_svfprintf_r+0x10f0>
 8014b90:	aa22      	add	r2, sp, #136	; 0x88
 8014b92:	4649      	mov	r1, r9
 8014b94:	4650      	mov	r0, sl
 8014b96:	f003 fe2d 	bl	80187f4 <__ssprint_r>
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	f040 80c6 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014ba0:	ac25      	add	r4, sp, #148	; 0x94
 8014ba2:	e719      	b.n	80149d8 <_svfprintf_r+0xfa0>
 8014ba4:	aa22      	add	r2, sp, #136	; 0x88
 8014ba6:	4649      	mov	r1, r9
 8014ba8:	4650      	mov	r0, sl
 8014baa:	f003 fe23 	bl	80187f4 <__ssprint_r>
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	f040 80bc 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014bb4:	ac25      	add	r4, sp, #148	; 0x94
 8014bb6:	e726      	b.n	8014a06 <_svfprintf_r+0xfce>
 8014bb8:	0801ca84 	.word	0x0801ca84
 8014bbc:	9a05      	ldr	r2, [sp, #20]
 8014bbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bc0:	2a01      	cmp	r2, #1
 8014bc2:	f106 0601 	add.w	r6, r6, #1
 8014bc6:	f103 0301 	add.w	r3, r3, #1
 8014bca:	f104 0508 	add.w	r5, r4, #8
 8014bce:	dc02      	bgt.n	8014bd6 <_svfprintf_r+0x119e>
 8014bd0:	f018 0f01 	tst.w	r8, #1
 8014bd4:	d07e      	beq.n	8014cd4 <_svfprintf_r+0x129c>
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	2b07      	cmp	r3, #7
 8014bda:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8014bde:	f8c4 b000 	str.w	fp, [r4]
 8014be2:	6062      	str	r2, [r4, #4]
 8014be4:	dd08      	ble.n	8014bf8 <_svfprintf_r+0x11c0>
 8014be6:	aa22      	add	r2, sp, #136	; 0x88
 8014be8:	4649      	mov	r1, r9
 8014bea:	4650      	mov	r0, sl
 8014bec:	f003 fe02 	bl	80187f4 <__ssprint_r>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	f040 809b 	bne.w	8014d2c <_svfprintf_r+0x12f4>
 8014bf6:	ad25      	add	r5, sp, #148	; 0x94
 8014bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014bfa:	602b      	str	r3, [r5, #0]
 8014bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c00:	606b      	str	r3, [r5, #4]
 8014c02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014c04:	4413      	add	r3, r2
 8014c06:	9324      	str	r3, [sp, #144]	; 0x90
 8014c08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	2b07      	cmp	r3, #7
 8014c0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8014c10:	dc32      	bgt.n	8014c78 <_svfprintf_r+0x1240>
 8014c12:	3508      	adds	r5, #8
 8014c14:	9b05      	ldr	r3, [sp, #20]
 8014c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014c1a:	1e5c      	subs	r4, r3, #1
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f7eb ff72 	bl	8000b08 <__aeabi_dcmpeq>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	d130      	bne.n	8014c8a <_svfprintf_r+0x1252>
 8014c28:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8014c2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014c2c:	9a05      	ldr	r2, [sp, #20]
 8014c2e:	3101      	adds	r1, #1
 8014c30:	3b01      	subs	r3, #1
 8014c32:	f10b 0001 	add.w	r0, fp, #1
 8014c36:	4413      	add	r3, r2
 8014c38:	2907      	cmp	r1, #7
 8014c3a:	e9c5 0400 	strd	r0, r4, [r5]
 8014c3e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8014c42:	dd50      	ble.n	8014ce6 <_svfprintf_r+0x12ae>
 8014c44:	aa22      	add	r2, sp, #136	; 0x88
 8014c46:	4649      	mov	r1, r9
 8014c48:	4650      	mov	r0, sl
 8014c4a:	f003 fdd3 	bl	80187f4 <__ssprint_r>
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	d16c      	bne.n	8014d2c <_svfprintf_r+0x12f4>
 8014c52:	ad25      	add	r5, sp, #148	; 0x94
 8014c54:	ab1e      	add	r3, sp, #120	; 0x78
 8014c56:	602b      	str	r3, [r5, #0]
 8014c58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c5c:	606b      	str	r3, [r5, #4]
 8014c5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014c60:	4413      	add	r3, r2
 8014c62:	9324      	str	r3, [sp, #144]	; 0x90
 8014c64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c66:	3301      	adds	r3, #1
 8014c68:	2b07      	cmp	r3, #7
 8014c6a:	9323      	str	r3, [sp, #140]	; 0x8c
 8014c6c:	f73f adb5 	bgt.w	80147da <_svfprintf_r+0xda2>
 8014c70:	f105 0408 	add.w	r4, r5, #8
 8014c74:	f7ff bac2 	b.w	80141fc <_svfprintf_r+0x7c4>
 8014c78:	aa22      	add	r2, sp, #136	; 0x88
 8014c7a:	4649      	mov	r1, r9
 8014c7c:	4650      	mov	r0, sl
 8014c7e:	f003 fdb9 	bl	80187f4 <__ssprint_r>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d152      	bne.n	8014d2c <_svfprintf_r+0x12f4>
 8014c86:	ad25      	add	r5, sp, #148	; 0x94
 8014c88:	e7c4      	b.n	8014c14 <_svfprintf_r+0x11dc>
 8014c8a:	2c00      	cmp	r4, #0
 8014c8c:	dde2      	ble.n	8014c54 <_svfprintf_r+0x121c>
 8014c8e:	4e58      	ldr	r6, [pc, #352]	; (8014df0 <_svfprintf_r+0x13b8>)
 8014c90:	2710      	movs	r7, #16
 8014c92:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014c96:	2c10      	cmp	r4, #16
 8014c98:	f103 0301 	add.w	r3, r3, #1
 8014c9c:	f105 0108 	add.w	r1, r5, #8
 8014ca0:	602e      	str	r6, [r5, #0]
 8014ca2:	dc07      	bgt.n	8014cb4 <_svfprintf_r+0x127c>
 8014ca4:	606c      	str	r4, [r5, #4]
 8014ca6:	2b07      	cmp	r3, #7
 8014ca8:	4414      	add	r4, r2
 8014caa:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8014cae:	dcc9      	bgt.n	8014c44 <_svfprintf_r+0x120c>
 8014cb0:	460d      	mov	r5, r1
 8014cb2:	e7cf      	b.n	8014c54 <_svfprintf_r+0x121c>
 8014cb4:	3210      	adds	r2, #16
 8014cb6:	2b07      	cmp	r3, #7
 8014cb8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014cbc:	606f      	str	r7, [r5, #4]
 8014cbe:	dd06      	ble.n	8014cce <_svfprintf_r+0x1296>
 8014cc0:	aa22      	add	r2, sp, #136	; 0x88
 8014cc2:	4649      	mov	r1, r9
 8014cc4:	4650      	mov	r0, sl
 8014cc6:	f003 fd95 	bl	80187f4 <__ssprint_r>
 8014cca:	bb78      	cbnz	r0, 8014d2c <_svfprintf_r+0x12f4>
 8014ccc:	a925      	add	r1, sp, #148	; 0x94
 8014cce:	3c10      	subs	r4, #16
 8014cd0:	460d      	mov	r5, r1
 8014cd2:	e7de      	b.n	8014c92 <_svfprintf_r+0x125a>
 8014cd4:	2201      	movs	r2, #1
 8014cd6:	2b07      	cmp	r3, #7
 8014cd8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8014cdc:	f8c4 b000 	str.w	fp, [r4]
 8014ce0:	6062      	str	r2, [r4, #4]
 8014ce2:	ddb7      	ble.n	8014c54 <_svfprintf_r+0x121c>
 8014ce4:	e7ae      	b.n	8014c44 <_svfprintf_r+0x120c>
 8014ce6:	3508      	adds	r5, #8
 8014ce8:	e7b4      	b.n	8014c54 <_svfprintf_r+0x121c>
 8014cea:	460c      	mov	r4, r1
 8014cec:	f7ff ba86 	b.w	80141fc <_svfprintf_r+0x7c4>
 8014cf0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8014cf4:	1a9d      	subs	r5, r3, r2
 8014cf6:	2d00      	cmp	r5, #0
 8014cf8:	f77f aa84 	ble.w	8014204 <_svfprintf_r+0x7cc>
 8014cfc:	4e3d      	ldr	r6, [pc, #244]	; (8014df4 <_svfprintf_r+0x13bc>)
 8014cfe:	2710      	movs	r7, #16
 8014d00:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014d04:	2d10      	cmp	r5, #16
 8014d06:	f103 0301 	add.w	r3, r3, #1
 8014d0a:	6026      	str	r6, [r4, #0]
 8014d0c:	dc18      	bgt.n	8014d40 <_svfprintf_r+0x1308>
 8014d0e:	6065      	str	r5, [r4, #4]
 8014d10:	2b07      	cmp	r3, #7
 8014d12:	4415      	add	r5, r2
 8014d14:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8014d18:	f77f aa74 	ble.w	8014204 <_svfprintf_r+0x7cc>
 8014d1c:	aa22      	add	r2, sp, #136	; 0x88
 8014d1e:	4649      	mov	r1, r9
 8014d20:	4650      	mov	r0, sl
 8014d22:	f003 fd67 	bl	80187f4 <__ssprint_r>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	f43f aa6c 	beq.w	8014204 <_svfprintf_r+0x7cc>
 8014d2c:	9b03      	ldr	r3, [sp, #12]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f43f a88a 	beq.w	8013e48 <_svfprintf_r+0x410>
 8014d34:	4619      	mov	r1, r3
 8014d36:	4650      	mov	r0, sl
 8014d38:	f002 fb7e 	bl	8017438 <_free_r>
 8014d3c:	f7ff b884 	b.w	8013e48 <_svfprintf_r+0x410>
 8014d40:	3210      	adds	r2, #16
 8014d42:	2b07      	cmp	r3, #7
 8014d44:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014d48:	6067      	str	r7, [r4, #4]
 8014d4a:	dc02      	bgt.n	8014d52 <_svfprintf_r+0x131a>
 8014d4c:	3408      	adds	r4, #8
 8014d4e:	3d10      	subs	r5, #16
 8014d50:	e7d6      	b.n	8014d00 <_svfprintf_r+0x12c8>
 8014d52:	aa22      	add	r2, sp, #136	; 0x88
 8014d54:	4649      	mov	r1, r9
 8014d56:	4650      	mov	r0, sl
 8014d58:	f003 fd4c 	bl	80187f4 <__ssprint_r>
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	d1e5      	bne.n	8014d2c <_svfprintf_r+0x12f4>
 8014d60:	ac25      	add	r4, sp, #148	; 0x94
 8014d62:	e7f4      	b.n	8014d4e <_svfprintf_r+0x1316>
 8014d64:	9903      	ldr	r1, [sp, #12]
 8014d66:	4650      	mov	r0, sl
 8014d68:	f002 fb66 	bl	8017438 <_free_r>
 8014d6c:	f7ff ba62 	b.w	8014234 <_svfprintf_r+0x7fc>
 8014d70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	f43f a868 	beq.w	8013e48 <_svfprintf_r+0x410>
 8014d78:	aa22      	add	r2, sp, #136	; 0x88
 8014d7a:	4649      	mov	r1, r9
 8014d7c:	4650      	mov	r0, sl
 8014d7e:	f003 fd39 	bl	80187f4 <__ssprint_r>
 8014d82:	f7ff b861 	b.w	8013e48 <_svfprintf_r+0x410>
 8014d86:	ea56 0207 	orrs.w	r2, r6, r7
 8014d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d8e:	f43f ab78 	beq.w	8014482 <_svfprintf_r+0xa4a>
 8014d92:	2b01      	cmp	r3, #1
 8014d94:	f43f ac0d 	beq.w	80145b2 <_svfprintf_r+0xb7a>
 8014d98:	2b02      	cmp	r3, #2
 8014d9a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8014d9e:	f43f ac55 	beq.w	801464c <_svfprintf_r+0xc14>
 8014da2:	08f2      	lsrs	r2, r6, #3
 8014da4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8014da8:	08f8      	lsrs	r0, r7, #3
 8014daa:	f006 0307 	and.w	r3, r6, #7
 8014dae:	4607      	mov	r7, r0
 8014db0:	4616      	mov	r6, r2
 8014db2:	3330      	adds	r3, #48	; 0x30
 8014db4:	ea56 0207 	orrs.w	r2, r6, r7
 8014db8:	4659      	mov	r1, fp
 8014dba:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8014dbe:	d1f0      	bne.n	8014da2 <_svfprintf_r+0x136a>
 8014dc0:	9a03      	ldr	r2, [sp, #12]
 8014dc2:	07d2      	lsls	r2, r2, #31
 8014dc4:	d506      	bpl.n	8014dd4 <_svfprintf_r+0x139c>
 8014dc6:	2b30      	cmp	r3, #48	; 0x30
 8014dc8:	d004      	beq.n	8014dd4 <_svfprintf_r+0x139c>
 8014dca:	2330      	movs	r3, #48	; 0x30
 8014dcc:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8014dd0:	f1a1 0b02 	sub.w	fp, r1, #2
 8014dd4:	ab4e      	add	r3, sp, #312	; 0x138
 8014dd6:	eba3 030b 	sub.w	r3, r3, fp
 8014dda:	9e04      	ldr	r6, [sp, #16]
 8014ddc:	9304      	str	r3, [sp, #16]
 8014dde:	2300      	movs	r3, #0
 8014de0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014de4:	9303      	str	r3, [sp, #12]
 8014de6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014dea:	461d      	mov	r5, r3
 8014dec:	f7ff b94c 	b.w	8014088 <_svfprintf_r+0x650>
 8014df0:	0801ca84 	.word	0x0801ca84
 8014df4:	0801ca74 	.word	0x0801ca74

08014df8 <sysconf>:
 8014df8:	2808      	cmp	r0, #8
 8014dfa:	b508      	push	{r3, lr}
 8014dfc:	d006      	beq.n	8014e0c <sysconf+0x14>
 8014dfe:	f002 f98b 	bl	8017118 <__errno>
 8014e02:	2316      	movs	r3, #22
 8014e04:	6003      	str	r3, [r0, #0]
 8014e06:	f04f 30ff 	mov.w	r0, #4294967295
 8014e0a:	bd08      	pop	{r3, pc}
 8014e0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014e10:	e7fb      	b.n	8014e0a <sysconf+0x12>
	...

08014e14 <__utoa>:
 8014e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e16:	4c1f      	ldr	r4, [pc, #124]	; (8014e94 <__utoa+0x80>)
 8014e18:	b08b      	sub	sp, #44	; 0x2c
 8014e1a:	4605      	mov	r5, r0
 8014e1c:	460b      	mov	r3, r1
 8014e1e:	466e      	mov	r6, sp
 8014e20:	f104 0c20 	add.w	ip, r4, #32
 8014e24:	6820      	ldr	r0, [r4, #0]
 8014e26:	6861      	ldr	r1, [r4, #4]
 8014e28:	4637      	mov	r7, r6
 8014e2a:	c703      	stmia	r7!, {r0, r1}
 8014e2c:	3408      	adds	r4, #8
 8014e2e:	4564      	cmp	r4, ip
 8014e30:	463e      	mov	r6, r7
 8014e32:	d1f7      	bne.n	8014e24 <__utoa+0x10>
 8014e34:	7921      	ldrb	r1, [r4, #4]
 8014e36:	7139      	strb	r1, [r7, #4]
 8014e38:	1e91      	subs	r1, r2, #2
 8014e3a:	6820      	ldr	r0, [r4, #0]
 8014e3c:	6038      	str	r0, [r7, #0]
 8014e3e:	2922      	cmp	r1, #34	; 0x22
 8014e40:	f04f 0100 	mov.w	r1, #0
 8014e44:	d904      	bls.n	8014e50 <__utoa+0x3c>
 8014e46:	7019      	strb	r1, [r3, #0]
 8014e48:	460b      	mov	r3, r1
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	b00b      	add	sp, #44	; 0x2c
 8014e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e50:	1e58      	subs	r0, r3, #1
 8014e52:	4684      	mov	ip, r0
 8014e54:	fbb5 f7f2 	udiv	r7, r5, r2
 8014e58:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8014e5c:	fb02 5617 	mls	r6, r2, r7, r5
 8014e60:	4476      	add	r6, lr
 8014e62:	460c      	mov	r4, r1
 8014e64:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8014e68:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8014e6c:	462e      	mov	r6, r5
 8014e6e:	42b2      	cmp	r2, r6
 8014e70:	f101 0101 	add.w	r1, r1, #1
 8014e74:	463d      	mov	r5, r7
 8014e76:	d9ed      	bls.n	8014e54 <__utoa+0x40>
 8014e78:	2200      	movs	r2, #0
 8014e7a:	545a      	strb	r2, [r3, r1]
 8014e7c:	1919      	adds	r1, r3, r4
 8014e7e:	1aa5      	subs	r5, r4, r2
 8014e80:	42aa      	cmp	r2, r5
 8014e82:	dae2      	bge.n	8014e4a <__utoa+0x36>
 8014e84:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8014e88:	780e      	ldrb	r6, [r1, #0]
 8014e8a:	7006      	strb	r6, [r0, #0]
 8014e8c:	3201      	adds	r2, #1
 8014e8e:	f801 5901 	strb.w	r5, [r1], #-1
 8014e92:	e7f4      	b.n	8014e7e <__utoa+0x6a>
 8014e94:	0801ca94 	.word	0x0801ca94

08014e98 <_vfprintf_r>:
 8014e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e9c:	ed2d 8b04 	vpush	{d8-d9}
 8014ea0:	b0cf      	sub	sp, #316	; 0x13c
 8014ea2:	4689      	mov	r9, r1
 8014ea4:	9203      	str	r2, [sp, #12]
 8014ea6:	461c      	mov	r4, r3
 8014ea8:	461e      	mov	r6, r3
 8014eaa:	4682      	mov	sl, r0
 8014eac:	f002 ff18 	bl	8017ce0 <_localeconv_r>
 8014eb0:	6803      	ldr	r3, [r0, #0]
 8014eb2:	9313      	str	r3, [sp, #76]	; 0x4c
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7eb f9a5 	bl	8000204 <strlen>
 8014eba:	900e      	str	r0, [sp, #56]	; 0x38
 8014ebc:	f1ba 0f00 	cmp.w	sl, #0
 8014ec0:	d005      	beq.n	8014ece <_vfprintf_r+0x36>
 8014ec2:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8014ec6:	b913      	cbnz	r3, 8014ece <_vfprintf_r+0x36>
 8014ec8:	4650      	mov	r0, sl
 8014eca:	f002 fa25 	bl	8017318 <__sinit>
 8014ece:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8014ed2:	07d8      	lsls	r0, r3, #31
 8014ed4:	d407      	bmi.n	8014ee6 <_vfprintf_r+0x4e>
 8014ed6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014eda:	0599      	lsls	r1, r3, #22
 8014edc:	d403      	bmi.n	8014ee6 <_vfprintf_r+0x4e>
 8014ede:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8014ee2:	f002 ff03 	bl	8017cec <__retarget_lock_acquire_recursive>
 8014ee6:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8014eea:	049a      	lsls	r2, r3, #18
 8014eec:	d409      	bmi.n	8014f02 <_vfprintf_r+0x6a>
 8014eee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014ef2:	f8a9 300c 	strh.w	r3, [r9, #12]
 8014ef6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8014efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014efe:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8014f02:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014f06:	071f      	lsls	r7, r3, #28
 8014f08:	d502      	bpl.n	8014f10 <_vfprintf_r+0x78>
 8014f0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f0e:	b9d3      	cbnz	r3, 8014f46 <_vfprintf_r+0xae>
 8014f10:	4649      	mov	r1, r9
 8014f12:	4650      	mov	r0, sl
 8014f14:	f001 fa36 	bl	8016384 <__swsetup_r>
 8014f18:	b1a8      	cbz	r0, 8014f46 <_vfprintf_r+0xae>
 8014f1a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8014f1e:	07dd      	lsls	r5, r3, #31
 8014f20:	d508      	bpl.n	8014f34 <_vfprintf_r+0x9c>
 8014f22:	f04f 33ff 	mov.w	r3, #4294967295
 8014f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014f2a:	b04f      	add	sp, #316	; 0x13c
 8014f2c:	ecbd 8b04 	vpop	{d8-d9}
 8014f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f34:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014f38:	059c      	lsls	r4, r3, #22
 8014f3a:	d4f2      	bmi.n	8014f22 <_vfprintf_r+0x8a>
 8014f3c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8014f40:	f002 fed5 	bl	8017cee <__retarget_lock_release_recursive>
 8014f44:	e7ed      	b.n	8014f22 <_vfprintf_r+0x8a>
 8014f46:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014f4a:	f003 021a 	and.w	r2, r3, #26
 8014f4e:	2a0a      	cmp	r2, #10
 8014f50:	d115      	bne.n	8014f7e <_vfprintf_r+0xe6>
 8014f52:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8014f56:	2a00      	cmp	r2, #0
 8014f58:	db11      	blt.n	8014f7e <_vfprintf_r+0xe6>
 8014f5a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8014f5e:	07d0      	lsls	r0, r2, #31
 8014f60:	d405      	bmi.n	8014f6e <_vfprintf_r+0xd6>
 8014f62:	0599      	lsls	r1, r3, #22
 8014f64:	d403      	bmi.n	8014f6e <_vfprintf_r+0xd6>
 8014f66:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8014f6a:	f002 fec0 	bl	8017cee <__retarget_lock_release_recursive>
 8014f6e:	9a03      	ldr	r2, [sp, #12]
 8014f70:	4623      	mov	r3, r4
 8014f72:	4649      	mov	r1, r9
 8014f74:	4650      	mov	r0, sl
 8014f76:	f001 f9c5 	bl	8016304 <__sbprintf>
 8014f7a:	900f      	str	r0, [sp, #60]	; 0x3c
 8014f7c:	e7d4      	b.n	8014f28 <_vfprintf_r+0x90>
 8014f7e:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 80151e8 <_vfprintf_r+0x350>
 8014f82:	2500      	movs	r5, #0
 8014f84:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8014f88:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014f8c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8014f90:	ac25      	add	r4, sp, #148	; 0x94
 8014f92:	9422      	str	r4, [sp, #136]	; 0x88
 8014f94:	9505      	str	r5, [sp, #20]
 8014f96:	950a      	str	r5, [sp, #40]	; 0x28
 8014f98:	9512      	str	r5, [sp, #72]	; 0x48
 8014f9a:	9514      	str	r5, [sp, #80]	; 0x50
 8014f9c:	950f      	str	r5, [sp, #60]	; 0x3c
 8014f9e:	9b03      	ldr	r3, [sp, #12]
 8014fa0:	461d      	mov	r5, r3
 8014fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fa6:	b10a      	cbz	r2, 8014fac <_vfprintf_r+0x114>
 8014fa8:	2a25      	cmp	r2, #37	; 0x25
 8014faa:	d1f9      	bne.n	8014fa0 <_vfprintf_r+0x108>
 8014fac:	9b03      	ldr	r3, [sp, #12]
 8014fae:	1aef      	subs	r7, r5, r3
 8014fb0:	d00d      	beq.n	8014fce <_vfprintf_r+0x136>
 8014fb2:	e9c4 3700 	strd	r3, r7, [r4]
 8014fb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014fb8:	443b      	add	r3, r7
 8014fba:	9324      	str	r3, [sp, #144]	; 0x90
 8014fbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	2b07      	cmp	r3, #7
 8014fc2:	9323      	str	r3, [sp, #140]	; 0x8c
 8014fc4:	dc79      	bgt.n	80150ba <_vfprintf_r+0x222>
 8014fc6:	3408      	adds	r4, #8
 8014fc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fca:	443b      	add	r3, r7
 8014fcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fce:	782b      	ldrb	r3, [r5, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	f001 8156 	beq.w	8016282 <_vfprintf_r+0x13ea>
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	3501      	adds	r5, #1
 8014fda:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014fde:	f04f 38ff 	mov.w	r8, #4294967295
 8014fe2:	9310      	str	r3, [sp, #64]	; 0x40
 8014fe4:	469b      	mov	fp, r3
 8014fe6:	270a      	movs	r7, #10
 8014fe8:	212b      	movs	r1, #43	; 0x2b
 8014fea:	462a      	mov	r2, r5
 8014fec:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014ff0:	9307      	str	r3, [sp, #28]
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ff6:	9b07      	ldr	r3, [sp, #28]
 8014ff8:	3b20      	subs	r3, #32
 8014ffa:	2b5a      	cmp	r3, #90	; 0x5a
 8014ffc:	f200 85c0 	bhi.w	8015b80 <_vfprintf_r+0xce8>
 8015000:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015004:	05be007e 	.word	0x05be007e
 8015008:	008605be 	.word	0x008605be
 801500c:	05be05be 	.word	0x05be05be
 8015010:	006505be 	.word	0x006505be
 8015014:	05be05be 	.word	0x05be05be
 8015018:	00930089 	.word	0x00930089
 801501c:	009005be 	.word	0x009005be
 8015020:	05be0096 	.word	0x05be0096
 8015024:	00b200af 	.word	0x00b200af
 8015028:	00b200b2 	.word	0x00b200b2
 801502c:	00b200b2 	.word	0x00b200b2
 8015030:	00b200b2 	.word	0x00b200b2
 8015034:	00b200b2 	.word	0x00b200b2
 8015038:	05be05be 	.word	0x05be05be
 801503c:	05be05be 	.word	0x05be05be
 8015040:	05be05be 	.word	0x05be05be
 8015044:	012105be 	.word	0x012105be
 8015048:	00df05be 	.word	0x00df05be
 801504c:	012100f6 	.word	0x012100f6
 8015050:	01210121 	.word	0x01210121
 8015054:	05be05be 	.word	0x05be05be
 8015058:	05be05be 	.word	0x05be05be
 801505c:	05be00c2 	.word	0x05be00c2
 8015060:	049005be 	.word	0x049005be
 8015064:	05be05be 	.word	0x05be05be
 8015068:	04d705be 	.word	0x04d705be
 801506c:	04fb05be 	.word	0x04fb05be
 8015070:	05be05be 	.word	0x05be05be
 8015074:	05be051a 	.word	0x05be051a
 8015078:	05be05be 	.word	0x05be05be
 801507c:	05be05be 	.word	0x05be05be
 8015080:	05be05be 	.word	0x05be05be
 8015084:	012105be 	.word	0x012105be
 8015088:	00df05be 	.word	0x00df05be
 801508c:	012100f8 	.word	0x012100f8
 8015090:	01210121 	.word	0x01210121
 8015094:	00f800c5 	.word	0x00f800c5
 8015098:	05be00d9 	.word	0x05be00d9
 801509c:	05be00d2 	.word	0x05be00d2
 80150a0:	0492046d 	.word	0x0492046d
 80150a4:	00d904c6 	.word	0x00d904c6
 80150a8:	04d705be 	.word	0x04d705be
 80150ac:	04fd007c 	.word	0x04fd007c
 80150b0:	05be05be 	.word	0x05be05be
 80150b4:	05be0537 	.word	0x05be0537
 80150b8:	007c      	.short	0x007c
 80150ba:	aa22      	add	r2, sp, #136	; 0x88
 80150bc:	4649      	mov	r1, r9
 80150be:	4650      	mov	r0, sl
 80150c0:	f003 fc13 	bl	80188ea <__sprint_r>
 80150c4:	2800      	cmp	r0, #0
 80150c6:	f040 8130 	bne.w	801532a <_vfprintf_r+0x492>
 80150ca:	ac25      	add	r4, sp, #148	; 0x94
 80150cc:	e77c      	b.n	8014fc8 <_vfprintf_r+0x130>
 80150ce:	4650      	mov	r0, sl
 80150d0:	f002 fe06 	bl	8017ce0 <_localeconv_r>
 80150d4:	6843      	ldr	r3, [r0, #4]
 80150d6:	9314      	str	r3, [sp, #80]	; 0x50
 80150d8:	4618      	mov	r0, r3
 80150da:	f7eb f893 	bl	8000204 <strlen>
 80150de:	9012      	str	r0, [sp, #72]	; 0x48
 80150e0:	4650      	mov	r0, sl
 80150e2:	f002 fdfd 	bl	8017ce0 <_localeconv_r>
 80150e6:	6883      	ldr	r3, [r0, #8]
 80150e8:	930a      	str	r3, [sp, #40]	; 0x28
 80150ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150ec:	212b      	movs	r1, #43	; 0x2b
 80150ee:	b12b      	cbz	r3, 80150fc <_vfprintf_r+0x264>
 80150f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150f2:	b11b      	cbz	r3, 80150fc <_vfprintf_r+0x264>
 80150f4:	781b      	ldrb	r3, [r3, #0]
 80150f6:	b10b      	cbz	r3, 80150fc <_vfprintf_r+0x264>
 80150f8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80150fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80150fe:	e774      	b.n	8014fea <_vfprintf_r+0x152>
 8015100:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8015104:	2b00      	cmp	r3, #0
 8015106:	d1f9      	bne.n	80150fc <_vfprintf_r+0x264>
 8015108:	2320      	movs	r3, #32
 801510a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801510e:	e7f5      	b.n	80150fc <_vfprintf_r+0x264>
 8015110:	f04b 0b01 	orr.w	fp, fp, #1
 8015114:	e7f2      	b.n	80150fc <_vfprintf_r+0x264>
 8015116:	f856 3b04 	ldr.w	r3, [r6], #4
 801511a:	9310      	str	r3, [sp, #64]	; 0x40
 801511c:	2b00      	cmp	r3, #0
 801511e:	daed      	bge.n	80150fc <_vfprintf_r+0x264>
 8015120:	425b      	negs	r3, r3
 8015122:	9310      	str	r3, [sp, #64]	; 0x40
 8015124:	f04b 0b04 	orr.w	fp, fp, #4
 8015128:	e7e8      	b.n	80150fc <_vfprintf_r+0x264>
 801512a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801512e:	e7e5      	b.n	80150fc <_vfprintf_r+0x264>
 8015130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015136:	9207      	str	r2, [sp, #28]
 8015138:	2a2a      	cmp	r2, #42	; 0x2a
 801513a:	d10f      	bne.n	801515c <_vfprintf_r+0x2c4>
 801513c:	f856 0b04 	ldr.w	r0, [r6], #4
 8015140:	930b      	str	r3, [sp, #44]	; 0x2c
 8015142:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8015146:	e7d9      	b.n	80150fc <_vfprintf_r+0x264>
 8015148:	fb07 2808 	mla	r8, r7, r8, r2
 801514c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015150:	9207      	str	r2, [sp, #28]
 8015152:	9a07      	ldr	r2, [sp, #28]
 8015154:	3a30      	subs	r2, #48	; 0x30
 8015156:	2a09      	cmp	r2, #9
 8015158:	d9f6      	bls.n	8015148 <_vfprintf_r+0x2b0>
 801515a:	e74b      	b.n	8014ff4 <_vfprintf_r+0x15c>
 801515c:	f04f 0800 	mov.w	r8, #0
 8015160:	e7f7      	b.n	8015152 <_vfprintf_r+0x2ba>
 8015162:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8015166:	e7c9      	b.n	80150fc <_vfprintf_r+0x264>
 8015168:	2200      	movs	r2, #0
 801516a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801516c:	9210      	str	r2, [sp, #64]	; 0x40
 801516e:	9a07      	ldr	r2, [sp, #28]
 8015170:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015172:	3a30      	subs	r2, #48	; 0x30
 8015174:	fb07 2200 	mla	r2, r7, r0, r2
 8015178:	9210      	str	r2, [sp, #64]	; 0x40
 801517a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801517e:	9207      	str	r2, [sp, #28]
 8015180:	3a30      	subs	r2, #48	; 0x30
 8015182:	2a09      	cmp	r2, #9
 8015184:	d9f3      	bls.n	801516e <_vfprintf_r+0x2d6>
 8015186:	e735      	b.n	8014ff4 <_vfprintf_r+0x15c>
 8015188:	f04b 0b08 	orr.w	fp, fp, #8
 801518c:	e7b6      	b.n	80150fc <_vfprintf_r+0x264>
 801518e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	2b68      	cmp	r3, #104	; 0x68
 8015194:	bf01      	itttt	eq
 8015196:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8015198:	3301      	addeq	r3, #1
 801519a:	930b      	streq	r3, [sp, #44]	; 0x2c
 801519c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80151a0:	bf18      	it	ne
 80151a2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80151a6:	e7a9      	b.n	80150fc <_vfprintf_r+0x264>
 80151a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151aa:	781b      	ldrb	r3, [r3, #0]
 80151ac:	2b6c      	cmp	r3, #108	; 0x6c
 80151ae:	d105      	bne.n	80151bc <_vfprintf_r+0x324>
 80151b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151b2:	3301      	adds	r3, #1
 80151b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80151b6:	f04b 0b20 	orr.w	fp, fp, #32
 80151ba:	e79f      	b.n	80150fc <_vfprintf_r+0x264>
 80151bc:	f04b 0b10 	orr.w	fp, fp, #16
 80151c0:	e79c      	b.n	80150fc <_vfprintf_r+0x264>
 80151c2:	4632      	mov	r2, r6
 80151c4:	2000      	movs	r0, #0
 80151c6:	f852 3b04 	ldr.w	r3, [r2], #4
 80151ca:	9206      	str	r2, [sp, #24]
 80151cc:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80151d0:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80151d4:	ab35      	add	r3, sp, #212	; 0xd4
 80151d6:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80151da:	9004      	str	r0, [sp, #16]
 80151dc:	f04f 0801 	mov.w	r8, #1
 80151e0:	4606      	mov	r6, r0
 80151e2:	4605      	mov	r5, r0
 80151e4:	9303      	str	r3, [sp, #12]
 80151e6:	e1c3      	b.n	8015570 <_vfprintf_r+0x6d8>
	...
 80151f0:	f04b 0b10 	orr.w	fp, fp, #16
 80151f4:	f01b 0f20 	tst.w	fp, #32
 80151f8:	d012      	beq.n	8015220 <_vfprintf_r+0x388>
 80151fa:	3607      	adds	r6, #7
 80151fc:	f026 0307 	bic.w	r3, r6, #7
 8015200:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015204:	9306      	str	r3, [sp, #24]
 8015206:	2e00      	cmp	r6, #0
 8015208:	f177 0300 	sbcs.w	r3, r7, #0
 801520c:	da06      	bge.n	801521c <_vfprintf_r+0x384>
 801520e:	4276      	negs	r6, r6
 8015210:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8015214:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8015218:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801521c:	2301      	movs	r3, #1
 801521e:	e392      	b.n	8015946 <_vfprintf_r+0xaae>
 8015220:	1d33      	adds	r3, r6, #4
 8015222:	f01b 0f10 	tst.w	fp, #16
 8015226:	9306      	str	r3, [sp, #24]
 8015228:	d002      	beq.n	8015230 <_vfprintf_r+0x398>
 801522a:	6836      	ldr	r6, [r6, #0]
 801522c:	17f7      	asrs	r7, r6, #31
 801522e:	e7ea      	b.n	8015206 <_vfprintf_r+0x36e>
 8015230:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015234:	6836      	ldr	r6, [r6, #0]
 8015236:	d001      	beq.n	801523c <_vfprintf_r+0x3a4>
 8015238:	b236      	sxth	r6, r6
 801523a:	e7f7      	b.n	801522c <_vfprintf_r+0x394>
 801523c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015240:	bf18      	it	ne
 8015242:	b276      	sxtbne	r6, r6
 8015244:	e7f2      	b.n	801522c <_vfprintf_r+0x394>
 8015246:	3607      	adds	r6, #7
 8015248:	f026 0307 	bic.w	r3, r6, #7
 801524c:	ecb3 7b02 	vldmia	r3!, {d7}
 8015250:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015254:	9306      	str	r3, [sp, #24]
 8015256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015258:	ee09 3a10 	vmov	s18, r3
 801525c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801525e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015262:	ee09 3a90 	vmov	s19, r3
 8015266:	f04f 32ff 	mov.w	r2, #4294967295
 801526a:	4b39      	ldr	r3, [pc, #228]	; (8015350 <_vfprintf_r+0x4b8>)
 801526c:	ec51 0b19 	vmov	r0, r1, d9
 8015270:	f7eb fc7c 	bl	8000b6c <__aeabi_dcmpun>
 8015274:	bb20      	cbnz	r0, 80152c0 <_vfprintf_r+0x428>
 8015276:	4b36      	ldr	r3, [pc, #216]	; (8015350 <_vfprintf_r+0x4b8>)
 8015278:	ec51 0b19 	vmov	r0, r1, d9
 801527c:	f04f 32ff 	mov.w	r2, #4294967295
 8015280:	f7eb fc56 	bl	8000b30 <__aeabi_dcmple>
 8015284:	b9e0      	cbnz	r0, 80152c0 <_vfprintf_r+0x428>
 8015286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801528a:	2200      	movs	r2, #0
 801528c:	2300      	movs	r3, #0
 801528e:	f7eb fc45 	bl	8000b1c <__aeabi_dcmplt>
 8015292:	b110      	cbz	r0, 801529a <_vfprintf_r+0x402>
 8015294:	232d      	movs	r3, #45	; 0x2d
 8015296:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801529a:	4a2e      	ldr	r2, [pc, #184]	; (8015354 <_vfprintf_r+0x4bc>)
 801529c:	482e      	ldr	r0, [pc, #184]	; (8015358 <_vfprintf_r+0x4c0>)
 801529e:	9907      	ldr	r1, [sp, #28]
 80152a0:	4613      	mov	r3, r2
 80152a2:	2947      	cmp	r1, #71	; 0x47
 80152a4:	bfc8      	it	gt
 80152a6:	4603      	movgt	r3, r0
 80152a8:	9303      	str	r3, [sp, #12]
 80152aa:	2300      	movs	r3, #0
 80152ac:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80152b0:	9304      	str	r3, [sp, #16]
 80152b2:	f04f 0803 	mov.w	r8, #3
 80152b6:	461e      	mov	r6, r3
 80152b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80152bc:	461d      	mov	r5, r3
 80152be:	e157      	b.n	8015570 <_vfprintf_r+0x6d8>
 80152c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80152c4:	4610      	mov	r0, r2
 80152c6:	4619      	mov	r1, r3
 80152c8:	f7eb fc50 	bl	8000b6c <__aeabi_dcmpun>
 80152cc:	b140      	cbz	r0, 80152e0 <_vfprintf_r+0x448>
 80152ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152d0:	4a22      	ldr	r2, [pc, #136]	; (801535c <_vfprintf_r+0x4c4>)
 80152d2:	4823      	ldr	r0, [pc, #140]	; (8015360 <_vfprintf_r+0x4c8>)
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	bfbc      	itt	lt
 80152d8:	232d      	movlt	r3, #45	; 0x2d
 80152da:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80152de:	e7de      	b.n	801529e <_vfprintf_r+0x406>
 80152e0:	9b07      	ldr	r3, [sp, #28]
 80152e2:	f023 0320 	bic.w	r3, r3, #32
 80152e6:	2b41      	cmp	r3, #65	; 0x41
 80152e8:	9308      	str	r3, [sp, #32]
 80152ea:	d13b      	bne.n	8015364 <_vfprintf_r+0x4cc>
 80152ec:	2330      	movs	r3, #48	; 0x30
 80152ee:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80152f2:	9b07      	ldr	r3, [sp, #28]
 80152f4:	2b61      	cmp	r3, #97	; 0x61
 80152f6:	bf0c      	ite	eq
 80152f8:	2378      	moveq	r3, #120	; 0x78
 80152fa:	2358      	movne	r3, #88	; 0x58
 80152fc:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8015300:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8015304:	f04b 0b02 	orr.w	fp, fp, #2
 8015308:	f340 8209 	ble.w	801571e <_vfprintf_r+0x886>
 801530c:	f108 0101 	add.w	r1, r8, #1
 8015310:	4650      	mov	r0, sl
 8015312:	f7fd f953 	bl	80125bc <_malloc_r>
 8015316:	9003      	str	r0, [sp, #12]
 8015318:	2800      	cmp	r0, #0
 801531a:	f040 8204 	bne.w	8015726 <_vfprintf_r+0x88e>
 801531e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015326:	f8a9 300c 	strh.w	r3, [r9, #12]
 801532a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801532e:	07d9      	lsls	r1, r3, #31
 8015330:	d407      	bmi.n	8015342 <_vfprintf_r+0x4aa>
 8015332:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015336:	059a      	lsls	r2, r3, #22
 8015338:	d403      	bmi.n	8015342 <_vfprintf_r+0x4aa>
 801533a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801533e:	f002 fcd6 	bl	8017cee <__retarget_lock_release_recursive>
 8015342:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015346:	065b      	lsls	r3, r3, #25
 8015348:	f57f adee 	bpl.w	8014f28 <_vfprintf_r+0x90>
 801534c:	e5e9      	b.n	8014f22 <_vfprintf_r+0x8a>
 801534e:	bf00      	nop
 8015350:	7fefffff 	.word	0x7fefffff
 8015354:	0801ca40 	.word	0x0801ca40
 8015358:	0801ca44 	.word	0x0801ca44
 801535c:	0801ca48 	.word	0x0801ca48
 8015360:	0801ca4c 	.word	0x0801ca4c
 8015364:	f1b8 3fff 	cmp.w	r8, #4294967295
 8015368:	f000 81e0 	beq.w	801572c <_vfprintf_r+0x894>
 801536c:	9b08      	ldr	r3, [sp, #32]
 801536e:	2b47      	cmp	r3, #71	; 0x47
 8015370:	f040 81e0 	bne.w	8015734 <_vfprintf_r+0x89c>
 8015374:	f1b8 0f00 	cmp.w	r8, #0
 8015378:	f040 81dc 	bne.w	8015734 <_vfprintf_r+0x89c>
 801537c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015380:	f04f 0801 	mov.w	r8, #1
 8015384:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8015388:	9311      	str	r3, [sp, #68]	; 0x44
 801538a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801538c:	2b00      	cmp	r3, #0
 801538e:	f280 81d3 	bge.w	8015738 <_vfprintf_r+0x8a0>
 8015392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015394:	ee08 3a10 	vmov	s16, r3
 8015398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801539a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801539e:	ee08 3a90 	vmov	s17, r3
 80153a2:	232d      	movs	r3, #45	; 0x2d
 80153a4:	9318      	str	r3, [sp, #96]	; 0x60
 80153a6:	9b08      	ldr	r3, [sp, #32]
 80153a8:	2b41      	cmp	r3, #65	; 0x41
 80153aa:	f040 81e3 	bne.w	8015774 <_vfprintf_r+0x8dc>
 80153ae:	eeb0 0a48 	vmov.f32	s0, s16
 80153b2:	eef0 0a68 	vmov.f32	s1, s17
 80153b6:	a81c      	add	r0, sp, #112	; 0x70
 80153b8:	f003 f986 	bl	80186c8 <frexp>
 80153bc:	2200      	movs	r2, #0
 80153be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80153c2:	ec51 0b10 	vmov	r0, r1, d0
 80153c6:	f7eb f937 	bl	8000638 <__aeabi_dmul>
 80153ca:	2200      	movs	r2, #0
 80153cc:	2300      	movs	r3, #0
 80153ce:	4606      	mov	r6, r0
 80153d0:	460f      	mov	r7, r1
 80153d2:	f7eb fb99 	bl	8000b08 <__aeabi_dcmpeq>
 80153d6:	b108      	cbz	r0, 80153dc <_vfprintf_r+0x544>
 80153d8:	2301      	movs	r3, #1
 80153da:	931c      	str	r3, [sp, #112]	; 0x70
 80153dc:	4bb7      	ldr	r3, [pc, #732]	; (80156bc <_vfprintf_r+0x824>)
 80153de:	4ab8      	ldr	r2, [pc, #736]	; (80156c0 <_vfprintf_r+0x828>)
 80153e0:	9907      	ldr	r1, [sp, #28]
 80153e2:	9d03      	ldr	r5, [sp, #12]
 80153e4:	2961      	cmp	r1, #97	; 0x61
 80153e6:	bf18      	it	ne
 80153e8:	461a      	movne	r2, r3
 80153ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80153ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80153f0:	9305      	str	r3, [sp, #20]
 80153f2:	4bb4      	ldr	r3, [pc, #720]	; (80156c4 <_vfprintf_r+0x82c>)
 80153f4:	2200      	movs	r2, #0
 80153f6:	4630      	mov	r0, r6
 80153f8:	4639      	mov	r1, r7
 80153fa:	f7eb f91d 	bl	8000638 <__aeabi_dmul>
 80153fe:	460f      	mov	r7, r1
 8015400:	4606      	mov	r6, r0
 8015402:	f7eb fbc9 	bl	8000b98 <__aeabi_d2iz>
 8015406:	9019      	str	r0, [sp, #100]	; 0x64
 8015408:	f7eb f8ac 	bl	8000564 <__aeabi_i2d>
 801540c:	4602      	mov	r2, r0
 801540e:	460b      	mov	r3, r1
 8015410:	4630      	mov	r0, r6
 8015412:	4639      	mov	r1, r7
 8015414:	f7ea ff58 	bl	80002c8 <__aeabi_dsub>
 8015418:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801541a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801541c:	5c9b      	ldrb	r3, [r3, r2]
 801541e:	f805 3b01 	strb.w	r3, [r5], #1
 8015422:	9b05      	ldr	r3, [sp, #20]
 8015424:	9309      	str	r3, [sp, #36]	; 0x24
 8015426:	1c5a      	adds	r2, r3, #1
 8015428:	4606      	mov	r6, r0
 801542a:	460f      	mov	r7, r1
 801542c:	d007      	beq.n	801543e <_vfprintf_r+0x5a6>
 801542e:	3b01      	subs	r3, #1
 8015430:	9305      	str	r3, [sp, #20]
 8015432:	2200      	movs	r2, #0
 8015434:	2300      	movs	r3, #0
 8015436:	f7eb fb67 	bl	8000b08 <__aeabi_dcmpeq>
 801543a:	2800      	cmp	r0, #0
 801543c:	d0d9      	beq.n	80153f2 <_vfprintf_r+0x55a>
 801543e:	4ba2      	ldr	r3, [pc, #648]	; (80156c8 <_vfprintf_r+0x830>)
 8015440:	2200      	movs	r2, #0
 8015442:	4630      	mov	r0, r6
 8015444:	4639      	mov	r1, r7
 8015446:	f7eb fb87 	bl	8000b58 <__aeabi_dcmpgt>
 801544a:	b960      	cbnz	r0, 8015466 <_vfprintf_r+0x5ce>
 801544c:	4b9e      	ldr	r3, [pc, #632]	; (80156c8 <_vfprintf_r+0x830>)
 801544e:	2200      	movs	r2, #0
 8015450:	4630      	mov	r0, r6
 8015452:	4639      	mov	r1, r7
 8015454:	f7eb fb58 	bl	8000b08 <__aeabi_dcmpeq>
 8015458:	2800      	cmp	r0, #0
 801545a:	f000 8186 	beq.w	801576a <_vfprintf_r+0x8d2>
 801545e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015460:	07df      	lsls	r7, r3, #31
 8015462:	f140 8182 	bpl.w	801576a <_vfprintf_r+0x8d2>
 8015466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015468:	9520      	str	r5, [sp, #128]	; 0x80
 801546a:	7bd9      	ldrb	r1, [r3, #15]
 801546c:	2030      	movs	r0, #48	; 0x30
 801546e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015470:	1e53      	subs	r3, r2, #1
 8015472:	9320      	str	r3, [sp, #128]	; 0x80
 8015474:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8015478:	428b      	cmp	r3, r1
 801547a:	f000 8165 	beq.w	8015748 <_vfprintf_r+0x8b0>
 801547e:	2b39      	cmp	r3, #57	; 0x39
 8015480:	bf0b      	itete	eq
 8015482:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8015484:	3301      	addne	r3, #1
 8015486:	7a9b      	ldrbeq	r3, [r3, #10]
 8015488:	b2db      	uxtbne	r3, r3
 801548a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801548e:	9b03      	ldr	r3, [sp, #12]
 8015490:	1aeb      	subs	r3, r5, r3
 8015492:	9305      	str	r3, [sp, #20]
 8015494:	9b08      	ldr	r3, [sp, #32]
 8015496:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015498:	2b47      	cmp	r3, #71	; 0x47
 801549a:	f040 81b3 	bne.w	8015804 <_vfprintf_r+0x96c>
 801549e:	1cee      	adds	r6, r5, #3
 80154a0:	db02      	blt.n	80154a8 <_vfprintf_r+0x610>
 80154a2:	4545      	cmp	r5, r8
 80154a4:	f340 81d5 	ble.w	8015852 <_vfprintf_r+0x9ba>
 80154a8:	9b07      	ldr	r3, [sp, #28]
 80154aa:	3b02      	subs	r3, #2
 80154ac:	9307      	str	r3, [sp, #28]
 80154ae:	9907      	ldr	r1, [sp, #28]
 80154b0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80154b4:	f021 0120 	bic.w	r1, r1, #32
 80154b8:	2941      	cmp	r1, #65	; 0x41
 80154ba:	bf08      	it	eq
 80154bc:	320f      	addeq	r2, #15
 80154be:	f105 33ff 	add.w	r3, r5, #4294967295
 80154c2:	bf06      	itte	eq
 80154c4:	b2d2      	uxtbeq	r2, r2
 80154c6:	2101      	moveq	r1, #1
 80154c8:	2100      	movne	r1, #0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	931c      	str	r3, [sp, #112]	; 0x70
 80154ce:	bfb8      	it	lt
 80154d0:	f1c5 0301 	rsblt	r3, r5, #1
 80154d4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80154d8:	bfb4      	ite	lt
 80154da:	222d      	movlt	r2, #45	; 0x2d
 80154dc:	222b      	movge	r2, #43	; 0x2b
 80154de:	2b09      	cmp	r3, #9
 80154e0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80154e4:	f340 81a4 	ble.w	8015830 <_vfprintf_r+0x998>
 80154e8:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80154ec:	260a      	movs	r6, #10
 80154ee:	4611      	mov	r1, r2
 80154f0:	fb93 f5f6 	sdiv	r5, r3, r6
 80154f4:	fb06 3015 	mls	r0, r6, r5, r3
 80154f8:	3030      	adds	r0, #48	; 0x30
 80154fa:	f801 0c01 	strb.w	r0, [r1, #-1]
 80154fe:	4618      	mov	r0, r3
 8015500:	2863      	cmp	r0, #99	; 0x63
 8015502:	f102 32ff 	add.w	r2, r2, #4294967295
 8015506:	462b      	mov	r3, r5
 8015508:	dcf1      	bgt.n	80154ee <_vfprintf_r+0x656>
 801550a:	3330      	adds	r3, #48	; 0x30
 801550c:	1e88      	subs	r0, r1, #2
 801550e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015512:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8015516:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801551a:	4603      	mov	r3, r0
 801551c:	42ab      	cmp	r3, r5
 801551e:	f0c0 8182 	bcc.w	8015826 <_vfprintf_r+0x98e>
 8015522:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8015526:	1a52      	subs	r2, r2, r1
 8015528:	42a8      	cmp	r0, r5
 801552a:	bf88      	it	hi
 801552c:	2200      	movhi	r2, #0
 801552e:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8015532:	441a      	add	r2, r3
 8015534:	ab1e      	add	r3, sp, #120	; 0x78
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	9a05      	ldr	r2, [sp, #20]
 801553a:	9315      	str	r3, [sp, #84]	; 0x54
 801553c:	2a01      	cmp	r2, #1
 801553e:	eb03 0802 	add.w	r8, r3, r2
 8015542:	dc02      	bgt.n	801554a <_vfprintf_r+0x6b2>
 8015544:	f01b 0f01 	tst.w	fp, #1
 8015548:	d001      	beq.n	801554e <_vfprintf_r+0x6b6>
 801554a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801554c:	4498      	add	r8, r3
 801554e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8015552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015556:	9311      	str	r3, [sp, #68]	; 0x44
 8015558:	2300      	movs	r3, #0
 801555a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801555e:	461d      	mov	r5, r3
 8015560:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015562:	b113      	cbz	r3, 801556a <_vfprintf_r+0x6d2>
 8015564:	232d      	movs	r3, #45	; 0x2d
 8015566:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801556a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801556e:	2600      	movs	r6, #0
 8015570:	4546      	cmp	r6, r8
 8015572:	4633      	mov	r3, r6
 8015574:	bfb8      	it	lt
 8015576:	4643      	movlt	r3, r8
 8015578:	9311      	str	r3, [sp, #68]	; 0x44
 801557a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801557e:	b113      	cbz	r3, 8015586 <_vfprintf_r+0x6ee>
 8015580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015582:	3301      	adds	r3, #1
 8015584:	9311      	str	r3, [sp, #68]	; 0x44
 8015586:	f01b 0302 	ands.w	r3, fp, #2
 801558a:	9317      	str	r3, [sp, #92]	; 0x5c
 801558c:	bf1e      	ittt	ne
 801558e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8015590:	3302      	addne	r3, #2
 8015592:	9311      	strne	r3, [sp, #68]	; 0x44
 8015594:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8015598:	9318      	str	r3, [sp, #96]	; 0x60
 801559a:	d11f      	bne.n	80155dc <_vfprintf_r+0x744>
 801559c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80155a0:	1a9f      	subs	r7, r3, r2
 80155a2:	2f00      	cmp	r7, #0
 80155a4:	dd1a      	ble.n	80155dc <_vfprintf_r+0x744>
 80155a6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80155aa:	4848      	ldr	r0, [pc, #288]	; (80156cc <_vfprintf_r+0x834>)
 80155ac:	6020      	str	r0, [r4, #0]
 80155ae:	2f10      	cmp	r7, #16
 80155b0:	f103 0301 	add.w	r3, r3, #1
 80155b4:	f104 0108 	add.w	r1, r4, #8
 80155b8:	f300 82f0 	bgt.w	8015b9c <_vfprintf_r+0xd04>
 80155bc:	6067      	str	r7, [r4, #4]
 80155be:	2b07      	cmp	r3, #7
 80155c0:	4417      	add	r7, r2
 80155c2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80155c6:	f340 82fc 	ble.w	8015bc2 <_vfprintf_r+0xd2a>
 80155ca:	aa22      	add	r2, sp, #136	; 0x88
 80155cc:	4649      	mov	r1, r9
 80155ce:	4650      	mov	r0, sl
 80155d0:	f003 f98b 	bl	80188ea <__sprint_r>
 80155d4:	2800      	cmp	r0, #0
 80155d6:	f040 8632 	bne.w	801623e <_vfprintf_r+0x13a6>
 80155da:	ac25      	add	r4, sp, #148	; 0x94
 80155dc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80155e0:	b173      	cbz	r3, 8015600 <_vfprintf_r+0x768>
 80155e2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80155e6:	6023      	str	r3, [r4, #0]
 80155e8:	2301      	movs	r3, #1
 80155ea:	6063      	str	r3, [r4, #4]
 80155ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80155ee:	3301      	adds	r3, #1
 80155f0:	9324      	str	r3, [sp, #144]	; 0x90
 80155f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80155f4:	3301      	adds	r3, #1
 80155f6:	2b07      	cmp	r3, #7
 80155f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80155fa:	f300 82e4 	bgt.w	8015bc6 <_vfprintf_r+0xd2e>
 80155fe:	3408      	adds	r4, #8
 8015600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015602:	b16b      	cbz	r3, 8015620 <_vfprintf_r+0x788>
 8015604:	ab1b      	add	r3, sp, #108	; 0x6c
 8015606:	6023      	str	r3, [r4, #0]
 8015608:	2302      	movs	r3, #2
 801560a:	6063      	str	r3, [r4, #4]
 801560c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801560e:	3302      	adds	r3, #2
 8015610:	9324      	str	r3, [sp, #144]	; 0x90
 8015612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015614:	3301      	adds	r3, #1
 8015616:	2b07      	cmp	r3, #7
 8015618:	9323      	str	r3, [sp, #140]	; 0x8c
 801561a:	f300 82de 	bgt.w	8015bda <_vfprintf_r+0xd42>
 801561e:	3408      	adds	r4, #8
 8015620:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015622:	2b80      	cmp	r3, #128	; 0x80
 8015624:	d11f      	bne.n	8015666 <_vfprintf_r+0x7ce>
 8015626:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801562a:	1a9f      	subs	r7, r3, r2
 801562c:	2f00      	cmp	r7, #0
 801562e:	dd1a      	ble.n	8015666 <_vfprintf_r+0x7ce>
 8015630:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015634:	4826      	ldr	r0, [pc, #152]	; (80156d0 <_vfprintf_r+0x838>)
 8015636:	6020      	str	r0, [r4, #0]
 8015638:	2f10      	cmp	r7, #16
 801563a:	f103 0301 	add.w	r3, r3, #1
 801563e:	f104 0108 	add.w	r1, r4, #8
 8015642:	f300 82d4 	bgt.w	8015bee <_vfprintf_r+0xd56>
 8015646:	6067      	str	r7, [r4, #4]
 8015648:	2b07      	cmp	r3, #7
 801564a:	4417      	add	r7, r2
 801564c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8015650:	f340 82e0 	ble.w	8015c14 <_vfprintf_r+0xd7c>
 8015654:	aa22      	add	r2, sp, #136	; 0x88
 8015656:	4649      	mov	r1, r9
 8015658:	4650      	mov	r0, sl
 801565a:	f003 f946 	bl	80188ea <__sprint_r>
 801565e:	2800      	cmp	r0, #0
 8015660:	f040 85ed 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015664:	ac25      	add	r4, sp, #148	; 0x94
 8015666:	eba6 0608 	sub.w	r6, r6, r8
 801566a:	2e00      	cmp	r6, #0
 801566c:	dd1a      	ble.n	80156a4 <_vfprintf_r+0x80c>
 801566e:	4f18      	ldr	r7, [pc, #96]	; (80156d0 <_vfprintf_r+0x838>)
 8015670:	6027      	str	r7, [r4, #0]
 8015672:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015676:	2e10      	cmp	r6, #16
 8015678:	f103 0301 	add.w	r3, r3, #1
 801567c:	f104 0108 	add.w	r1, r4, #8
 8015680:	f300 82ca 	bgt.w	8015c18 <_vfprintf_r+0xd80>
 8015684:	6066      	str	r6, [r4, #4]
 8015686:	2b07      	cmp	r3, #7
 8015688:	4416      	add	r6, r2
 801568a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801568e:	f340 82d6 	ble.w	8015c3e <_vfprintf_r+0xda6>
 8015692:	aa22      	add	r2, sp, #136	; 0x88
 8015694:	4649      	mov	r1, r9
 8015696:	4650      	mov	r0, sl
 8015698:	f003 f927 	bl	80188ea <__sprint_r>
 801569c:	2800      	cmp	r0, #0
 801569e:	f040 85ce 	bne.w	801623e <_vfprintf_r+0x13a6>
 80156a2:	ac25      	add	r4, sp, #148	; 0x94
 80156a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80156a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80156aa:	f040 82cf 	bne.w	8015c4c <_vfprintf_r+0xdb4>
 80156ae:	9b03      	ldr	r3, [sp, #12]
 80156b0:	e9c4 3800 	strd	r3, r8, [r4]
 80156b4:	4446      	add	r6, r8
 80156b6:	9624      	str	r6, [sp, #144]	; 0x90
 80156b8:	e00c      	b.n	80156d4 <_vfprintf_r+0x83c>
 80156ba:	bf00      	nop
 80156bc:	0801ca61 	.word	0x0801ca61
 80156c0:	0801ca50 	.word	0x0801ca50
 80156c4:	40300000 	.word	0x40300000
 80156c8:	3fe00000 	.word	0x3fe00000
 80156cc:	0801cab9 	.word	0x0801cab9
 80156d0:	0801cac9 	.word	0x0801cac9
 80156d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80156d6:	3301      	adds	r3, #1
 80156d8:	2b07      	cmp	r3, #7
 80156da:	9323      	str	r3, [sp, #140]	; 0x8c
 80156dc:	f300 82fb 	bgt.w	8015cd6 <_vfprintf_r+0xe3e>
 80156e0:	3408      	adds	r4, #8
 80156e2:	f01b 0f04 	tst.w	fp, #4
 80156e6:	f040 858c 	bne.w	8016202 <_vfprintf_r+0x136a>
 80156ea:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80156ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80156f0:	428a      	cmp	r2, r1
 80156f2:	bfac      	ite	ge
 80156f4:	189b      	addge	r3, r3, r2
 80156f6:	185b      	addlt	r3, r3, r1
 80156f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80156fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80156fc:	b13b      	cbz	r3, 801570e <_vfprintf_r+0x876>
 80156fe:	aa22      	add	r2, sp, #136	; 0x88
 8015700:	4649      	mov	r1, r9
 8015702:	4650      	mov	r0, sl
 8015704:	f003 f8f1 	bl	80188ea <__sprint_r>
 8015708:	2800      	cmp	r0, #0
 801570a:	f040 8598 	bne.w	801623e <_vfprintf_r+0x13a6>
 801570e:	2300      	movs	r3, #0
 8015710:	9323      	str	r3, [sp, #140]	; 0x8c
 8015712:	9b04      	ldr	r3, [sp, #16]
 8015714:	2b00      	cmp	r3, #0
 8015716:	f040 85ae 	bne.w	8016276 <_vfprintf_r+0x13de>
 801571a:	ac25      	add	r4, sp, #148	; 0x94
 801571c:	e0eb      	b.n	80158f6 <_vfprintf_r+0xa5e>
 801571e:	ab35      	add	r3, sp, #212	; 0xd4
 8015720:	9004      	str	r0, [sp, #16]
 8015722:	9303      	str	r3, [sp, #12]
 8015724:	e62e      	b.n	8015384 <_vfprintf_r+0x4ec>
 8015726:	9b03      	ldr	r3, [sp, #12]
 8015728:	9304      	str	r3, [sp, #16]
 801572a:	e62b      	b.n	8015384 <_vfprintf_r+0x4ec>
 801572c:	9004      	str	r0, [sp, #16]
 801572e:	f04f 0806 	mov.w	r8, #6
 8015732:	e627      	b.n	8015384 <_vfprintf_r+0x4ec>
 8015734:	9004      	str	r0, [sp, #16]
 8015736:	e625      	b.n	8015384 <_vfprintf_r+0x4ec>
 8015738:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801573c:	2300      	movs	r3, #0
 801573e:	eeb0 8a47 	vmov.f32	s16, s14
 8015742:	eef0 8a67 	vmov.f32	s17, s15
 8015746:	e62d      	b.n	80153a4 <_vfprintf_r+0x50c>
 8015748:	f802 0c01 	strb.w	r0, [r2, #-1]
 801574c:	e68f      	b.n	801546e <_vfprintf_r+0x5d6>
 801574e:	f803 0b01 	strb.w	r0, [r3], #1
 8015752:	1aca      	subs	r2, r1, r3
 8015754:	2a00      	cmp	r2, #0
 8015756:	dafa      	bge.n	801574e <_vfprintf_r+0x8b6>
 8015758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801575a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801575c:	3201      	adds	r2, #1
 801575e:	f103 0301 	add.w	r3, r3, #1
 8015762:	bfb8      	it	lt
 8015764:	2300      	movlt	r3, #0
 8015766:	441d      	add	r5, r3
 8015768:	e691      	b.n	801548e <_vfprintf_r+0x5f6>
 801576a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801576c:	462b      	mov	r3, r5
 801576e:	18a9      	adds	r1, r5, r2
 8015770:	2030      	movs	r0, #48	; 0x30
 8015772:	e7ee      	b.n	8015752 <_vfprintf_r+0x8ba>
 8015774:	9b08      	ldr	r3, [sp, #32]
 8015776:	2b46      	cmp	r3, #70	; 0x46
 8015778:	d005      	beq.n	8015786 <_vfprintf_r+0x8ee>
 801577a:	2b45      	cmp	r3, #69	; 0x45
 801577c:	d11b      	bne.n	80157b6 <_vfprintf_r+0x91e>
 801577e:	f108 0501 	add.w	r5, r8, #1
 8015782:	2102      	movs	r1, #2
 8015784:	e001      	b.n	801578a <_vfprintf_r+0x8f2>
 8015786:	4645      	mov	r5, r8
 8015788:	2103      	movs	r1, #3
 801578a:	ab20      	add	r3, sp, #128	; 0x80
 801578c:	9301      	str	r3, [sp, #4]
 801578e:	ab1d      	add	r3, sp, #116	; 0x74
 8015790:	9300      	str	r3, [sp, #0]
 8015792:	462a      	mov	r2, r5
 8015794:	ab1c      	add	r3, sp, #112	; 0x70
 8015796:	4650      	mov	r0, sl
 8015798:	eeb0 0a48 	vmov.f32	s0, s16
 801579c:	eef0 0a68 	vmov.f32	s1, s17
 80157a0:	f000 fee6 	bl	8016570 <_dtoa_r>
 80157a4:	9b08      	ldr	r3, [sp, #32]
 80157a6:	9003      	str	r0, [sp, #12]
 80157a8:	2b47      	cmp	r3, #71	; 0x47
 80157aa:	d106      	bne.n	80157ba <_vfprintf_r+0x922>
 80157ac:	f01b 0f01 	tst.w	fp, #1
 80157b0:	d103      	bne.n	80157ba <_vfprintf_r+0x922>
 80157b2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80157b4:	e66b      	b.n	801548e <_vfprintf_r+0x5f6>
 80157b6:	4645      	mov	r5, r8
 80157b8:	e7e3      	b.n	8015782 <_vfprintf_r+0x8ea>
 80157ba:	9b03      	ldr	r3, [sp, #12]
 80157bc:	195e      	adds	r6, r3, r5
 80157be:	9b08      	ldr	r3, [sp, #32]
 80157c0:	2b46      	cmp	r3, #70	; 0x46
 80157c2:	d10f      	bne.n	80157e4 <_vfprintf_r+0x94c>
 80157c4:	9b03      	ldr	r3, [sp, #12]
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	2b30      	cmp	r3, #48	; 0x30
 80157ca:	d109      	bne.n	80157e0 <_vfprintf_r+0x948>
 80157cc:	ec51 0b18 	vmov	r0, r1, d8
 80157d0:	2200      	movs	r2, #0
 80157d2:	2300      	movs	r3, #0
 80157d4:	f7eb f998 	bl	8000b08 <__aeabi_dcmpeq>
 80157d8:	b910      	cbnz	r0, 80157e0 <_vfprintf_r+0x948>
 80157da:	f1c5 0501 	rsb	r5, r5, #1
 80157de:	951c      	str	r5, [sp, #112]	; 0x70
 80157e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80157e2:	441e      	add	r6, r3
 80157e4:	ec51 0b18 	vmov	r0, r1, d8
 80157e8:	2200      	movs	r2, #0
 80157ea:	2300      	movs	r3, #0
 80157ec:	f7eb f98c 	bl	8000b08 <__aeabi_dcmpeq>
 80157f0:	b100      	cbz	r0, 80157f4 <_vfprintf_r+0x95c>
 80157f2:	9620      	str	r6, [sp, #128]	; 0x80
 80157f4:	2230      	movs	r2, #48	; 0x30
 80157f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157f8:	429e      	cmp	r6, r3
 80157fa:	d9da      	bls.n	80157b2 <_vfprintf_r+0x91a>
 80157fc:	1c59      	adds	r1, r3, #1
 80157fe:	9120      	str	r1, [sp, #128]	; 0x80
 8015800:	701a      	strb	r2, [r3, #0]
 8015802:	e7f8      	b.n	80157f6 <_vfprintf_r+0x95e>
 8015804:	9b08      	ldr	r3, [sp, #32]
 8015806:	2b46      	cmp	r3, #70	; 0x46
 8015808:	f47f ae51 	bne.w	80154ae <_vfprintf_r+0x616>
 801580c:	f00b 0301 	and.w	r3, fp, #1
 8015810:	2d00      	cmp	r5, #0
 8015812:	ea43 0308 	orr.w	r3, r3, r8
 8015816:	dd18      	ble.n	801584a <_vfprintf_r+0x9b2>
 8015818:	b383      	cbz	r3, 801587c <_vfprintf_r+0x9e4>
 801581a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801581c:	18eb      	adds	r3, r5, r3
 801581e:	4498      	add	r8, r3
 8015820:	2366      	movs	r3, #102	; 0x66
 8015822:	9307      	str	r3, [sp, #28]
 8015824:	e030      	b.n	8015888 <_vfprintf_r+0x9f0>
 8015826:	f813 6b01 	ldrb.w	r6, [r3], #1
 801582a:	f802 6b01 	strb.w	r6, [r2], #1
 801582e:	e675      	b.n	801551c <_vfprintf_r+0x684>
 8015830:	b941      	cbnz	r1, 8015844 <_vfprintf_r+0x9ac>
 8015832:	2230      	movs	r2, #48	; 0x30
 8015834:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8015838:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801583c:	3330      	adds	r3, #48	; 0x30
 801583e:	f802 3b01 	strb.w	r3, [r2], #1
 8015842:	e677      	b.n	8015534 <_vfprintf_r+0x69c>
 8015844:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8015848:	e7f8      	b.n	801583c <_vfprintf_r+0x9a4>
 801584a:	b1cb      	cbz	r3, 8015880 <_vfprintf_r+0x9e8>
 801584c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801584e:	3301      	adds	r3, #1
 8015850:	e7e5      	b.n	801581e <_vfprintf_r+0x986>
 8015852:	9b05      	ldr	r3, [sp, #20]
 8015854:	429d      	cmp	r5, r3
 8015856:	db07      	blt.n	8015868 <_vfprintf_r+0x9d0>
 8015858:	f01b 0f01 	tst.w	fp, #1
 801585c:	d029      	beq.n	80158b2 <_vfprintf_r+0xa1a>
 801585e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015860:	eb05 0803 	add.w	r8, r5, r3
 8015864:	2367      	movs	r3, #103	; 0x67
 8015866:	e7dc      	b.n	8015822 <_vfprintf_r+0x98a>
 8015868:	9b05      	ldr	r3, [sp, #20]
 801586a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801586c:	2d00      	cmp	r5, #0
 801586e:	eb03 0802 	add.w	r8, r3, r2
 8015872:	dcf7      	bgt.n	8015864 <_vfprintf_r+0x9cc>
 8015874:	f1c5 0301 	rsb	r3, r5, #1
 8015878:	4498      	add	r8, r3
 801587a:	e7f3      	b.n	8015864 <_vfprintf_r+0x9cc>
 801587c:	46a8      	mov	r8, r5
 801587e:	e7cf      	b.n	8015820 <_vfprintf_r+0x988>
 8015880:	2366      	movs	r3, #102	; 0x66
 8015882:	9307      	str	r3, [sp, #28]
 8015884:	f04f 0801 	mov.w	r8, #1
 8015888:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801588c:	9309      	str	r3, [sp, #36]	; 0x24
 801588e:	d023      	beq.n	80158d8 <_vfprintf_r+0xa40>
 8015890:	2300      	movs	r3, #0
 8015892:	2d00      	cmp	r5, #0
 8015894:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015898:	f77f ae62 	ble.w	8015560 <_vfprintf_r+0x6c8>
 801589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801589e:	781b      	ldrb	r3, [r3, #0]
 80158a0:	2bff      	cmp	r3, #255	; 0xff
 80158a2:	d108      	bne.n	80158b6 <_vfprintf_r+0xa1e>
 80158a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80158a8:	4413      	add	r3, r2
 80158aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80158ac:	fb02 8803 	mla	r8, r2, r3, r8
 80158b0:	e656      	b.n	8015560 <_vfprintf_r+0x6c8>
 80158b2:	46a8      	mov	r8, r5
 80158b4:	e7d6      	b.n	8015864 <_vfprintf_r+0x9cc>
 80158b6:	42ab      	cmp	r3, r5
 80158b8:	daf4      	bge.n	80158a4 <_vfprintf_r+0xa0c>
 80158ba:	1aed      	subs	r5, r5, r3
 80158bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158be:	785b      	ldrb	r3, [r3, #1]
 80158c0:	b133      	cbz	r3, 80158d0 <_vfprintf_r+0xa38>
 80158c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158c4:	3301      	adds	r3, #1
 80158c6:	9309      	str	r3, [sp, #36]	; 0x24
 80158c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158ca:	3301      	adds	r3, #1
 80158cc:	930a      	str	r3, [sp, #40]	; 0x28
 80158ce:	e7e5      	b.n	801589c <_vfprintf_r+0xa04>
 80158d0:	9b08      	ldr	r3, [sp, #32]
 80158d2:	3301      	adds	r3, #1
 80158d4:	9308      	str	r3, [sp, #32]
 80158d6:	e7e1      	b.n	801589c <_vfprintf_r+0xa04>
 80158d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158da:	9308      	str	r3, [sp, #32]
 80158dc:	e640      	b.n	8015560 <_vfprintf_r+0x6c8>
 80158de:	4632      	mov	r2, r6
 80158e0:	f01b 0f20 	tst.w	fp, #32
 80158e4:	f852 3b04 	ldr.w	r3, [r2], #4
 80158e8:	9206      	str	r2, [sp, #24]
 80158ea:	d009      	beq.n	8015900 <_vfprintf_r+0xa68>
 80158ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80158ee:	4610      	mov	r0, r2
 80158f0:	17d1      	asrs	r1, r2, #31
 80158f2:	e9c3 0100 	strd	r0, r1, [r3]
 80158f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158f8:	9e06      	ldr	r6, [sp, #24]
 80158fa:	9303      	str	r3, [sp, #12]
 80158fc:	f7ff bb4f 	b.w	8014f9e <_vfprintf_r+0x106>
 8015900:	f01b 0f10 	tst.w	fp, #16
 8015904:	d002      	beq.n	801590c <_vfprintf_r+0xa74>
 8015906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015908:	601a      	str	r2, [r3, #0]
 801590a:	e7f4      	b.n	80158f6 <_vfprintf_r+0xa5e>
 801590c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015910:	d002      	beq.n	8015918 <_vfprintf_r+0xa80>
 8015912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015914:	801a      	strh	r2, [r3, #0]
 8015916:	e7ee      	b.n	80158f6 <_vfprintf_r+0xa5e>
 8015918:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801591c:	d0f3      	beq.n	8015906 <_vfprintf_r+0xa6e>
 801591e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015920:	701a      	strb	r2, [r3, #0]
 8015922:	e7e8      	b.n	80158f6 <_vfprintf_r+0xa5e>
 8015924:	f04b 0b10 	orr.w	fp, fp, #16
 8015928:	f01b 0f20 	tst.w	fp, #32
 801592c:	d01e      	beq.n	801596c <_vfprintf_r+0xad4>
 801592e:	3607      	adds	r6, #7
 8015930:	f026 0307 	bic.w	r3, r6, #7
 8015934:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015938:	9306      	str	r3, [sp, #24]
 801593a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801593e:	2300      	movs	r3, #0
 8015940:	2200      	movs	r2, #0
 8015942:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8015946:	f1b8 3fff 	cmp.w	r8, #4294967295
 801594a:	f000 84a9 	beq.w	80162a0 <_vfprintf_r+0x1408>
 801594e:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8015952:	9204      	str	r2, [sp, #16]
 8015954:	ea56 0207 	orrs.w	r2, r6, r7
 8015958:	f040 84a8 	bne.w	80162ac <_vfprintf_r+0x1414>
 801595c:	f1b8 0f00 	cmp.w	r8, #0
 8015960:	f000 8104 	beq.w	8015b6c <_vfprintf_r+0xcd4>
 8015964:	2b01      	cmp	r3, #1
 8015966:	f040 84a4 	bne.w	80162b2 <_vfprintf_r+0x141a>
 801596a:	e09a      	b.n	8015aa2 <_vfprintf_r+0xc0a>
 801596c:	1d33      	adds	r3, r6, #4
 801596e:	f01b 0f10 	tst.w	fp, #16
 8015972:	9306      	str	r3, [sp, #24]
 8015974:	d001      	beq.n	801597a <_vfprintf_r+0xae2>
 8015976:	6836      	ldr	r6, [r6, #0]
 8015978:	e003      	b.n	8015982 <_vfprintf_r+0xaea>
 801597a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801597e:	d002      	beq.n	8015986 <_vfprintf_r+0xaee>
 8015980:	8836      	ldrh	r6, [r6, #0]
 8015982:	2700      	movs	r7, #0
 8015984:	e7d9      	b.n	801593a <_vfprintf_r+0xaa2>
 8015986:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801598a:	d0f4      	beq.n	8015976 <_vfprintf_r+0xade>
 801598c:	7836      	ldrb	r6, [r6, #0]
 801598e:	e7f8      	b.n	8015982 <_vfprintf_r+0xaea>
 8015990:	4633      	mov	r3, r6
 8015992:	2278      	movs	r2, #120	; 0x78
 8015994:	f853 6b04 	ldr.w	r6, [r3], #4
 8015998:	9306      	str	r3, [sp, #24]
 801599a:	f647 0330 	movw	r3, #30768	; 0x7830
 801599e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 80159a2:	4ba8      	ldr	r3, [pc, #672]	; (8015c44 <_vfprintf_r+0xdac>)
 80159a4:	9316      	str	r3, [sp, #88]	; 0x58
 80159a6:	2700      	movs	r7, #0
 80159a8:	f04b 0b02 	orr.w	fp, fp, #2
 80159ac:	2302      	movs	r3, #2
 80159ae:	9207      	str	r2, [sp, #28]
 80159b0:	e7c6      	b.n	8015940 <_vfprintf_r+0xaa8>
 80159b2:	4632      	mov	r2, r6
 80159b4:	2500      	movs	r5, #0
 80159b6:	f852 3b04 	ldr.w	r3, [r2], #4
 80159ba:	9303      	str	r3, [sp, #12]
 80159bc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80159c0:	9206      	str	r2, [sp, #24]
 80159c2:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80159c6:	d010      	beq.n	80159ea <_vfprintf_r+0xb52>
 80159c8:	9803      	ldr	r0, [sp, #12]
 80159ca:	4642      	mov	r2, r8
 80159cc:	4629      	mov	r1, r5
 80159ce:	f7ea fc27 	bl	8000220 <memchr>
 80159d2:	9004      	str	r0, [sp, #16]
 80159d4:	2800      	cmp	r0, #0
 80159d6:	f000 80df 	beq.w	8015b98 <_vfprintf_r+0xd00>
 80159da:	9a03      	ldr	r2, [sp, #12]
 80159dc:	9504      	str	r5, [sp, #16]
 80159de:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80159e2:	eba0 0802 	sub.w	r8, r0, r2
 80159e6:	462e      	mov	r6, r5
 80159e8:	e5c2      	b.n	8015570 <_vfprintf_r+0x6d8>
 80159ea:	9803      	ldr	r0, [sp, #12]
 80159ec:	f7ea fc0a 	bl	8000204 <strlen>
 80159f0:	462e      	mov	r6, r5
 80159f2:	4680      	mov	r8, r0
 80159f4:	9504      	str	r5, [sp, #16]
 80159f6:	4633      	mov	r3, r6
 80159f8:	e45e      	b.n	80152b8 <_vfprintf_r+0x420>
 80159fa:	f04b 0b10 	orr.w	fp, fp, #16
 80159fe:	f01b 0f20 	tst.w	fp, #32
 8015a02:	d007      	beq.n	8015a14 <_vfprintf_r+0xb7c>
 8015a04:	3607      	adds	r6, #7
 8015a06:	f026 0307 	bic.w	r3, r6, #7
 8015a0a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015a0e:	9306      	str	r3, [sp, #24]
 8015a10:	2301      	movs	r3, #1
 8015a12:	e795      	b.n	8015940 <_vfprintf_r+0xaa8>
 8015a14:	1d33      	adds	r3, r6, #4
 8015a16:	f01b 0f10 	tst.w	fp, #16
 8015a1a:	9306      	str	r3, [sp, #24]
 8015a1c:	d001      	beq.n	8015a22 <_vfprintf_r+0xb8a>
 8015a1e:	6836      	ldr	r6, [r6, #0]
 8015a20:	e003      	b.n	8015a2a <_vfprintf_r+0xb92>
 8015a22:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015a26:	d002      	beq.n	8015a2e <_vfprintf_r+0xb96>
 8015a28:	8836      	ldrh	r6, [r6, #0]
 8015a2a:	2700      	movs	r7, #0
 8015a2c:	e7f0      	b.n	8015a10 <_vfprintf_r+0xb78>
 8015a2e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015a32:	d0f4      	beq.n	8015a1e <_vfprintf_r+0xb86>
 8015a34:	7836      	ldrb	r6, [r6, #0]
 8015a36:	e7f8      	b.n	8015a2a <_vfprintf_r+0xb92>
 8015a38:	4b83      	ldr	r3, [pc, #524]	; (8015c48 <_vfprintf_r+0xdb0>)
 8015a3a:	9316      	str	r3, [sp, #88]	; 0x58
 8015a3c:	f01b 0f20 	tst.w	fp, #32
 8015a40:	d019      	beq.n	8015a76 <_vfprintf_r+0xbde>
 8015a42:	3607      	adds	r6, #7
 8015a44:	f026 0307 	bic.w	r3, r6, #7
 8015a48:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015a4c:	9306      	str	r3, [sp, #24]
 8015a4e:	f01b 0f01 	tst.w	fp, #1
 8015a52:	d00a      	beq.n	8015a6a <_vfprintf_r+0xbd2>
 8015a54:	ea56 0307 	orrs.w	r3, r6, r7
 8015a58:	d007      	beq.n	8015a6a <_vfprintf_r+0xbd2>
 8015a5a:	2330      	movs	r3, #48	; 0x30
 8015a5c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8015a60:	9b07      	ldr	r3, [sp, #28]
 8015a62:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8015a66:	f04b 0b02 	orr.w	fp, fp, #2
 8015a6a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8015a6e:	2302      	movs	r3, #2
 8015a70:	e766      	b.n	8015940 <_vfprintf_r+0xaa8>
 8015a72:	4b74      	ldr	r3, [pc, #464]	; (8015c44 <_vfprintf_r+0xdac>)
 8015a74:	e7e1      	b.n	8015a3a <_vfprintf_r+0xba2>
 8015a76:	1d33      	adds	r3, r6, #4
 8015a78:	f01b 0f10 	tst.w	fp, #16
 8015a7c:	9306      	str	r3, [sp, #24]
 8015a7e:	d001      	beq.n	8015a84 <_vfprintf_r+0xbec>
 8015a80:	6836      	ldr	r6, [r6, #0]
 8015a82:	e003      	b.n	8015a8c <_vfprintf_r+0xbf4>
 8015a84:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015a88:	d002      	beq.n	8015a90 <_vfprintf_r+0xbf8>
 8015a8a:	8836      	ldrh	r6, [r6, #0]
 8015a8c:	2700      	movs	r7, #0
 8015a8e:	e7de      	b.n	8015a4e <_vfprintf_r+0xbb6>
 8015a90:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015a94:	d0f4      	beq.n	8015a80 <_vfprintf_r+0xbe8>
 8015a96:	7836      	ldrb	r6, [r6, #0]
 8015a98:	e7f8      	b.n	8015a8c <_vfprintf_r+0xbf4>
 8015a9a:	2f00      	cmp	r7, #0
 8015a9c:	bf08      	it	eq
 8015a9e:	2e0a      	cmpeq	r6, #10
 8015aa0:	d206      	bcs.n	8015ab0 <_vfprintf_r+0xc18>
 8015aa2:	3630      	adds	r6, #48	; 0x30
 8015aa4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8015aa8:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8015aac:	f000 bc23 	b.w	80162f6 <_vfprintf_r+0x145e>
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	9305      	str	r3, [sp, #20]
 8015ab4:	9b04      	ldr	r3, [sp, #16]
 8015ab6:	ad4e      	add	r5, sp, #312	; 0x138
 8015ab8:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8015abc:	1e6b      	subs	r3, r5, #1
 8015abe:	9303      	str	r3, [sp, #12]
 8015ac0:	220a      	movs	r2, #10
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	4639      	mov	r1, r7
 8015ac8:	f7eb f8fe 	bl	8000cc8 <__aeabi_uldivmod>
 8015acc:	9b05      	ldr	r3, [sp, #20]
 8015ace:	3230      	adds	r2, #48	; 0x30
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	f805 2c01 	strb.w	r2, [r5, #-1]
 8015ad6:	9305      	str	r3, [sp, #20]
 8015ad8:	f1bb 0f00 	cmp.w	fp, #0
 8015adc:	d019      	beq.n	8015b12 <_vfprintf_r+0xc7a>
 8015ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ae0:	9a05      	ldr	r2, [sp, #20]
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d114      	bne.n	8015b12 <_vfprintf_r+0xc7a>
 8015ae8:	2aff      	cmp	r2, #255	; 0xff
 8015aea:	d012      	beq.n	8015b12 <_vfprintf_r+0xc7a>
 8015aec:	2f00      	cmp	r7, #0
 8015aee:	bf08      	it	eq
 8015af0:	2e0a      	cmpeq	r6, #10
 8015af2:	d30e      	bcc.n	8015b12 <_vfprintf_r+0xc7a>
 8015af4:	9b03      	ldr	r3, [sp, #12]
 8015af6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015af8:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015afa:	1a9b      	subs	r3, r3, r2
 8015afc:	4618      	mov	r0, r3
 8015afe:	9303      	str	r3, [sp, #12]
 8015b00:	f002 fe65 	bl	80187ce <strncpy>
 8015b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b06:	785d      	ldrb	r5, [r3, #1]
 8015b08:	b1e5      	cbz	r5, 8015b44 <_vfprintf_r+0xcac>
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8015b0e:	2300      	movs	r3, #0
 8015b10:	9305      	str	r3, [sp, #20]
 8015b12:	220a      	movs	r2, #10
 8015b14:	2300      	movs	r3, #0
 8015b16:	4630      	mov	r0, r6
 8015b18:	4639      	mov	r1, r7
 8015b1a:	f7eb f8d5 	bl	8000cc8 <__aeabi_uldivmod>
 8015b1e:	2f00      	cmp	r7, #0
 8015b20:	bf08      	it	eq
 8015b22:	2e0a      	cmpeq	r6, #10
 8015b24:	d20a      	bcs.n	8015b3c <_vfprintf_r+0xca4>
 8015b26:	9b03      	ldr	r3, [sp, #12]
 8015b28:	f8dd b010 	ldr.w	fp, [sp, #16]
 8015b2c:	aa4e      	add	r2, sp, #312	; 0x138
 8015b2e:	4646      	mov	r6, r8
 8015b30:	eba2 0803 	sub.w	r8, r2, r3
 8015b34:	2300      	movs	r3, #0
 8015b36:	9304      	str	r3, [sp, #16]
 8015b38:	f7ff bbbe 	b.w	80152b8 <_vfprintf_r+0x420>
 8015b3c:	9d03      	ldr	r5, [sp, #12]
 8015b3e:	4606      	mov	r6, r0
 8015b40:	460f      	mov	r7, r1
 8015b42:	e7bb      	b.n	8015abc <_vfprintf_r+0xc24>
 8015b44:	9505      	str	r5, [sp, #20]
 8015b46:	e7e4      	b.n	8015b12 <_vfprintf_r+0xc7a>
 8015b48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015b4a:	f006 030f 	and.w	r3, r6, #15
 8015b4e:	5cd3      	ldrb	r3, [r2, r3]
 8015b50:	9a03      	ldr	r2, [sp, #12]
 8015b52:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8015b56:	0933      	lsrs	r3, r6, #4
 8015b58:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8015b5c:	9203      	str	r2, [sp, #12]
 8015b5e:	093a      	lsrs	r2, r7, #4
 8015b60:	461e      	mov	r6, r3
 8015b62:	4617      	mov	r7, r2
 8015b64:	ea56 0307 	orrs.w	r3, r6, r7
 8015b68:	d1ee      	bne.n	8015b48 <_vfprintf_r+0xcb0>
 8015b6a:	e7dc      	b.n	8015b26 <_vfprintf_r+0xc8e>
 8015b6c:	b933      	cbnz	r3, 8015b7c <_vfprintf_r+0xce4>
 8015b6e:	f01b 0f01 	tst.w	fp, #1
 8015b72:	d003      	beq.n	8015b7c <_vfprintf_r+0xce4>
 8015b74:	2330      	movs	r3, #48	; 0x30
 8015b76:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8015b7a:	e795      	b.n	8015aa8 <_vfprintf_r+0xc10>
 8015b7c:	ab4e      	add	r3, sp, #312	; 0x138
 8015b7e:	e3ba      	b.n	80162f6 <_vfprintf_r+0x145e>
 8015b80:	9b07      	ldr	r3, [sp, #28]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	f000 837d 	beq.w	8016282 <_vfprintf_r+0x13ea>
 8015b88:	2000      	movs	r0, #0
 8015b8a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8015b8e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8015b92:	9606      	str	r6, [sp, #24]
 8015b94:	f7ff bb1e 	b.w	80151d4 <_vfprintf_r+0x33c>
 8015b98:	9e04      	ldr	r6, [sp, #16]
 8015b9a:	e72c      	b.n	80159f6 <_vfprintf_r+0xb5e>
 8015b9c:	2010      	movs	r0, #16
 8015b9e:	4402      	add	r2, r0
 8015ba0:	2b07      	cmp	r3, #7
 8015ba2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015ba6:	6060      	str	r0, [r4, #4]
 8015ba8:	dd08      	ble.n	8015bbc <_vfprintf_r+0xd24>
 8015baa:	aa22      	add	r2, sp, #136	; 0x88
 8015bac:	4649      	mov	r1, r9
 8015bae:	4650      	mov	r0, sl
 8015bb0:	f002 fe9b 	bl	80188ea <__sprint_r>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	f040 8342 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015bba:	a925      	add	r1, sp, #148	; 0x94
 8015bbc:	3f10      	subs	r7, #16
 8015bbe:	460c      	mov	r4, r1
 8015bc0:	e4f1      	b.n	80155a6 <_vfprintf_r+0x70e>
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	e50a      	b.n	80155dc <_vfprintf_r+0x744>
 8015bc6:	aa22      	add	r2, sp, #136	; 0x88
 8015bc8:	4649      	mov	r1, r9
 8015bca:	4650      	mov	r0, sl
 8015bcc:	f002 fe8d 	bl	80188ea <__sprint_r>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	f040 8334 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015bd6:	ac25      	add	r4, sp, #148	; 0x94
 8015bd8:	e512      	b.n	8015600 <_vfprintf_r+0x768>
 8015bda:	aa22      	add	r2, sp, #136	; 0x88
 8015bdc:	4649      	mov	r1, r9
 8015bde:	4650      	mov	r0, sl
 8015be0:	f002 fe83 	bl	80188ea <__sprint_r>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	f040 832a 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015bea:	ac25      	add	r4, sp, #148	; 0x94
 8015bec:	e518      	b.n	8015620 <_vfprintf_r+0x788>
 8015bee:	2010      	movs	r0, #16
 8015bf0:	4402      	add	r2, r0
 8015bf2:	2b07      	cmp	r3, #7
 8015bf4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015bf8:	6060      	str	r0, [r4, #4]
 8015bfa:	dd08      	ble.n	8015c0e <_vfprintf_r+0xd76>
 8015bfc:	aa22      	add	r2, sp, #136	; 0x88
 8015bfe:	4649      	mov	r1, r9
 8015c00:	4650      	mov	r0, sl
 8015c02:	f002 fe72 	bl	80188ea <__sprint_r>
 8015c06:	2800      	cmp	r0, #0
 8015c08:	f040 8319 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015c0c:	a925      	add	r1, sp, #148	; 0x94
 8015c0e:	3f10      	subs	r7, #16
 8015c10:	460c      	mov	r4, r1
 8015c12:	e50d      	b.n	8015630 <_vfprintf_r+0x798>
 8015c14:	460c      	mov	r4, r1
 8015c16:	e526      	b.n	8015666 <_vfprintf_r+0x7ce>
 8015c18:	2010      	movs	r0, #16
 8015c1a:	4402      	add	r2, r0
 8015c1c:	2b07      	cmp	r3, #7
 8015c1e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015c22:	6060      	str	r0, [r4, #4]
 8015c24:	dd08      	ble.n	8015c38 <_vfprintf_r+0xda0>
 8015c26:	aa22      	add	r2, sp, #136	; 0x88
 8015c28:	4649      	mov	r1, r9
 8015c2a:	4650      	mov	r0, sl
 8015c2c:	f002 fe5d 	bl	80188ea <__sprint_r>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	f040 8304 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015c36:	a925      	add	r1, sp, #148	; 0x94
 8015c38:	3e10      	subs	r6, #16
 8015c3a:	460c      	mov	r4, r1
 8015c3c:	e518      	b.n	8015670 <_vfprintf_r+0x7d8>
 8015c3e:	460c      	mov	r4, r1
 8015c40:	e530      	b.n	80156a4 <_vfprintf_r+0x80c>
 8015c42:	bf00      	nop
 8015c44:	0801ca50 	.word	0x0801ca50
 8015c48:	0801ca61 	.word	0x0801ca61
 8015c4c:	9b07      	ldr	r3, [sp, #28]
 8015c4e:	2b65      	cmp	r3, #101	; 0x65
 8015c50:	f340 8242 	ble.w	80160d8 <_vfprintf_r+0x1240>
 8015c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015c58:	2200      	movs	r2, #0
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	f7ea ff54 	bl	8000b08 <__aeabi_dcmpeq>
 8015c60:	2800      	cmp	r0, #0
 8015c62:	d068      	beq.n	8015d36 <_vfprintf_r+0xe9e>
 8015c64:	4b6d      	ldr	r3, [pc, #436]	; (8015e1c <_vfprintf_r+0xf84>)
 8015c66:	6023      	str	r3, [r4, #0]
 8015c68:	2301      	movs	r3, #1
 8015c6a:	441e      	add	r6, r3
 8015c6c:	6063      	str	r3, [r4, #4]
 8015c6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015c70:	9624      	str	r6, [sp, #144]	; 0x90
 8015c72:	3301      	adds	r3, #1
 8015c74:	2b07      	cmp	r3, #7
 8015c76:	9323      	str	r3, [sp, #140]	; 0x8c
 8015c78:	dc37      	bgt.n	8015cea <_vfprintf_r+0xe52>
 8015c7a:	3408      	adds	r4, #8
 8015c7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015c7e:	9a05      	ldr	r2, [sp, #20]
 8015c80:	4293      	cmp	r3, r2
 8015c82:	db03      	blt.n	8015c8c <_vfprintf_r+0xdf4>
 8015c84:	f01b 0f01 	tst.w	fp, #1
 8015c88:	f43f ad2b 	beq.w	80156e2 <_vfprintf_r+0x84a>
 8015c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c8e:	6023      	str	r3, [r4, #0]
 8015c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c94:	6063      	str	r3, [r4, #4]
 8015c96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015c98:	4413      	add	r3, r2
 8015c9a:	9324      	str	r3, [sp, #144]	; 0x90
 8015c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	2b07      	cmp	r3, #7
 8015ca2:	9323      	str	r3, [sp, #140]	; 0x8c
 8015ca4:	dc2b      	bgt.n	8015cfe <_vfprintf_r+0xe66>
 8015ca6:	3408      	adds	r4, #8
 8015ca8:	9b05      	ldr	r3, [sp, #20]
 8015caa:	1e5d      	subs	r5, r3, #1
 8015cac:	2d00      	cmp	r5, #0
 8015cae:	f77f ad18 	ble.w	80156e2 <_vfprintf_r+0x84a>
 8015cb2:	4e5b      	ldr	r6, [pc, #364]	; (8015e20 <_vfprintf_r+0xf88>)
 8015cb4:	2710      	movs	r7, #16
 8015cb6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015cba:	2d10      	cmp	r5, #16
 8015cbc:	f103 0301 	add.w	r3, r3, #1
 8015cc0:	f104 0108 	add.w	r1, r4, #8
 8015cc4:	6026      	str	r6, [r4, #0]
 8015cc6:	dc24      	bgt.n	8015d12 <_vfprintf_r+0xe7a>
 8015cc8:	6065      	str	r5, [r4, #4]
 8015cca:	2b07      	cmp	r3, #7
 8015ccc:	4415      	add	r5, r2
 8015cce:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8015cd2:	f340 8293 	ble.w	80161fc <_vfprintf_r+0x1364>
 8015cd6:	aa22      	add	r2, sp, #136	; 0x88
 8015cd8:	4649      	mov	r1, r9
 8015cda:	4650      	mov	r0, sl
 8015cdc:	f002 fe05 	bl	80188ea <__sprint_r>
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	f040 82ac 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015ce6:	ac25      	add	r4, sp, #148	; 0x94
 8015ce8:	e4fb      	b.n	80156e2 <_vfprintf_r+0x84a>
 8015cea:	aa22      	add	r2, sp, #136	; 0x88
 8015cec:	4649      	mov	r1, r9
 8015cee:	4650      	mov	r0, sl
 8015cf0:	f002 fdfb 	bl	80188ea <__sprint_r>
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	f040 82a2 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015cfa:	ac25      	add	r4, sp, #148	; 0x94
 8015cfc:	e7be      	b.n	8015c7c <_vfprintf_r+0xde4>
 8015cfe:	aa22      	add	r2, sp, #136	; 0x88
 8015d00:	4649      	mov	r1, r9
 8015d02:	4650      	mov	r0, sl
 8015d04:	f002 fdf1 	bl	80188ea <__sprint_r>
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	f040 8298 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015d0e:	ac25      	add	r4, sp, #148	; 0x94
 8015d10:	e7ca      	b.n	8015ca8 <_vfprintf_r+0xe10>
 8015d12:	3210      	adds	r2, #16
 8015d14:	2b07      	cmp	r3, #7
 8015d16:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015d1a:	6067      	str	r7, [r4, #4]
 8015d1c:	dd08      	ble.n	8015d30 <_vfprintf_r+0xe98>
 8015d1e:	aa22      	add	r2, sp, #136	; 0x88
 8015d20:	4649      	mov	r1, r9
 8015d22:	4650      	mov	r0, sl
 8015d24:	f002 fde1 	bl	80188ea <__sprint_r>
 8015d28:	2800      	cmp	r0, #0
 8015d2a:	f040 8288 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015d2e:	a925      	add	r1, sp, #148	; 0x94
 8015d30:	3d10      	subs	r5, #16
 8015d32:	460c      	mov	r4, r1
 8015d34:	e7bf      	b.n	8015cb6 <_vfprintf_r+0xe1e>
 8015d36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	dc73      	bgt.n	8015e24 <_vfprintf_r+0xf8c>
 8015d3c:	4b37      	ldr	r3, [pc, #220]	; (8015e1c <_vfprintf_r+0xf84>)
 8015d3e:	6023      	str	r3, [r4, #0]
 8015d40:	2301      	movs	r3, #1
 8015d42:	441e      	add	r6, r3
 8015d44:	6063      	str	r3, [r4, #4]
 8015d46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015d48:	9624      	str	r6, [sp, #144]	; 0x90
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	2b07      	cmp	r3, #7
 8015d4e:	9323      	str	r3, [sp, #140]	; 0x8c
 8015d50:	dc3d      	bgt.n	8015dce <_vfprintf_r+0xf36>
 8015d52:	3408      	adds	r4, #8
 8015d54:	9905      	ldr	r1, [sp, #20]
 8015d56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015d58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015d5a:	430a      	orrs	r2, r1
 8015d5c:	f00b 0101 	and.w	r1, fp, #1
 8015d60:	430a      	orrs	r2, r1
 8015d62:	f43f acbe 	beq.w	80156e2 <_vfprintf_r+0x84a>
 8015d66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015d68:	6022      	str	r2, [r4, #0]
 8015d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d6c:	6062      	str	r2, [r4, #4]
 8015d6e:	4413      	add	r3, r2
 8015d70:	9324      	str	r3, [sp, #144]	; 0x90
 8015d72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015d74:	3301      	adds	r3, #1
 8015d76:	2b07      	cmp	r3, #7
 8015d78:	9323      	str	r3, [sp, #140]	; 0x8c
 8015d7a:	dc32      	bgt.n	8015de2 <_vfprintf_r+0xf4a>
 8015d7c:	3408      	adds	r4, #8
 8015d7e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015d80:	2d00      	cmp	r5, #0
 8015d82:	da1b      	bge.n	8015dbc <_vfprintf_r+0xf24>
 8015d84:	4e26      	ldr	r6, [pc, #152]	; (8015e20 <_vfprintf_r+0xf88>)
 8015d86:	426d      	negs	r5, r5
 8015d88:	4623      	mov	r3, r4
 8015d8a:	2710      	movs	r7, #16
 8015d8c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8015d90:	2d10      	cmp	r5, #16
 8015d92:	f102 0201 	add.w	r2, r2, #1
 8015d96:	f104 0408 	add.w	r4, r4, #8
 8015d9a:	601e      	str	r6, [r3, #0]
 8015d9c:	dc2b      	bgt.n	8015df6 <_vfprintf_r+0xf5e>
 8015d9e:	605d      	str	r5, [r3, #4]
 8015da0:	2a07      	cmp	r2, #7
 8015da2:	440d      	add	r5, r1
 8015da4:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8015da8:	dd08      	ble.n	8015dbc <_vfprintf_r+0xf24>
 8015daa:	aa22      	add	r2, sp, #136	; 0x88
 8015dac:	4649      	mov	r1, r9
 8015dae:	4650      	mov	r0, sl
 8015db0:	f002 fd9b 	bl	80188ea <__sprint_r>
 8015db4:	2800      	cmp	r0, #0
 8015db6:	f040 8242 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015dba:	ac25      	add	r4, sp, #148	; 0x94
 8015dbc:	9b03      	ldr	r3, [sp, #12]
 8015dbe:	6023      	str	r3, [r4, #0]
 8015dc0:	9b05      	ldr	r3, [sp, #20]
 8015dc2:	9a05      	ldr	r2, [sp, #20]
 8015dc4:	6063      	str	r3, [r4, #4]
 8015dc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015dc8:	4413      	add	r3, r2
 8015dca:	9324      	str	r3, [sp, #144]	; 0x90
 8015dcc:	e482      	b.n	80156d4 <_vfprintf_r+0x83c>
 8015dce:	aa22      	add	r2, sp, #136	; 0x88
 8015dd0:	4649      	mov	r1, r9
 8015dd2:	4650      	mov	r0, sl
 8015dd4:	f002 fd89 	bl	80188ea <__sprint_r>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	f040 8230 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015dde:	ac25      	add	r4, sp, #148	; 0x94
 8015de0:	e7b8      	b.n	8015d54 <_vfprintf_r+0xebc>
 8015de2:	aa22      	add	r2, sp, #136	; 0x88
 8015de4:	4649      	mov	r1, r9
 8015de6:	4650      	mov	r0, sl
 8015de8:	f002 fd7f 	bl	80188ea <__sprint_r>
 8015dec:	2800      	cmp	r0, #0
 8015dee:	f040 8226 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015df2:	ac25      	add	r4, sp, #148	; 0x94
 8015df4:	e7c3      	b.n	8015d7e <_vfprintf_r+0xee6>
 8015df6:	3110      	adds	r1, #16
 8015df8:	2a07      	cmp	r2, #7
 8015dfa:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8015dfe:	605f      	str	r7, [r3, #4]
 8015e00:	dd08      	ble.n	8015e14 <_vfprintf_r+0xf7c>
 8015e02:	aa22      	add	r2, sp, #136	; 0x88
 8015e04:	4649      	mov	r1, r9
 8015e06:	4650      	mov	r0, sl
 8015e08:	f002 fd6f 	bl	80188ea <__sprint_r>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	f040 8216 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015e12:	ac25      	add	r4, sp, #148	; 0x94
 8015e14:	3d10      	subs	r5, #16
 8015e16:	4623      	mov	r3, r4
 8015e18:	e7b8      	b.n	8015d8c <_vfprintf_r+0xef4>
 8015e1a:	bf00      	nop
 8015e1c:	0801ca72 	.word	0x0801ca72
 8015e20:	0801cac9 	.word	0x0801cac9
 8015e24:	9b05      	ldr	r3, [sp, #20]
 8015e26:	42ab      	cmp	r3, r5
 8015e28:	bfa8      	it	ge
 8015e2a:	462b      	movge	r3, r5
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	461f      	mov	r7, r3
 8015e30:	dd0b      	ble.n	8015e4a <_vfprintf_r+0xfb2>
 8015e32:	9b03      	ldr	r3, [sp, #12]
 8015e34:	e9c4 3700 	strd	r3, r7, [r4]
 8015e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	443e      	add	r6, r7
 8015e3e:	2b07      	cmp	r3, #7
 8015e40:	9624      	str	r6, [sp, #144]	; 0x90
 8015e42:	9323      	str	r3, [sp, #140]	; 0x8c
 8015e44:	f300 808c 	bgt.w	8015f60 <_vfprintf_r+0x10c8>
 8015e48:	3408      	adds	r4, #8
 8015e4a:	2f00      	cmp	r7, #0
 8015e4c:	bfac      	ite	ge
 8015e4e:	1bee      	subge	r6, r5, r7
 8015e50:	462e      	movlt	r6, r5
 8015e52:	2e00      	cmp	r6, #0
 8015e54:	dd1c      	ble.n	8015e90 <_vfprintf_r+0xff8>
 8015e56:	4f9f      	ldr	r7, [pc, #636]	; (80160d4 <_vfprintf_r+0x123c>)
 8015e58:	f04f 0810 	mov.w	r8, #16
 8015e5c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015e60:	2e10      	cmp	r6, #16
 8015e62:	f103 0301 	add.w	r3, r3, #1
 8015e66:	f104 0108 	add.w	r1, r4, #8
 8015e6a:	6027      	str	r7, [r4, #0]
 8015e6c:	f300 8082 	bgt.w	8015f74 <_vfprintf_r+0x10dc>
 8015e70:	6066      	str	r6, [r4, #4]
 8015e72:	2b07      	cmp	r3, #7
 8015e74:	4416      	add	r6, r2
 8015e76:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8015e7a:	f340 808e 	ble.w	8015f9a <_vfprintf_r+0x1102>
 8015e7e:	aa22      	add	r2, sp, #136	; 0x88
 8015e80:	4649      	mov	r1, r9
 8015e82:	4650      	mov	r0, sl
 8015e84:	f002 fd31 	bl	80188ea <__sprint_r>
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	f040 81d8 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015e8e:	ac25      	add	r4, sp, #148	; 0x94
 8015e90:	9b03      	ldr	r3, [sp, #12]
 8015e92:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8015e96:	441d      	add	r5, r3
 8015e98:	d00d      	beq.n	8015eb6 <_vfprintf_r+0x101e>
 8015e9a:	4e8e      	ldr	r6, [pc, #568]	; (80160d4 <_vfprintf_r+0x123c>)
 8015e9c:	2710      	movs	r7, #16
 8015e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d17c      	bne.n	8015f9e <_vfprintf_r+0x1106>
 8015ea4:	9b08      	ldr	r3, [sp, #32]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d17c      	bne.n	8015fa4 <_vfprintf_r+0x110c>
 8015eaa:	9b03      	ldr	r3, [sp, #12]
 8015eac:	9a05      	ldr	r2, [sp, #20]
 8015eae:	4413      	add	r3, r2
 8015eb0:	429d      	cmp	r5, r3
 8015eb2:	bf28      	it	cs
 8015eb4:	461d      	movcs	r5, r3
 8015eb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015eb8:	9a05      	ldr	r2, [sp, #20]
 8015eba:	4293      	cmp	r3, r2
 8015ebc:	db02      	blt.n	8015ec4 <_vfprintf_r+0x102c>
 8015ebe:	f01b 0f01 	tst.w	fp, #1
 8015ec2:	d00e      	beq.n	8015ee2 <_vfprintf_r+0x104a>
 8015ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ec6:	6023      	str	r3, [r4, #0]
 8015ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ecc:	6063      	str	r3, [r4, #4]
 8015ece:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015ed0:	4413      	add	r3, r2
 8015ed2:	9324      	str	r3, [sp, #144]	; 0x90
 8015ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	2b07      	cmp	r3, #7
 8015eda:	9323      	str	r3, [sp, #140]	; 0x8c
 8015edc:	f300 80e5 	bgt.w	80160aa <_vfprintf_r+0x1212>
 8015ee0:	3408      	adds	r4, #8
 8015ee2:	9905      	ldr	r1, [sp, #20]
 8015ee4:	9b03      	ldr	r3, [sp, #12]
 8015ee6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8015ee8:	440b      	add	r3, r1
 8015eea:	1b8e      	subs	r6, r1, r6
 8015eec:	1b5a      	subs	r2, r3, r5
 8015eee:	4296      	cmp	r6, r2
 8015ef0:	bfa8      	it	ge
 8015ef2:	4616      	movge	r6, r2
 8015ef4:	2e00      	cmp	r6, #0
 8015ef6:	dd0b      	ble.n	8015f10 <_vfprintf_r+0x1078>
 8015ef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015efa:	4433      	add	r3, r6
 8015efc:	9324      	str	r3, [sp, #144]	; 0x90
 8015efe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015f00:	3301      	adds	r3, #1
 8015f02:	2b07      	cmp	r3, #7
 8015f04:	e9c4 5600 	strd	r5, r6, [r4]
 8015f08:	9323      	str	r3, [sp, #140]	; 0x8c
 8015f0a:	f300 80d8 	bgt.w	80160be <_vfprintf_r+0x1226>
 8015f0e:	3408      	adds	r4, #8
 8015f10:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015f12:	9b05      	ldr	r3, [sp, #20]
 8015f14:	2e00      	cmp	r6, #0
 8015f16:	eba3 0505 	sub.w	r5, r3, r5
 8015f1a:	bfa8      	it	ge
 8015f1c:	1bad      	subge	r5, r5, r6
 8015f1e:	2d00      	cmp	r5, #0
 8015f20:	f77f abdf 	ble.w	80156e2 <_vfprintf_r+0x84a>
 8015f24:	4e6b      	ldr	r6, [pc, #428]	; (80160d4 <_vfprintf_r+0x123c>)
 8015f26:	2710      	movs	r7, #16
 8015f28:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015f2c:	2d10      	cmp	r5, #16
 8015f2e:	f103 0301 	add.w	r3, r3, #1
 8015f32:	f104 0108 	add.w	r1, r4, #8
 8015f36:	6026      	str	r6, [r4, #0]
 8015f38:	f77f aec6 	ble.w	8015cc8 <_vfprintf_r+0xe30>
 8015f3c:	3210      	adds	r2, #16
 8015f3e:	2b07      	cmp	r3, #7
 8015f40:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015f44:	6067      	str	r7, [r4, #4]
 8015f46:	dd08      	ble.n	8015f5a <_vfprintf_r+0x10c2>
 8015f48:	aa22      	add	r2, sp, #136	; 0x88
 8015f4a:	4649      	mov	r1, r9
 8015f4c:	4650      	mov	r0, sl
 8015f4e:	f002 fccc 	bl	80188ea <__sprint_r>
 8015f52:	2800      	cmp	r0, #0
 8015f54:	f040 8173 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015f58:	a925      	add	r1, sp, #148	; 0x94
 8015f5a:	3d10      	subs	r5, #16
 8015f5c:	460c      	mov	r4, r1
 8015f5e:	e7e3      	b.n	8015f28 <_vfprintf_r+0x1090>
 8015f60:	aa22      	add	r2, sp, #136	; 0x88
 8015f62:	4649      	mov	r1, r9
 8015f64:	4650      	mov	r0, sl
 8015f66:	f002 fcc0 	bl	80188ea <__sprint_r>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	f040 8167 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015f70:	ac25      	add	r4, sp, #148	; 0x94
 8015f72:	e76a      	b.n	8015e4a <_vfprintf_r+0xfb2>
 8015f74:	3210      	adds	r2, #16
 8015f76:	2b07      	cmp	r3, #7
 8015f78:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015f7c:	f8c4 8004 	str.w	r8, [r4, #4]
 8015f80:	dd08      	ble.n	8015f94 <_vfprintf_r+0x10fc>
 8015f82:	aa22      	add	r2, sp, #136	; 0x88
 8015f84:	4649      	mov	r1, r9
 8015f86:	4650      	mov	r0, sl
 8015f88:	f002 fcaf 	bl	80188ea <__sprint_r>
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	f040 8156 	bne.w	801623e <_vfprintf_r+0x13a6>
 8015f92:	a925      	add	r1, sp, #148	; 0x94
 8015f94:	3e10      	subs	r6, #16
 8015f96:	460c      	mov	r4, r1
 8015f98:	e760      	b.n	8015e5c <_vfprintf_r+0xfc4>
 8015f9a:	460c      	mov	r4, r1
 8015f9c:	e778      	b.n	8015e90 <_vfprintf_r+0xff8>
 8015f9e:	9b08      	ldr	r3, [sp, #32]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d052      	beq.n	801604a <_vfprintf_r+0x11b2>
 8015fa4:	9b08      	ldr	r3, [sp, #32]
 8015fa6:	3b01      	subs	r3, #1
 8015fa8:	9308      	str	r3, [sp, #32]
 8015faa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fac:	6023      	str	r3, [r4, #0]
 8015fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015fb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015fb2:	6063      	str	r3, [r4, #4]
 8015fb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015fb6:	4413      	add	r3, r2
 8015fb8:	9324      	str	r3, [sp, #144]	; 0x90
 8015fba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015fbc:	3301      	adds	r3, #1
 8015fbe:	2b07      	cmp	r3, #7
 8015fc0:	9323      	str	r3, [sp, #140]	; 0x8c
 8015fc2:	dc49      	bgt.n	8016058 <_vfprintf_r+0x11c0>
 8015fc4:	3408      	adds	r4, #8
 8015fc6:	9b03      	ldr	r3, [sp, #12]
 8015fc8:	9a05      	ldr	r2, [sp, #20]
 8015fca:	eb03 0802 	add.w	r8, r3, r2
 8015fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	eba8 0805 	sub.w	r8, r8, r5
 8015fd6:	4598      	cmp	r8, r3
 8015fd8:	bfa8      	it	ge
 8015fda:	4698      	movge	r8, r3
 8015fdc:	f1b8 0f00 	cmp.w	r8, #0
 8015fe0:	dd0a      	ble.n	8015ff8 <_vfprintf_r+0x1160>
 8015fe2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015fe4:	4443      	add	r3, r8
 8015fe6:	9324      	str	r3, [sp, #144]	; 0x90
 8015fe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015fea:	3301      	adds	r3, #1
 8015fec:	2b07      	cmp	r3, #7
 8015fee:	e9c4 5800 	strd	r5, r8, [r4]
 8015ff2:	9323      	str	r3, [sp, #140]	; 0x8c
 8015ff4:	dc3a      	bgt.n	801606c <_vfprintf_r+0x11d4>
 8015ff6:	3408      	adds	r4, #8
 8015ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	f1b8 0f00 	cmp.w	r8, #0
 8016000:	bfac      	ite	ge
 8016002:	eba3 0808 	subge.w	r8, r3, r8
 8016006:	4698      	movlt	r8, r3
 8016008:	f1b8 0f00 	cmp.w	r8, #0
 801600c:	dd19      	ble.n	8016042 <_vfprintf_r+0x11aa>
 801600e:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8016012:	f1b8 0f10 	cmp.w	r8, #16
 8016016:	f102 0201 	add.w	r2, r2, #1
 801601a:	f104 0108 	add.w	r1, r4, #8
 801601e:	6026      	str	r6, [r4, #0]
 8016020:	dc2e      	bgt.n	8016080 <_vfprintf_r+0x11e8>
 8016022:	4443      	add	r3, r8
 8016024:	2a07      	cmp	r2, #7
 8016026:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801602a:	f8c4 8004 	str.w	r8, [r4, #4]
 801602e:	dd3a      	ble.n	80160a6 <_vfprintf_r+0x120e>
 8016030:	aa22      	add	r2, sp, #136	; 0x88
 8016032:	4649      	mov	r1, r9
 8016034:	4650      	mov	r0, sl
 8016036:	f002 fc58 	bl	80188ea <__sprint_r>
 801603a:	2800      	cmp	r0, #0
 801603c:	f040 80ff 	bne.w	801623e <_vfprintf_r+0x13a6>
 8016040:	ac25      	add	r4, sp, #148	; 0x94
 8016042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	441d      	add	r5, r3
 8016048:	e729      	b.n	8015e9e <_vfprintf_r+0x1006>
 801604a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801604c:	3b01      	subs	r3, #1
 801604e:	930a      	str	r3, [sp, #40]	; 0x28
 8016050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016052:	3b01      	subs	r3, #1
 8016054:	9309      	str	r3, [sp, #36]	; 0x24
 8016056:	e7a8      	b.n	8015faa <_vfprintf_r+0x1112>
 8016058:	aa22      	add	r2, sp, #136	; 0x88
 801605a:	4649      	mov	r1, r9
 801605c:	4650      	mov	r0, sl
 801605e:	f002 fc44 	bl	80188ea <__sprint_r>
 8016062:	2800      	cmp	r0, #0
 8016064:	f040 80eb 	bne.w	801623e <_vfprintf_r+0x13a6>
 8016068:	ac25      	add	r4, sp, #148	; 0x94
 801606a:	e7ac      	b.n	8015fc6 <_vfprintf_r+0x112e>
 801606c:	aa22      	add	r2, sp, #136	; 0x88
 801606e:	4649      	mov	r1, r9
 8016070:	4650      	mov	r0, sl
 8016072:	f002 fc3a 	bl	80188ea <__sprint_r>
 8016076:	2800      	cmp	r0, #0
 8016078:	f040 80e1 	bne.w	801623e <_vfprintf_r+0x13a6>
 801607c:	ac25      	add	r4, sp, #148	; 0x94
 801607e:	e7bb      	b.n	8015ff8 <_vfprintf_r+0x1160>
 8016080:	3310      	adds	r3, #16
 8016082:	2a07      	cmp	r2, #7
 8016084:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8016088:	6067      	str	r7, [r4, #4]
 801608a:	dd08      	ble.n	801609e <_vfprintf_r+0x1206>
 801608c:	aa22      	add	r2, sp, #136	; 0x88
 801608e:	4649      	mov	r1, r9
 8016090:	4650      	mov	r0, sl
 8016092:	f002 fc2a 	bl	80188ea <__sprint_r>
 8016096:	2800      	cmp	r0, #0
 8016098:	f040 80d1 	bne.w	801623e <_vfprintf_r+0x13a6>
 801609c:	a925      	add	r1, sp, #148	; 0x94
 801609e:	f1a8 0810 	sub.w	r8, r8, #16
 80160a2:	460c      	mov	r4, r1
 80160a4:	e7b3      	b.n	801600e <_vfprintf_r+0x1176>
 80160a6:	460c      	mov	r4, r1
 80160a8:	e7cb      	b.n	8016042 <_vfprintf_r+0x11aa>
 80160aa:	aa22      	add	r2, sp, #136	; 0x88
 80160ac:	4649      	mov	r1, r9
 80160ae:	4650      	mov	r0, sl
 80160b0:	f002 fc1b 	bl	80188ea <__sprint_r>
 80160b4:	2800      	cmp	r0, #0
 80160b6:	f040 80c2 	bne.w	801623e <_vfprintf_r+0x13a6>
 80160ba:	ac25      	add	r4, sp, #148	; 0x94
 80160bc:	e711      	b.n	8015ee2 <_vfprintf_r+0x104a>
 80160be:	aa22      	add	r2, sp, #136	; 0x88
 80160c0:	4649      	mov	r1, r9
 80160c2:	4650      	mov	r0, sl
 80160c4:	f002 fc11 	bl	80188ea <__sprint_r>
 80160c8:	2800      	cmp	r0, #0
 80160ca:	f040 80b8 	bne.w	801623e <_vfprintf_r+0x13a6>
 80160ce:	ac25      	add	r4, sp, #148	; 0x94
 80160d0:	e71e      	b.n	8015f10 <_vfprintf_r+0x1078>
 80160d2:	bf00      	nop
 80160d4:	0801cac9 	.word	0x0801cac9
 80160d8:	9a05      	ldr	r2, [sp, #20]
 80160da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80160dc:	2a01      	cmp	r2, #1
 80160de:	9a03      	ldr	r2, [sp, #12]
 80160e0:	6022      	str	r2, [r4, #0]
 80160e2:	f106 0601 	add.w	r6, r6, #1
 80160e6:	f103 0301 	add.w	r3, r3, #1
 80160ea:	f04f 0201 	mov.w	r2, #1
 80160ee:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80160f2:	f104 0508 	add.w	r5, r4, #8
 80160f6:	6062      	str	r2, [r4, #4]
 80160f8:	dc02      	bgt.n	8016100 <_vfprintf_r+0x1268>
 80160fa:	f01b 0f01 	tst.w	fp, #1
 80160fe:	d078      	beq.n	80161f2 <_vfprintf_r+0x135a>
 8016100:	2b07      	cmp	r3, #7
 8016102:	dd08      	ble.n	8016116 <_vfprintf_r+0x127e>
 8016104:	aa22      	add	r2, sp, #136	; 0x88
 8016106:	4649      	mov	r1, r9
 8016108:	4650      	mov	r0, sl
 801610a:	f002 fbee 	bl	80188ea <__sprint_r>
 801610e:	2800      	cmp	r0, #0
 8016110:	f040 8095 	bne.w	801623e <_vfprintf_r+0x13a6>
 8016114:	ad25      	add	r5, sp, #148	; 0x94
 8016116:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016118:	602b      	str	r3, [r5, #0]
 801611a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801611c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801611e:	606b      	str	r3, [r5, #4]
 8016120:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016122:	4413      	add	r3, r2
 8016124:	9324      	str	r3, [sp, #144]	; 0x90
 8016126:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016128:	3301      	adds	r3, #1
 801612a:	2b07      	cmp	r3, #7
 801612c:	9323      	str	r3, [sp, #140]	; 0x8c
 801612e:	dc32      	bgt.n	8016196 <_vfprintf_r+0x12fe>
 8016130:	3508      	adds	r5, #8
 8016132:	9b05      	ldr	r3, [sp, #20]
 8016134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016138:	1e5c      	subs	r4, r3, #1
 801613a:	2200      	movs	r2, #0
 801613c:	2300      	movs	r3, #0
 801613e:	f7ea fce3 	bl	8000b08 <__aeabi_dcmpeq>
 8016142:	2800      	cmp	r0, #0
 8016144:	d130      	bne.n	80161a8 <_vfprintf_r+0x1310>
 8016146:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801614a:	9803      	ldr	r0, [sp, #12]
 801614c:	9a05      	ldr	r2, [sp, #20]
 801614e:	3101      	adds	r1, #1
 8016150:	3b01      	subs	r3, #1
 8016152:	3001      	adds	r0, #1
 8016154:	4413      	add	r3, r2
 8016156:	2907      	cmp	r1, #7
 8016158:	e9c5 0400 	strd	r0, r4, [r5]
 801615c:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8016160:	dd4a      	ble.n	80161f8 <_vfprintf_r+0x1360>
 8016162:	aa22      	add	r2, sp, #136	; 0x88
 8016164:	4649      	mov	r1, r9
 8016166:	4650      	mov	r0, sl
 8016168:	f002 fbbf 	bl	80188ea <__sprint_r>
 801616c:	2800      	cmp	r0, #0
 801616e:	d166      	bne.n	801623e <_vfprintf_r+0x13a6>
 8016170:	ad25      	add	r5, sp, #148	; 0x94
 8016172:	ab1e      	add	r3, sp, #120	; 0x78
 8016174:	602b      	str	r3, [r5, #0]
 8016176:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016178:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801617a:	606b      	str	r3, [r5, #4]
 801617c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801617e:	4413      	add	r3, r2
 8016180:	9324      	str	r3, [sp, #144]	; 0x90
 8016182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016184:	3301      	adds	r3, #1
 8016186:	2b07      	cmp	r3, #7
 8016188:	9323      	str	r3, [sp, #140]	; 0x8c
 801618a:	f73f ada4 	bgt.w	8015cd6 <_vfprintf_r+0xe3e>
 801618e:	f105 0408 	add.w	r4, r5, #8
 8016192:	f7ff baa6 	b.w	80156e2 <_vfprintf_r+0x84a>
 8016196:	aa22      	add	r2, sp, #136	; 0x88
 8016198:	4649      	mov	r1, r9
 801619a:	4650      	mov	r0, sl
 801619c:	f002 fba5 	bl	80188ea <__sprint_r>
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d14c      	bne.n	801623e <_vfprintf_r+0x13a6>
 80161a4:	ad25      	add	r5, sp, #148	; 0x94
 80161a6:	e7c4      	b.n	8016132 <_vfprintf_r+0x129a>
 80161a8:	2c00      	cmp	r4, #0
 80161aa:	dde2      	ble.n	8016172 <_vfprintf_r+0x12da>
 80161ac:	4e53      	ldr	r6, [pc, #332]	; (80162fc <_vfprintf_r+0x1464>)
 80161ae:	2710      	movs	r7, #16
 80161b0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80161b4:	2c10      	cmp	r4, #16
 80161b6:	f103 0301 	add.w	r3, r3, #1
 80161ba:	f105 0108 	add.w	r1, r5, #8
 80161be:	602e      	str	r6, [r5, #0]
 80161c0:	dc07      	bgt.n	80161d2 <_vfprintf_r+0x133a>
 80161c2:	606c      	str	r4, [r5, #4]
 80161c4:	2b07      	cmp	r3, #7
 80161c6:	4414      	add	r4, r2
 80161c8:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80161cc:	dcc9      	bgt.n	8016162 <_vfprintf_r+0x12ca>
 80161ce:	460d      	mov	r5, r1
 80161d0:	e7cf      	b.n	8016172 <_vfprintf_r+0x12da>
 80161d2:	3210      	adds	r2, #16
 80161d4:	2b07      	cmp	r3, #7
 80161d6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80161da:	606f      	str	r7, [r5, #4]
 80161dc:	dd06      	ble.n	80161ec <_vfprintf_r+0x1354>
 80161de:	aa22      	add	r2, sp, #136	; 0x88
 80161e0:	4649      	mov	r1, r9
 80161e2:	4650      	mov	r0, sl
 80161e4:	f002 fb81 	bl	80188ea <__sprint_r>
 80161e8:	bb48      	cbnz	r0, 801623e <_vfprintf_r+0x13a6>
 80161ea:	a925      	add	r1, sp, #148	; 0x94
 80161ec:	3c10      	subs	r4, #16
 80161ee:	460d      	mov	r5, r1
 80161f0:	e7de      	b.n	80161b0 <_vfprintf_r+0x1318>
 80161f2:	2b07      	cmp	r3, #7
 80161f4:	ddbd      	ble.n	8016172 <_vfprintf_r+0x12da>
 80161f6:	e7b4      	b.n	8016162 <_vfprintf_r+0x12ca>
 80161f8:	3508      	adds	r5, #8
 80161fa:	e7ba      	b.n	8016172 <_vfprintf_r+0x12da>
 80161fc:	460c      	mov	r4, r1
 80161fe:	f7ff ba70 	b.w	80156e2 <_vfprintf_r+0x84a>
 8016202:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8016206:	1a9d      	subs	r5, r3, r2
 8016208:	2d00      	cmp	r5, #0
 801620a:	f77f aa6e 	ble.w	80156ea <_vfprintf_r+0x852>
 801620e:	4e3c      	ldr	r6, [pc, #240]	; (8016300 <_vfprintf_r+0x1468>)
 8016210:	2710      	movs	r7, #16
 8016212:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016216:	2d10      	cmp	r5, #16
 8016218:	f103 0301 	add.w	r3, r3, #1
 801621c:	6026      	str	r6, [r4, #0]
 801621e:	dc18      	bgt.n	8016252 <_vfprintf_r+0x13ba>
 8016220:	6065      	str	r5, [r4, #4]
 8016222:	2b07      	cmp	r3, #7
 8016224:	4415      	add	r5, r2
 8016226:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801622a:	f77f aa5e 	ble.w	80156ea <_vfprintf_r+0x852>
 801622e:	aa22      	add	r2, sp, #136	; 0x88
 8016230:	4649      	mov	r1, r9
 8016232:	4650      	mov	r0, sl
 8016234:	f002 fb59 	bl	80188ea <__sprint_r>
 8016238:	2800      	cmp	r0, #0
 801623a:	f43f aa56 	beq.w	80156ea <_vfprintf_r+0x852>
 801623e:	9b04      	ldr	r3, [sp, #16]
 8016240:	2b00      	cmp	r3, #0
 8016242:	f43f a872 	beq.w	801532a <_vfprintf_r+0x492>
 8016246:	4619      	mov	r1, r3
 8016248:	4650      	mov	r0, sl
 801624a:	f001 f8f5 	bl	8017438 <_free_r>
 801624e:	f7ff b86c 	b.w	801532a <_vfprintf_r+0x492>
 8016252:	3210      	adds	r2, #16
 8016254:	2b07      	cmp	r3, #7
 8016256:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801625a:	6067      	str	r7, [r4, #4]
 801625c:	dc02      	bgt.n	8016264 <_vfprintf_r+0x13cc>
 801625e:	3408      	adds	r4, #8
 8016260:	3d10      	subs	r5, #16
 8016262:	e7d6      	b.n	8016212 <_vfprintf_r+0x137a>
 8016264:	aa22      	add	r2, sp, #136	; 0x88
 8016266:	4649      	mov	r1, r9
 8016268:	4650      	mov	r0, sl
 801626a:	f002 fb3e 	bl	80188ea <__sprint_r>
 801626e:	2800      	cmp	r0, #0
 8016270:	d1e5      	bne.n	801623e <_vfprintf_r+0x13a6>
 8016272:	ac25      	add	r4, sp, #148	; 0x94
 8016274:	e7f4      	b.n	8016260 <_vfprintf_r+0x13c8>
 8016276:	9904      	ldr	r1, [sp, #16]
 8016278:	4650      	mov	r0, sl
 801627a:	f001 f8dd 	bl	8017438 <_free_r>
 801627e:	f7ff ba4c 	b.w	801571a <_vfprintf_r+0x882>
 8016282:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016284:	b91b      	cbnz	r3, 801628e <_vfprintf_r+0x13f6>
 8016286:	2300      	movs	r3, #0
 8016288:	9323      	str	r3, [sp, #140]	; 0x8c
 801628a:	f7ff b84e 	b.w	801532a <_vfprintf_r+0x492>
 801628e:	aa22      	add	r2, sp, #136	; 0x88
 8016290:	4649      	mov	r1, r9
 8016292:	4650      	mov	r0, sl
 8016294:	f002 fb29 	bl	80188ea <__sprint_r>
 8016298:	2800      	cmp	r0, #0
 801629a:	d0f4      	beq.n	8016286 <_vfprintf_r+0x13ee>
 801629c:	f7ff b845 	b.w	801532a <_vfprintf_r+0x492>
 80162a0:	ea56 0207 	orrs.w	r2, r6, r7
 80162a4:	f8cd b010 	str.w	fp, [sp, #16]
 80162a8:	f43f ab5c 	beq.w	8015964 <_vfprintf_r+0xacc>
 80162ac:	2b01      	cmp	r3, #1
 80162ae:	f43f abf4 	beq.w	8015a9a <_vfprintf_r+0xc02>
 80162b2:	2b02      	cmp	r3, #2
 80162b4:	ab4e      	add	r3, sp, #312	; 0x138
 80162b6:	9303      	str	r3, [sp, #12]
 80162b8:	f43f ac46 	beq.w	8015b48 <_vfprintf_r+0xcb0>
 80162bc:	9903      	ldr	r1, [sp, #12]
 80162be:	f006 0307 	and.w	r3, r6, #7
 80162c2:	460a      	mov	r2, r1
 80162c4:	3330      	adds	r3, #48	; 0x30
 80162c6:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80162ca:	9203      	str	r2, [sp, #12]
 80162cc:	08f2      	lsrs	r2, r6, #3
 80162ce:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80162d2:	08f8      	lsrs	r0, r7, #3
 80162d4:	4616      	mov	r6, r2
 80162d6:	4607      	mov	r7, r0
 80162d8:	ea56 0207 	orrs.w	r2, r6, r7
 80162dc:	d1ee      	bne.n	80162bc <_vfprintf_r+0x1424>
 80162de:	9a04      	ldr	r2, [sp, #16]
 80162e0:	07d0      	lsls	r0, r2, #31
 80162e2:	f57f ac20 	bpl.w	8015b26 <_vfprintf_r+0xc8e>
 80162e6:	2b30      	cmp	r3, #48	; 0x30
 80162e8:	f43f ac1d 	beq.w	8015b26 <_vfprintf_r+0xc8e>
 80162ec:	9a03      	ldr	r2, [sp, #12]
 80162ee:	2330      	movs	r3, #48	; 0x30
 80162f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80162f4:	1e8b      	subs	r3, r1, #2
 80162f6:	9303      	str	r3, [sp, #12]
 80162f8:	e415      	b.n	8015b26 <_vfprintf_r+0xc8e>
 80162fa:	bf00      	nop
 80162fc:	0801cac9 	.word	0x0801cac9
 8016300:	0801cab9 	.word	0x0801cab9

08016304 <__sbprintf>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	460c      	mov	r4, r1
 8016308:	8989      	ldrh	r1, [r1, #12]
 801630a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801630e:	f021 0102 	bic.w	r1, r1, #2
 8016312:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016316:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8016318:	911b      	str	r1, [sp, #108]	; 0x6c
 801631a:	89e1      	ldrh	r1, [r4, #14]
 801631c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016320:	69e1      	ldr	r1, [r4, #28]
 8016322:	9109      	str	r1, [sp, #36]	; 0x24
 8016324:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016326:	910b      	str	r1, [sp, #44]	; 0x2c
 8016328:	a91c      	add	r1, sp, #112	; 0x70
 801632a:	9102      	str	r1, [sp, #8]
 801632c:	9106      	str	r1, [sp, #24]
 801632e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016332:	4606      	mov	r6, r0
 8016334:	9104      	str	r1, [sp, #16]
 8016336:	9107      	str	r1, [sp, #28]
 8016338:	a818      	add	r0, sp, #96	; 0x60
 801633a:	2100      	movs	r1, #0
 801633c:	e9cd 3200 	strd	r3, r2, [sp]
 8016340:	9108      	str	r1, [sp, #32]
 8016342:	f001 fcd1 	bl	8017ce8 <__retarget_lock_init_recursive>
 8016346:	e9dd 3200 	ldrd	r3, r2, [sp]
 801634a:	a902      	add	r1, sp, #8
 801634c:	4630      	mov	r0, r6
 801634e:	f7fe fda3 	bl	8014e98 <_vfprintf_r>
 8016352:	1e05      	subs	r5, r0, #0
 8016354:	db07      	blt.n	8016366 <__sbprintf+0x62>
 8016356:	a902      	add	r1, sp, #8
 8016358:	4630      	mov	r0, r6
 801635a:	f000 ff71 	bl	8017240 <_fflush_r>
 801635e:	2800      	cmp	r0, #0
 8016360:	bf18      	it	ne
 8016362:	f04f 35ff 	movne.w	r5, #4294967295
 8016366:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801636a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801636c:	065b      	lsls	r3, r3, #25
 801636e:	bf42      	ittt	mi
 8016370:	89a3      	ldrhmi	r3, [r4, #12]
 8016372:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8016376:	81a3      	strhmi	r3, [r4, #12]
 8016378:	f001 fcb7 	bl	8017cea <__retarget_lock_close_recursive>
 801637c:	4628      	mov	r0, r5
 801637e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8016382:	bd70      	pop	{r4, r5, r6, pc}

08016384 <__swsetup_r>:
 8016384:	b538      	push	{r3, r4, r5, lr}
 8016386:	4b2a      	ldr	r3, [pc, #168]	; (8016430 <__swsetup_r+0xac>)
 8016388:	4605      	mov	r5, r0
 801638a:	6818      	ldr	r0, [r3, #0]
 801638c:	460c      	mov	r4, r1
 801638e:	b118      	cbz	r0, 8016398 <__swsetup_r+0x14>
 8016390:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016392:	b90b      	cbnz	r3, 8016398 <__swsetup_r+0x14>
 8016394:	f000 ffc0 	bl	8017318 <__sinit>
 8016398:	89a3      	ldrh	r3, [r4, #12]
 801639a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801639e:	0718      	lsls	r0, r3, #28
 80163a0:	d422      	bmi.n	80163e8 <__swsetup_r+0x64>
 80163a2:	06d9      	lsls	r1, r3, #27
 80163a4:	d407      	bmi.n	80163b6 <__swsetup_r+0x32>
 80163a6:	2309      	movs	r3, #9
 80163a8:	602b      	str	r3, [r5, #0]
 80163aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80163ae:	81a3      	strh	r3, [r4, #12]
 80163b0:	f04f 30ff 	mov.w	r0, #4294967295
 80163b4:	e034      	b.n	8016420 <__swsetup_r+0x9c>
 80163b6:	0758      	lsls	r0, r3, #29
 80163b8:	d512      	bpl.n	80163e0 <__swsetup_r+0x5c>
 80163ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80163bc:	b141      	cbz	r1, 80163d0 <__swsetup_r+0x4c>
 80163be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80163c2:	4299      	cmp	r1, r3
 80163c4:	d002      	beq.n	80163cc <__swsetup_r+0x48>
 80163c6:	4628      	mov	r0, r5
 80163c8:	f001 f836 	bl	8017438 <_free_r>
 80163cc:	2300      	movs	r3, #0
 80163ce:	6323      	str	r3, [r4, #48]	; 0x30
 80163d0:	89a3      	ldrh	r3, [r4, #12]
 80163d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80163d6:	81a3      	strh	r3, [r4, #12]
 80163d8:	2300      	movs	r3, #0
 80163da:	6063      	str	r3, [r4, #4]
 80163dc:	6923      	ldr	r3, [r4, #16]
 80163de:	6023      	str	r3, [r4, #0]
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	f043 0308 	orr.w	r3, r3, #8
 80163e6:	81a3      	strh	r3, [r4, #12]
 80163e8:	6923      	ldr	r3, [r4, #16]
 80163ea:	b94b      	cbnz	r3, 8016400 <__swsetup_r+0x7c>
 80163ec:	89a3      	ldrh	r3, [r4, #12]
 80163ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80163f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163f6:	d003      	beq.n	8016400 <__swsetup_r+0x7c>
 80163f8:	4621      	mov	r1, r4
 80163fa:	4628      	mov	r0, r5
 80163fc:	f001 fca4 	bl	8017d48 <__smakebuf_r>
 8016400:	89a0      	ldrh	r0, [r4, #12]
 8016402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016406:	f010 0301 	ands.w	r3, r0, #1
 801640a:	d00a      	beq.n	8016422 <__swsetup_r+0x9e>
 801640c:	2300      	movs	r3, #0
 801640e:	60a3      	str	r3, [r4, #8]
 8016410:	6963      	ldr	r3, [r4, #20]
 8016412:	425b      	negs	r3, r3
 8016414:	61a3      	str	r3, [r4, #24]
 8016416:	6923      	ldr	r3, [r4, #16]
 8016418:	b943      	cbnz	r3, 801642c <__swsetup_r+0xa8>
 801641a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801641e:	d1c4      	bne.n	80163aa <__swsetup_r+0x26>
 8016420:	bd38      	pop	{r3, r4, r5, pc}
 8016422:	0781      	lsls	r1, r0, #30
 8016424:	bf58      	it	pl
 8016426:	6963      	ldrpl	r3, [r4, #20]
 8016428:	60a3      	str	r3, [r4, #8]
 801642a:	e7f4      	b.n	8016416 <__swsetup_r+0x92>
 801642c:	2000      	movs	r0, #0
 801642e:	e7f7      	b.n	8016420 <__swsetup_r+0x9c>
 8016430:	200029bc 	.word	0x200029bc

08016434 <register_fini>:
 8016434:	4b02      	ldr	r3, [pc, #8]	; (8016440 <register_fini+0xc>)
 8016436:	b113      	cbz	r3, 801643e <register_fini+0xa>
 8016438:	4802      	ldr	r0, [pc, #8]	; (8016444 <register_fini+0x10>)
 801643a:	f000 b805 	b.w	8016448 <atexit>
 801643e:	4770      	bx	lr
 8016440:	00000000 	.word	0x00000000
 8016444:	08017369 	.word	0x08017369

08016448 <atexit>:
 8016448:	2300      	movs	r3, #0
 801644a:	4601      	mov	r1, r0
 801644c:	461a      	mov	r2, r3
 801644e:	4618      	mov	r0, r3
 8016450:	f002 bf66 	b.w	8019320 <__register_exitproc>

08016454 <quorem>:
 8016454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016458:	6903      	ldr	r3, [r0, #16]
 801645a:	690c      	ldr	r4, [r1, #16]
 801645c:	42a3      	cmp	r3, r4
 801645e:	4607      	mov	r7, r0
 8016460:	f2c0 8081 	blt.w	8016566 <quorem+0x112>
 8016464:	3c01      	subs	r4, #1
 8016466:	f101 0814 	add.w	r8, r1, #20
 801646a:	f100 0514 	add.w	r5, r0, #20
 801646e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016472:	9301      	str	r3, [sp, #4]
 8016474:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801647c:	3301      	adds	r3, #1
 801647e:	429a      	cmp	r2, r3
 8016480:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016488:	fbb2 f6f3 	udiv	r6, r2, r3
 801648c:	d331      	bcc.n	80164f2 <quorem+0x9e>
 801648e:	f04f 0e00 	mov.w	lr, #0
 8016492:	4640      	mov	r0, r8
 8016494:	46ac      	mov	ip, r5
 8016496:	46f2      	mov	sl, lr
 8016498:	f850 2b04 	ldr.w	r2, [r0], #4
 801649c:	b293      	uxth	r3, r2
 801649e:	fb06 e303 	mla	r3, r6, r3, lr
 80164a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	ebaa 0303 	sub.w	r3, sl, r3
 80164ac:	0c12      	lsrs	r2, r2, #16
 80164ae:	f8dc a000 	ldr.w	sl, [ip]
 80164b2:	fb06 e202 	mla	r2, r6, r2, lr
 80164b6:	fa13 f38a 	uxtah	r3, r3, sl
 80164ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80164be:	fa1f fa82 	uxth.w	sl, r2
 80164c2:	f8dc 2000 	ldr.w	r2, [ip]
 80164c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80164ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80164d4:	4581      	cmp	r9, r0
 80164d6:	f84c 3b04 	str.w	r3, [ip], #4
 80164da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80164de:	d2db      	bcs.n	8016498 <quorem+0x44>
 80164e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80164e4:	b92b      	cbnz	r3, 80164f2 <quorem+0x9e>
 80164e6:	9b01      	ldr	r3, [sp, #4]
 80164e8:	3b04      	subs	r3, #4
 80164ea:	429d      	cmp	r5, r3
 80164ec:	461a      	mov	r2, r3
 80164ee:	d32e      	bcc.n	801654e <quorem+0xfa>
 80164f0:	613c      	str	r4, [r7, #16]
 80164f2:	4638      	mov	r0, r7
 80164f4:	f001 fef4 	bl	80182e0 <__mcmp>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	db24      	blt.n	8016546 <quorem+0xf2>
 80164fc:	3601      	adds	r6, #1
 80164fe:	4628      	mov	r0, r5
 8016500:	f04f 0c00 	mov.w	ip, #0
 8016504:	f858 2b04 	ldr.w	r2, [r8], #4
 8016508:	f8d0 e000 	ldr.w	lr, [r0]
 801650c:	b293      	uxth	r3, r2
 801650e:	ebac 0303 	sub.w	r3, ip, r3
 8016512:	0c12      	lsrs	r2, r2, #16
 8016514:	fa13 f38e 	uxtah	r3, r3, lr
 8016518:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801651c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016520:	b29b      	uxth	r3, r3
 8016522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016526:	45c1      	cmp	r9, r8
 8016528:	f840 3b04 	str.w	r3, [r0], #4
 801652c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016530:	d2e8      	bcs.n	8016504 <quorem+0xb0>
 8016532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801653a:	b922      	cbnz	r2, 8016546 <quorem+0xf2>
 801653c:	3b04      	subs	r3, #4
 801653e:	429d      	cmp	r5, r3
 8016540:	461a      	mov	r2, r3
 8016542:	d30a      	bcc.n	801655a <quorem+0x106>
 8016544:	613c      	str	r4, [r7, #16]
 8016546:	4630      	mov	r0, r6
 8016548:	b003      	add	sp, #12
 801654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654e:	6812      	ldr	r2, [r2, #0]
 8016550:	3b04      	subs	r3, #4
 8016552:	2a00      	cmp	r2, #0
 8016554:	d1cc      	bne.n	80164f0 <quorem+0x9c>
 8016556:	3c01      	subs	r4, #1
 8016558:	e7c7      	b.n	80164ea <quorem+0x96>
 801655a:	6812      	ldr	r2, [r2, #0]
 801655c:	3b04      	subs	r3, #4
 801655e:	2a00      	cmp	r2, #0
 8016560:	d1f0      	bne.n	8016544 <quorem+0xf0>
 8016562:	3c01      	subs	r4, #1
 8016564:	e7eb      	b.n	801653e <quorem+0xea>
 8016566:	2000      	movs	r0, #0
 8016568:	e7ee      	b.n	8016548 <quorem+0xf4>
 801656a:	0000      	movs	r0, r0
 801656c:	0000      	movs	r0, r0
	...

08016570 <_dtoa_r>:
 8016570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016574:	ed2d 8b02 	vpush	{d8}
 8016578:	b095      	sub	sp, #84	; 0x54
 801657a:	ec57 6b10 	vmov	r6, r7, d0
 801657e:	9105      	str	r1, [sp, #20]
 8016580:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016582:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016584:	9209      	str	r2, [sp, #36]	; 0x24
 8016586:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801658a:	4604      	mov	r4, r0
 801658c:	930f      	str	r3, [sp, #60]	; 0x3c
 801658e:	b141      	cbz	r1, 80165a2 <_dtoa_r+0x32>
 8016590:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016592:	604a      	str	r2, [r1, #4]
 8016594:	2301      	movs	r3, #1
 8016596:	4093      	lsls	r3, r2
 8016598:	608b      	str	r3, [r1, #8]
 801659a:	f001 fc4c 	bl	8017e36 <_Bfree>
 801659e:	2300      	movs	r3, #0
 80165a0:	6423      	str	r3, [r4, #64]	; 0x40
 80165a2:	1e3b      	subs	r3, r7, #0
 80165a4:	bfb9      	ittee	lt
 80165a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80165aa:	9303      	strlt	r3, [sp, #12]
 80165ac:	2300      	movge	r3, #0
 80165ae:	602b      	strge	r3, [r5, #0]
 80165b0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80165b4:	4ba2      	ldr	r3, [pc, #648]	; (8016840 <_dtoa_r+0x2d0>)
 80165b6:	bfbc      	itt	lt
 80165b8:	2201      	movlt	r2, #1
 80165ba:	602a      	strlt	r2, [r5, #0]
 80165bc:	ea33 0309 	bics.w	r3, r3, r9
 80165c0:	d11b      	bne.n	80165fa <_dtoa_r+0x8a>
 80165c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165c4:	f242 730f 	movw	r3, #9999	; 0x270f
 80165c8:	6013      	str	r3, [r2, #0]
 80165ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165ce:	4333      	orrs	r3, r6
 80165d0:	f000 8578 	beq.w	80170c4 <_dtoa_r+0xb54>
 80165d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80165d6:	b90b      	cbnz	r3, 80165dc <_dtoa_r+0x6c>
 80165d8:	4b9a      	ldr	r3, [pc, #616]	; (8016844 <_dtoa_r+0x2d4>)
 80165da:	e024      	b.n	8016626 <_dtoa_r+0xb6>
 80165dc:	4b99      	ldr	r3, [pc, #612]	; (8016844 <_dtoa_r+0x2d4>)
 80165de:	9300      	str	r3, [sp, #0]
 80165e0:	3303      	adds	r3, #3
 80165e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80165e4:	6013      	str	r3, [r2, #0]
 80165e6:	9800      	ldr	r0, [sp, #0]
 80165e8:	b015      	add	sp, #84	; 0x54
 80165ea:	ecbd 8b02 	vpop	{d8}
 80165ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165f2:	4b95      	ldr	r3, [pc, #596]	; (8016848 <_dtoa_r+0x2d8>)
 80165f4:	9300      	str	r3, [sp, #0]
 80165f6:	3308      	adds	r3, #8
 80165f8:	e7f3      	b.n	80165e2 <_dtoa_r+0x72>
 80165fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80165fe:	2200      	movs	r2, #0
 8016600:	ec51 0b17 	vmov	r0, r1, d7
 8016604:	2300      	movs	r3, #0
 8016606:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801660a:	f7ea fa7d 	bl	8000b08 <__aeabi_dcmpeq>
 801660e:	4680      	mov	r8, r0
 8016610:	b158      	cbz	r0, 801662a <_dtoa_r+0xba>
 8016612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016614:	2301      	movs	r3, #1
 8016616:	6013      	str	r3, [r2, #0]
 8016618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801661a:	2b00      	cmp	r3, #0
 801661c:	f000 854f 	beq.w	80170be <_dtoa_r+0xb4e>
 8016620:	488a      	ldr	r0, [pc, #552]	; (801684c <_dtoa_r+0x2dc>)
 8016622:	6018      	str	r0, [r3, #0]
 8016624:	1e43      	subs	r3, r0, #1
 8016626:	9300      	str	r3, [sp, #0]
 8016628:	e7dd      	b.n	80165e6 <_dtoa_r+0x76>
 801662a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801662e:	aa12      	add	r2, sp, #72	; 0x48
 8016630:	a913      	add	r1, sp, #76	; 0x4c
 8016632:	4620      	mov	r0, r4
 8016634:	f001 ff74 	bl	8018520 <__d2b>
 8016638:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801663c:	4683      	mov	fp, r0
 801663e:	2d00      	cmp	r5, #0
 8016640:	d07c      	beq.n	801673c <_dtoa_r+0x1cc>
 8016642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016644:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8016648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801664c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8016650:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016654:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016658:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801665c:	4b7c      	ldr	r3, [pc, #496]	; (8016850 <_dtoa_r+0x2e0>)
 801665e:	2200      	movs	r2, #0
 8016660:	4630      	mov	r0, r6
 8016662:	4639      	mov	r1, r7
 8016664:	f7e9 fe30 	bl	80002c8 <__aeabi_dsub>
 8016668:	a36f      	add	r3, pc, #444	; (adr r3, 8016828 <_dtoa_r+0x2b8>)
 801666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666e:	f7e9 ffe3 	bl	8000638 <__aeabi_dmul>
 8016672:	a36f      	add	r3, pc, #444	; (adr r3, 8016830 <_dtoa_r+0x2c0>)
 8016674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016678:	f7e9 fe28 	bl	80002cc <__adddf3>
 801667c:	4606      	mov	r6, r0
 801667e:	4628      	mov	r0, r5
 8016680:	460f      	mov	r7, r1
 8016682:	f7e9 ff6f 	bl	8000564 <__aeabi_i2d>
 8016686:	a36c      	add	r3, pc, #432	; (adr r3, 8016838 <_dtoa_r+0x2c8>)
 8016688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668c:	f7e9 ffd4 	bl	8000638 <__aeabi_dmul>
 8016690:	4602      	mov	r2, r0
 8016692:	460b      	mov	r3, r1
 8016694:	4630      	mov	r0, r6
 8016696:	4639      	mov	r1, r7
 8016698:	f7e9 fe18 	bl	80002cc <__adddf3>
 801669c:	4606      	mov	r6, r0
 801669e:	460f      	mov	r7, r1
 80166a0:	f7ea fa7a 	bl	8000b98 <__aeabi_d2iz>
 80166a4:	2200      	movs	r2, #0
 80166a6:	4682      	mov	sl, r0
 80166a8:	2300      	movs	r3, #0
 80166aa:	4630      	mov	r0, r6
 80166ac:	4639      	mov	r1, r7
 80166ae:	f7ea fa35 	bl	8000b1c <__aeabi_dcmplt>
 80166b2:	b148      	cbz	r0, 80166c8 <_dtoa_r+0x158>
 80166b4:	4650      	mov	r0, sl
 80166b6:	f7e9 ff55 	bl	8000564 <__aeabi_i2d>
 80166ba:	4632      	mov	r2, r6
 80166bc:	463b      	mov	r3, r7
 80166be:	f7ea fa23 	bl	8000b08 <__aeabi_dcmpeq>
 80166c2:	b908      	cbnz	r0, 80166c8 <_dtoa_r+0x158>
 80166c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80166c8:	f1ba 0f16 	cmp.w	sl, #22
 80166cc:	d854      	bhi.n	8016778 <_dtoa_r+0x208>
 80166ce:	4b61      	ldr	r3, [pc, #388]	; (8016854 <_dtoa_r+0x2e4>)
 80166d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80166d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80166dc:	f7ea fa1e 	bl	8000b1c <__aeabi_dcmplt>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d04b      	beq.n	801677c <_dtoa_r+0x20c>
 80166e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80166e8:	2300      	movs	r3, #0
 80166ea:	930e      	str	r3, [sp, #56]	; 0x38
 80166ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80166ee:	1b5d      	subs	r5, r3, r5
 80166f0:	1e6b      	subs	r3, r5, #1
 80166f2:	9304      	str	r3, [sp, #16]
 80166f4:	bf43      	ittte	mi
 80166f6:	2300      	movmi	r3, #0
 80166f8:	f1c5 0801 	rsbmi	r8, r5, #1
 80166fc:	9304      	strmi	r3, [sp, #16]
 80166fe:	f04f 0800 	movpl.w	r8, #0
 8016702:	f1ba 0f00 	cmp.w	sl, #0
 8016706:	db3b      	blt.n	8016780 <_dtoa_r+0x210>
 8016708:	9b04      	ldr	r3, [sp, #16]
 801670a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801670e:	4453      	add	r3, sl
 8016710:	9304      	str	r3, [sp, #16]
 8016712:	2300      	movs	r3, #0
 8016714:	9306      	str	r3, [sp, #24]
 8016716:	9b05      	ldr	r3, [sp, #20]
 8016718:	2b09      	cmp	r3, #9
 801671a:	d86a      	bhi.n	80167f2 <_dtoa_r+0x282>
 801671c:	2b05      	cmp	r3, #5
 801671e:	bfc4      	itt	gt
 8016720:	3b04      	subgt	r3, #4
 8016722:	9305      	strgt	r3, [sp, #20]
 8016724:	9b05      	ldr	r3, [sp, #20]
 8016726:	f1a3 0302 	sub.w	r3, r3, #2
 801672a:	bfcc      	ite	gt
 801672c:	2500      	movgt	r5, #0
 801672e:	2501      	movle	r5, #1
 8016730:	2b03      	cmp	r3, #3
 8016732:	d86a      	bhi.n	801680a <_dtoa_r+0x29a>
 8016734:	e8df f003 	tbb	[pc, r3]
 8016738:	5b4d4f2c 	.word	0x5b4d4f2c
 801673c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8016740:	441d      	add	r5, r3
 8016742:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016746:	2b20      	cmp	r3, #32
 8016748:	bfc1      	itttt	gt
 801674a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801674e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016752:	fa09 f303 	lslgt.w	r3, r9, r3
 8016756:	fa26 f000 	lsrgt.w	r0, r6, r0
 801675a:	bfda      	itte	le
 801675c:	f1c3 0320 	rsble	r3, r3, #32
 8016760:	fa06 f003 	lslle.w	r0, r6, r3
 8016764:	4318      	orrgt	r0, r3
 8016766:	f7e9 feed 	bl	8000544 <__aeabi_ui2d>
 801676a:	2301      	movs	r3, #1
 801676c:	4606      	mov	r6, r0
 801676e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016772:	3d01      	subs	r5, #1
 8016774:	9310      	str	r3, [sp, #64]	; 0x40
 8016776:	e771      	b.n	801665c <_dtoa_r+0xec>
 8016778:	2301      	movs	r3, #1
 801677a:	e7b6      	b.n	80166ea <_dtoa_r+0x17a>
 801677c:	900e      	str	r0, [sp, #56]	; 0x38
 801677e:	e7b5      	b.n	80166ec <_dtoa_r+0x17c>
 8016780:	f1ca 0300 	rsb	r3, sl, #0
 8016784:	9306      	str	r3, [sp, #24]
 8016786:	2300      	movs	r3, #0
 8016788:	eba8 080a 	sub.w	r8, r8, sl
 801678c:	930d      	str	r3, [sp, #52]	; 0x34
 801678e:	e7c2      	b.n	8016716 <_dtoa_r+0x1a6>
 8016790:	2300      	movs	r3, #0
 8016792:	9308      	str	r3, [sp, #32]
 8016794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016796:	2b00      	cmp	r3, #0
 8016798:	dc3a      	bgt.n	8016810 <_dtoa_r+0x2a0>
 801679a:	f04f 0901 	mov.w	r9, #1
 801679e:	f8cd 9004 	str.w	r9, [sp, #4]
 80167a2:	464b      	mov	r3, r9
 80167a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80167a8:	2200      	movs	r2, #0
 80167aa:	6462      	str	r2, [r4, #68]	; 0x44
 80167ac:	2204      	movs	r2, #4
 80167ae:	f102 0014 	add.w	r0, r2, #20
 80167b2:	4298      	cmp	r0, r3
 80167b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80167b6:	d931      	bls.n	801681c <_dtoa_r+0x2ac>
 80167b8:	4620      	mov	r0, r4
 80167ba:	f001 fb17 	bl	8017dec <_Balloc>
 80167be:	9000      	str	r0, [sp, #0]
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d14d      	bne.n	8016860 <_dtoa_r+0x2f0>
 80167c4:	4b24      	ldr	r3, [pc, #144]	; (8016858 <_dtoa_r+0x2e8>)
 80167c6:	4602      	mov	r2, r0
 80167c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80167cc:	4823      	ldr	r0, [pc, #140]	; (801685c <_dtoa_r+0x2ec>)
 80167ce:	f002 fde7 	bl	80193a0 <__assert_func>
 80167d2:	2301      	movs	r3, #1
 80167d4:	e7dd      	b.n	8016792 <_dtoa_r+0x222>
 80167d6:	2300      	movs	r3, #0
 80167d8:	9308      	str	r3, [sp, #32]
 80167da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167dc:	eb0a 0903 	add.w	r9, sl, r3
 80167e0:	f109 0301 	add.w	r3, r9, #1
 80167e4:	2b01      	cmp	r3, #1
 80167e6:	9301      	str	r3, [sp, #4]
 80167e8:	bfb8      	it	lt
 80167ea:	2301      	movlt	r3, #1
 80167ec:	e7dc      	b.n	80167a8 <_dtoa_r+0x238>
 80167ee:	2301      	movs	r3, #1
 80167f0:	e7f2      	b.n	80167d8 <_dtoa_r+0x268>
 80167f2:	2501      	movs	r5, #1
 80167f4:	2300      	movs	r3, #0
 80167f6:	9305      	str	r3, [sp, #20]
 80167f8:	9508      	str	r5, [sp, #32]
 80167fa:	f04f 39ff 	mov.w	r9, #4294967295
 80167fe:	2200      	movs	r2, #0
 8016800:	f8cd 9004 	str.w	r9, [sp, #4]
 8016804:	2312      	movs	r3, #18
 8016806:	9209      	str	r2, [sp, #36]	; 0x24
 8016808:	e7ce      	b.n	80167a8 <_dtoa_r+0x238>
 801680a:	2301      	movs	r3, #1
 801680c:	9308      	str	r3, [sp, #32]
 801680e:	e7f4      	b.n	80167fa <_dtoa_r+0x28a>
 8016810:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016814:	f8cd 9004 	str.w	r9, [sp, #4]
 8016818:	464b      	mov	r3, r9
 801681a:	e7c5      	b.n	80167a8 <_dtoa_r+0x238>
 801681c:	3101      	adds	r1, #1
 801681e:	6461      	str	r1, [r4, #68]	; 0x44
 8016820:	0052      	lsls	r2, r2, #1
 8016822:	e7c4      	b.n	80167ae <_dtoa_r+0x23e>
 8016824:	f3af 8000 	nop.w
 8016828:	636f4361 	.word	0x636f4361
 801682c:	3fd287a7 	.word	0x3fd287a7
 8016830:	8b60c8b3 	.word	0x8b60c8b3
 8016834:	3fc68a28 	.word	0x3fc68a28
 8016838:	509f79fb 	.word	0x509f79fb
 801683c:	3fd34413 	.word	0x3fd34413
 8016840:	7ff00000 	.word	0x7ff00000
 8016844:	0801cad9 	.word	0x0801cad9
 8016848:	0801cadd 	.word	0x0801cadd
 801684c:	0801ca73 	.word	0x0801ca73
 8016850:	3ff80000 	.word	0x3ff80000
 8016854:	0801cc60 	.word	0x0801cc60
 8016858:	0801cae6 	.word	0x0801cae6
 801685c:	0801caf7 	.word	0x0801caf7
 8016860:	9b00      	ldr	r3, [sp, #0]
 8016862:	6423      	str	r3, [r4, #64]	; 0x40
 8016864:	9b01      	ldr	r3, [sp, #4]
 8016866:	2b0e      	cmp	r3, #14
 8016868:	f200 80ad 	bhi.w	80169c6 <_dtoa_r+0x456>
 801686c:	2d00      	cmp	r5, #0
 801686e:	f000 80aa 	beq.w	80169c6 <_dtoa_r+0x456>
 8016872:	f1ba 0f00 	cmp.w	sl, #0
 8016876:	dd36      	ble.n	80168e6 <_dtoa_r+0x376>
 8016878:	4ac2      	ldr	r2, [pc, #776]	; (8016b84 <_dtoa_r+0x614>)
 801687a:	f00a 030f 	and.w	r3, sl, #15
 801687e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016882:	ed93 7b00 	vldr	d7, [r3]
 8016886:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801688a:	ea4f 172a 	mov.w	r7, sl, asr #4
 801688e:	eeb0 8a47 	vmov.f32	s16, s14
 8016892:	eef0 8a67 	vmov.f32	s17, s15
 8016896:	d016      	beq.n	80168c6 <_dtoa_r+0x356>
 8016898:	4bbb      	ldr	r3, [pc, #748]	; (8016b88 <_dtoa_r+0x618>)
 801689a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801689e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80168a2:	f7e9 fff3 	bl	800088c <__aeabi_ddiv>
 80168a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168aa:	f007 070f 	and.w	r7, r7, #15
 80168ae:	2503      	movs	r5, #3
 80168b0:	4eb5      	ldr	r6, [pc, #724]	; (8016b88 <_dtoa_r+0x618>)
 80168b2:	b957      	cbnz	r7, 80168ca <_dtoa_r+0x35a>
 80168b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168b8:	ec53 2b18 	vmov	r2, r3, d8
 80168bc:	f7e9 ffe6 	bl	800088c <__aeabi_ddiv>
 80168c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168c4:	e029      	b.n	801691a <_dtoa_r+0x3aa>
 80168c6:	2502      	movs	r5, #2
 80168c8:	e7f2      	b.n	80168b0 <_dtoa_r+0x340>
 80168ca:	07f9      	lsls	r1, r7, #31
 80168cc:	d508      	bpl.n	80168e0 <_dtoa_r+0x370>
 80168ce:	ec51 0b18 	vmov	r0, r1, d8
 80168d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80168d6:	f7e9 feaf 	bl	8000638 <__aeabi_dmul>
 80168da:	ec41 0b18 	vmov	d8, r0, r1
 80168de:	3501      	adds	r5, #1
 80168e0:	107f      	asrs	r7, r7, #1
 80168e2:	3608      	adds	r6, #8
 80168e4:	e7e5      	b.n	80168b2 <_dtoa_r+0x342>
 80168e6:	f000 80a6 	beq.w	8016a36 <_dtoa_r+0x4c6>
 80168ea:	f1ca 0600 	rsb	r6, sl, #0
 80168ee:	4ba5      	ldr	r3, [pc, #660]	; (8016b84 <_dtoa_r+0x614>)
 80168f0:	4fa5      	ldr	r7, [pc, #660]	; (8016b88 <_dtoa_r+0x618>)
 80168f2:	f006 020f 	and.w	r2, r6, #15
 80168f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80168fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016902:	f7e9 fe99 	bl	8000638 <__aeabi_dmul>
 8016906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801690a:	1136      	asrs	r6, r6, #4
 801690c:	2300      	movs	r3, #0
 801690e:	2502      	movs	r5, #2
 8016910:	2e00      	cmp	r6, #0
 8016912:	f040 8085 	bne.w	8016a20 <_dtoa_r+0x4b0>
 8016916:	2b00      	cmp	r3, #0
 8016918:	d1d2      	bne.n	80168c0 <_dtoa_r+0x350>
 801691a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801691c:	2b00      	cmp	r3, #0
 801691e:	f000 808c 	beq.w	8016a3a <_dtoa_r+0x4ca>
 8016922:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016926:	4b99      	ldr	r3, [pc, #612]	; (8016b8c <_dtoa_r+0x61c>)
 8016928:	2200      	movs	r2, #0
 801692a:	4630      	mov	r0, r6
 801692c:	4639      	mov	r1, r7
 801692e:	f7ea f8f5 	bl	8000b1c <__aeabi_dcmplt>
 8016932:	2800      	cmp	r0, #0
 8016934:	f000 8081 	beq.w	8016a3a <_dtoa_r+0x4ca>
 8016938:	9b01      	ldr	r3, [sp, #4]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d07d      	beq.n	8016a3a <_dtoa_r+0x4ca>
 801693e:	f1b9 0f00 	cmp.w	r9, #0
 8016942:	dd3c      	ble.n	80169be <_dtoa_r+0x44e>
 8016944:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016948:	9307      	str	r3, [sp, #28]
 801694a:	2200      	movs	r2, #0
 801694c:	4b90      	ldr	r3, [pc, #576]	; (8016b90 <_dtoa_r+0x620>)
 801694e:	4630      	mov	r0, r6
 8016950:	4639      	mov	r1, r7
 8016952:	f7e9 fe71 	bl	8000638 <__aeabi_dmul>
 8016956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801695a:	3501      	adds	r5, #1
 801695c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8016960:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016964:	4628      	mov	r0, r5
 8016966:	f7e9 fdfd 	bl	8000564 <__aeabi_i2d>
 801696a:	4632      	mov	r2, r6
 801696c:	463b      	mov	r3, r7
 801696e:	f7e9 fe63 	bl	8000638 <__aeabi_dmul>
 8016972:	4b88      	ldr	r3, [pc, #544]	; (8016b94 <_dtoa_r+0x624>)
 8016974:	2200      	movs	r2, #0
 8016976:	f7e9 fca9 	bl	80002cc <__adddf3>
 801697a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801697e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016982:	9303      	str	r3, [sp, #12]
 8016984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016986:	2b00      	cmp	r3, #0
 8016988:	d15c      	bne.n	8016a44 <_dtoa_r+0x4d4>
 801698a:	4b83      	ldr	r3, [pc, #524]	; (8016b98 <_dtoa_r+0x628>)
 801698c:	2200      	movs	r2, #0
 801698e:	4630      	mov	r0, r6
 8016990:	4639      	mov	r1, r7
 8016992:	f7e9 fc99 	bl	80002c8 <__aeabi_dsub>
 8016996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801699a:	4606      	mov	r6, r0
 801699c:	460f      	mov	r7, r1
 801699e:	f7ea f8db 	bl	8000b58 <__aeabi_dcmpgt>
 80169a2:	2800      	cmp	r0, #0
 80169a4:	f040 8295 	bne.w	8016ed2 <_dtoa_r+0x962>
 80169a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80169ac:	4630      	mov	r0, r6
 80169ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169b2:	4639      	mov	r1, r7
 80169b4:	f7ea f8b2 	bl	8000b1c <__aeabi_dcmplt>
 80169b8:	2800      	cmp	r0, #0
 80169ba:	f040 8287 	bne.w	8016ecc <_dtoa_r+0x95c>
 80169be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80169c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80169c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f2c0 8157 	blt.w	8016c7c <_dtoa_r+0x70c>
 80169ce:	f1ba 0f0e 	cmp.w	sl, #14
 80169d2:	f300 8153 	bgt.w	8016c7c <_dtoa_r+0x70c>
 80169d6:	4b6b      	ldr	r3, [pc, #428]	; (8016b84 <_dtoa_r+0x614>)
 80169d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80169dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80169e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	f280 80e2 	bge.w	8016bac <_dtoa_r+0x63c>
 80169e8:	9b01      	ldr	r3, [sp, #4]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f300 80de 	bgt.w	8016bac <_dtoa_r+0x63c>
 80169f0:	f040 826c 	bne.w	8016ecc <_dtoa_r+0x95c>
 80169f4:	4b68      	ldr	r3, [pc, #416]	; (8016b98 <_dtoa_r+0x628>)
 80169f6:	2200      	movs	r2, #0
 80169f8:	4640      	mov	r0, r8
 80169fa:	4649      	mov	r1, r9
 80169fc:	f7e9 fe1c 	bl	8000638 <__aeabi_dmul>
 8016a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a04:	f7ea f89e 	bl	8000b44 <__aeabi_dcmpge>
 8016a08:	9e01      	ldr	r6, [sp, #4]
 8016a0a:	4637      	mov	r7, r6
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	f040 8242 	bne.w	8016e96 <_dtoa_r+0x926>
 8016a12:	9d00      	ldr	r5, [sp, #0]
 8016a14:	2331      	movs	r3, #49	; 0x31
 8016a16:	f805 3b01 	strb.w	r3, [r5], #1
 8016a1a:	f10a 0a01 	add.w	sl, sl, #1
 8016a1e:	e23e      	b.n	8016e9e <_dtoa_r+0x92e>
 8016a20:	07f2      	lsls	r2, r6, #31
 8016a22:	d505      	bpl.n	8016a30 <_dtoa_r+0x4c0>
 8016a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016a28:	f7e9 fe06 	bl	8000638 <__aeabi_dmul>
 8016a2c:	3501      	adds	r5, #1
 8016a2e:	2301      	movs	r3, #1
 8016a30:	1076      	asrs	r6, r6, #1
 8016a32:	3708      	adds	r7, #8
 8016a34:	e76c      	b.n	8016910 <_dtoa_r+0x3a0>
 8016a36:	2502      	movs	r5, #2
 8016a38:	e76f      	b.n	801691a <_dtoa_r+0x3aa>
 8016a3a:	9b01      	ldr	r3, [sp, #4]
 8016a3c:	f8cd a01c 	str.w	sl, [sp, #28]
 8016a40:	930c      	str	r3, [sp, #48]	; 0x30
 8016a42:	e78d      	b.n	8016960 <_dtoa_r+0x3f0>
 8016a44:	9900      	ldr	r1, [sp, #0]
 8016a46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a4a:	4b4e      	ldr	r3, [pc, #312]	; (8016b84 <_dtoa_r+0x614>)
 8016a4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016a50:	4401      	add	r1, r0
 8016a52:	9102      	str	r1, [sp, #8]
 8016a54:	9908      	ldr	r1, [sp, #32]
 8016a56:	eeb0 8a47 	vmov.f32	s16, s14
 8016a5a:	eef0 8a67 	vmov.f32	s17, s15
 8016a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016a62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016a66:	2900      	cmp	r1, #0
 8016a68:	d045      	beq.n	8016af6 <_dtoa_r+0x586>
 8016a6a:	494c      	ldr	r1, [pc, #304]	; (8016b9c <_dtoa_r+0x62c>)
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	f7e9 ff0d 	bl	800088c <__aeabi_ddiv>
 8016a72:	ec53 2b18 	vmov	r2, r3, d8
 8016a76:	f7e9 fc27 	bl	80002c8 <__aeabi_dsub>
 8016a7a:	9d00      	ldr	r5, [sp, #0]
 8016a7c:	ec41 0b18 	vmov	d8, r0, r1
 8016a80:	4639      	mov	r1, r7
 8016a82:	4630      	mov	r0, r6
 8016a84:	f7ea f888 	bl	8000b98 <__aeabi_d2iz>
 8016a88:	900c      	str	r0, [sp, #48]	; 0x30
 8016a8a:	f7e9 fd6b 	bl	8000564 <__aeabi_i2d>
 8016a8e:	4602      	mov	r2, r0
 8016a90:	460b      	mov	r3, r1
 8016a92:	4630      	mov	r0, r6
 8016a94:	4639      	mov	r1, r7
 8016a96:	f7e9 fc17 	bl	80002c8 <__aeabi_dsub>
 8016a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a9c:	3330      	adds	r3, #48	; 0x30
 8016a9e:	f805 3b01 	strb.w	r3, [r5], #1
 8016aa2:	ec53 2b18 	vmov	r2, r3, d8
 8016aa6:	4606      	mov	r6, r0
 8016aa8:	460f      	mov	r7, r1
 8016aaa:	f7ea f837 	bl	8000b1c <__aeabi_dcmplt>
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	d165      	bne.n	8016b7e <_dtoa_r+0x60e>
 8016ab2:	4632      	mov	r2, r6
 8016ab4:	463b      	mov	r3, r7
 8016ab6:	4935      	ldr	r1, [pc, #212]	; (8016b8c <_dtoa_r+0x61c>)
 8016ab8:	2000      	movs	r0, #0
 8016aba:	f7e9 fc05 	bl	80002c8 <__aeabi_dsub>
 8016abe:	ec53 2b18 	vmov	r2, r3, d8
 8016ac2:	f7ea f82b 	bl	8000b1c <__aeabi_dcmplt>
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	f040 80b8 	bne.w	8016c3c <_dtoa_r+0x6cc>
 8016acc:	9b02      	ldr	r3, [sp, #8]
 8016ace:	429d      	cmp	r5, r3
 8016ad0:	f43f af75 	beq.w	80169be <_dtoa_r+0x44e>
 8016ad4:	4b2e      	ldr	r3, [pc, #184]	; (8016b90 <_dtoa_r+0x620>)
 8016ad6:	ec51 0b18 	vmov	r0, r1, d8
 8016ada:	2200      	movs	r2, #0
 8016adc:	f7e9 fdac 	bl	8000638 <__aeabi_dmul>
 8016ae0:	4b2b      	ldr	r3, [pc, #172]	; (8016b90 <_dtoa_r+0x620>)
 8016ae2:	ec41 0b18 	vmov	d8, r0, r1
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	4630      	mov	r0, r6
 8016aea:	4639      	mov	r1, r7
 8016aec:	f7e9 fda4 	bl	8000638 <__aeabi_dmul>
 8016af0:	4606      	mov	r6, r0
 8016af2:	460f      	mov	r7, r1
 8016af4:	e7c4      	b.n	8016a80 <_dtoa_r+0x510>
 8016af6:	ec51 0b17 	vmov	r0, r1, d7
 8016afa:	f7e9 fd9d 	bl	8000638 <__aeabi_dmul>
 8016afe:	9b02      	ldr	r3, [sp, #8]
 8016b00:	9d00      	ldr	r5, [sp, #0]
 8016b02:	930c      	str	r3, [sp, #48]	; 0x30
 8016b04:	ec41 0b18 	vmov	d8, r0, r1
 8016b08:	4639      	mov	r1, r7
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	f7ea f844 	bl	8000b98 <__aeabi_d2iz>
 8016b10:	9011      	str	r0, [sp, #68]	; 0x44
 8016b12:	f7e9 fd27 	bl	8000564 <__aeabi_i2d>
 8016b16:	4602      	mov	r2, r0
 8016b18:	460b      	mov	r3, r1
 8016b1a:	4630      	mov	r0, r6
 8016b1c:	4639      	mov	r1, r7
 8016b1e:	f7e9 fbd3 	bl	80002c8 <__aeabi_dsub>
 8016b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b24:	3330      	adds	r3, #48	; 0x30
 8016b26:	f805 3b01 	strb.w	r3, [r5], #1
 8016b2a:	9b02      	ldr	r3, [sp, #8]
 8016b2c:	429d      	cmp	r5, r3
 8016b2e:	4606      	mov	r6, r0
 8016b30:	460f      	mov	r7, r1
 8016b32:	f04f 0200 	mov.w	r2, #0
 8016b36:	d133      	bne.n	8016ba0 <_dtoa_r+0x630>
 8016b38:	4b18      	ldr	r3, [pc, #96]	; (8016b9c <_dtoa_r+0x62c>)
 8016b3a:	ec51 0b18 	vmov	r0, r1, d8
 8016b3e:	f7e9 fbc5 	bl	80002cc <__adddf3>
 8016b42:	4602      	mov	r2, r0
 8016b44:	460b      	mov	r3, r1
 8016b46:	4630      	mov	r0, r6
 8016b48:	4639      	mov	r1, r7
 8016b4a:	f7ea f805 	bl	8000b58 <__aeabi_dcmpgt>
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	d174      	bne.n	8016c3c <_dtoa_r+0x6cc>
 8016b52:	ec53 2b18 	vmov	r2, r3, d8
 8016b56:	4911      	ldr	r1, [pc, #68]	; (8016b9c <_dtoa_r+0x62c>)
 8016b58:	2000      	movs	r0, #0
 8016b5a:	f7e9 fbb5 	bl	80002c8 <__aeabi_dsub>
 8016b5e:	4602      	mov	r2, r0
 8016b60:	460b      	mov	r3, r1
 8016b62:	4630      	mov	r0, r6
 8016b64:	4639      	mov	r1, r7
 8016b66:	f7e9 ffd9 	bl	8000b1c <__aeabi_dcmplt>
 8016b6a:	2800      	cmp	r0, #0
 8016b6c:	f43f af27 	beq.w	80169be <_dtoa_r+0x44e>
 8016b70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016b72:	1e6b      	subs	r3, r5, #1
 8016b74:	930c      	str	r3, [sp, #48]	; 0x30
 8016b76:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016b7a:	2b30      	cmp	r3, #48	; 0x30
 8016b7c:	d0f8      	beq.n	8016b70 <_dtoa_r+0x600>
 8016b7e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016b82:	e049      	b.n	8016c18 <_dtoa_r+0x6a8>
 8016b84:	0801cc60 	.word	0x0801cc60
 8016b88:	0801cc38 	.word	0x0801cc38
 8016b8c:	3ff00000 	.word	0x3ff00000
 8016b90:	40240000 	.word	0x40240000
 8016b94:	401c0000 	.word	0x401c0000
 8016b98:	40140000 	.word	0x40140000
 8016b9c:	3fe00000 	.word	0x3fe00000
 8016ba0:	4baf      	ldr	r3, [pc, #700]	; (8016e60 <_dtoa_r+0x8f0>)
 8016ba2:	f7e9 fd49 	bl	8000638 <__aeabi_dmul>
 8016ba6:	4606      	mov	r6, r0
 8016ba8:	460f      	mov	r7, r1
 8016baa:	e7ad      	b.n	8016b08 <_dtoa_r+0x598>
 8016bac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016bb0:	9d00      	ldr	r5, [sp, #0]
 8016bb2:	4642      	mov	r2, r8
 8016bb4:	464b      	mov	r3, r9
 8016bb6:	4630      	mov	r0, r6
 8016bb8:	4639      	mov	r1, r7
 8016bba:	f7e9 fe67 	bl	800088c <__aeabi_ddiv>
 8016bbe:	f7e9 ffeb 	bl	8000b98 <__aeabi_d2iz>
 8016bc2:	9002      	str	r0, [sp, #8]
 8016bc4:	f7e9 fcce 	bl	8000564 <__aeabi_i2d>
 8016bc8:	4642      	mov	r2, r8
 8016bca:	464b      	mov	r3, r9
 8016bcc:	f7e9 fd34 	bl	8000638 <__aeabi_dmul>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	4630      	mov	r0, r6
 8016bd6:	4639      	mov	r1, r7
 8016bd8:	f7e9 fb76 	bl	80002c8 <__aeabi_dsub>
 8016bdc:	9e02      	ldr	r6, [sp, #8]
 8016bde:	9f01      	ldr	r7, [sp, #4]
 8016be0:	3630      	adds	r6, #48	; 0x30
 8016be2:	f805 6b01 	strb.w	r6, [r5], #1
 8016be6:	9e00      	ldr	r6, [sp, #0]
 8016be8:	1bae      	subs	r6, r5, r6
 8016bea:	42b7      	cmp	r7, r6
 8016bec:	4602      	mov	r2, r0
 8016bee:	460b      	mov	r3, r1
 8016bf0:	d137      	bne.n	8016c62 <_dtoa_r+0x6f2>
 8016bf2:	f7e9 fb6b 	bl	80002cc <__adddf3>
 8016bf6:	4642      	mov	r2, r8
 8016bf8:	464b      	mov	r3, r9
 8016bfa:	4606      	mov	r6, r0
 8016bfc:	460f      	mov	r7, r1
 8016bfe:	f7e9 ffab 	bl	8000b58 <__aeabi_dcmpgt>
 8016c02:	b9c8      	cbnz	r0, 8016c38 <_dtoa_r+0x6c8>
 8016c04:	4642      	mov	r2, r8
 8016c06:	464b      	mov	r3, r9
 8016c08:	4630      	mov	r0, r6
 8016c0a:	4639      	mov	r1, r7
 8016c0c:	f7e9 ff7c 	bl	8000b08 <__aeabi_dcmpeq>
 8016c10:	b110      	cbz	r0, 8016c18 <_dtoa_r+0x6a8>
 8016c12:	9b02      	ldr	r3, [sp, #8]
 8016c14:	07d9      	lsls	r1, r3, #31
 8016c16:	d40f      	bmi.n	8016c38 <_dtoa_r+0x6c8>
 8016c18:	4620      	mov	r0, r4
 8016c1a:	4659      	mov	r1, fp
 8016c1c:	f001 f90b 	bl	8017e36 <_Bfree>
 8016c20:	2300      	movs	r3, #0
 8016c22:	702b      	strb	r3, [r5, #0]
 8016c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c26:	f10a 0001 	add.w	r0, sl, #1
 8016c2a:	6018      	str	r0, [r3, #0]
 8016c2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	f43f acd9 	beq.w	80165e6 <_dtoa_r+0x76>
 8016c34:	601d      	str	r5, [r3, #0]
 8016c36:	e4d6      	b.n	80165e6 <_dtoa_r+0x76>
 8016c38:	f8cd a01c 	str.w	sl, [sp, #28]
 8016c3c:	462b      	mov	r3, r5
 8016c3e:	461d      	mov	r5, r3
 8016c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016c44:	2a39      	cmp	r2, #57	; 0x39
 8016c46:	d108      	bne.n	8016c5a <_dtoa_r+0x6ea>
 8016c48:	9a00      	ldr	r2, [sp, #0]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d1f7      	bne.n	8016c3e <_dtoa_r+0x6ce>
 8016c4e:	9a07      	ldr	r2, [sp, #28]
 8016c50:	9900      	ldr	r1, [sp, #0]
 8016c52:	3201      	adds	r2, #1
 8016c54:	9207      	str	r2, [sp, #28]
 8016c56:	2230      	movs	r2, #48	; 0x30
 8016c58:	700a      	strb	r2, [r1, #0]
 8016c5a:	781a      	ldrb	r2, [r3, #0]
 8016c5c:	3201      	adds	r2, #1
 8016c5e:	701a      	strb	r2, [r3, #0]
 8016c60:	e78d      	b.n	8016b7e <_dtoa_r+0x60e>
 8016c62:	4b7f      	ldr	r3, [pc, #508]	; (8016e60 <_dtoa_r+0x8f0>)
 8016c64:	2200      	movs	r2, #0
 8016c66:	f7e9 fce7 	bl	8000638 <__aeabi_dmul>
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	4606      	mov	r6, r0
 8016c70:	460f      	mov	r7, r1
 8016c72:	f7e9 ff49 	bl	8000b08 <__aeabi_dcmpeq>
 8016c76:	2800      	cmp	r0, #0
 8016c78:	d09b      	beq.n	8016bb2 <_dtoa_r+0x642>
 8016c7a:	e7cd      	b.n	8016c18 <_dtoa_r+0x6a8>
 8016c7c:	9a08      	ldr	r2, [sp, #32]
 8016c7e:	2a00      	cmp	r2, #0
 8016c80:	f000 80c4 	beq.w	8016e0c <_dtoa_r+0x89c>
 8016c84:	9a05      	ldr	r2, [sp, #20]
 8016c86:	2a01      	cmp	r2, #1
 8016c88:	f300 80a8 	bgt.w	8016ddc <_dtoa_r+0x86c>
 8016c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c8e:	2a00      	cmp	r2, #0
 8016c90:	f000 80a0 	beq.w	8016dd4 <_dtoa_r+0x864>
 8016c94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016c98:	9e06      	ldr	r6, [sp, #24]
 8016c9a:	4645      	mov	r5, r8
 8016c9c:	9a04      	ldr	r2, [sp, #16]
 8016c9e:	2101      	movs	r1, #1
 8016ca0:	441a      	add	r2, r3
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	4498      	add	r8, r3
 8016ca6:	9204      	str	r2, [sp, #16]
 8016ca8:	f001 f9b2 	bl	8018010 <__i2b>
 8016cac:	4607      	mov	r7, r0
 8016cae:	2d00      	cmp	r5, #0
 8016cb0:	dd0b      	ble.n	8016cca <_dtoa_r+0x75a>
 8016cb2:	9b04      	ldr	r3, [sp, #16]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	dd08      	ble.n	8016cca <_dtoa_r+0x75a>
 8016cb8:	42ab      	cmp	r3, r5
 8016cba:	9a04      	ldr	r2, [sp, #16]
 8016cbc:	bfa8      	it	ge
 8016cbe:	462b      	movge	r3, r5
 8016cc0:	eba8 0803 	sub.w	r8, r8, r3
 8016cc4:	1aed      	subs	r5, r5, r3
 8016cc6:	1ad3      	subs	r3, r2, r3
 8016cc8:	9304      	str	r3, [sp, #16]
 8016cca:	9b06      	ldr	r3, [sp, #24]
 8016ccc:	b1fb      	cbz	r3, 8016d0e <_dtoa_r+0x79e>
 8016cce:	9b08      	ldr	r3, [sp, #32]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	f000 809f 	beq.w	8016e14 <_dtoa_r+0x8a4>
 8016cd6:	2e00      	cmp	r6, #0
 8016cd8:	dd11      	ble.n	8016cfe <_dtoa_r+0x78e>
 8016cda:	4639      	mov	r1, r7
 8016cdc:	4632      	mov	r2, r6
 8016cde:	4620      	mov	r0, r4
 8016ce0:	f001 fa52 	bl	8018188 <__pow5mult>
 8016ce4:	465a      	mov	r2, fp
 8016ce6:	4601      	mov	r1, r0
 8016ce8:	4607      	mov	r7, r0
 8016cea:	4620      	mov	r0, r4
 8016cec:	f001 f9a6 	bl	801803c <__multiply>
 8016cf0:	4659      	mov	r1, fp
 8016cf2:	9007      	str	r0, [sp, #28]
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f001 f89e 	bl	8017e36 <_Bfree>
 8016cfa:	9b07      	ldr	r3, [sp, #28]
 8016cfc:	469b      	mov	fp, r3
 8016cfe:	9b06      	ldr	r3, [sp, #24]
 8016d00:	1b9a      	subs	r2, r3, r6
 8016d02:	d004      	beq.n	8016d0e <_dtoa_r+0x79e>
 8016d04:	4659      	mov	r1, fp
 8016d06:	4620      	mov	r0, r4
 8016d08:	f001 fa3e 	bl	8018188 <__pow5mult>
 8016d0c:	4683      	mov	fp, r0
 8016d0e:	2101      	movs	r1, #1
 8016d10:	4620      	mov	r0, r4
 8016d12:	f001 f97d 	bl	8018010 <__i2b>
 8016d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	4606      	mov	r6, r0
 8016d1c:	dd7c      	ble.n	8016e18 <_dtoa_r+0x8a8>
 8016d1e:	461a      	mov	r2, r3
 8016d20:	4601      	mov	r1, r0
 8016d22:	4620      	mov	r0, r4
 8016d24:	f001 fa30 	bl	8018188 <__pow5mult>
 8016d28:	9b05      	ldr	r3, [sp, #20]
 8016d2a:	2b01      	cmp	r3, #1
 8016d2c:	4606      	mov	r6, r0
 8016d2e:	dd76      	ble.n	8016e1e <_dtoa_r+0x8ae>
 8016d30:	2300      	movs	r3, #0
 8016d32:	9306      	str	r3, [sp, #24]
 8016d34:	6933      	ldr	r3, [r6, #16]
 8016d36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016d3a:	6918      	ldr	r0, [r3, #16]
 8016d3c:	f001 f918 	bl	8017f70 <__hi0bits>
 8016d40:	f1c0 0020 	rsb	r0, r0, #32
 8016d44:	9b04      	ldr	r3, [sp, #16]
 8016d46:	4418      	add	r0, r3
 8016d48:	f010 001f 	ands.w	r0, r0, #31
 8016d4c:	f000 8086 	beq.w	8016e5c <_dtoa_r+0x8ec>
 8016d50:	f1c0 0320 	rsb	r3, r0, #32
 8016d54:	2b04      	cmp	r3, #4
 8016d56:	dd7f      	ble.n	8016e58 <_dtoa_r+0x8e8>
 8016d58:	f1c0 001c 	rsb	r0, r0, #28
 8016d5c:	9b04      	ldr	r3, [sp, #16]
 8016d5e:	4403      	add	r3, r0
 8016d60:	4480      	add	r8, r0
 8016d62:	4405      	add	r5, r0
 8016d64:	9304      	str	r3, [sp, #16]
 8016d66:	f1b8 0f00 	cmp.w	r8, #0
 8016d6a:	dd05      	ble.n	8016d78 <_dtoa_r+0x808>
 8016d6c:	4659      	mov	r1, fp
 8016d6e:	4642      	mov	r2, r8
 8016d70:	4620      	mov	r0, r4
 8016d72:	f001 fa49 	bl	8018208 <__lshift>
 8016d76:	4683      	mov	fp, r0
 8016d78:	9b04      	ldr	r3, [sp, #16]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	dd05      	ble.n	8016d8a <_dtoa_r+0x81a>
 8016d7e:	4631      	mov	r1, r6
 8016d80:	461a      	mov	r2, r3
 8016d82:	4620      	mov	r0, r4
 8016d84:	f001 fa40 	bl	8018208 <__lshift>
 8016d88:	4606      	mov	r6, r0
 8016d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d069      	beq.n	8016e64 <_dtoa_r+0x8f4>
 8016d90:	4631      	mov	r1, r6
 8016d92:	4658      	mov	r0, fp
 8016d94:	f001 faa4 	bl	80182e0 <__mcmp>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	da63      	bge.n	8016e64 <_dtoa_r+0x8f4>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	4659      	mov	r1, fp
 8016da0:	220a      	movs	r2, #10
 8016da2:	4620      	mov	r0, r4
 8016da4:	f001 f850 	bl	8017e48 <__multadd>
 8016da8:	9b08      	ldr	r3, [sp, #32]
 8016daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016dae:	4683      	mov	fp, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f000 818e 	beq.w	80170d2 <_dtoa_r+0xb62>
 8016db6:	4639      	mov	r1, r7
 8016db8:	2300      	movs	r3, #0
 8016dba:	220a      	movs	r2, #10
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	f001 f843 	bl	8017e48 <__multadd>
 8016dc2:	f1b9 0f00 	cmp.w	r9, #0
 8016dc6:	4607      	mov	r7, r0
 8016dc8:	f300 808e 	bgt.w	8016ee8 <_dtoa_r+0x978>
 8016dcc:	9b05      	ldr	r3, [sp, #20]
 8016dce:	2b02      	cmp	r3, #2
 8016dd0:	dc50      	bgt.n	8016e74 <_dtoa_r+0x904>
 8016dd2:	e089      	b.n	8016ee8 <_dtoa_r+0x978>
 8016dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016dda:	e75d      	b.n	8016c98 <_dtoa_r+0x728>
 8016ddc:	9b01      	ldr	r3, [sp, #4]
 8016dde:	1e5e      	subs	r6, r3, #1
 8016de0:	9b06      	ldr	r3, [sp, #24]
 8016de2:	42b3      	cmp	r3, r6
 8016de4:	bfbf      	itttt	lt
 8016de6:	9b06      	ldrlt	r3, [sp, #24]
 8016de8:	9606      	strlt	r6, [sp, #24]
 8016dea:	1af2      	sublt	r2, r6, r3
 8016dec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016dee:	bfb6      	itet	lt
 8016df0:	189b      	addlt	r3, r3, r2
 8016df2:	1b9e      	subge	r6, r3, r6
 8016df4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8016df6:	9b01      	ldr	r3, [sp, #4]
 8016df8:	bfb8      	it	lt
 8016dfa:	2600      	movlt	r6, #0
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	bfb5      	itete	lt
 8016e00:	eba8 0503 	sublt.w	r5, r8, r3
 8016e04:	9b01      	ldrge	r3, [sp, #4]
 8016e06:	2300      	movlt	r3, #0
 8016e08:	4645      	movge	r5, r8
 8016e0a:	e747      	b.n	8016c9c <_dtoa_r+0x72c>
 8016e0c:	9e06      	ldr	r6, [sp, #24]
 8016e0e:	9f08      	ldr	r7, [sp, #32]
 8016e10:	4645      	mov	r5, r8
 8016e12:	e74c      	b.n	8016cae <_dtoa_r+0x73e>
 8016e14:	9a06      	ldr	r2, [sp, #24]
 8016e16:	e775      	b.n	8016d04 <_dtoa_r+0x794>
 8016e18:	9b05      	ldr	r3, [sp, #20]
 8016e1a:	2b01      	cmp	r3, #1
 8016e1c:	dc18      	bgt.n	8016e50 <_dtoa_r+0x8e0>
 8016e1e:	9b02      	ldr	r3, [sp, #8]
 8016e20:	b9b3      	cbnz	r3, 8016e50 <_dtoa_r+0x8e0>
 8016e22:	9b03      	ldr	r3, [sp, #12]
 8016e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016e28:	b9a3      	cbnz	r3, 8016e54 <_dtoa_r+0x8e4>
 8016e2a:	9b03      	ldr	r3, [sp, #12]
 8016e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e30:	0d1b      	lsrs	r3, r3, #20
 8016e32:	051b      	lsls	r3, r3, #20
 8016e34:	b12b      	cbz	r3, 8016e42 <_dtoa_r+0x8d2>
 8016e36:	9b04      	ldr	r3, [sp, #16]
 8016e38:	3301      	adds	r3, #1
 8016e3a:	9304      	str	r3, [sp, #16]
 8016e3c:	f108 0801 	add.w	r8, r8, #1
 8016e40:	2301      	movs	r3, #1
 8016e42:	9306      	str	r3, [sp, #24]
 8016e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	f47f af74 	bne.w	8016d34 <_dtoa_r+0x7c4>
 8016e4c:	2001      	movs	r0, #1
 8016e4e:	e779      	b.n	8016d44 <_dtoa_r+0x7d4>
 8016e50:	2300      	movs	r3, #0
 8016e52:	e7f6      	b.n	8016e42 <_dtoa_r+0x8d2>
 8016e54:	9b02      	ldr	r3, [sp, #8]
 8016e56:	e7f4      	b.n	8016e42 <_dtoa_r+0x8d2>
 8016e58:	d085      	beq.n	8016d66 <_dtoa_r+0x7f6>
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	301c      	adds	r0, #28
 8016e5e:	e77d      	b.n	8016d5c <_dtoa_r+0x7ec>
 8016e60:	40240000 	.word	0x40240000
 8016e64:	9b01      	ldr	r3, [sp, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	dc38      	bgt.n	8016edc <_dtoa_r+0x96c>
 8016e6a:	9b05      	ldr	r3, [sp, #20]
 8016e6c:	2b02      	cmp	r3, #2
 8016e6e:	dd35      	ble.n	8016edc <_dtoa_r+0x96c>
 8016e70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016e74:	f1b9 0f00 	cmp.w	r9, #0
 8016e78:	d10d      	bne.n	8016e96 <_dtoa_r+0x926>
 8016e7a:	4631      	mov	r1, r6
 8016e7c:	464b      	mov	r3, r9
 8016e7e:	2205      	movs	r2, #5
 8016e80:	4620      	mov	r0, r4
 8016e82:	f000 ffe1 	bl	8017e48 <__multadd>
 8016e86:	4601      	mov	r1, r0
 8016e88:	4606      	mov	r6, r0
 8016e8a:	4658      	mov	r0, fp
 8016e8c:	f001 fa28 	bl	80182e0 <__mcmp>
 8016e90:	2800      	cmp	r0, #0
 8016e92:	f73f adbe 	bgt.w	8016a12 <_dtoa_r+0x4a2>
 8016e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e98:	9d00      	ldr	r5, [sp, #0]
 8016e9a:	ea6f 0a03 	mvn.w	sl, r3
 8016e9e:	f04f 0800 	mov.w	r8, #0
 8016ea2:	4631      	mov	r1, r6
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	f000 ffc6 	bl	8017e36 <_Bfree>
 8016eaa:	2f00      	cmp	r7, #0
 8016eac:	f43f aeb4 	beq.w	8016c18 <_dtoa_r+0x6a8>
 8016eb0:	f1b8 0f00 	cmp.w	r8, #0
 8016eb4:	d005      	beq.n	8016ec2 <_dtoa_r+0x952>
 8016eb6:	45b8      	cmp	r8, r7
 8016eb8:	d003      	beq.n	8016ec2 <_dtoa_r+0x952>
 8016eba:	4641      	mov	r1, r8
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	f000 ffba 	bl	8017e36 <_Bfree>
 8016ec2:	4639      	mov	r1, r7
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	f000 ffb6 	bl	8017e36 <_Bfree>
 8016eca:	e6a5      	b.n	8016c18 <_dtoa_r+0x6a8>
 8016ecc:	2600      	movs	r6, #0
 8016ece:	4637      	mov	r7, r6
 8016ed0:	e7e1      	b.n	8016e96 <_dtoa_r+0x926>
 8016ed2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016ed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016ed8:	4637      	mov	r7, r6
 8016eda:	e59a      	b.n	8016a12 <_dtoa_r+0x4a2>
 8016edc:	9b08      	ldr	r3, [sp, #32]
 8016ede:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	f000 80fc 	beq.w	80170e0 <_dtoa_r+0xb70>
 8016ee8:	2d00      	cmp	r5, #0
 8016eea:	dd05      	ble.n	8016ef8 <_dtoa_r+0x988>
 8016eec:	4639      	mov	r1, r7
 8016eee:	462a      	mov	r2, r5
 8016ef0:	4620      	mov	r0, r4
 8016ef2:	f001 f989 	bl	8018208 <__lshift>
 8016ef6:	4607      	mov	r7, r0
 8016ef8:	9b06      	ldr	r3, [sp, #24]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d05b      	beq.n	8016fb6 <_dtoa_r+0xa46>
 8016efe:	6879      	ldr	r1, [r7, #4]
 8016f00:	4620      	mov	r0, r4
 8016f02:	f000 ff73 	bl	8017dec <_Balloc>
 8016f06:	4605      	mov	r5, r0
 8016f08:	b920      	cbnz	r0, 8016f14 <_dtoa_r+0x9a4>
 8016f0a:	4b80      	ldr	r3, [pc, #512]	; (801710c <_dtoa_r+0xb9c>)
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016f12:	e45b      	b.n	80167cc <_dtoa_r+0x25c>
 8016f14:	693a      	ldr	r2, [r7, #16]
 8016f16:	3202      	adds	r2, #2
 8016f18:	0092      	lsls	r2, r2, #2
 8016f1a:	f107 010c 	add.w	r1, r7, #12
 8016f1e:	300c      	adds	r0, #12
 8016f20:	f7fb fd9c 	bl	8012a5c <memcpy>
 8016f24:	2201      	movs	r2, #1
 8016f26:	4629      	mov	r1, r5
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f001 f96d 	bl	8018208 <__lshift>
 8016f2e:	9b00      	ldr	r3, [sp, #0]
 8016f30:	3301      	adds	r3, #1
 8016f32:	9301      	str	r3, [sp, #4]
 8016f34:	9b00      	ldr	r3, [sp, #0]
 8016f36:	444b      	add	r3, r9
 8016f38:	9307      	str	r3, [sp, #28]
 8016f3a:	9b02      	ldr	r3, [sp, #8]
 8016f3c:	f003 0301 	and.w	r3, r3, #1
 8016f40:	46b8      	mov	r8, r7
 8016f42:	9306      	str	r3, [sp, #24]
 8016f44:	4607      	mov	r7, r0
 8016f46:	9b01      	ldr	r3, [sp, #4]
 8016f48:	4631      	mov	r1, r6
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	4658      	mov	r0, fp
 8016f4e:	9302      	str	r3, [sp, #8]
 8016f50:	f7ff fa80 	bl	8016454 <quorem>
 8016f54:	4603      	mov	r3, r0
 8016f56:	3330      	adds	r3, #48	; 0x30
 8016f58:	9004      	str	r0, [sp, #16]
 8016f5a:	4641      	mov	r1, r8
 8016f5c:	4658      	mov	r0, fp
 8016f5e:	9308      	str	r3, [sp, #32]
 8016f60:	f001 f9be 	bl	80182e0 <__mcmp>
 8016f64:	463a      	mov	r2, r7
 8016f66:	4681      	mov	r9, r0
 8016f68:	4631      	mov	r1, r6
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	f001 f9d4 	bl	8018318 <__mdiff>
 8016f70:	68c2      	ldr	r2, [r0, #12]
 8016f72:	9b08      	ldr	r3, [sp, #32]
 8016f74:	4605      	mov	r5, r0
 8016f76:	bb02      	cbnz	r2, 8016fba <_dtoa_r+0xa4a>
 8016f78:	4601      	mov	r1, r0
 8016f7a:	4658      	mov	r0, fp
 8016f7c:	f001 f9b0 	bl	80182e0 <__mcmp>
 8016f80:	9b08      	ldr	r3, [sp, #32]
 8016f82:	4602      	mov	r2, r0
 8016f84:	4629      	mov	r1, r5
 8016f86:	4620      	mov	r0, r4
 8016f88:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8016f8c:	f000 ff53 	bl	8017e36 <_Bfree>
 8016f90:	9b05      	ldr	r3, [sp, #20]
 8016f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f94:	9d01      	ldr	r5, [sp, #4]
 8016f96:	ea43 0102 	orr.w	r1, r3, r2
 8016f9a:	9b06      	ldr	r3, [sp, #24]
 8016f9c:	430b      	orrs	r3, r1
 8016f9e:	9b08      	ldr	r3, [sp, #32]
 8016fa0:	d10d      	bne.n	8016fbe <_dtoa_r+0xa4e>
 8016fa2:	2b39      	cmp	r3, #57	; 0x39
 8016fa4:	d029      	beq.n	8016ffa <_dtoa_r+0xa8a>
 8016fa6:	f1b9 0f00 	cmp.w	r9, #0
 8016faa:	dd01      	ble.n	8016fb0 <_dtoa_r+0xa40>
 8016fac:	9b04      	ldr	r3, [sp, #16]
 8016fae:	3331      	adds	r3, #49	; 0x31
 8016fb0:	9a02      	ldr	r2, [sp, #8]
 8016fb2:	7013      	strb	r3, [r2, #0]
 8016fb4:	e775      	b.n	8016ea2 <_dtoa_r+0x932>
 8016fb6:	4638      	mov	r0, r7
 8016fb8:	e7b9      	b.n	8016f2e <_dtoa_r+0x9be>
 8016fba:	2201      	movs	r2, #1
 8016fbc:	e7e2      	b.n	8016f84 <_dtoa_r+0xa14>
 8016fbe:	f1b9 0f00 	cmp.w	r9, #0
 8016fc2:	db06      	blt.n	8016fd2 <_dtoa_r+0xa62>
 8016fc4:	9905      	ldr	r1, [sp, #20]
 8016fc6:	ea41 0909 	orr.w	r9, r1, r9
 8016fca:	9906      	ldr	r1, [sp, #24]
 8016fcc:	ea59 0101 	orrs.w	r1, r9, r1
 8016fd0:	d120      	bne.n	8017014 <_dtoa_r+0xaa4>
 8016fd2:	2a00      	cmp	r2, #0
 8016fd4:	ddec      	ble.n	8016fb0 <_dtoa_r+0xa40>
 8016fd6:	4659      	mov	r1, fp
 8016fd8:	2201      	movs	r2, #1
 8016fda:	4620      	mov	r0, r4
 8016fdc:	9301      	str	r3, [sp, #4]
 8016fde:	f001 f913 	bl	8018208 <__lshift>
 8016fe2:	4631      	mov	r1, r6
 8016fe4:	4683      	mov	fp, r0
 8016fe6:	f001 f97b 	bl	80182e0 <__mcmp>
 8016fea:	2800      	cmp	r0, #0
 8016fec:	9b01      	ldr	r3, [sp, #4]
 8016fee:	dc02      	bgt.n	8016ff6 <_dtoa_r+0xa86>
 8016ff0:	d1de      	bne.n	8016fb0 <_dtoa_r+0xa40>
 8016ff2:	07da      	lsls	r2, r3, #31
 8016ff4:	d5dc      	bpl.n	8016fb0 <_dtoa_r+0xa40>
 8016ff6:	2b39      	cmp	r3, #57	; 0x39
 8016ff8:	d1d8      	bne.n	8016fac <_dtoa_r+0xa3c>
 8016ffa:	9a02      	ldr	r2, [sp, #8]
 8016ffc:	2339      	movs	r3, #57	; 0x39
 8016ffe:	7013      	strb	r3, [r2, #0]
 8017000:	462b      	mov	r3, r5
 8017002:	461d      	mov	r5, r3
 8017004:	3b01      	subs	r3, #1
 8017006:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801700a:	2a39      	cmp	r2, #57	; 0x39
 801700c:	d050      	beq.n	80170b0 <_dtoa_r+0xb40>
 801700e:	3201      	adds	r2, #1
 8017010:	701a      	strb	r2, [r3, #0]
 8017012:	e746      	b.n	8016ea2 <_dtoa_r+0x932>
 8017014:	2a00      	cmp	r2, #0
 8017016:	dd03      	ble.n	8017020 <_dtoa_r+0xab0>
 8017018:	2b39      	cmp	r3, #57	; 0x39
 801701a:	d0ee      	beq.n	8016ffa <_dtoa_r+0xa8a>
 801701c:	3301      	adds	r3, #1
 801701e:	e7c7      	b.n	8016fb0 <_dtoa_r+0xa40>
 8017020:	9a01      	ldr	r2, [sp, #4]
 8017022:	9907      	ldr	r1, [sp, #28]
 8017024:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017028:	428a      	cmp	r2, r1
 801702a:	d02a      	beq.n	8017082 <_dtoa_r+0xb12>
 801702c:	4659      	mov	r1, fp
 801702e:	2300      	movs	r3, #0
 8017030:	220a      	movs	r2, #10
 8017032:	4620      	mov	r0, r4
 8017034:	f000 ff08 	bl	8017e48 <__multadd>
 8017038:	45b8      	cmp	r8, r7
 801703a:	4683      	mov	fp, r0
 801703c:	f04f 0300 	mov.w	r3, #0
 8017040:	f04f 020a 	mov.w	r2, #10
 8017044:	4641      	mov	r1, r8
 8017046:	4620      	mov	r0, r4
 8017048:	d107      	bne.n	801705a <_dtoa_r+0xaea>
 801704a:	f000 fefd 	bl	8017e48 <__multadd>
 801704e:	4680      	mov	r8, r0
 8017050:	4607      	mov	r7, r0
 8017052:	9b01      	ldr	r3, [sp, #4]
 8017054:	3301      	adds	r3, #1
 8017056:	9301      	str	r3, [sp, #4]
 8017058:	e775      	b.n	8016f46 <_dtoa_r+0x9d6>
 801705a:	f000 fef5 	bl	8017e48 <__multadd>
 801705e:	4639      	mov	r1, r7
 8017060:	4680      	mov	r8, r0
 8017062:	2300      	movs	r3, #0
 8017064:	220a      	movs	r2, #10
 8017066:	4620      	mov	r0, r4
 8017068:	f000 feee 	bl	8017e48 <__multadd>
 801706c:	4607      	mov	r7, r0
 801706e:	e7f0      	b.n	8017052 <_dtoa_r+0xae2>
 8017070:	f1b9 0f00 	cmp.w	r9, #0
 8017074:	9a00      	ldr	r2, [sp, #0]
 8017076:	bfcc      	ite	gt
 8017078:	464d      	movgt	r5, r9
 801707a:	2501      	movle	r5, #1
 801707c:	4415      	add	r5, r2
 801707e:	f04f 0800 	mov.w	r8, #0
 8017082:	4659      	mov	r1, fp
 8017084:	2201      	movs	r2, #1
 8017086:	4620      	mov	r0, r4
 8017088:	9301      	str	r3, [sp, #4]
 801708a:	f001 f8bd 	bl	8018208 <__lshift>
 801708e:	4631      	mov	r1, r6
 8017090:	4683      	mov	fp, r0
 8017092:	f001 f925 	bl	80182e0 <__mcmp>
 8017096:	2800      	cmp	r0, #0
 8017098:	dcb2      	bgt.n	8017000 <_dtoa_r+0xa90>
 801709a:	d102      	bne.n	80170a2 <_dtoa_r+0xb32>
 801709c:	9b01      	ldr	r3, [sp, #4]
 801709e:	07db      	lsls	r3, r3, #31
 80170a0:	d4ae      	bmi.n	8017000 <_dtoa_r+0xa90>
 80170a2:	462b      	mov	r3, r5
 80170a4:	461d      	mov	r5, r3
 80170a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80170aa:	2a30      	cmp	r2, #48	; 0x30
 80170ac:	d0fa      	beq.n	80170a4 <_dtoa_r+0xb34>
 80170ae:	e6f8      	b.n	8016ea2 <_dtoa_r+0x932>
 80170b0:	9a00      	ldr	r2, [sp, #0]
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d1a5      	bne.n	8017002 <_dtoa_r+0xa92>
 80170b6:	f10a 0a01 	add.w	sl, sl, #1
 80170ba:	2331      	movs	r3, #49	; 0x31
 80170bc:	e779      	b.n	8016fb2 <_dtoa_r+0xa42>
 80170be:	4b14      	ldr	r3, [pc, #80]	; (8017110 <_dtoa_r+0xba0>)
 80170c0:	f7ff bab1 	b.w	8016626 <_dtoa_r+0xb6>
 80170c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	f47f aa93 	bne.w	80165f2 <_dtoa_r+0x82>
 80170cc:	4b11      	ldr	r3, [pc, #68]	; (8017114 <_dtoa_r+0xba4>)
 80170ce:	f7ff baaa 	b.w	8016626 <_dtoa_r+0xb6>
 80170d2:	f1b9 0f00 	cmp.w	r9, #0
 80170d6:	dc03      	bgt.n	80170e0 <_dtoa_r+0xb70>
 80170d8:	9b05      	ldr	r3, [sp, #20]
 80170da:	2b02      	cmp	r3, #2
 80170dc:	f73f aeca 	bgt.w	8016e74 <_dtoa_r+0x904>
 80170e0:	9d00      	ldr	r5, [sp, #0]
 80170e2:	4631      	mov	r1, r6
 80170e4:	4658      	mov	r0, fp
 80170e6:	f7ff f9b5 	bl	8016454 <quorem>
 80170ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80170ee:	f805 3b01 	strb.w	r3, [r5], #1
 80170f2:	9a00      	ldr	r2, [sp, #0]
 80170f4:	1aaa      	subs	r2, r5, r2
 80170f6:	4591      	cmp	r9, r2
 80170f8:	ddba      	ble.n	8017070 <_dtoa_r+0xb00>
 80170fa:	4659      	mov	r1, fp
 80170fc:	2300      	movs	r3, #0
 80170fe:	220a      	movs	r2, #10
 8017100:	4620      	mov	r0, r4
 8017102:	f000 fea1 	bl	8017e48 <__multadd>
 8017106:	4683      	mov	fp, r0
 8017108:	e7eb      	b.n	80170e2 <_dtoa_r+0xb72>
 801710a:	bf00      	nop
 801710c:	0801cae6 	.word	0x0801cae6
 8017110:	0801ca72 	.word	0x0801ca72
 8017114:	0801cadd 	.word	0x0801cadd

08017118 <__errno>:
 8017118:	4b01      	ldr	r3, [pc, #4]	; (8017120 <__errno+0x8>)
 801711a:	6818      	ldr	r0, [r3, #0]
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop
 8017120:	200029bc 	.word	0x200029bc

08017124 <__sflush_r>:
 8017124:	898b      	ldrh	r3, [r1, #12]
 8017126:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801712e:	4605      	mov	r5, r0
 8017130:	0718      	lsls	r0, r3, #28
 8017132:	460c      	mov	r4, r1
 8017134:	d45f      	bmi.n	80171f6 <__sflush_r+0xd2>
 8017136:	684b      	ldr	r3, [r1, #4]
 8017138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801713c:	2b00      	cmp	r3, #0
 801713e:	818a      	strh	r2, [r1, #12]
 8017140:	dc05      	bgt.n	801714e <__sflush_r+0x2a>
 8017142:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8017144:	2b00      	cmp	r3, #0
 8017146:	dc02      	bgt.n	801714e <__sflush_r+0x2a>
 8017148:	2000      	movs	r0, #0
 801714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801714e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017150:	2e00      	cmp	r6, #0
 8017152:	d0f9      	beq.n	8017148 <__sflush_r+0x24>
 8017154:	2300      	movs	r3, #0
 8017156:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801715a:	682f      	ldr	r7, [r5, #0]
 801715c:	602b      	str	r3, [r5, #0]
 801715e:	d036      	beq.n	80171ce <__sflush_r+0xaa>
 8017160:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017162:	89a3      	ldrh	r3, [r4, #12]
 8017164:	075a      	lsls	r2, r3, #29
 8017166:	d505      	bpl.n	8017174 <__sflush_r+0x50>
 8017168:	6863      	ldr	r3, [r4, #4]
 801716a:	1ac0      	subs	r0, r0, r3
 801716c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801716e:	b10b      	cbz	r3, 8017174 <__sflush_r+0x50>
 8017170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017172:	1ac0      	subs	r0, r0, r3
 8017174:	2300      	movs	r3, #0
 8017176:	4602      	mov	r2, r0
 8017178:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801717a:	69e1      	ldr	r1, [r4, #28]
 801717c:	4628      	mov	r0, r5
 801717e:	47b0      	blx	r6
 8017180:	1c43      	adds	r3, r0, #1
 8017182:	89a3      	ldrh	r3, [r4, #12]
 8017184:	d106      	bne.n	8017194 <__sflush_r+0x70>
 8017186:	6829      	ldr	r1, [r5, #0]
 8017188:	291d      	cmp	r1, #29
 801718a:	d830      	bhi.n	80171ee <__sflush_r+0xca>
 801718c:	4a2b      	ldr	r2, [pc, #172]	; (801723c <__sflush_r+0x118>)
 801718e:	40ca      	lsrs	r2, r1
 8017190:	07d6      	lsls	r6, r2, #31
 8017192:	d52c      	bpl.n	80171ee <__sflush_r+0xca>
 8017194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017198:	b21b      	sxth	r3, r3
 801719a:	2200      	movs	r2, #0
 801719c:	6062      	str	r2, [r4, #4]
 801719e:	04d9      	lsls	r1, r3, #19
 80171a0:	6922      	ldr	r2, [r4, #16]
 80171a2:	81a3      	strh	r3, [r4, #12]
 80171a4:	6022      	str	r2, [r4, #0]
 80171a6:	d504      	bpl.n	80171b2 <__sflush_r+0x8e>
 80171a8:	1c42      	adds	r2, r0, #1
 80171aa:	d101      	bne.n	80171b0 <__sflush_r+0x8c>
 80171ac:	682b      	ldr	r3, [r5, #0]
 80171ae:	b903      	cbnz	r3, 80171b2 <__sflush_r+0x8e>
 80171b0:	6520      	str	r0, [r4, #80]	; 0x50
 80171b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80171b4:	602f      	str	r7, [r5, #0]
 80171b6:	2900      	cmp	r1, #0
 80171b8:	d0c6      	beq.n	8017148 <__sflush_r+0x24>
 80171ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80171be:	4299      	cmp	r1, r3
 80171c0:	d002      	beq.n	80171c8 <__sflush_r+0xa4>
 80171c2:	4628      	mov	r0, r5
 80171c4:	f000 f938 	bl	8017438 <_free_r>
 80171c8:	2000      	movs	r0, #0
 80171ca:	6320      	str	r0, [r4, #48]	; 0x30
 80171cc:	e7bd      	b.n	801714a <__sflush_r+0x26>
 80171ce:	69e1      	ldr	r1, [r4, #28]
 80171d0:	2301      	movs	r3, #1
 80171d2:	4628      	mov	r0, r5
 80171d4:	47b0      	blx	r6
 80171d6:	1c41      	adds	r1, r0, #1
 80171d8:	d1c3      	bne.n	8017162 <__sflush_r+0x3e>
 80171da:	682b      	ldr	r3, [r5, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d0c0      	beq.n	8017162 <__sflush_r+0x3e>
 80171e0:	2b1d      	cmp	r3, #29
 80171e2:	d001      	beq.n	80171e8 <__sflush_r+0xc4>
 80171e4:	2b16      	cmp	r3, #22
 80171e6:	d101      	bne.n	80171ec <__sflush_r+0xc8>
 80171e8:	602f      	str	r7, [r5, #0]
 80171ea:	e7ad      	b.n	8017148 <__sflush_r+0x24>
 80171ec:	89a3      	ldrh	r3, [r4, #12]
 80171ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171f2:	81a3      	strh	r3, [r4, #12]
 80171f4:	e7a9      	b.n	801714a <__sflush_r+0x26>
 80171f6:	690f      	ldr	r7, [r1, #16]
 80171f8:	2f00      	cmp	r7, #0
 80171fa:	d0a5      	beq.n	8017148 <__sflush_r+0x24>
 80171fc:	079b      	lsls	r3, r3, #30
 80171fe:	680e      	ldr	r6, [r1, #0]
 8017200:	bf08      	it	eq
 8017202:	694b      	ldreq	r3, [r1, #20]
 8017204:	600f      	str	r7, [r1, #0]
 8017206:	bf18      	it	ne
 8017208:	2300      	movne	r3, #0
 801720a:	eba6 0807 	sub.w	r8, r6, r7
 801720e:	608b      	str	r3, [r1, #8]
 8017210:	f1b8 0f00 	cmp.w	r8, #0
 8017214:	dd98      	ble.n	8017148 <__sflush_r+0x24>
 8017216:	69e1      	ldr	r1, [r4, #28]
 8017218:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801721a:	4643      	mov	r3, r8
 801721c:	463a      	mov	r2, r7
 801721e:	4628      	mov	r0, r5
 8017220:	47b0      	blx	r6
 8017222:	2800      	cmp	r0, #0
 8017224:	dc06      	bgt.n	8017234 <__sflush_r+0x110>
 8017226:	89a3      	ldrh	r3, [r4, #12]
 8017228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801722c:	81a3      	strh	r3, [r4, #12]
 801722e:	f04f 30ff 	mov.w	r0, #4294967295
 8017232:	e78a      	b.n	801714a <__sflush_r+0x26>
 8017234:	4407      	add	r7, r0
 8017236:	eba8 0800 	sub.w	r8, r8, r0
 801723a:	e7e9      	b.n	8017210 <__sflush_r+0xec>
 801723c:	20400001 	.word	0x20400001

08017240 <_fflush_r>:
 8017240:	b538      	push	{r3, r4, r5, lr}
 8017242:	460c      	mov	r4, r1
 8017244:	4605      	mov	r5, r0
 8017246:	b118      	cbz	r0, 8017250 <_fflush_r+0x10>
 8017248:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801724a:	b90b      	cbnz	r3, 8017250 <_fflush_r+0x10>
 801724c:	f000 f864 	bl	8017318 <__sinit>
 8017250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017254:	b1bb      	cbz	r3, 8017286 <_fflush_r+0x46>
 8017256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017258:	07d0      	lsls	r0, r2, #31
 801725a:	d404      	bmi.n	8017266 <_fflush_r+0x26>
 801725c:	0599      	lsls	r1, r3, #22
 801725e:	d402      	bmi.n	8017266 <_fflush_r+0x26>
 8017260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017262:	f000 fd43 	bl	8017cec <__retarget_lock_acquire_recursive>
 8017266:	4628      	mov	r0, r5
 8017268:	4621      	mov	r1, r4
 801726a:	f7ff ff5b 	bl	8017124 <__sflush_r>
 801726e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017270:	07da      	lsls	r2, r3, #31
 8017272:	4605      	mov	r5, r0
 8017274:	d405      	bmi.n	8017282 <_fflush_r+0x42>
 8017276:	89a3      	ldrh	r3, [r4, #12]
 8017278:	059b      	lsls	r3, r3, #22
 801727a:	d402      	bmi.n	8017282 <_fflush_r+0x42>
 801727c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801727e:	f000 fd36 	bl	8017cee <__retarget_lock_release_recursive>
 8017282:	4628      	mov	r0, r5
 8017284:	bd38      	pop	{r3, r4, r5, pc}
 8017286:	461d      	mov	r5, r3
 8017288:	e7fb      	b.n	8017282 <_fflush_r+0x42>
	...

0801728c <std>:
 801728c:	2300      	movs	r3, #0
 801728e:	b510      	push	{r4, lr}
 8017290:	4604      	mov	r4, r0
 8017292:	e9c0 3300 	strd	r3, r3, [r0]
 8017296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801729a:	6083      	str	r3, [r0, #8]
 801729c:	8181      	strh	r1, [r0, #12]
 801729e:	6643      	str	r3, [r0, #100]	; 0x64
 80172a0:	81c2      	strh	r2, [r0, #14]
 80172a2:	6183      	str	r3, [r0, #24]
 80172a4:	4619      	mov	r1, r3
 80172a6:	2208      	movs	r2, #8
 80172a8:	305c      	adds	r0, #92	; 0x5c
 80172aa:	f7fb fbff 	bl	8012aac <memset>
 80172ae:	4b07      	ldr	r3, [pc, #28]	; (80172cc <std+0x40>)
 80172b0:	6223      	str	r3, [r4, #32]
 80172b2:	4b07      	ldr	r3, [pc, #28]	; (80172d0 <std+0x44>)
 80172b4:	6263      	str	r3, [r4, #36]	; 0x24
 80172b6:	4b07      	ldr	r3, [pc, #28]	; (80172d4 <std+0x48>)
 80172b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80172ba:	4b07      	ldr	r3, [pc, #28]	; (80172d8 <std+0x4c>)
 80172bc:	61e4      	str	r4, [r4, #28]
 80172be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80172c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80172c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172c8:	f000 bd0e 	b.w	8017ce8 <__retarget_lock_init_recursive>
 80172cc:	08018749 	.word	0x08018749
 80172d0:	0801876b 	.word	0x0801876b
 80172d4:	080187a3 	.word	0x080187a3
 80172d8:	080187c7 	.word	0x080187c7

080172dc <_cleanup_r>:
 80172dc:	4901      	ldr	r1, [pc, #4]	; (80172e4 <_cleanup_r+0x8>)
 80172de:	f000 b96b 	b.w	80175b8 <_fwalk_reent>
 80172e2:	bf00      	nop
 80172e4:	08019459 	.word	0x08019459

080172e8 <__sfp_lock_acquire>:
 80172e8:	4801      	ldr	r0, [pc, #4]	; (80172f0 <__sfp_lock_acquire+0x8>)
 80172ea:	f000 bcff 	b.w	8017cec <__retarget_lock_acquire_recursive>
 80172ee:	bf00      	nop
 80172f0:	20012828 	.word	0x20012828

080172f4 <__sfp_lock_release>:
 80172f4:	4801      	ldr	r0, [pc, #4]	; (80172fc <__sfp_lock_release+0x8>)
 80172f6:	f000 bcfa 	b.w	8017cee <__retarget_lock_release_recursive>
 80172fa:	bf00      	nop
 80172fc:	20012828 	.word	0x20012828

08017300 <__sinit_lock_acquire>:
 8017300:	4801      	ldr	r0, [pc, #4]	; (8017308 <__sinit_lock_acquire+0x8>)
 8017302:	f000 bcf3 	b.w	8017cec <__retarget_lock_acquire_recursive>
 8017306:	bf00      	nop
 8017308:	20012823 	.word	0x20012823

0801730c <__sinit_lock_release>:
 801730c:	4801      	ldr	r0, [pc, #4]	; (8017314 <__sinit_lock_release+0x8>)
 801730e:	f000 bcee 	b.w	8017cee <__retarget_lock_release_recursive>
 8017312:	bf00      	nop
 8017314:	20012823 	.word	0x20012823

08017318 <__sinit>:
 8017318:	b510      	push	{r4, lr}
 801731a:	4604      	mov	r4, r0
 801731c:	f7ff fff0 	bl	8017300 <__sinit_lock_acquire>
 8017320:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017322:	b11a      	cbz	r2, 801732c <__sinit+0x14>
 8017324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017328:	f7ff bff0 	b.w	801730c <__sinit_lock_release>
 801732c:	4b0d      	ldr	r3, [pc, #52]	; (8017364 <__sinit+0x4c>)
 801732e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017330:	2303      	movs	r3, #3
 8017332:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8017336:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801733a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801733e:	6860      	ldr	r0, [r4, #4]
 8017340:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8017344:	2104      	movs	r1, #4
 8017346:	f7ff ffa1 	bl	801728c <std>
 801734a:	68a0      	ldr	r0, [r4, #8]
 801734c:	2201      	movs	r2, #1
 801734e:	2109      	movs	r1, #9
 8017350:	f7ff ff9c 	bl	801728c <std>
 8017354:	68e0      	ldr	r0, [r4, #12]
 8017356:	2202      	movs	r2, #2
 8017358:	2112      	movs	r1, #18
 801735a:	f7ff ff97 	bl	801728c <std>
 801735e:	2301      	movs	r3, #1
 8017360:	63a3      	str	r3, [r4, #56]	; 0x38
 8017362:	e7df      	b.n	8017324 <__sinit+0xc>
 8017364:	080172dd 	.word	0x080172dd

08017368 <__libc_fini_array>:
 8017368:	b538      	push	{r3, r4, r5, lr}
 801736a:	4d07      	ldr	r5, [pc, #28]	; (8017388 <__libc_fini_array+0x20>)
 801736c:	4c07      	ldr	r4, [pc, #28]	; (801738c <__libc_fini_array+0x24>)
 801736e:	1b64      	subs	r4, r4, r5
 8017370:	10a4      	asrs	r4, r4, #2
 8017372:	b91c      	cbnz	r4, 801737c <__libc_fini_array+0x14>
 8017374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017378:	f002 bd2c 	b.w	8019dd4 <_fini>
 801737c:	3c01      	subs	r4, #1
 801737e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8017382:	4798      	blx	r3
 8017384:	e7f5      	b.n	8017372 <__libc_fini_array+0xa>
 8017386:	bf00      	nop
 8017388:	0801cda0 	.word	0x0801cda0
 801738c:	0801cda4 	.word	0x0801cda4

08017390 <_malloc_trim_r>:
 8017390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017394:	4606      	mov	r6, r0
 8017396:	2008      	movs	r0, #8
 8017398:	460c      	mov	r4, r1
 801739a:	f7fd fd2d 	bl	8014df8 <sysconf>
 801739e:	4f23      	ldr	r7, [pc, #140]	; (801742c <_malloc_trim_r+0x9c>)
 80173a0:	4680      	mov	r8, r0
 80173a2:	4630      	mov	r0, r6
 80173a4:	f7fb fb8a 	bl	8012abc <__malloc_lock>
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	685d      	ldr	r5, [r3, #4]
 80173ac:	f025 0503 	bic.w	r5, r5, #3
 80173b0:	1b2c      	subs	r4, r5, r4
 80173b2:	3c11      	subs	r4, #17
 80173b4:	4444      	add	r4, r8
 80173b6:	fbb4 f4f8 	udiv	r4, r4, r8
 80173ba:	3c01      	subs	r4, #1
 80173bc:	fb08 f404 	mul.w	r4, r8, r4
 80173c0:	45a0      	cmp	r8, r4
 80173c2:	dd05      	ble.n	80173d0 <_malloc_trim_r+0x40>
 80173c4:	4630      	mov	r0, r6
 80173c6:	f7fb fb7f 	bl	8012ac8 <__malloc_unlock>
 80173ca:	2000      	movs	r0, #0
 80173cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173d0:	2100      	movs	r1, #0
 80173d2:	4630      	mov	r0, r6
 80173d4:	f7fb fbae 	bl	8012b34 <_sbrk_r>
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	442b      	add	r3, r5
 80173dc:	4298      	cmp	r0, r3
 80173de:	d1f1      	bne.n	80173c4 <_malloc_trim_r+0x34>
 80173e0:	4261      	negs	r1, r4
 80173e2:	4630      	mov	r0, r6
 80173e4:	f7fb fba6 	bl	8012b34 <_sbrk_r>
 80173e8:	3001      	adds	r0, #1
 80173ea:	d110      	bne.n	801740e <_malloc_trim_r+0x7e>
 80173ec:	2100      	movs	r1, #0
 80173ee:	4630      	mov	r0, r6
 80173f0:	f7fb fba0 	bl	8012b34 <_sbrk_r>
 80173f4:	68ba      	ldr	r2, [r7, #8]
 80173f6:	1a83      	subs	r3, r0, r2
 80173f8:	2b0f      	cmp	r3, #15
 80173fa:	dde3      	ble.n	80173c4 <_malloc_trim_r+0x34>
 80173fc:	490c      	ldr	r1, [pc, #48]	; (8017430 <_malloc_trim_r+0xa0>)
 80173fe:	6809      	ldr	r1, [r1, #0]
 8017400:	1a40      	subs	r0, r0, r1
 8017402:	490c      	ldr	r1, [pc, #48]	; (8017434 <_malloc_trim_r+0xa4>)
 8017404:	f043 0301 	orr.w	r3, r3, #1
 8017408:	6008      	str	r0, [r1, #0]
 801740a:	6053      	str	r3, [r2, #4]
 801740c:	e7da      	b.n	80173c4 <_malloc_trim_r+0x34>
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	4a08      	ldr	r2, [pc, #32]	; (8017434 <_malloc_trim_r+0xa4>)
 8017412:	1b2d      	subs	r5, r5, r4
 8017414:	f045 0501 	orr.w	r5, r5, #1
 8017418:	605d      	str	r5, [r3, #4]
 801741a:	6813      	ldr	r3, [r2, #0]
 801741c:	4630      	mov	r0, r6
 801741e:	1b1c      	subs	r4, r3, r4
 8017420:	6014      	str	r4, [r2, #0]
 8017422:	f7fb fb51 	bl	8012ac8 <__malloc_unlock>
 8017426:	2001      	movs	r0, #1
 8017428:	e7d0      	b.n	80173cc <_malloc_trim_r+0x3c>
 801742a:	bf00      	nop
 801742c:	20002de8 	.word	0x20002de8
 8017430:	200031f0 	.word	0x200031f0
 8017434:	20004480 	.word	0x20004480

08017438 <_free_r>:
 8017438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743a:	4605      	mov	r5, r0
 801743c:	460f      	mov	r7, r1
 801743e:	2900      	cmp	r1, #0
 8017440:	f000 80b1 	beq.w	80175a6 <_free_r+0x16e>
 8017444:	f7fb fb3a 	bl	8012abc <__malloc_lock>
 8017448:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801744c:	4856      	ldr	r0, [pc, #344]	; (80175a8 <_free_r+0x170>)
 801744e:	f022 0401 	bic.w	r4, r2, #1
 8017452:	f1a7 0308 	sub.w	r3, r7, #8
 8017456:	eb03 0c04 	add.w	ip, r3, r4
 801745a:	6881      	ldr	r1, [r0, #8]
 801745c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8017460:	4561      	cmp	r1, ip
 8017462:	f026 0603 	bic.w	r6, r6, #3
 8017466:	f002 0201 	and.w	r2, r2, #1
 801746a:	d11b      	bne.n	80174a4 <_free_r+0x6c>
 801746c:	4434      	add	r4, r6
 801746e:	b93a      	cbnz	r2, 8017480 <_free_r+0x48>
 8017470:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8017474:	1a9b      	subs	r3, r3, r2
 8017476:	4414      	add	r4, r2
 8017478:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801747c:	60ca      	str	r2, [r1, #12]
 801747e:	6091      	str	r1, [r2, #8]
 8017480:	f044 0201 	orr.w	r2, r4, #1
 8017484:	605a      	str	r2, [r3, #4]
 8017486:	6083      	str	r3, [r0, #8]
 8017488:	4b48      	ldr	r3, [pc, #288]	; (80175ac <_free_r+0x174>)
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	42a3      	cmp	r3, r4
 801748e:	d804      	bhi.n	801749a <_free_r+0x62>
 8017490:	4b47      	ldr	r3, [pc, #284]	; (80175b0 <_free_r+0x178>)
 8017492:	4628      	mov	r0, r5
 8017494:	6819      	ldr	r1, [r3, #0]
 8017496:	f7ff ff7b 	bl	8017390 <_malloc_trim_r>
 801749a:	4628      	mov	r0, r5
 801749c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80174a0:	f7fb bb12 	b.w	8012ac8 <__malloc_unlock>
 80174a4:	f8cc 6004 	str.w	r6, [ip, #4]
 80174a8:	2a00      	cmp	r2, #0
 80174aa:	d138      	bne.n	801751e <_free_r+0xe6>
 80174ac:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80174b0:	1a5b      	subs	r3, r3, r1
 80174b2:	440c      	add	r4, r1
 80174b4:	6899      	ldr	r1, [r3, #8]
 80174b6:	f100 0708 	add.w	r7, r0, #8
 80174ba:	42b9      	cmp	r1, r7
 80174bc:	d031      	beq.n	8017522 <_free_r+0xea>
 80174be:	68df      	ldr	r7, [r3, #12]
 80174c0:	60cf      	str	r7, [r1, #12]
 80174c2:	60b9      	str	r1, [r7, #8]
 80174c4:	eb0c 0106 	add.w	r1, ip, r6
 80174c8:	6849      	ldr	r1, [r1, #4]
 80174ca:	07c9      	lsls	r1, r1, #31
 80174cc:	d40b      	bmi.n	80174e6 <_free_r+0xae>
 80174ce:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80174d2:	4434      	add	r4, r6
 80174d4:	bb3a      	cbnz	r2, 8017526 <_free_r+0xee>
 80174d6:	4e37      	ldr	r6, [pc, #220]	; (80175b4 <_free_r+0x17c>)
 80174d8:	42b1      	cmp	r1, r6
 80174da:	d124      	bne.n	8017526 <_free_r+0xee>
 80174dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80174e0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80174e4:	2201      	movs	r2, #1
 80174e6:	f044 0101 	orr.w	r1, r4, #1
 80174ea:	6059      	str	r1, [r3, #4]
 80174ec:	511c      	str	r4, [r3, r4]
 80174ee:	2a00      	cmp	r2, #0
 80174f0:	d1d3      	bne.n	801749a <_free_r+0x62>
 80174f2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80174f6:	d21b      	bcs.n	8017530 <_free_r+0xf8>
 80174f8:	0961      	lsrs	r1, r4, #5
 80174fa:	08e2      	lsrs	r2, r4, #3
 80174fc:	2401      	movs	r4, #1
 80174fe:	408c      	lsls	r4, r1
 8017500:	6841      	ldr	r1, [r0, #4]
 8017502:	3201      	adds	r2, #1
 8017504:	430c      	orrs	r4, r1
 8017506:	6044      	str	r4, [r0, #4]
 8017508:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801750c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8017510:	3908      	subs	r1, #8
 8017512:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8017516:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801751a:	60e3      	str	r3, [r4, #12]
 801751c:	e7bd      	b.n	801749a <_free_r+0x62>
 801751e:	2200      	movs	r2, #0
 8017520:	e7d0      	b.n	80174c4 <_free_r+0x8c>
 8017522:	2201      	movs	r2, #1
 8017524:	e7ce      	b.n	80174c4 <_free_r+0x8c>
 8017526:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801752a:	60ce      	str	r6, [r1, #12]
 801752c:	60b1      	str	r1, [r6, #8]
 801752e:	e7da      	b.n	80174e6 <_free_r+0xae>
 8017530:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8017534:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8017538:	d214      	bcs.n	8017564 <_free_r+0x12c>
 801753a:	09a2      	lsrs	r2, r4, #6
 801753c:	3238      	adds	r2, #56	; 0x38
 801753e:	1c51      	adds	r1, r2, #1
 8017540:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8017544:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8017548:	428e      	cmp	r6, r1
 801754a:	d125      	bne.n	8017598 <_free_r+0x160>
 801754c:	2401      	movs	r4, #1
 801754e:	1092      	asrs	r2, r2, #2
 8017550:	fa04 f202 	lsl.w	r2, r4, r2
 8017554:	6844      	ldr	r4, [r0, #4]
 8017556:	4322      	orrs	r2, r4
 8017558:	6042      	str	r2, [r0, #4]
 801755a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801755e:	60b3      	str	r3, [r6, #8]
 8017560:	60cb      	str	r3, [r1, #12]
 8017562:	e79a      	b.n	801749a <_free_r+0x62>
 8017564:	2a14      	cmp	r2, #20
 8017566:	d801      	bhi.n	801756c <_free_r+0x134>
 8017568:	325b      	adds	r2, #91	; 0x5b
 801756a:	e7e8      	b.n	801753e <_free_r+0x106>
 801756c:	2a54      	cmp	r2, #84	; 0x54
 801756e:	d802      	bhi.n	8017576 <_free_r+0x13e>
 8017570:	0b22      	lsrs	r2, r4, #12
 8017572:	326e      	adds	r2, #110	; 0x6e
 8017574:	e7e3      	b.n	801753e <_free_r+0x106>
 8017576:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801757a:	d802      	bhi.n	8017582 <_free_r+0x14a>
 801757c:	0be2      	lsrs	r2, r4, #15
 801757e:	3277      	adds	r2, #119	; 0x77
 8017580:	e7dd      	b.n	801753e <_free_r+0x106>
 8017582:	f240 5154 	movw	r1, #1364	; 0x554
 8017586:	428a      	cmp	r2, r1
 8017588:	bf9a      	itte	ls
 801758a:	0ca2      	lsrls	r2, r4, #18
 801758c:	327c      	addls	r2, #124	; 0x7c
 801758e:	227e      	movhi	r2, #126	; 0x7e
 8017590:	e7d5      	b.n	801753e <_free_r+0x106>
 8017592:	6889      	ldr	r1, [r1, #8]
 8017594:	428e      	cmp	r6, r1
 8017596:	d004      	beq.n	80175a2 <_free_r+0x16a>
 8017598:	684a      	ldr	r2, [r1, #4]
 801759a:	f022 0203 	bic.w	r2, r2, #3
 801759e:	42a2      	cmp	r2, r4
 80175a0:	d8f7      	bhi.n	8017592 <_free_r+0x15a>
 80175a2:	68ce      	ldr	r6, [r1, #12]
 80175a4:	e7d9      	b.n	801755a <_free_r+0x122>
 80175a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175a8:	20002de8 	.word	0x20002de8
 80175ac:	200031f4 	.word	0x200031f4
 80175b0:	200044b0 	.word	0x200044b0
 80175b4:	20002df0 	.word	0x20002df0

080175b8 <_fwalk_reent>:
 80175b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175bc:	4606      	mov	r6, r0
 80175be:	4688      	mov	r8, r1
 80175c0:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80175c4:	2700      	movs	r7, #0
 80175c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80175ca:	f1b9 0901 	subs.w	r9, r9, #1
 80175ce:	d505      	bpl.n	80175dc <_fwalk_reent+0x24>
 80175d0:	6824      	ldr	r4, [r4, #0]
 80175d2:	2c00      	cmp	r4, #0
 80175d4:	d1f7      	bne.n	80175c6 <_fwalk_reent+0xe>
 80175d6:	4638      	mov	r0, r7
 80175d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175dc:	89ab      	ldrh	r3, [r5, #12]
 80175de:	2b01      	cmp	r3, #1
 80175e0:	d907      	bls.n	80175f2 <_fwalk_reent+0x3a>
 80175e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175e6:	3301      	adds	r3, #1
 80175e8:	d003      	beq.n	80175f2 <_fwalk_reent+0x3a>
 80175ea:	4629      	mov	r1, r5
 80175ec:	4630      	mov	r0, r6
 80175ee:	47c0      	blx	r8
 80175f0:	4307      	orrs	r7, r0
 80175f2:	3568      	adds	r5, #104	; 0x68
 80175f4:	e7e9      	b.n	80175ca <_fwalk_reent+0x12>

080175f6 <rshift>:
 80175f6:	6903      	ldr	r3, [r0, #16]
 80175f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80175fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017600:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017604:	f100 0414 	add.w	r4, r0, #20
 8017608:	dd45      	ble.n	8017696 <rshift+0xa0>
 801760a:	f011 011f 	ands.w	r1, r1, #31
 801760e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017612:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017616:	d10c      	bne.n	8017632 <rshift+0x3c>
 8017618:	f100 0710 	add.w	r7, r0, #16
 801761c:	4629      	mov	r1, r5
 801761e:	42b1      	cmp	r1, r6
 8017620:	d334      	bcc.n	801768c <rshift+0x96>
 8017622:	1a9b      	subs	r3, r3, r2
 8017624:	009b      	lsls	r3, r3, #2
 8017626:	1eea      	subs	r2, r5, #3
 8017628:	4296      	cmp	r6, r2
 801762a:	bf38      	it	cc
 801762c:	2300      	movcc	r3, #0
 801762e:	4423      	add	r3, r4
 8017630:	e015      	b.n	801765e <rshift+0x68>
 8017632:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017636:	f1c1 0820 	rsb	r8, r1, #32
 801763a:	40cf      	lsrs	r7, r1
 801763c:	f105 0e04 	add.w	lr, r5, #4
 8017640:	46a1      	mov	r9, r4
 8017642:	4576      	cmp	r6, lr
 8017644:	46f4      	mov	ip, lr
 8017646:	d815      	bhi.n	8017674 <rshift+0x7e>
 8017648:	1a9b      	subs	r3, r3, r2
 801764a:	009a      	lsls	r2, r3, #2
 801764c:	3a04      	subs	r2, #4
 801764e:	3501      	adds	r5, #1
 8017650:	42ae      	cmp	r6, r5
 8017652:	bf38      	it	cc
 8017654:	2200      	movcc	r2, #0
 8017656:	18a3      	adds	r3, r4, r2
 8017658:	50a7      	str	r7, [r4, r2]
 801765a:	b107      	cbz	r7, 801765e <rshift+0x68>
 801765c:	3304      	adds	r3, #4
 801765e:	1b1a      	subs	r2, r3, r4
 8017660:	42a3      	cmp	r3, r4
 8017662:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017666:	bf08      	it	eq
 8017668:	2300      	moveq	r3, #0
 801766a:	6102      	str	r2, [r0, #16]
 801766c:	bf08      	it	eq
 801766e:	6143      	streq	r3, [r0, #20]
 8017670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017674:	f8dc c000 	ldr.w	ip, [ip]
 8017678:	fa0c fc08 	lsl.w	ip, ip, r8
 801767c:	ea4c 0707 	orr.w	r7, ip, r7
 8017680:	f849 7b04 	str.w	r7, [r9], #4
 8017684:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017688:	40cf      	lsrs	r7, r1
 801768a:	e7da      	b.n	8017642 <rshift+0x4c>
 801768c:	f851 cb04 	ldr.w	ip, [r1], #4
 8017690:	f847 cf04 	str.w	ip, [r7, #4]!
 8017694:	e7c3      	b.n	801761e <rshift+0x28>
 8017696:	4623      	mov	r3, r4
 8017698:	e7e1      	b.n	801765e <rshift+0x68>

0801769a <__hexdig_fun>:
 801769a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801769e:	2b09      	cmp	r3, #9
 80176a0:	d802      	bhi.n	80176a8 <__hexdig_fun+0xe>
 80176a2:	3820      	subs	r0, #32
 80176a4:	b2c0      	uxtb	r0, r0
 80176a6:	4770      	bx	lr
 80176a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80176ac:	2b05      	cmp	r3, #5
 80176ae:	d801      	bhi.n	80176b4 <__hexdig_fun+0x1a>
 80176b0:	3847      	subs	r0, #71	; 0x47
 80176b2:	e7f7      	b.n	80176a4 <__hexdig_fun+0xa>
 80176b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80176b8:	2b05      	cmp	r3, #5
 80176ba:	d801      	bhi.n	80176c0 <__hexdig_fun+0x26>
 80176bc:	3827      	subs	r0, #39	; 0x27
 80176be:	e7f1      	b.n	80176a4 <__hexdig_fun+0xa>
 80176c0:	2000      	movs	r0, #0
 80176c2:	4770      	bx	lr

080176c4 <__gethex>:
 80176c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c8:	ed2d 8b02 	vpush	{d8}
 80176cc:	b089      	sub	sp, #36	; 0x24
 80176ce:	ee08 0a10 	vmov	s16, r0
 80176d2:	9304      	str	r3, [sp, #16]
 80176d4:	4bbc      	ldr	r3, [pc, #752]	; (80179c8 <__gethex+0x304>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	9301      	str	r3, [sp, #4]
 80176da:	4618      	mov	r0, r3
 80176dc:	468b      	mov	fp, r1
 80176de:	4690      	mov	r8, r2
 80176e0:	f7e8 fd90 	bl	8000204 <strlen>
 80176e4:	9b01      	ldr	r3, [sp, #4]
 80176e6:	f8db 2000 	ldr.w	r2, [fp]
 80176ea:	4403      	add	r3, r0
 80176ec:	4682      	mov	sl, r0
 80176ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80176f2:	9305      	str	r3, [sp, #20]
 80176f4:	1c93      	adds	r3, r2, #2
 80176f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80176fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80176fe:	32fe      	adds	r2, #254	; 0xfe
 8017700:	18d1      	adds	r1, r2, r3
 8017702:	461f      	mov	r7, r3
 8017704:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017708:	9100      	str	r1, [sp, #0]
 801770a:	2830      	cmp	r0, #48	; 0x30
 801770c:	d0f8      	beq.n	8017700 <__gethex+0x3c>
 801770e:	f7ff ffc4 	bl	801769a <__hexdig_fun>
 8017712:	4604      	mov	r4, r0
 8017714:	2800      	cmp	r0, #0
 8017716:	d13a      	bne.n	801778e <__gethex+0xca>
 8017718:	9901      	ldr	r1, [sp, #4]
 801771a:	4652      	mov	r2, sl
 801771c:	4638      	mov	r0, r7
 801771e:	f7fb fa70 	bl	8012c02 <strncmp>
 8017722:	4605      	mov	r5, r0
 8017724:	2800      	cmp	r0, #0
 8017726:	d168      	bne.n	80177fa <__gethex+0x136>
 8017728:	f817 000a 	ldrb.w	r0, [r7, sl]
 801772c:	eb07 060a 	add.w	r6, r7, sl
 8017730:	f7ff ffb3 	bl	801769a <__hexdig_fun>
 8017734:	2800      	cmp	r0, #0
 8017736:	d062      	beq.n	80177fe <__gethex+0x13a>
 8017738:	4633      	mov	r3, r6
 801773a:	7818      	ldrb	r0, [r3, #0]
 801773c:	2830      	cmp	r0, #48	; 0x30
 801773e:	461f      	mov	r7, r3
 8017740:	f103 0301 	add.w	r3, r3, #1
 8017744:	d0f9      	beq.n	801773a <__gethex+0x76>
 8017746:	f7ff ffa8 	bl	801769a <__hexdig_fun>
 801774a:	2301      	movs	r3, #1
 801774c:	fab0 f480 	clz	r4, r0
 8017750:	0964      	lsrs	r4, r4, #5
 8017752:	4635      	mov	r5, r6
 8017754:	9300      	str	r3, [sp, #0]
 8017756:	463a      	mov	r2, r7
 8017758:	4616      	mov	r6, r2
 801775a:	3201      	adds	r2, #1
 801775c:	7830      	ldrb	r0, [r6, #0]
 801775e:	f7ff ff9c 	bl	801769a <__hexdig_fun>
 8017762:	2800      	cmp	r0, #0
 8017764:	d1f8      	bne.n	8017758 <__gethex+0x94>
 8017766:	9901      	ldr	r1, [sp, #4]
 8017768:	4652      	mov	r2, sl
 801776a:	4630      	mov	r0, r6
 801776c:	f7fb fa49 	bl	8012c02 <strncmp>
 8017770:	b980      	cbnz	r0, 8017794 <__gethex+0xd0>
 8017772:	b94d      	cbnz	r5, 8017788 <__gethex+0xc4>
 8017774:	eb06 050a 	add.w	r5, r6, sl
 8017778:	462a      	mov	r2, r5
 801777a:	4616      	mov	r6, r2
 801777c:	3201      	adds	r2, #1
 801777e:	7830      	ldrb	r0, [r6, #0]
 8017780:	f7ff ff8b 	bl	801769a <__hexdig_fun>
 8017784:	2800      	cmp	r0, #0
 8017786:	d1f8      	bne.n	801777a <__gethex+0xb6>
 8017788:	1bad      	subs	r5, r5, r6
 801778a:	00ad      	lsls	r5, r5, #2
 801778c:	e004      	b.n	8017798 <__gethex+0xd4>
 801778e:	2400      	movs	r4, #0
 8017790:	4625      	mov	r5, r4
 8017792:	e7e0      	b.n	8017756 <__gethex+0x92>
 8017794:	2d00      	cmp	r5, #0
 8017796:	d1f7      	bne.n	8017788 <__gethex+0xc4>
 8017798:	7833      	ldrb	r3, [r6, #0]
 801779a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801779e:	2b50      	cmp	r3, #80	; 0x50
 80177a0:	d13b      	bne.n	801781a <__gethex+0x156>
 80177a2:	7873      	ldrb	r3, [r6, #1]
 80177a4:	2b2b      	cmp	r3, #43	; 0x2b
 80177a6:	d02c      	beq.n	8017802 <__gethex+0x13e>
 80177a8:	2b2d      	cmp	r3, #45	; 0x2d
 80177aa:	d02e      	beq.n	801780a <__gethex+0x146>
 80177ac:	1c71      	adds	r1, r6, #1
 80177ae:	f04f 0900 	mov.w	r9, #0
 80177b2:	7808      	ldrb	r0, [r1, #0]
 80177b4:	f7ff ff71 	bl	801769a <__hexdig_fun>
 80177b8:	1e43      	subs	r3, r0, #1
 80177ba:	b2db      	uxtb	r3, r3
 80177bc:	2b18      	cmp	r3, #24
 80177be:	d82c      	bhi.n	801781a <__gethex+0x156>
 80177c0:	f1a0 0210 	sub.w	r2, r0, #16
 80177c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80177c8:	f7ff ff67 	bl	801769a <__hexdig_fun>
 80177cc:	1e43      	subs	r3, r0, #1
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	2b18      	cmp	r3, #24
 80177d2:	d91d      	bls.n	8017810 <__gethex+0x14c>
 80177d4:	f1b9 0f00 	cmp.w	r9, #0
 80177d8:	d000      	beq.n	80177dc <__gethex+0x118>
 80177da:	4252      	negs	r2, r2
 80177dc:	4415      	add	r5, r2
 80177de:	f8cb 1000 	str.w	r1, [fp]
 80177e2:	b1e4      	cbz	r4, 801781e <__gethex+0x15a>
 80177e4:	9b00      	ldr	r3, [sp, #0]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	bf14      	ite	ne
 80177ea:	2700      	movne	r7, #0
 80177ec:	2706      	moveq	r7, #6
 80177ee:	4638      	mov	r0, r7
 80177f0:	b009      	add	sp, #36	; 0x24
 80177f2:	ecbd 8b02 	vpop	{d8}
 80177f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177fa:	463e      	mov	r6, r7
 80177fc:	4625      	mov	r5, r4
 80177fe:	2401      	movs	r4, #1
 8017800:	e7ca      	b.n	8017798 <__gethex+0xd4>
 8017802:	f04f 0900 	mov.w	r9, #0
 8017806:	1cb1      	adds	r1, r6, #2
 8017808:	e7d3      	b.n	80177b2 <__gethex+0xee>
 801780a:	f04f 0901 	mov.w	r9, #1
 801780e:	e7fa      	b.n	8017806 <__gethex+0x142>
 8017810:	230a      	movs	r3, #10
 8017812:	fb03 0202 	mla	r2, r3, r2, r0
 8017816:	3a10      	subs	r2, #16
 8017818:	e7d4      	b.n	80177c4 <__gethex+0x100>
 801781a:	4631      	mov	r1, r6
 801781c:	e7df      	b.n	80177de <__gethex+0x11a>
 801781e:	1bf3      	subs	r3, r6, r7
 8017820:	3b01      	subs	r3, #1
 8017822:	4621      	mov	r1, r4
 8017824:	2b07      	cmp	r3, #7
 8017826:	dc0b      	bgt.n	8017840 <__gethex+0x17c>
 8017828:	ee18 0a10 	vmov	r0, s16
 801782c:	f000 fade 	bl	8017dec <_Balloc>
 8017830:	4604      	mov	r4, r0
 8017832:	b940      	cbnz	r0, 8017846 <__gethex+0x182>
 8017834:	4b65      	ldr	r3, [pc, #404]	; (80179cc <__gethex+0x308>)
 8017836:	4602      	mov	r2, r0
 8017838:	21de      	movs	r1, #222	; 0xde
 801783a:	4865      	ldr	r0, [pc, #404]	; (80179d0 <__gethex+0x30c>)
 801783c:	f001 fdb0 	bl	80193a0 <__assert_func>
 8017840:	3101      	adds	r1, #1
 8017842:	105b      	asrs	r3, r3, #1
 8017844:	e7ee      	b.n	8017824 <__gethex+0x160>
 8017846:	f100 0914 	add.w	r9, r0, #20
 801784a:	f04f 0b00 	mov.w	fp, #0
 801784e:	f1ca 0301 	rsb	r3, sl, #1
 8017852:	f8cd 9008 	str.w	r9, [sp, #8]
 8017856:	f8cd b000 	str.w	fp, [sp]
 801785a:	9306      	str	r3, [sp, #24]
 801785c:	42b7      	cmp	r7, r6
 801785e:	d340      	bcc.n	80178e2 <__gethex+0x21e>
 8017860:	9802      	ldr	r0, [sp, #8]
 8017862:	9b00      	ldr	r3, [sp, #0]
 8017864:	f840 3b04 	str.w	r3, [r0], #4
 8017868:	eba0 0009 	sub.w	r0, r0, r9
 801786c:	1080      	asrs	r0, r0, #2
 801786e:	0146      	lsls	r6, r0, #5
 8017870:	6120      	str	r0, [r4, #16]
 8017872:	4618      	mov	r0, r3
 8017874:	f000 fb7c 	bl	8017f70 <__hi0bits>
 8017878:	1a30      	subs	r0, r6, r0
 801787a:	f8d8 6000 	ldr.w	r6, [r8]
 801787e:	42b0      	cmp	r0, r6
 8017880:	dd63      	ble.n	801794a <__gethex+0x286>
 8017882:	1b87      	subs	r7, r0, r6
 8017884:	4639      	mov	r1, r7
 8017886:	4620      	mov	r0, r4
 8017888:	f000 fefc 	bl	8018684 <__any_on>
 801788c:	4682      	mov	sl, r0
 801788e:	b1a8      	cbz	r0, 80178bc <__gethex+0x1f8>
 8017890:	1e7b      	subs	r3, r7, #1
 8017892:	1159      	asrs	r1, r3, #5
 8017894:	f003 021f 	and.w	r2, r3, #31
 8017898:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801789c:	f04f 0a01 	mov.w	sl, #1
 80178a0:	fa0a f202 	lsl.w	r2, sl, r2
 80178a4:	420a      	tst	r2, r1
 80178a6:	d009      	beq.n	80178bc <__gethex+0x1f8>
 80178a8:	4553      	cmp	r3, sl
 80178aa:	dd05      	ble.n	80178b8 <__gethex+0x1f4>
 80178ac:	1eb9      	subs	r1, r7, #2
 80178ae:	4620      	mov	r0, r4
 80178b0:	f000 fee8 	bl	8018684 <__any_on>
 80178b4:	2800      	cmp	r0, #0
 80178b6:	d145      	bne.n	8017944 <__gethex+0x280>
 80178b8:	f04f 0a02 	mov.w	sl, #2
 80178bc:	4639      	mov	r1, r7
 80178be:	4620      	mov	r0, r4
 80178c0:	f7ff fe99 	bl	80175f6 <rshift>
 80178c4:	443d      	add	r5, r7
 80178c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80178ca:	42ab      	cmp	r3, r5
 80178cc:	da4c      	bge.n	8017968 <__gethex+0x2a4>
 80178ce:	ee18 0a10 	vmov	r0, s16
 80178d2:	4621      	mov	r1, r4
 80178d4:	f000 faaf 	bl	8017e36 <_Bfree>
 80178d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80178da:	2300      	movs	r3, #0
 80178dc:	6013      	str	r3, [r2, #0]
 80178de:	27a3      	movs	r7, #163	; 0xa3
 80178e0:	e785      	b.n	80177ee <__gethex+0x12a>
 80178e2:	1e73      	subs	r3, r6, #1
 80178e4:	9a05      	ldr	r2, [sp, #20]
 80178e6:	9303      	str	r3, [sp, #12]
 80178e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d019      	beq.n	8017924 <__gethex+0x260>
 80178f0:	f1bb 0f20 	cmp.w	fp, #32
 80178f4:	d107      	bne.n	8017906 <__gethex+0x242>
 80178f6:	9b02      	ldr	r3, [sp, #8]
 80178f8:	9a00      	ldr	r2, [sp, #0]
 80178fa:	f843 2b04 	str.w	r2, [r3], #4
 80178fe:	9302      	str	r3, [sp, #8]
 8017900:	2300      	movs	r3, #0
 8017902:	9300      	str	r3, [sp, #0]
 8017904:	469b      	mov	fp, r3
 8017906:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801790a:	f7ff fec6 	bl	801769a <__hexdig_fun>
 801790e:	9b00      	ldr	r3, [sp, #0]
 8017910:	f000 000f 	and.w	r0, r0, #15
 8017914:	fa00 f00b 	lsl.w	r0, r0, fp
 8017918:	4303      	orrs	r3, r0
 801791a:	9300      	str	r3, [sp, #0]
 801791c:	f10b 0b04 	add.w	fp, fp, #4
 8017920:	9b03      	ldr	r3, [sp, #12]
 8017922:	e00d      	b.n	8017940 <__gethex+0x27c>
 8017924:	9b03      	ldr	r3, [sp, #12]
 8017926:	9a06      	ldr	r2, [sp, #24]
 8017928:	4413      	add	r3, r2
 801792a:	42bb      	cmp	r3, r7
 801792c:	d3e0      	bcc.n	80178f0 <__gethex+0x22c>
 801792e:	4618      	mov	r0, r3
 8017930:	9901      	ldr	r1, [sp, #4]
 8017932:	9307      	str	r3, [sp, #28]
 8017934:	4652      	mov	r2, sl
 8017936:	f7fb f964 	bl	8012c02 <strncmp>
 801793a:	9b07      	ldr	r3, [sp, #28]
 801793c:	2800      	cmp	r0, #0
 801793e:	d1d7      	bne.n	80178f0 <__gethex+0x22c>
 8017940:	461e      	mov	r6, r3
 8017942:	e78b      	b.n	801785c <__gethex+0x198>
 8017944:	f04f 0a03 	mov.w	sl, #3
 8017948:	e7b8      	b.n	80178bc <__gethex+0x1f8>
 801794a:	da0a      	bge.n	8017962 <__gethex+0x29e>
 801794c:	1a37      	subs	r7, r6, r0
 801794e:	4621      	mov	r1, r4
 8017950:	ee18 0a10 	vmov	r0, s16
 8017954:	463a      	mov	r2, r7
 8017956:	f000 fc57 	bl	8018208 <__lshift>
 801795a:	1bed      	subs	r5, r5, r7
 801795c:	4604      	mov	r4, r0
 801795e:	f100 0914 	add.w	r9, r0, #20
 8017962:	f04f 0a00 	mov.w	sl, #0
 8017966:	e7ae      	b.n	80178c6 <__gethex+0x202>
 8017968:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801796c:	42a8      	cmp	r0, r5
 801796e:	dd72      	ble.n	8017a56 <__gethex+0x392>
 8017970:	1b45      	subs	r5, r0, r5
 8017972:	42ae      	cmp	r6, r5
 8017974:	dc36      	bgt.n	80179e4 <__gethex+0x320>
 8017976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801797a:	2b02      	cmp	r3, #2
 801797c:	d02a      	beq.n	80179d4 <__gethex+0x310>
 801797e:	2b03      	cmp	r3, #3
 8017980:	d02c      	beq.n	80179dc <__gethex+0x318>
 8017982:	2b01      	cmp	r3, #1
 8017984:	d115      	bne.n	80179b2 <__gethex+0x2ee>
 8017986:	42ae      	cmp	r6, r5
 8017988:	d113      	bne.n	80179b2 <__gethex+0x2ee>
 801798a:	2e01      	cmp	r6, #1
 801798c:	d10b      	bne.n	80179a6 <__gethex+0x2e2>
 801798e:	9a04      	ldr	r2, [sp, #16]
 8017990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017994:	6013      	str	r3, [r2, #0]
 8017996:	2301      	movs	r3, #1
 8017998:	6123      	str	r3, [r4, #16]
 801799a:	f8c9 3000 	str.w	r3, [r9]
 801799e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80179a0:	2762      	movs	r7, #98	; 0x62
 80179a2:	601c      	str	r4, [r3, #0]
 80179a4:	e723      	b.n	80177ee <__gethex+0x12a>
 80179a6:	1e71      	subs	r1, r6, #1
 80179a8:	4620      	mov	r0, r4
 80179aa:	f000 fe6b 	bl	8018684 <__any_on>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d1ed      	bne.n	801798e <__gethex+0x2ca>
 80179b2:	ee18 0a10 	vmov	r0, s16
 80179b6:	4621      	mov	r1, r4
 80179b8:	f000 fa3d 	bl	8017e36 <_Bfree>
 80179bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80179be:	2300      	movs	r3, #0
 80179c0:	6013      	str	r3, [r2, #0]
 80179c2:	2750      	movs	r7, #80	; 0x50
 80179c4:	e713      	b.n	80177ee <__gethex+0x12a>
 80179c6:	bf00      	nop
 80179c8:	0801cbc0 	.word	0x0801cbc0
 80179cc:	0801cae6 	.word	0x0801cae6
 80179d0:	0801cb56 	.word	0x0801cb56
 80179d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d1eb      	bne.n	80179b2 <__gethex+0x2ee>
 80179da:	e7d8      	b.n	801798e <__gethex+0x2ca>
 80179dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d1d5      	bne.n	801798e <__gethex+0x2ca>
 80179e2:	e7e6      	b.n	80179b2 <__gethex+0x2ee>
 80179e4:	1e6f      	subs	r7, r5, #1
 80179e6:	f1ba 0f00 	cmp.w	sl, #0
 80179ea:	d131      	bne.n	8017a50 <__gethex+0x38c>
 80179ec:	b127      	cbz	r7, 80179f8 <__gethex+0x334>
 80179ee:	4639      	mov	r1, r7
 80179f0:	4620      	mov	r0, r4
 80179f2:	f000 fe47 	bl	8018684 <__any_on>
 80179f6:	4682      	mov	sl, r0
 80179f8:	117b      	asrs	r3, r7, #5
 80179fa:	2101      	movs	r1, #1
 80179fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017a00:	f007 071f 	and.w	r7, r7, #31
 8017a04:	fa01 f707 	lsl.w	r7, r1, r7
 8017a08:	421f      	tst	r7, r3
 8017a0a:	4629      	mov	r1, r5
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	bf18      	it	ne
 8017a10:	f04a 0a02 	orrne.w	sl, sl, #2
 8017a14:	1b76      	subs	r6, r6, r5
 8017a16:	f7ff fdee 	bl	80175f6 <rshift>
 8017a1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017a1e:	2702      	movs	r7, #2
 8017a20:	f1ba 0f00 	cmp.w	sl, #0
 8017a24:	d048      	beq.n	8017ab8 <__gethex+0x3f4>
 8017a26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017a2a:	2b02      	cmp	r3, #2
 8017a2c:	d015      	beq.n	8017a5a <__gethex+0x396>
 8017a2e:	2b03      	cmp	r3, #3
 8017a30:	d017      	beq.n	8017a62 <__gethex+0x39e>
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	d109      	bne.n	8017a4a <__gethex+0x386>
 8017a36:	f01a 0f02 	tst.w	sl, #2
 8017a3a:	d006      	beq.n	8017a4a <__gethex+0x386>
 8017a3c:	f8d9 0000 	ldr.w	r0, [r9]
 8017a40:	ea4a 0a00 	orr.w	sl, sl, r0
 8017a44:	f01a 0f01 	tst.w	sl, #1
 8017a48:	d10e      	bne.n	8017a68 <__gethex+0x3a4>
 8017a4a:	f047 0710 	orr.w	r7, r7, #16
 8017a4e:	e033      	b.n	8017ab8 <__gethex+0x3f4>
 8017a50:	f04f 0a01 	mov.w	sl, #1
 8017a54:	e7d0      	b.n	80179f8 <__gethex+0x334>
 8017a56:	2701      	movs	r7, #1
 8017a58:	e7e2      	b.n	8017a20 <__gethex+0x35c>
 8017a5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a5c:	f1c3 0301 	rsb	r3, r3, #1
 8017a60:	9315      	str	r3, [sp, #84]	; 0x54
 8017a62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d0f0      	beq.n	8017a4a <__gethex+0x386>
 8017a68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017a6c:	f104 0314 	add.w	r3, r4, #20
 8017a70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017a74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017a78:	f04f 0c00 	mov.w	ip, #0
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017a86:	d01c      	beq.n	8017ac2 <__gethex+0x3fe>
 8017a88:	3201      	adds	r2, #1
 8017a8a:	6002      	str	r2, [r0, #0]
 8017a8c:	2f02      	cmp	r7, #2
 8017a8e:	f104 0314 	add.w	r3, r4, #20
 8017a92:	d13f      	bne.n	8017b14 <__gethex+0x450>
 8017a94:	f8d8 2000 	ldr.w	r2, [r8]
 8017a98:	3a01      	subs	r2, #1
 8017a9a:	42b2      	cmp	r2, r6
 8017a9c:	d10a      	bne.n	8017ab4 <__gethex+0x3f0>
 8017a9e:	1171      	asrs	r1, r6, #5
 8017aa0:	2201      	movs	r2, #1
 8017aa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017aa6:	f006 061f 	and.w	r6, r6, #31
 8017aaa:	fa02 f606 	lsl.w	r6, r2, r6
 8017aae:	421e      	tst	r6, r3
 8017ab0:	bf18      	it	ne
 8017ab2:	4617      	movne	r7, r2
 8017ab4:	f047 0720 	orr.w	r7, r7, #32
 8017ab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017aba:	601c      	str	r4, [r3, #0]
 8017abc:	9b04      	ldr	r3, [sp, #16]
 8017abe:	601d      	str	r5, [r3, #0]
 8017ac0:	e695      	b.n	80177ee <__gethex+0x12a>
 8017ac2:	4299      	cmp	r1, r3
 8017ac4:	f843 cc04 	str.w	ip, [r3, #-4]
 8017ac8:	d8d8      	bhi.n	8017a7c <__gethex+0x3b8>
 8017aca:	68a3      	ldr	r3, [r4, #8]
 8017acc:	459b      	cmp	fp, r3
 8017ace:	db19      	blt.n	8017b04 <__gethex+0x440>
 8017ad0:	6861      	ldr	r1, [r4, #4]
 8017ad2:	ee18 0a10 	vmov	r0, s16
 8017ad6:	3101      	adds	r1, #1
 8017ad8:	f000 f988 	bl	8017dec <_Balloc>
 8017adc:	4681      	mov	r9, r0
 8017ade:	b918      	cbnz	r0, 8017ae8 <__gethex+0x424>
 8017ae0:	4b1a      	ldr	r3, [pc, #104]	; (8017b4c <__gethex+0x488>)
 8017ae2:	4602      	mov	r2, r0
 8017ae4:	2184      	movs	r1, #132	; 0x84
 8017ae6:	e6a8      	b.n	801783a <__gethex+0x176>
 8017ae8:	6922      	ldr	r2, [r4, #16]
 8017aea:	3202      	adds	r2, #2
 8017aec:	f104 010c 	add.w	r1, r4, #12
 8017af0:	0092      	lsls	r2, r2, #2
 8017af2:	300c      	adds	r0, #12
 8017af4:	f7fa ffb2 	bl	8012a5c <memcpy>
 8017af8:	4621      	mov	r1, r4
 8017afa:	ee18 0a10 	vmov	r0, s16
 8017afe:	f000 f99a 	bl	8017e36 <_Bfree>
 8017b02:	464c      	mov	r4, r9
 8017b04:	6923      	ldr	r3, [r4, #16]
 8017b06:	1c5a      	adds	r2, r3, #1
 8017b08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017b0c:	6122      	str	r2, [r4, #16]
 8017b0e:	2201      	movs	r2, #1
 8017b10:	615a      	str	r2, [r3, #20]
 8017b12:	e7bb      	b.n	8017a8c <__gethex+0x3c8>
 8017b14:	6922      	ldr	r2, [r4, #16]
 8017b16:	455a      	cmp	r2, fp
 8017b18:	dd0b      	ble.n	8017b32 <__gethex+0x46e>
 8017b1a:	2101      	movs	r1, #1
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	f7ff fd6a 	bl	80175f6 <rshift>
 8017b22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017b26:	3501      	adds	r5, #1
 8017b28:	42ab      	cmp	r3, r5
 8017b2a:	f6ff aed0 	blt.w	80178ce <__gethex+0x20a>
 8017b2e:	2701      	movs	r7, #1
 8017b30:	e7c0      	b.n	8017ab4 <__gethex+0x3f0>
 8017b32:	f016 061f 	ands.w	r6, r6, #31
 8017b36:	d0fa      	beq.n	8017b2e <__gethex+0x46a>
 8017b38:	449a      	add	sl, r3
 8017b3a:	f1c6 0620 	rsb	r6, r6, #32
 8017b3e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017b42:	f000 fa15 	bl	8017f70 <__hi0bits>
 8017b46:	42b0      	cmp	r0, r6
 8017b48:	dbe7      	blt.n	8017b1a <__gethex+0x456>
 8017b4a:	e7f0      	b.n	8017b2e <__gethex+0x46a>
 8017b4c:	0801cae6 	.word	0x0801cae6

08017b50 <L_shift>:
 8017b50:	f1c2 0208 	rsb	r2, r2, #8
 8017b54:	0092      	lsls	r2, r2, #2
 8017b56:	b570      	push	{r4, r5, r6, lr}
 8017b58:	f1c2 0620 	rsb	r6, r2, #32
 8017b5c:	6843      	ldr	r3, [r0, #4]
 8017b5e:	6804      	ldr	r4, [r0, #0]
 8017b60:	fa03 f506 	lsl.w	r5, r3, r6
 8017b64:	432c      	orrs	r4, r5
 8017b66:	40d3      	lsrs	r3, r2
 8017b68:	6004      	str	r4, [r0, #0]
 8017b6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8017b6e:	4288      	cmp	r0, r1
 8017b70:	d3f4      	bcc.n	8017b5c <L_shift+0xc>
 8017b72:	bd70      	pop	{r4, r5, r6, pc}

08017b74 <__match>:
 8017b74:	b530      	push	{r4, r5, lr}
 8017b76:	6803      	ldr	r3, [r0, #0]
 8017b78:	3301      	adds	r3, #1
 8017b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b7e:	b914      	cbnz	r4, 8017b86 <__match+0x12>
 8017b80:	6003      	str	r3, [r0, #0]
 8017b82:	2001      	movs	r0, #1
 8017b84:	bd30      	pop	{r4, r5, pc}
 8017b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017b8e:	2d19      	cmp	r5, #25
 8017b90:	bf98      	it	ls
 8017b92:	3220      	addls	r2, #32
 8017b94:	42a2      	cmp	r2, r4
 8017b96:	d0f0      	beq.n	8017b7a <__match+0x6>
 8017b98:	2000      	movs	r0, #0
 8017b9a:	e7f3      	b.n	8017b84 <__match+0x10>

08017b9c <__hexnan>:
 8017b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba0:	680b      	ldr	r3, [r1, #0]
 8017ba2:	6801      	ldr	r1, [r0, #0]
 8017ba4:	115e      	asrs	r6, r3, #5
 8017ba6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017baa:	f013 031f 	ands.w	r3, r3, #31
 8017bae:	b087      	sub	sp, #28
 8017bb0:	bf18      	it	ne
 8017bb2:	3604      	addne	r6, #4
 8017bb4:	2500      	movs	r5, #0
 8017bb6:	1f37      	subs	r7, r6, #4
 8017bb8:	4682      	mov	sl, r0
 8017bba:	4690      	mov	r8, r2
 8017bbc:	9301      	str	r3, [sp, #4]
 8017bbe:	f846 5c04 	str.w	r5, [r6, #-4]
 8017bc2:	46b9      	mov	r9, r7
 8017bc4:	463c      	mov	r4, r7
 8017bc6:	9502      	str	r5, [sp, #8]
 8017bc8:	46ab      	mov	fp, r5
 8017bca:	784a      	ldrb	r2, [r1, #1]
 8017bcc:	1c4b      	adds	r3, r1, #1
 8017bce:	9303      	str	r3, [sp, #12]
 8017bd0:	b342      	cbz	r2, 8017c24 <__hexnan+0x88>
 8017bd2:	4610      	mov	r0, r2
 8017bd4:	9105      	str	r1, [sp, #20]
 8017bd6:	9204      	str	r2, [sp, #16]
 8017bd8:	f7ff fd5f 	bl	801769a <__hexdig_fun>
 8017bdc:	2800      	cmp	r0, #0
 8017bde:	d14f      	bne.n	8017c80 <__hexnan+0xe4>
 8017be0:	9a04      	ldr	r2, [sp, #16]
 8017be2:	9905      	ldr	r1, [sp, #20]
 8017be4:	2a20      	cmp	r2, #32
 8017be6:	d818      	bhi.n	8017c1a <__hexnan+0x7e>
 8017be8:	9b02      	ldr	r3, [sp, #8]
 8017bea:	459b      	cmp	fp, r3
 8017bec:	dd13      	ble.n	8017c16 <__hexnan+0x7a>
 8017bee:	454c      	cmp	r4, r9
 8017bf0:	d206      	bcs.n	8017c00 <__hexnan+0x64>
 8017bf2:	2d07      	cmp	r5, #7
 8017bf4:	dc04      	bgt.n	8017c00 <__hexnan+0x64>
 8017bf6:	462a      	mov	r2, r5
 8017bf8:	4649      	mov	r1, r9
 8017bfa:	4620      	mov	r0, r4
 8017bfc:	f7ff ffa8 	bl	8017b50 <L_shift>
 8017c00:	4544      	cmp	r4, r8
 8017c02:	d950      	bls.n	8017ca6 <__hexnan+0x10a>
 8017c04:	2300      	movs	r3, #0
 8017c06:	f1a4 0904 	sub.w	r9, r4, #4
 8017c0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c0e:	f8cd b008 	str.w	fp, [sp, #8]
 8017c12:	464c      	mov	r4, r9
 8017c14:	461d      	mov	r5, r3
 8017c16:	9903      	ldr	r1, [sp, #12]
 8017c18:	e7d7      	b.n	8017bca <__hexnan+0x2e>
 8017c1a:	2a29      	cmp	r2, #41	; 0x29
 8017c1c:	d156      	bne.n	8017ccc <__hexnan+0x130>
 8017c1e:	3102      	adds	r1, #2
 8017c20:	f8ca 1000 	str.w	r1, [sl]
 8017c24:	f1bb 0f00 	cmp.w	fp, #0
 8017c28:	d050      	beq.n	8017ccc <__hexnan+0x130>
 8017c2a:	454c      	cmp	r4, r9
 8017c2c:	d206      	bcs.n	8017c3c <__hexnan+0xa0>
 8017c2e:	2d07      	cmp	r5, #7
 8017c30:	dc04      	bgt.n	8017c3c <__hexnan+0xa0>
 8017c32:	462a      	mov	r2, r5
 8017c34:	4649      	mov	r1, r9
 8017c36:	4620      	mov	r0, r4
 8017c38:	f7ff ff8a 	bl	8017b50 <L_shift>
 8017c3c:	4544      	cmp	r4, r8
 8017c3e:	d934      	bls.n	8017caa <__hexnan+0x10e>
 8017c40:	f1a8 0204 	sub.w	r2, r8, #4
 8017c44:	4623      	mov	r3, r4
 8017c46:	f853 1b04 	ldr.w	r1, [r3], #4
 8017c4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8017c4e:	429f      	cmp	r7, r3
 8017c50:	d2f9      	bcs.n	8017c46 <__hexnan+0xaa>
 8017c52:	1b3b      	subs	r3, r7, r4
 8017c54:	f023 0303 	bic.w	r3, r3, #3
 8017c58:	3304      	adds	r3, #4
 8017c5a:	3401      	adds	r4, #1
 8017c5c:	3e03      	subs	r6, #3
 8017c5e:	42b4      	cmp	r4, r6
 8017c60:	bf88      	it	hi
 8017c62:	2304      	movhi	r3, #4
 8017c64:	4443      	add	r3, r8
 8017c66:	2200      	movs	r2, #0
 8017c68:	f843 2b04 	str.w	r2, [r3], #4
 8017c6c:	429f      	cmp	r7, r3
 8017c6e:	d2fb      	bcs.n	8017c68 <__hexnan+0xcc>
 8017c70:	683b      	ldr	r3, [r7, #0]
 8017c72:	b91b      	cbnz	r3, 8017c7c <__hexnan+0xe0>
 8017c74:	4547      	cmp	r7, r8
 8017c76:	d127      	bne.n	8017cc8 <__hexnan+0x12c>
 8017c78:	2301      	movs	r3, #1
 8017c7a:	603b      	str	r3, [r7, #0]
 8017c7c:	2005      	movs	r0, #5
 8017c7e:	e026      	b.n	8017cce <__hexnan+0x132>
 8017c80:	3501      	adds	r5, #1
 8017c82:	2d08      	cmp	r5, #8
 8017c84:	f10b 0b01 	add.w	fp, fp, #1
 8017c88:	dd06      	ble.n	8017c98 <__hexnan+0xfc>
 8017c8a:	4544      	cmp	r4, r8
 8017c8c:	d9c3      	bls.n	8017c16 <__hexnan+0x7a>
 8017c8e:	2300      	movs	r3, #0
 8017c90:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c94:	2501      	movs	r5, #1
 8017c96:	3c04      	subs	r4, #4
 8017c98:	6822      	ldr	r2, [r4, #0]
 8017c9a:	f000 000f 	and.w	r0, r0, #15
 8017c9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8017ca2:	6022      	str	r2, [r4, #0]
 8017ca4:	e7b7      	b.n	8017c16 <__hexnan+0x7a>
 8017ca6:	2508      	movs	r5, #8
 8017ca8:	e7b5      	b.n	8017c16 <__hexnan+0x7a>
 8017caa:	9b01      	ldr	r3, [sp, #4]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d0df      	beq.n	8017c70 <__hexnan+0xd4>
 8017cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8017cb4:	f1c3 0320 	rsb	r3, r3, #32
 8017cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8017cbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017cc0:	401a      	ands	r2, r3
 8017cc2:	f846 2c04 	str.w	r2, [r6, #-4]
 8017cc6:	e7d3      	b.n	8017c70 <__hexnan+0xd4>
 8017cc8:	3f04      	subs	r7, #4
 8017cca:	e7d1      	b.n	8017c70 <__hexnan+0xd4>
 8017ccc:	2004      	movs	r0, #4
 8017cce:	b007      	add	sp, #28
 8017cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017cd4 <__locale_mb_cur_max>:
 8017cd4:	4b01      	ldr	r3, [pc, #4]	; (8017cdc <__locale_mb_cur_max+0x8>)
 8017cd6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8017cda:	4770      	bx	lr
 8017cdc:	20003200 	.word	0x20003200

08017ce0 <_localeconv_r>:
 8017ce0:	4800      	ldr	r0, [pc, #0]	; (8017ce4 <_localeconv_r+0x4>)
 8017ce2:	4770      	bx	lr
 8017ce4:	200032f0 	.word	0x200032f0

08017ce8 <__retarget_lock_init_recursive>:
 8017ce8:	4770      	bx	lr

08017cea <__retarget_lock_close_recursive>:
 8017cea:	4770      	bx	lr

08017cec <__retarget_lock_acquire_recursive>:
 8017cec:	4770      	bx	lr

08017cee <__retarget_lock_release_recursive>:
 8017cee:	4770      	bx	lr

08017cf0 <__swhatbuf_r>:
 8017cf0:	b570      	push	{r4, r5, r6, lr}
 8017cf2:	460e      	mov	r6, r1
 8017cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cf8:	2900      	cmp	r1, #0
 8017cfa:	b096      	sub	sp, #88	; 0x58
 8017cfc:	4614      	mov	r4, r2
 8017cfe:	461d      	mov	r5, r3
 8017d00:	da09      	bge.n	8017d16 <__swhatbuf_r+0x26>
 8017d02:	89b3      	ldrh	r3, [r6, #12]
 8017d04:	2200      	movs	r2, #0
 8017d06:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017d0a:	602a      	str	r2, [r5, #0]
 8017d0c:	d116      	bne.n	8017d3c <__swhatbuf_r+0x4c>
 8017d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d12:	6023      	str	r3, [r4, #0]
 8017d14:	e015      	b.n	8017d42 <__swhatbuf_r+0x52>
 8017d16:	466a      	mov	r2, sp
 8017d18:	f001 fc74 	bl	8019604 <_fstat_r>
 8017d1c:	2800      	cmp	r0, #0
 8017d1e:	dbf0      	blt.n	8017d02 <__swhatbuf_r+0x12>
 8017d20:	9a01      	ldr	r2, [sp, #4]
 8017d22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d2a:	425a      	negs	r2, r3
 8017d2c:	415a      	adcs	r2, r3
 8017d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d32:	602a      	str	r2, [r5, #0]
 8017d34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017d38:	6023      	str	r3, [r4, #0]
 8017d3a:	e002      	b.n	8017d42 <__swhatbuf_r+0x52>
 8017d3c:	2340      	movs	r3, #64	; 0x40
 8017d3e:	6023      	str	r3, [r4, #0]
 8017d40:	4610      	mov	r0, r2
 8017d42:	b016      	add	sp, #88	; 0x58
 8017d44:	bd70      	pop	{r4, r5, r6, pc}
	...

08017d48 <__smakebuf_r>:
 8017d48:	898b      	ldrh	r3, [r1, #12]
 8017d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d4c:	079d      	lsls	r5, r3, #30
 8017d4e:	4606      	mov	r6, r0
 8017d50:	460c      	mov	r4, r1
 8017d52:	d507      	bpl.n	8017d64 <__smakebuf_r+0x1c>
 8017d54:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	6123      	str	r3, [r4, #16]
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	6163      	str	r3, [r4, #20]
 8017d60:	b002      	add	sp, #8
 8017d62:	bd70      	pop	{r4, r5, r6, pc}
 8017d64:	ab01      	add	r3, sp, #4
 8017d66:	466a      	mov	r2, sp
 8017d68:	f7ff ffc2 	bl	8017cf0 <__swhatbuf_r>
 8017d6c:	9900      	ldr	r1, [sp, #0]
 8017d6e:	4605      	mov	r5, r0
 8017d70:	4630      	mov	r0, r6
 8017d72:	f7fa fc23 	bl	80125bc <_malloc_r>
 8017d76:	b948      	cbnz	r0, 8017d8c <__smakebuf_r+0x44>
 8017d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d7c:	059a      	lsls	r2, r3, #22
 8017d7e:	d4ef      	bmi.n	8017d60 <__smakebuf_r+0x18>
 8017d80:	f023 0303 	bic.w	r3, r3, #3
 8017d84:	f043 0302 	orr.w	r3, r3, #2
 8017d88:	81a3      	strh	r3, [r4, #12]
 8017d8a:	e7e3      	b.n	8017d54 <__smakebuf_r+0xc>
 8017d8c:	4b0d      	ldr	r3, [pc, #52]	; (8017dc4 <__smakebuf_r+0x7c>)
 8017d8e:	63f3      	str	r3, [r6, #60]	; 0x3c
 8017d90:	89a3      	ldrh	r3, [r4, #12]
 8017d92:	6020      	str	r0, [r4, #0]
 8017d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d98:	81a3      	strh	r3, [r4, #12]
 8017d9a:	9b00      	ldr	r3, [sp, #0]
 8017d9c:	6163      	str	r3, [r4, #20]
 8017d9e:	9b01      	ldr	r3, [sp, #4]
 8017da0:	6120      	str	r0, [r4, #16]
 8017da2:	b15b      	cbz	r3, 8017dbc <__smakebuf_r+0x74>
 8017da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017da8:	4630      	mov	r0, r6
 8017daa:	f001 fd87 	bl	80198bc <_isatty_r>
 8017dae:	b128      	cbz	r0, 8017dbc <__smakebuf_r+0x74>
 8017db0:	89a3      	ldrh	r3, [r4, #12]
 8017db2:	f023 0303 	bic.w	r3, r3, #3
 8017db6:	f043 0301 	orr.w	r3, r3, #1
 8017dba:	81a3      	strh	r3, [r4, #12]
 8017dbc:	89a0      	ldrh	r0, [r4, #12]
 8017dbe:	4305      	orrs	r5, r0
 8017dc0:	81a5      	strh	r5, [r4, #12]
 8017dc2:	e7cd      	b.n	8017d60 <__smakebuf_r+0x18>
 8017dc4:	080172dd 	.word	0x080172dd

08017dc8 <__ascii_mbtowc>:
 8017dc8:	b082      	sub	sp, #8
 8017dca:	b901      	cbnz	r1, 8017dce <__ascii_mbtowc+0x6>
 8017dcc:	a901      	add	r1, sp, #4
 8017dce:	b142      	cbz	r2, 8017de2 <__ascii_mbtowc+0x1a>
 8017dd0:	b14b      	cbz	r3, 8017de6 <__ascii_mbtowc+0x1e>
 8017dd2:	7813      	ldrb	r3, [r2, #0]
 8017dd4:	600b      	str	r3, [r1, #0]
 8017dd6:	7812      	ldrb	r2, [r2, #0]
 8017dd8:	1e10      	subs	r0, r2, #0
 8017dda:	bf18      	it	ne
 8017ddc:	2001      	movne	r0, #1
 8017dde:	b002      	add	sp, #8
 8017de0:	4770      	bx	lr
 8017de2:	4610      	mov	r0, r2
 8017de4:	e7fb      	b.n	8017dde <__ascii_mbtowc+0x16>
 8017de6:	f06f 0001 	mvn.w	r0, #1
 8017dea:	e7f8      	b.n	8017dde <__ascii_mbtowc+0x16>

08017dec <_Balloc>:
 8017dec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017dee:	b570      	push	{r4, r5, r6, lr}
 8017df0:	4605      	mov	r5, r0
 8017df2:	460c      	mov	r4, r1
 8017df4:	b17b      	cbz	r3, 8017e16 <_Balloc+0x2a>
 8017df6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8017df8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017dfc:	b9a0      	cbnz	r0, 8017e28 <_Balloc+0x3c>
 8017dfe:	2101      	movs	r1, #1
 8017e00:	fa01 f604 	lsl.w	r6, r1, r4
 8017e04:	1d72      	adds	r2, r6, #5
 8017e06:	0092      	lsls	r2, r2, #2
 8017e08:	4628      	mov	r0, r5
 8017e0a:	f001 fae7 	bl	80193dc <_calloc_r>
 8017e0e:	b148      	cbz	r0, 8017e24 <_Balloc+0x38>
 8017e10:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8017e14:	e00b      	b.n	8017e2e <_Balloc+0x42>
 8017e16:	2221      	movs	r2, #33	; 0x21
 8017e18:	2104      	movs	r1, #4
 8017e1a:	f001 fadf 	bl	80193dc <_calloc_r>
 8017e1e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8017e20:	2800      	cmp	r0, #0
 8017e22:	d1e8      	bne.n	8017df6 <_Balloc+0xa>
 8017e24:	2000      	movs	r0, #0
 8017e26:	bd70      	pop	{r4, r5, r6, pc}
 8017e28:	6802      	ldr	r2, [r0, #0]
 8017e2a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8017e2e:	2300      	movs	r3, #0
 8017e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017e34:	e7f7      	b.n	8017e26 <_Balloc+0x3a>

08017e36 <_Bfree>:
 8017e36:	b131      	cbz	r1, 8017e46 <_Bfree+0x10>
 8017e38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017e3a:	684a      	ldr	r2, [r1, #4]
 8017e3c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017e40:	6008      	str	r0, [r1, #0]
 8017e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017e46:	4770      	bx	lr

08017e48 <__multadd>:
 8017e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e4c:	690e      	ldr	r6, [r1, #16]
 8017e4e:	4607      	mov	r7, r0
 8017e50:	4698      	mov	r8, r3
 8017e52:	460c      	mov	r4, r1
 8017e54:	f101 0014 	add.w	r0, r1, #20
 8017e58:	2300      	movs	r3, #0
 8017e5a:	6805      	ldr	r5, [r0, #0]
 8017e5c:	b2a9      	uxth	r1, r5
 8017e5e:	fb02 8101 	mla	r1, r2, r1, r8
 8017e62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8017e66:	0c2d      	lsrs	r5, r5, #16
 8017e68:	fb02 c505 	mla	r5, r2, r5, ip
 8017e6c:	b289      	uxth	r1, r1
 8017e6e:	3301      	adds	r3, #1
 8017e70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8017e74:	429e      	cmp	r6, r3
 8017e76:	f840 1b04 	str.w	r1, [r0], #4
 8017e7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8017e7e:	dcec      	bgt.n	8017e5a <__multadd+0x12>
 8017e80:	f1b8 0f00 	cmp.w	r8, #0
 8017e84:	d022      	beq.n	8017ecc <__multadd+0x84>
 8017e86:	68a3      	ldr	r3, [r4, #8]
 8017e88:	42b3      	cmp	r3, r6
 8017e8a:	dc19      	bgt.n	8017ec0 <__multadd+0x78>
 8017e8c:	6861      	ldr	r1, [r4, #4]
 8017e8e:	4638      	mov	r0, r7
 8017e90:	3101      	adds	r1, #1
 8017e92:	f7ff ffab 	bl	8017dec <_Balloc>
 8017e96:	4605      	mov	r5, r0
 8017e98:	b928      	cbnz	r0, 8017ea6 <__multadd+0x5e>
 8017e9a:	4602      	mov	r2, r0
 8017e9c:	4b0d      	ldr	r3, [pc, #52]	; (8017ed4 <__multadd+0x8c>)
 8017e9e:	480e      	ldr	r0, [pc, #56]	; (8017ed8 <__multadd+0x90>)
 8017ea0:	21b5      	movs	r1, #181	; 0xb5
 8017ea2:	f001 fa7d 	bl	80193a0 <__assert_func>
 8017ea6:	6922      	ldr	r2, [r4, #16]
 8017ea8:	3202      	adds	r2, #2
 8017eaa:	f104 010c 	add.w	r1, r4, #12
 8017eae:	0092      	lsls	r2, r2, #2
 8017eb0:	300c      	adds	r0, #12
 8017eb2:	f7fa fdd3 	bl	8012a5c <memcpy>
 8017eb6:	4621      	mov	r1, r4
 8017eb8:	4638      	mov	r0, r7
 8017eba:	f7ff ffbc 	bl	8017e36 <_Bfree>
 8017ebe:	462c      	mov	r4, r5
 8017ec0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017ec4:	3601      	adds	r6, #1
 8017ec6:	f8c3 8014 	str.w	r8, [r3, #20]
 8017eca:	6126      	str	r6, [r4, #16]
 8017ecc:	4620      	mov	r0, r4
 8017ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ed2:	bf00      	nop
 8017ed4:	0801cae6 	.word	0x0801cae6
 8017ed8:	0801cbd4 	.word	0x0801cbd4

08017edc <__s2b>:
 8017edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ee0:	460c      	mov	r4, r1
 8017ee2:	4615      	mov	r5, r2
 8017ee4:	461f      	mov	r7, r3
 8017ee6:	2209      	movs	r2, #9
 8017ee8:	3308      	adds	r3, #8
 8017eea:	4606      	mov	r6, r0
 8017eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8017ef0:	2100      	movs	r1, #0
 8017ef2:	2201      	movs	r2, #1
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	db09      	blt.n	8017f0c <__s2b+0x30>
 8017ef8:	4630      	mov	r0, r6
 8017efa:	f7ff ff77 	bl	8017dec <_Balloc>
 8017efe:	b940      	cbnz	r0, 8017f12 <__s2b+0x36>
 8017f00:	4602      	mov	r2, r0
 8017f02:	4b19      	ldr	r3, [pc, #100]	; (8017f68 <__s2b+0x8c>)
 8017f04:	4819      	ldr	r0, [pc, #100]	; (8017f6c <__s2b+0x90>)
 8017f06:	21ce      	movs	r1, #206	; 0xce
 8017f08:	f001 fa4a 	bl	80193a0 <__assert_func>
 8017f0c:	0052      	lsls	r2, r2, #1
 8017f0e:	3101      	adds	r1, #1
 8017f10:	e7f0      	b.n	8017ef4 <__s2b+0x18>
 8017f12:	9b08      	ldr	r3, [sp, #32]
 8017f14:	6143      	str	r3, [r0, #20]
 8017f16:	2d09      	cmp	r5, #9
 8017f18:	f04f 0301 	mov.w	r3, #1
 8017f1c:	6103      	str	r3, [r0, #16]
 8017f1e:	dd16      	ble.n	8017f4e <__s2b+0x72>
 8017f20:	f104 0909 	add.w	r9, r4, #9
 8017f24:	46c8      	mov	r8, r9
 8017f26:	442c      	add	r4, r5
 8017f28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017f2c:	4601      	mov	r1, r0
 8017f2e:	3b30      	subs	r3, #48	; 0x30
 8017f30:	220a      	movs	r2, #10
 8017f32:	4630      	mov	r0, r6
 8017f34:	f7ff ff88 	bl	8017e48 <__multadd>
 8017f38:	45a0      	cmp	r8, r4
 8017f3a:	d1f5      	bne.n	8017f28 <__s2b+0x4c>
 8017f3c:	f1a5 0408 	sub.w	r4, r5, #8
 8017f40:	444c      	add	r4, r9
 8017f42:	1b2d      	subs	r5, r5, r4
 8017f44:	1963      	adds	r3, r4, r5
 8017f46:	42bb      	cmp	r3, r7
 8017f48:	db04      	blt.n	8017f54 <__s2b+0x78>
 8017f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f4e:	340a      	adds	r4, #10
 8017f50:	2509      	movs	r5, #9
 8017f52:	e7f6      	b.n	8017f42 <__s2b+0x66>
 8017f54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017f58:	4601      	mov	r1, r0
 8017f5a:	3b30      	subs	r3, #48	; 0x30
 8017f5c:	220a      	movs	r2, #10
 8017f5e:	4630      	mov	r0, r6
 8017f60:	f7ff ff72 	bl	8017e48 <__multadd>
 8017f64:	e7ee      	b.n	8017f44 <__s2b+0x68>
 8017f66:	bf00      	nop
 8017f68:	0801cae6 	.word	0x0801cae6
 8017f6c:	0801cbd4 	.word	0x0801cbd4

08017f70 <__hi0bits>:
 8017f70:	0c03      	lsrs	r3, r0, #16
 8017f72:	041b      	lsls	r3, r3, #16
 8017f74:	b9d3      	cbnz	r3, 8017fac <__hi0bits+0x3c>
 8017f76:	0400      	lsls	r0, r0, #16
 8017f78:	2310      	movs	r3, #16
 8017f7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017f7e:	bf04      	itt	eq
 8017f80:	0200      	lsleq	r0, r0, #8
 8017f82:	3308      	addeq	r3, #8
 8017f84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017f88:	bf04      	itt	eq
 8017f8a:	0100      	lsleq	r0, r0, #4
 8017f8c:	3304      	addeq	r3, #4
 8017f8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017f92:	bf04      	itt	eq
 8017f94:	0080      	lsleq	r0, r0, #2
 8017f96:	3302      	addeq	r3, #2
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	db05      	blt.n	8017fa8 <__hi0bits+0x38>
 8017f9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017fa0:	f103 0301 	add.w	r3, r3, #1
 8017fa4:	bf08      	it	eq
 8017fa6:	2320      	moveq	r3, #32
 8017fa8:	4618      	mov	r0, r3
 8017faa:	4770      	bx	lr
 8017fac:	2300      	movs	r3, #0
 8017fae:	e7e4      	b.n	8017f7a <__hi0bits+0xa>

08017fb0 <__lo0bits>:
 8017fb0:	6803      	ldr	r3, [r0, #0]
 8017fb2:	f013 0207 	ands.w	r2, r3, #7
 8017fb6:	4601      	mov	r1, r0
 8017fb8:	d00b      	beq.n	8017fd2 <__lo0bits+0x22>
 8017fba:	07da      	lsls	r2, r3, #31
 8017fbc:	d424      	bmi.n	8018008 <__lo0bits+0x58>
 8017fbe:	0798      	lsls	r0, r3, #30
 8017fc0:	bf49      	itett	mi
 8017fc2:	085b      	lsrmi	r3, r3, #1
 8017fc4:	089b      	lsrpl	r3, r3, #2
 8017fc6:	2001      	movmi	r0, #1
 8017fc8:	600b      	strmi	r3, [r1, #0]
 8017fca:	bf5c      	itt	pl
 8017fcc:	600b      	strpl	r3, [r1, #0]
 8017fce:	2002      	movpl	r0, #2
 8017fd0:	4770      	bx	lr
 8017fd2:	b298      	uxth	r0, r3
 8017fd4:	b9b0      	cbnz	r0, 8018004 <__lo0bits+0x54>
 8017fd6:	0c1b      	lsrs	r3, r3, #16
 8017fd8:	2010      	movs	r0, #16
 8017fda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017fde:	bf04      	itt	eq
 8017fe0:	0a1b      	lsreq	r3, r3, #8
 8017fe2:	3008      	addeq	r0, #8
 8017fe4:	071a      	lsls	r2, r3, #28
 8017fe6:	bf04      	itt	eq
 8017fe8:	091b      	lsreq	r3, r3, #4
 8017fea:	3004      	addeq	r0, #4
 8017fec:	079a      	lsls	r2, r3, #30
 8017fee:	bf04      	itt	eq
 8017ff0:	089b      	lsreq	r3, r3, #2
 8017ff2:	3002      	addeq	r0, #2
 8017ff4:	07da      	lsls	r2, r3, #31
 8017ff6:	d403      	bmi.n	8018000 <__lo0bits+0x50>
 8017ff8:	085b      	lsrs	r3, r3, #1
 8017ffa:	f100 0001 	add.w	r0, r0, #1
 8017ffe:	d005      	beq.n	801800c <__lo0bits+0x5c>
 8018000:	600b      	str	r3, [r1, #0]
 8018002:	4770      	bx	lr
 8018004:	4610      	mov	r0, r2
 8018006:	e7e8      	b.n	8017fda <__lo0bits+0x2a>
 8018008:	2000      	movs	r0, #0
 801800a:	4770      	bx	lr
 801800c:	2020      	movs	r0, #32
 801800e:	4770      	bx	lr

08018010 <__i2b>:
 8018010:	b510      	push	{r4, lr}
 8018012:	460c      	mov	r4, r1
 8018014:	2101      	movs	r1, #1
 8018016:	f7ff fee9 	bl	8017dec <_Balloc>
 801801a:	4602      	mov	r2, r0
 801801c:	b928      	cbnz	r0, 801802a <__i2b+0x1a>
 801801e:	4b05      	ldr	r3, [pc, #20]	; (8018034 <__i2b+0x24>)
 8018020:	4805      	ldr	r0, [pc, #20]	; (8018038 <__i2b+0x28>)
 8018022:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018026:	f001 f9bb 	bl	80193a0 <__assert_func>
 801802a:	2301      	movs	r3, #1
 801802c:	6144      	str	r4, [r0, #20]
 801802e:	6103      	str	r3, [r0, #16]
 8018030:	bd10      	pop	{r4, pc}
 8018032:	bf00      	nop
 8018034:	0801cae6 	.word	0x0801cae6
 8018038:	0801cbd4 	.word	0x0801cbd4

0801803c <__multiply>:
 801803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018040:	4614      	mov	r4, r2
 8018042:	690a      	ldr	r2, [r1, #16]
 8018044:	6923      	ldr	r3, [r4, #16]
 8018046:	429a      	cmp	r2, r3
 8018048:	bfb8      	it	lt
 801804a:	460b      	movlt	r3, r1
 801804c:	460d      	mov	r5, r1
 801804e:	bfbc      	itt	lt
 8018050:	4625      	movlt	r5, r4
 8018052:	461c      	movlt	r4, r3
 8018054:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018058:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801805c:	68ab      	ldr	r3, [r5, #8]
 801805e:	6869      	ldr	r1, [r5, #4]
 8018060:	eb0a 0709 	add.w	r7, sl, r9
 8018064:	42bb      	cmp	r3, r7
 8018066:	b085      	sub	sp, #20
 8018068:	bfb8      	it	lt
 801806a:	3101      	addlt	r1, #1
 801806c:	f7ff febe 	bl	8017dec <_Balloc>
 8018070:	b930      	cbnz	r0, 8018080 <__multiply+0x44>
 8018072:	4602      	mov	r2, r0
 8018074:	4b42      	ldr	r3, [pc, #264]	; (8018180 <__multiply+0x144>)
 8018076:	4843      	ldr	r0, [pc, #268]	; (8018184 <__multiply+0x148>)
 8018078:	f240 115d 	movw	r1, #349	; 0x15d
 801807c:	f001 f990 	bl	80193a0 <__assert_func>
 8018080:	f100 0614 	add.w	r6, r0, #20
 8018084:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018088:	4633      	mov	r3, r6
 801808a:	2200      	movs	r2, #0
 801808c:	4543      	cmp	r3, r8
 801808e:	d31e      	bcc.n	80180ce <__multiply+0x92>
 8018090:	f105 0c14 	add.w	ip, r5, #20
 8018094:	f104 0314 	add.w	r3, r4, #20
 8018098:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801809c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80180a0:	9202      	str	r2, [sp, #8]
 80180a2:	ebac 0205 	sub.w	r2, ip, r5
 80180a6:	3a15      	subs	r2, #21
 80180a8:	f022 0203 	bic.w	r2, r2, #3
 80180ac:	3204      	adds	r2, #4
 80180ae:	f105 0115 	add.w	r1, r5, #21
 80180b2:	458c      	cmp	ip, r1
 80180b4:	bf38      	it	cc
 80180b6:	2204      	movcc	r2, #4
 80180b8:	9201      	str	r2, [sp, #4]
 80180ba:	9a02      	ldr	r2, [sp, #8]
 80180bc:	9303      	str	r3, [sp, #12]
 80180be:	429a      	cmp	r2, r3
 80180c0:	d808      	bhi.n	80180d4 <__multiply+0x98>
 80180c2:	2f00      	cmp	r7, #0
 80180c4:	dc55      	bgt.n	8018172 <__multiply+0x136>
 80180c6:	6107      	str	r7, [r0, #16]
 80180c8:	b005      	add	sp, #20
 80180ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ce:	f843 2b04 	str.w	r2, [r3], #4
 80180d2:	e7db      	b.n	801808c <__multiply+0x50>
 80180d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80180d8:	f1ba 0f00 	cmp.w	sl, #0
 80180dc:	d020      	beq.n	8018120 <__multiply+0xe4>
 80180de:	f105 0e14 	add.w	lr, r5, #20
 80180e2:	46b1      	mov	r9, r6
 80180e4:	2200      	movs	r2, #0
 80180e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80180ea:	f8d9 b000 	ldr.w	fp, [r9]
 80180ee:	b2a1      	uxth	r1, r4
 80180f0:	fa1f fb8b 	uxth.w	fp, fp
 80180f4:	fb0a b101 	mla	r1, sl, r1, fp
 80180f8:	4411      	add	r1, r2
 80180fa:	f8d9 2000 	ldr.w	r2, [r9]
 80180fe:	0c24      	lsrs	r4, r4, #16
 8018100:	0c12      	lsrs	r2, r2, #16
 8018102:	fb0a 2404 	mla	r4, sl, r4, r2
 8018106:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801810a:	b289      	uxth	r1, r1
 801810c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018110:	45f4      	cmp	ip, lr
 8018112:	f849 1b04 	str.w	r1, [r9], #4
 8018116:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801811a:	d8e4      	bhi.n	80180e6 <__multiply+0xaa>
 801811c:	9901      	ldr	r1, [sp, #4]
 801811e:	5072      	str	r2, [r6, r1]
 8018120:	9a03      	ldr	r2, [sp, #12]
 8018122:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018126:	3304      	adds	r3, #4
 8018128:	f1b9 0f00 	cmp.w	r9, #0
 801812c:	d01f      	beq.n	801816e <__multiply+0x132>
 801812e:	6834      	ldr	r4, [r6, #0]
 8018130:	f105 0114 	add.w	r1, r5, #20
 8018134:	46b6      	mov	lr, r6
 8018136:	f04f 0a00 	mov.w	sl, #0
 801813a:	880a      	ldrh	r2, [r1, #0]
 801813c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018140:	fb09 b202 	mla	r2, r9, r2, fp
 8018144:	4492      	add	sl, r2
 8018146:	b2a4      	uxth	r4, r4
 8018148:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801814c:	f84e 4b04 	str.w	r4, [lr], #4
 8018150:	f851 4b04 	ldr.w	r4, [r1], #4
 8018154:	f8be 2000 	ldrh.w	r2, [lr]
 8018158:	0c24      	lsrs	r4, r4, #16
 801815a:	fb09 2404 	mla	r4, r9, r4, r2
 801815e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018162:	458c      	cmp	ip, r1
 8018164:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018168:	d8e7      	bhi.n	801813a <__multiply+0xfe>
 801816a:	9a01      	ldr	r2, [sp, #4]
 801816c:	50b4      	str	r4, [r6, r2]
 801816e:	3604      	adds	r6, #4
 8018170:	e7a3      	b.n	80180ba <__multiply+0x7e>
 8018172:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018176:	2b00      	cmp	r3, #0
 8018178:	d1a5      	bne.n	80180c6 <__multiply+0x8a>
 801817a:	3f01      	subs	r7, #1
 801817c:	e7a1      	b.n	80180c2 <__multiply+0x86>
 801817e:	bf00      	nop
 8018180:	0801cae6 	.word	0x0801cae6
 8018184:	0801cbd4 	.word	0x0801cbd4

08018188 <__pow5mult>:
 8018188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801818c:	4615      	mov	r5, r2
 801818e:	f012 0203 	ands.w	r2, r2, #3
 8018192:	4606      	mov	r6, r0
 8018194:	460f      	mov	r7, r1
 8018196:	d007      	beq.n	80181a8 <__pow5mult+0x20>
 8018198:	4c1a      	ldr	r4, [pc, #104]	; (8018204 <__pow5mult+0x7c>)
 801819a:	3a01      	subs	r2, #1
 801819c:	2300      	movs	r3, #0
 801819e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80181a2:	f7ff fe51 	bl	8017e48 <__multadd>
 80181a6:	4607      	mov	r7, r0
 80181a8:	10ad      	asrs	r5, r5, #2
 80181aa:	d027      	beq.n	80181fc <__pow5mult+0x74>
 80181ac:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80181ae:	b944      	cbnz	r4, 80181c2 <__pow5mult+0x3a>
 80181b0:	f240 2171 	movw	r1, #625	; 0x271
 80181b4:	4630      	mov	r0, r6
 80181b6:	f7ff ff2b 	bl	8018010 <__i2b>
 80181ba:	2300      	movs	r3, #0
 80181bc:	64b0      	str	r0, [r6, #72]	; 0x48
 80181be:	4604      	mov	r4, r0
 80181c0:	6003      	str	r3, [r0, #0]
 80181c2:	f04f 0900 	mov.w	r9, #0
 80181c6:	07eb      	lsls	r3, r5, #31
 80181c8:	d50a      	bpl.n	80181e0 <__pow5mult+0x58>
 80181ca:	4639      	mov	r1, r7
 80181cc:	4622      	mov	r2, r4
 80181ce:	4630      	mov	r0, r6
 80181d0:	f7ff ff34 	bl	801803c <__multiply>
 80181d4:	4639      	mov	r1, r7
 80181d6:	4680      	mov	r8, r0
 80181d8:	4630      	mov	r0, r6
 80181da:	f7ff fe2c 	bl	8017e36 <_Bfree>
 80181de:	4647      	mov	r7, r8
 80181e0:	106d      	asrs	r5, r5, #1
 80181e2:	d00b      	beq.n	80181fc <__pow5mult+0x74>
 80181e4:	6820      	ldr	r0, [r4, #0]
 80181e6:	b938      	cbnz	r0, 80181f8 <__pow5mult+0x70>
 80181e8:	4622      	mov	r2, r4
 80181ea:	4621      	mov	r1, r4
 80181ec:	4630      	mov	r0, r6
 80181ee:	f7ff ff25 	bl	801803c <__multiply>
 80181f2:	6020      	str	r0, [r4, #0]
 80181f4:	f8c0 9000 	str.w	r9, [r0]
 80181f8:	4604      	mov	r4, r0
 80181fa:	e7e4      	b.n	80181c6 <__pow5mult+0x3e>
 80181fc:	4638      	mov	r0, r7
 80181fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018202:	bf00      	nop
 8018204:	0801cd28 	.word	0x0801cd28

08018208 <__lshift>:
 8018208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801820c:	460c      	mov	r4, r1
 801820e:	6849      	ldr	r1, [r1, #4]
 8018210:	6923      	ldr	r3, [r4, #16]
 8018212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018216:	68a3      	ldr	r3, [r4, #8]
 8018218:	4607      	mov	r7, r0
 801821a:	4691      	mov	r9, r2
 801821c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018220:	f108 0601 	add.w	r6, r8, #1
 8018224:	42b3      	cmp	r3, r6
 8018226:	db0b      	blt.n	8018240 <__lshift+0x38>
 8018228:	4638      	mov	r0, r7
 801822a:	f7ff fddf 	bl	8017dec <_Balloc>
 801822e:	4605      	mov	r5, r0
 8018230:	b948      	cbnz	r0, 8018246 <__lshift+0x3e>
 8018232:	4602      	mov	r2, r0
 8018234:	4b28      	ldr	r3, [pc, #160]	; (80182d8 <__lshift+0xd0>)
 8018236:	4829      	ldr	r0, [pc, #164]	; (80182dc <__lshift+0xd4>)
 8018238:	f240 11d9 	movw	r1, #473	; 0x1d9
 801823c:	f001 f8b0 	bl	80193a0 <__assert_func>
 8018240:	3101      	adds	r1, #1
 8018242:	005b      	lsls	r3, r3, #1
 8018244:	e7ee      	b.n	8018224 <__lshift+0x1c>
 8018246:	2300      	movs	r3, #0
 8018248:	f100 0114 	add.w	r1, r0, #20
 801824c:	f100 0210 	add.w	r2, r0, #16
 8018250:	4618      	mov	r0, r3
 8018252:	4553      	cmp	r3, sl
 8018254:	db33      	blt.n	80182be <__lshift+0xb6>
 8018256:	6920      	ldr	r0, [r4, #16]
 8018258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801825c:	f104 0314 	add.w	r3, r4, #20
 8018260:	f019 091f 	ands.w	r9, r9, #31
 8018264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801826c:	d02b      	beq.n	80182c6 <__lshift+0xbe>
 801826e:	f1c9 0e20 	rsb	lr, r9, #32
 8018272:	468a      	mov	sl, r1
 8018274:	2200      	movs	r2, #0
 8018276:	6818      	ldr	r0, [r3, #0]
 8018278:	fa00 f009 	lsl.w	r0, r0, r9
 801827c:	4302      	orrs	r2, r0
 801827e:	f84a 2b04 	str.w	r2, [sl], #4
 8018282:	f853 2b04 	ldr.w	r2, [r3], #4
 8018286:	459c      	cmp	ip, r3
 8018288:	fa22 f20e 	lsr.w	r2, r2, lr
 801828c:	d8f3      	bhi.n	8018276 <__lshift+0x6e>
 801828e:	ebac 0304 	sub.w	r3, ip, r4
 8018292:	3b15      	subs	r3, #21
 8018294:	f023 0303 	bic.w	r3, r3, #3
 8018298:	3304      	adds	r3, #4
 801829a:	f104 0015 	add.w	r0, r4, #21
 801829e:	4584      	cmp	ip, r0
 80182a0:	bf38      	it	cc
 80182a2:	2304      	movcc	r3, #4
 80182a4:	50ca      	str	r2, [r1, r3]
 80182a6:	b10a      	cbz	r2, 80182ac <__lshift+0xa4>
 80182a8:	f108 0602 	add.w	r6, r8, #2
 80182ac:	3e01      	subs	r6, #1
 80182ae:	4638      	mov	r0, r7
 80182b0:	612e      	str	r6, [r5, #16]
 80182b2:	4621      	mov	r1, r4
 80182b4:	f7ff fdbf 	bl	8017e36 <_Bfree>
 80182b8:	4628      	mov	r0, r5
 80182ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182be:	f842 0f04 	str.w	r0, [r2, #4]!
 80182c2:	3301      	adds	r3, #1
 80182c4:	e7c5      	b.n	8018252 <__lshift+0x4a>
 80182c6:	3904      	subs	r1, #4
 80182c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80182cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80182d0:	459c      	cmp	ip, r3
 80182d2:	d8f9      	bhi.n	80182c8 <__lshift+0xc0>
 80182d4:	e7ea      	b.n	80182ac <__lshift+0xa4>
 80182d6:	bf00      	nop
 80182d8:	0801cae6 	.word	0x0801cae6
 80182dc:	0801cbd4 	.word	0x0801cbd4

080182e0 <__mcmp>:
 80182e0:	b530      	push	{r4, r5, lr}
 80182e2:	6902      	ldr	r2, [r0, #16]
 80182e4:	690c      	ldr	r4, [r1, #16]
 80182e6:	1b12      	subs	r2, r2, r4
 80182e8:	d10e      	bne.n	8018308 <__mcmp+0x28>
 80182ea:	f100 0314 	add.w	r3, r0, #20
 80182ee:	3114      	adds	r1, #20
 80182f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80182f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80182f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80182fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018300:	42a5      	cmp	r5, r4
 8018302:	d003      	beq.n	801830c <__mcmp+0x2c>
 8018304:	d305      	bcc.n	8018312 <__mcmp+0x32>
 8018306:	2201      	movs	r2, #1
 8018308:	4610      	mov	r0, r2
 801830a:	bd30      	pop	{r4, r5, pc}
 801830c:	4283      	cmp	r3, r0
 801830e:	d3f3      	bcc.n	80182f8 <__mcmp+0x18>
 8018310:	e7fa      	b.n	8018308 <__mcmp+0x28>
 8018312:	f04f 32ff 	mov.w	r2, #4294967295
 8018316:	e7f7      	b.n	8018308 <__mcmp+0x28>

08018318 <__mdiff>:
 8018318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801831c:	460c      	mov	r4, r1
 801831e:	4606      	mov	r6, r0
 8018320:	4611      	mov	r1, r2
 8018322:	4620      	mov	r0, r4
 8018324:	4617      	mov	r7, r2
 8018326:	f7ff ffdb 	bl	80182e0 <__mcmp>
 801832a:	1e05      	subs	r5, r0, #0
 801832c:	d110      	bne.n	8018350 <__mdiff+0x38>
 801832e:	4629      	mov	r1, r5
 8018330:	4630      	mov	r0, r6
 8018332:	f7ff fd5b 	bl	8017dec <_Balloc>
 8018336:	b930      	cbnz	r0, 8018346 <__mdiff+0x2e>
 8018338:	4b39      	ldr	r3, [pc, #228]	; (8018420 <__mdiff+0x108>)
 801833a:	4602      	mov	r2, r0
 801833c:	f240 2132 	movw	r1, #562	; 0x232
 8018340:	4838      	ldr	r0, [pc, #224]	; (8018424 <__mdiff+0x10c>)
 8018342:	f001 f82d 	bl	80193a0 <__assert_func>
 8018346:	2301      	movs	r3, #1
 8018348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801834c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018350:	bfa4      	itt	ge
 8018352:	463b      	movge	r3, r7
 8018354:	4627      	movge	r7, r4
 8018356:	4630      	mov	r0, r6
 8018358:	6879      	ldr	r1, [r7, #4]
 801835a:	bfa6      	itte	ge
 801835c:	461c      	movge	r4, r3
 801835e:	2500      	movge	r5, #0
 8018360:	2501      	movlt	r5, #1
 8018362:	f7ff fd43 	bl	8017dec <_Balloc>
 8018366:	b920      	cbnz	r0, 8018372 <__mdiff+0x5a>
 8018368:	4b2d      	ldr	r3, [pc, #180]	; (8018420 <__mdiff+0x108>)
 801836a:	4602      	mov	r2, r0
 801836c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018370:	e7e6      	b.n	8018340 <__mdiff+0x28>
 8018372:	693e      	ldr	r6, [r7, #16]
 8018374:	60c5      	str	r5, [r0, #12]
 8018376:	6925      	ldr	r5, [r4, #16]
 8018378:	f107 0114 	add.w	r1, r7, #20
 801837c:	f104 0914 	add.w	r9, r4, #20
 8018380:	f100 0e14 	add.w	lr, r0, #20
 8018384:	f107 0210 	add.w	r2, r7, #16
 8018388:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801838c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018390:	46f2      	mov	sl, lr
 8018392:	2700      	movs	r7, #0
 8018394:	f859 3b04 	ldr.w	r3, [r9], #4
 8018398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801839c:	fa1f f883 	uxth.w	r8, r3
 80183a0:	fa17 f78b 	uxtah	r7, r7, fp
 80183a4:	0c1b      	lsrs	r3, r3, #16
 80183a6:	eba7 0808 	sub.w	r8, r7, r8
 80183aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80183ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80183b2:	fa1f f888 	uxth.w	r8, r8
 80183b6:	141f      	asrs	r7, r3, #16
 80183b8:	454d      	cmp	r5, r9
 80183ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80183be:	f84a 3b04 	str.w	r3, [sl], #4
 80183c2:	d8e7      	bhi.n	8018394 <__mdiff+0x7c>
 80183c4:	1b2b      	subs	r3, r5, r4
 80183c6:	3b15      	subs	r3, #21
 80183c8:	f023 0303 	bic.w	r3, r3, #3
 80183cc:	3304      	adds	r3, #4
 80183ce:	3415      	adds	r4, #21
 80183d0:	42a5      	cmp	r5, r4
 80183d2:	bf38      	it	cc
 80183d4:	2304      	movcc	r3, #4
 80183d6:	4419      	add	r1, r3
 80183d8:	4473      	add	r3, lr
 80183da:	469e      	mov	lr, r3
 80183dc:	460d      	mov	r5, r1
 80183de:	4565      	cmp	r5, ip
 80183e0:	d30e      	bcc.n	8018400 <__mdiff+0xe8>
 80183e2:	f10c 0203 	add.w	r2, ip, #3
 80183e6:	1a52      	subs	r2, r2, r1
 80183e8:	f022 0203 	bic.w	r2, r2, #3
 80183ec:	3903      	subs	r1, #3
 80183ee:	458c      	cmp	ip, r1
 80183f0:	bf38      	it	cc
 80183f2:	2200      	movcc	r2, #0
 80183f4:	441a      	add	r2, r3
 80183f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80183fa:	b17b      	cbz	r3, 801841c <__mdiff+0x104>
 80183fc:	6106      	str	r6, [r0, #16]
 80183fe:	e7a5      	b.n	801834c <__mdiff+0x34>
 8018400:	f855 8b04 	ldr.w	r8, [r5], #4
 8018404:	fa17 f488 	uxtah	r4, r7, r8
 8018408:	1422      	asrs	r2, r4, #16
 801840a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801840e:	b2a4      	uxth	r4, r4
 8018410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018414:	f84e 4b04 	str.w	r4, [lr], #4
 8018418:	1417      	asrs	r7, r2, #16
 801841a:	e7e0      	b.n	80183de <__mdiff+0xc6>
 801841c:	3e01      	subs	r6, #1
 801841e:	e7ea      	b.n	80183f6 <__mdiff+0xde>
 8018420:	0801cae6 	.word	0x0801cae6
 8018424:	0801cbd4 	.word	0x0801cbd4

08018428 <__ulp>:
 8018428:	b082      	sub	sp, #8
 801842a:	ed8d 0b00 	vstr	d0, [sp]
 801842e:	9b01      	ldr	r3, [sp, #4]
 8018430:	4912      	ldr	r1, [pc, #72]	; (801847c <__ulp+0x54>)
 8018432:	4019      	ands	r1, r3
 8018434:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018438:	2900      	cmp	r1, #0
 801843a:	dd05      	ble.n	8018448 <__ulp+0x20>
 801843c:	2200      	movs	r2, #0
 801843e:	460b      	mov	r3, r1
 8018440:	ec43 2b10 	vmov	d0, r2, r3
 8018444:	b002      	add	sp, #8
 8018446:	4770      	bx	lr
 8018448:	4249      	negs	r1, r1
 801844a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801844e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018452:	f04f 0200 	mov.w	r2, #0
 8018456:	f04f 0300 	mov.w	r3, #0
 801845a:	da04      	bge.n	8018466 <__ulp+0x3e>
 801845c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018460:	fa41 f300 	asr.w	r3, r1, r0
 8018464:	e7ec      	b.n	8018440 <__ulp+0x18>
 8018466:	f1a0 0114 	sub.w	r1, r0, #20
 801846a:	291e      	cmp	r1, #30
 801846c:	bfda      	itte	le
 801846e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018472:	fa20 f101 	lsrle.w	r1, r0, r1
 8018476:	2101      	movgt	r1, #1
 8018478:	460a      	mov	r2, r1
 801847a:	e7e1      	b.n	8018440 <__ulp+0x18>
 801847c:	7ff00000 	.word	0x7ff00000

08018480 <__b2d>:
 8018480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018482:	6905      	ldr	r5, [r0, #16]
 8018484:	f100 0714 	add.w	r7, r0, #20
 8018488:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801848c:	1f2e      	subs	r6, r5, #4
 801848e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018492:	4620      	mov	r0, r4
 8018494:	f7ff fd6c 	bl	8017f70 <__hi0bits>
 8018498:	f1c0 0320 	rsb	r3, r0, #32
 801849c:	280a      	cmp	r0, #10
 801849e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801851c <__b2d+0x9c>
 80184a2:	600b      	str	r3, [r1, #0]
 80184a4:	dc14      	bgt.n	80184d0 <__b2d+0x50>
 80184a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80184aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80184ae:	42b7      	cmp	r7, r6
 80184b0:	ea41 030c 	orr.w	r3, r1, ip
 80184b4:	bf34      	ite	cc
 80184b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80184ba:	2100      	movcs	r1, #0
 80184bc:	3015      	adds	r0, #21
 80184be:	fa04 f000 	lsl.w	r0, r4, r0
 80184c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80184c6:	ea40 0201 	orr.w	r2, r0, r1
 80184ca:	ec43 2b10 	vmov	d0, r2, r3
 80184ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184d0:	42b7      	cmp	r7, r6
 80184d2:	bf3a      	itte	cc
 80184d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80184d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80184dc:	2100      	movcs	r1, #0
 80184de:	380b      	subs	r0, #11
 80184e0:	d017      	beq.n	8018512 <__b2d+0x92>
 80184e2:	f1c0 0c20 	rsb	ip, r0, #32
 80184e6:	fa04 f500 	lsl.w	r5, r4, r0
 80184ea:	42be      	cmp	r6, r7
 80184ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80184f0:	ea45 0504 	orr.w	r5, r5, r4
 80184f4:	bf8c      	ite	hi
 80184f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80184fa:	2400      	movls	r4, #0
 80184fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018500:	fa01 f000 	lsl.w	r0, r1, r0
 8018504:	fa24 f40c 	lsr.w	r4, r4, ip
 8018508:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801850c:	ea40 0204 	orr.w	r2, r0, r4
 8018510:	e7db      	b.n	80184ca <__b2d+0x4a>
 8018512:	ea44 030c 	orr.w	r3, r4, ip
 8018516:	460a      	mov	r2, r1
 8018518:	e7d7      	b.n	80184ca <__b2d+0x4a>
 801851a:	bf00      	nop
 801851c:	3ff00000 	.word	0x3ff00000

08018520 <__d2b>:
 8018520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018524:	4689      	mov	r9, r1
 8018526:	2101      	movs	r1, #1
 8018528:	ec57 6b10 	vmov	r6, r7, d0
 801852c:	4690      	mov	r8, r2
 801852e:	f7ff fc5d 	bl	8017dec <_Balloc>
 8018532:	4604      	mov	r4, r0
 8018534:	b930      	cbnz	r0, 8018544 <__d2b+0x24>
 8018536:	4602      	mov	r2, r0
 8018538:	4b25      	ldr	r3, [pc, #148]	; (80185d0 <__d2b+0xb0>)
 801853a:	4826      	ldr	r0, [pc, #152]	; (80185d4 <__d2b+0xb4>)
 801853c:	f240 310a 	movw	r1, #778	; 0x30a
 8018540:	f000 ff2e 	bl	80193a0 <__assert_func>
 8018544:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801854c:	bb35      	cbnz	r5, 801859c <__d2b+0x7c>
 801854e:	2e00      	cmp	r6, #0
 8018550:	9301      	str	r3, [sp, #4]
 8018552:	d028      	beq.n	80185a6 <__d2b+0x86>
 8018554:	4668      	mov	r0, sp
 8018556:	9600      	str	r6, [sp, #0]
 8018558:	f7ff fd2a 	bl	8017fb0 <__lo0bits>
 801855c:	9900      	ldr	r1, [sp, #0]
 801855e:	b300      	cbz	r0, 80185a2 <__d2b+0x82>
 8018560:	9a01      	ldr	r2, [sp, #4]
 8018562:	f1c0 0320 	rsb	r3, r0, #32
 8018566:	fa02 f303 	lsl.w	r3, r2, r3
 801856a:	430b      	orrs	r3, r1
 801856c:	40c2      	lsrs	r2, r0
 801856e:	6163      	str	r3, [r4, #20]
 8018570:	9201      	str	r2, [sp, #4]
 8018572:	9b01      	ldr	r3, [sp, #4]
 8018574:	61a3      	str	r3, [r4, #24]
 8018576:	2b00      	cmp	r3, #0
 8018578:	bf14      	ite	ne
 801857a:	2202      	movne	r2, #2
 801857c:	2201      	moveq	r2, #1
 801857e:	6122      	str	r2, [r4, #16]
 8018580:	b1d5      	cbz	r5, 80185b8 <__d2b+0x98>
 8018582:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018586:	4405      	add	r5, r0
 8018588:	f8c9 5000 	str.w	r5, [r9]
 801858c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018590:	f8c8 0000 	str.w	r0, [r8]
 8018594:	4620      	mov	r0, r4
 8018596:	b003      	add	sp, #12
 8018598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801859c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80185a0:	e7d5      	b.n	801854e <__d2b+0x2e>
 80185a2:	6161      	str	r1, [r4, #20]
 80185a4:	e7e5      	b.n	8018572 <__d2b+0x52>
 80185a6:	a801      	add	r0, sp, #4
 80185a8:	f7ff fd02 	bl	8017fb0 <__lo0bits>
 80185ac:	9b01      	ldr	r3, [sp, #4]
 80185ae:	6163      	str	r3, [r4, #20]
 80185b0:	2201      	movs	r2, #1
 80185b2:	6122      	str	r2, [r4, #16]
 80185b4:	3020      	adds	r0, #32
 80185b6:	e7e3      	b.n	8018580 <__d2b+0x60>
 80185b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80185bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80185c0:	f8c9 0000 	str.w	r0, [r9]
 80185c4:	6918      	ldr	r0, [r3, #16]
 80185c6:	f7ff fcd3 	bl	8017f70 <__hi0bits>
 80185ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80185ce:	e7df      	b.n	8018590 <__d2b+0x70>
 80185d0:	0801cae6 	.word	0x0801cae6
 80185d4:	0801cbd4 	.word	0x0801cbd4

080185d8 <__ratio>:
 80185d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185dc:	4688      	mov	r8, r1
 80185de:	4669      	mov	r1, sp
 80185e0:	4681      	mov	r9, r0
 80185e2:	f7ff ff4d 	bl	8018480 <__b2d>
 80185e6:	a901      	add	r1, sp, #4
 80185e8:	4640      	mov	r0, r8
 80185ea:	ec55 4b10 	vmov	r4, r5, d0
 80185ee:	f7ff ff47 	bl	8018480 <__b2d>
 80185f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80185f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80185fa:	eba3 0c02 	sub.w	ip, r3, r2
 80185fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018602:	1a9b      	subs	r3, r3, r2
 8018604:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018608:	ec51 0b10 	vmov	r0, r1, d0
 801860c:	2b00      	cmp	r3, #0
 801860e:	bfd6      	itet	le
 8018610:	460a      	movle	r2, r1
 8018612:	462a      	movgt	r2, r5
 8018614:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018618:	468b      	mov	fp, r1
 801861a:	462f      	mov	r7, r5
 801861c:	bfd4      	ite	le
 801861e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018622:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018626:	4620      	mov	r0, r4
 8018628:	ee10 2a10 	vmov	r2, s0
 801862c:	465b      	mov	r3, fp
 801862e:	4639      	mov	r1, r7
 8018630:	f7e8 f92c 	bl	800088c <__aeabi_ddiv>
 8018634:	ec41 0b10 	vmov	d0, r0, r1
 8018638:	b003      	add	sp, #12
 801863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801863e <__copybits>:
 801863e:	3901      	subs	r1, #1
 8018640:	b570      	push	{r4, r5, r6, lr}
 8018642:	1149      	asrs	r1, r1, #5
 8018644:	6914      	ldr	r4, [r2, #16]
 8018646:	3101      	adds	r1, #1
 8018648:	f102 0314 	add.w	r3, r2, #20
 801864c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018650:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018654:	1f05      	subs	r5, r0, #4
 8018656:	42a3      	cmp	r3, r4
 8018658:	d30c      	bcc.n	8018674 <__copybits+0x36>
 801865a:	1aa3      	subs	r3, r4, r2
 801865c:	3b11      	subs	r3, #17
 801865e:	f023 0303 	bic.w	r3, r3, #3
 8018662:	3211      	adds	r2, #17
 8018664:	42a2      	cmp	r2, r4
 8018666:	bf88      	it	hi
 8018668:	2300      	movhi	r3, #0
 801866a:	4418      	add	r0, r3
 801866c:	2300      	movs	r3, #0
 801866e:	4288      	cmp	r0, r1
 8018670:	d305      	bcc.n	801867e <__copybits+0x40>
 8018672:	bd70      	pop	{r4, r5, r6, pc}
 8018674:	f853 6b04 	ldr.w	r6, [r3], #4
 8018678:	f845 6f04 	str.w	r6, [r5, #4]!
 801867c:	e7eb      	b.n	8018656 <__copybits+0x18>
 801867e:	f840 3b04 	str.w	r3, [r0], #4
 8018682:	e7f4      	b.n	801866e <__copybits+0x30>

08018684 <__any_on>:
 8018684:	f100 0214 	add.w	r2, r0, #20
 8018688:	6900      	ldr	r0, [r0, #16]
 801868a:	114b      	asrs	r3, r1, #5
 801868c:	4298      	cmp	r0, r3
 801868e:	b510      	push	{r4, lr}
 8018690:	db11      	blt.n	80186b6 <__any_on+0x32>
 8018692:	dd0a      	ble.n	80186aa <__any_on+0x26>
 8018694:	f011 011f 	ands.w	r1, r1, #31
 8018698:	d007      	beq.n	80186aa <__any_on+0x26>
 801869a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801869e:	fa24 f001 	lsr.w	r0, r4, r1
 80186a2:	fa00 f101 	lsl.w	r1, r0, r1
 80186a6:	428c      	cmp	r4, r1
 80186a8:	d10b      	bne.n	80186c2 <__any_on+0x3e>
 80186aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80186ae:	4293      	cmp	r3, r2
 80186b0:	d803      	bhi.n	80186ba <__any_on+0x36>
 80186b2:	2000      	movs	r0, #0
 80186b4:	bd10      	pop	{r4, pc}
 80186b6:	4603      	mov	r3, r0
 80186b8:	e7f7      	b.n	80186aa <__any_on+0x26>
 80186ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80186be:	2900      	cmp	r1, #0
 80186c0:	d0f5      	beq.n	80186ae <__any_on+0x2a>
 80186c2:	2001      	movs	r0, #1
 80186c4:	e7f6      	b.n	80186b4 <__any_on+0x30>
	...

080186c8 <frexp>:
 80186c8:	b570      	push	{r4, r5, r6, lr}
 80186ca:	2100      	movs	r1, #0
 80186cc:	ec55 4b10 	vmov	r4, r5, d0
 80186d0:	6001      	str	r1, [r0, #0]
 80186d2:	4916      	ldr	r1, [pc, #88]	; (801872c <frexp+0x64>)
 80186d4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80186d8:	428a      	cmp	r2, r1
 80186da:	4606      	mov	r6, r0
 80186dc:	462b      	mov	r3, r5
 80186de:	dc22      	bgt.n	8018726 <frexp+0x5e>
 80186e0:	ee10 1a10 	vmov	r1, s0
 80186e4:	4311      	orrs	r1, r2
 80186e6:	d01e      	beq.n	8018726 <frexp+0x5e>
 80186e8:	4911      	ldr	r1, [pc, #68]	; (8018730 <frexp+0x68>)
 80186ea:	4029      	ands	r1, r5
 80186ec:	b969      	cbnz	r1, 801870a <frexp+0x42>
 80186ee:	4b11      	ldr	r3, [pc, #68]	; (8018734 <frexp+0x6c>)
 80186f0:	2200      	movs	r2, #0
 80186f2:	ee10 0a10 	vmov	r0, s0
 80186f6:	4629      	mov	r1, r5
 80186f8:	f7e7 ff9e 	bl	8000638 <__aeabi_dmul>
 80186fc:	460b      	mov	r3, r1
 80186fe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018702:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018706:	4604      	mov	r4, r0
 8018708:	6031      	str	r1, [r6, #0]
 801870a:	6831      	ldr	r1, [r6, #0]
 801870c:	1512      	asrs	r2, r2, #20
 801870e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018712:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018716:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801871a:	440a      	add	r2, r1
 801871c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018720:	6032      	str	r2, [r6, #0]
 8018722:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018726:	ec45 4b10 	vmov	d0, r4, r5
 801872a:	bd70      	pop	{r4, r5, r6, pc}
 801872c:	7fefffff 	.word	0x7fefffff
 8018730:	7ff00000 	.word	0x7ff00000
 8018734:	43500000 	.word	0x43500000

08018738 <nan>:
 8018738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018740 <nan+0x8>
 801873c:	4770      	bx	lr
 801873e:	bf00      	nop
 8018740:	00000000 	.word	0x00000000
 8018744:	7ff80000 	.word	0x7ff80000

08018748 <__sread>:
 8018748:	b510      	push	{r4, lr}
 801874a:	460c      	mov	r4, r1
 801874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018750:	f001 f8d6 	bl	8019900 <_read_r>
 8018754:	2800      	cmp	r0, #0
 8018756:	bfab      	itete	ge
 8018758:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801875a:	89a3      	ldrhlt	r3, [r4, #12]
 801875c:	181b      	addge	r3, r3, r0
 801875e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018762:	bfac      	ite	ge
 8018764:	6523      	strge	r3, [r4, #80]	; 0x50
 8018766:	81a3      	strhlt	r3, [r4, #12]
 8018768:	bd10      	pop	{r4, pc}

0801876a <__swrite>:
 801876a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801876e:	461f      	mov	r7, r3
 8018770:	898b      	ldrh	r3, [r1, #12]
 8018772:	05db      	lsls	r3, r3, #23
 8018774:	4605      	mov	r5, r0
 8018776:	460c      	mov	r4, r1
 8018778:	4616      	mov	r6, r2
 801877a:	d505      	bpl.n	8018788 <__swrite+0x1e>
 801877c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018780:	2302      	movs	r3, #2
 8018782:	2200      	movs	r2, #0
 8018784:	f001 f8aa 	bl	80198dc <_lseek_r>
 8018788:	89a3      	ldrh	r3, [r4, #12]
 801878a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801878e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018792:	81a3      	strh	r3, [r4, #12]
 8018794:	4632      	mov	r2, r6
 8018796:	463b      	mov	r3, r7
 8018798:	4628      	mov	r0, r5
 801879a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801879e:	f000 bdad 	b.w	80192fc <_write_r>

080187a2 <__sseek>:
 80187a2:	b510      	push	{r4, lr}
 80187a4:	460c      	mov	r4, r1
 80187a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187aa:	f001 f897 	bl	80198dc <_lseek_r>
 80187ae:	1c43      	adds	r3, r0, #1
 80187b0:	89a3      	ldrh	r3, [r4, #12]
 80187b2:	bf15      	itete	ne
 80187b4:	6520      	strne	r0, [r4, #80]	; 0x50
 80187b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80187ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80187be:	81a3      	strheq	r3, [r4, #12]
 80187c0:	bf18      	it	ne
 80187c2:	81a3      	strhne	r3, [r4, #12]
 80187c4:	bd10      	pop	{r4, pc}

080187c6 <__sclose>:
 80187c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187ca:	f000 be35 	b.w	8019438 <_close_r>

080187ce <strncpy>:
 80187ce:	b510      	push	{r4, lr}
 80187d0:	3901      	subs	r1, #1
 80187d2:	4603      	mov	r3, r0
 80187d4:	b132      	cbz	r2, 80187e4 <strncpy+0x16>
 80187d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80187da:	f803 4b01 	strb.w	r4, [r3], #1
 80187de:	3a01      	subs	r2, #1
 80187e0:	2c00      	cmp	r4, #0
 80187e2:	d1f7      	bne.n	80187d4 <strncpy+0x6>
 80187e4:	441a      	add	r2, r3
 80187e6:	2100      	movs	r1, #0
 80187e8:	4293      	cmp	r3, r2
 80187ea:	d100      	bne.n	80187ee <strncpy+0x20>
 80187ec:	bd10      	pop	{r4, pc}
 80187ee:	f803 1b01 	strb.w	r1, [r3], #1
 80187f2:	e7f9      	b.n	80187e8 <strncpy+0x1a>

080187f4 <__ssprint_r>:
 80187f4:	6893      	ldr	r3, [r2, #8]
 80187f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187fa:	4680      	mov	r8, r0
 80187fc:	460c      	mov	r4, r1
 80187fe:	4617      	mov	r7, r2
 8018800:	2b00      	cmp	r3, #0
 8018802:	d061      	beq.n	80188c8 <__ssprint_r+0xd4>
 8018804:	2300      	movs	r3, #0
 8018806:	f8d2 a000 	ldr.w	sl, [r2]
 801880a:	9301      	str	r3, [sp, #4]
 801880c:	469b      	mov	fp, r3
 801880e:	f1bb 0f00 	cmp.w	fp, #0
 8018812:	d02b      	beq.n	801886c <__ssprint_r+0x78>
 8018814:	68a6      	ldr	r6, [r4, #8]
 8018816:	45b3      	cmp	fp, r6
 8018818:	d342      	bcc.n	80188a0 <__ssprint_r+0xac>
 801881a:	89a2      	ldrh	r2, [r4, #12]
 801881c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018820:	d03e      	beq.n	80188a0 <__ssprint_r+0xac>
 8018822:	6825      	ldr	r5, [r4, #0]
 8018824:	6921      	ldr	r1, [r4, #16]
 8018826:	eba5 0901 	sub.w	r9, r5, r1
 801882a:	6965      	ldr	r5, [r4, #20]
 801882c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018834:	f109 0001 	add.w	r0, r9, #1
 8018838:	106d      	asrs	r5, r5, #1
 801883a:	4458      	add	r0, fp
 801883c:	4285      	cmp	r5, r0
 801883e:	bf38      	it	cc
 8018840:	4605      	movcc	r5, r0
 8018842:	0553      	lsls	r3, r2, #21
 8018844:	d545      	bpl.n	80188d2 <__ssprint_r+0xde>
 8018846:	4629      	mov	r1, r5
 8018848:	4640      	mov	r0, r8
 801884a:	f7f9 feb7 	bl	80125bc <_malloc_r>
 801884e:	4606      	mov	r6, r0
 8018850:	b9a0      	cbnz	r0, 801887c <__ssprint_r+0x88>
 8018852:	230c      	movs	r3, #12
 8018854:	f8c8 3000 	str.w	r3, [r8]
 8018858:	89a3      	ldrh	r3, [r4, #12]
 801885a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801885e:	81a3      	strh	r3, [r4, #12]
 8018860:	2300      	movs	r3, #0
 8018862:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8018866:	f04f 30ff 	mov.w	r0, #4294967295
 801886a:	e02f      	b.n	80188cc <__ssprint_r+0xd8>
 801886c:	f8da 3000 	ldr.w	r3, [sl]
 8018870:	f8da b004 	ldr.w	fp, [sl, #4]
 8018874:	9301      	str	r3, [sp, #4]
 8018876:	f10a 0a08 	add.w	sl, sl, #8
 801887a:	e7c8      	b.n	801880e <__ssprint_r+0x1a>
 801887c:	464a      	mov	r2, r9
 801887e:	6921      	ldr	r1, [r4, #16]
 8018880:	f7fa f8ec 	bl	8012a5c <memcpy>
 8018884:	89a2      	ldrh	r2, [r4, #12]
 8018886:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801888a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801888e:	81a2      	strh	r2, [r4, #12]
 8018890:	6126      	str	r6, [r4, #16]
 8018892:	6165      	str	r5, [r4, #20]
 8018894:	444e      	add	r6, r9
 8018896:	eba5 0509 	sub.w	r5, r5, r9
 801889a:	6026      	str	r6, [r4, #0]
 801889c:	60a5      	str	r5, [r4, #8]
 801889e:	465e      	mov	r6, fp
 80188a0:	455e      	cmp	r6, fp
 80188a2:	bf28      	it	cs
 80188a4:	465e      	movcs	r6, fp
 80188a6:	4632      	mov	r2, r6
 80188a8:	9901      	ldr	r1, [sp, #4]
 80188aa:	6820      	ldr	r0, [r4, #0]
 80188ac:	f7fa f8e4 	bl	8012a78 <memmove>
 80188b0:	68a2      	ldr	r2, [r4, #8]
 80188b2:	1b92      	subs	r2, r2, r6
 80188b4:	60a2      	str	r2, [r4, #8]
 80188b6:	6822      	ldr	r2, [r4, #0]
 80188b8:	4432      	add	r2, r6
 80188ba:	6022      	str	r2, [r4, #0]
 80188bc:	68ba      	ldr	r2, [r7, #8]
 80188be:	eba2 030b 	sub.w	r3, r2, fp
 80188c2:	60bb      	str	r3, [r7, #8]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d1d1      	bne.n	801886c <__ssprint_r+0x78>
 80188c8:	2000      	movs	r0, #0
 80188ca:	6078      	str	r0, [r7, #4]
 80188cc:	b003      	add	sp, #12
 80188ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188d2:	462a      	mov	r2, r5
 80188d4:	4640      	mov	r0, r8
 80188d6:	f001 f825 	bl	8019924 <_realloc_r>
 80188da:	4606      	mov	r6, r0
 80188dc:	2800      	cmp	r0, #0
 80188de:	d1d7      	bne.n	8018890 <__ssprint_r+0x9c>
 80188e0:	6921      	ldr	r1, [r4, #16]
 80188e2:	4640      	mov	r0, r8
 80188e4:	f7fe fda8 	bl	8017438 <_free_r>
 80188e8:	e7b3      	b.n	8018852 <__ssprint_r+0x5e>

080188ea <__sprint_r>:
 80188ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ee:	6893      	ldr	r3, [r2, #8]
 80188f0:	4680      	mov	r8, r0
 80188f2:	460f      	mov	r7, r1
 80188f4:	4614      	mov	r4, r2
 80188f6:	b91b      	cbnz	r3, 8018900 <__sprint_r+0x16>
 80188f8:	6053      	str	r3, [r2, #4]
 80188fa:	4618      	mov	r0, r3
 80188fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018900:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018902:	049d      	lsls	r5, r3, #18
 8018904:	d520      	bpl.n	8018948 <__sprint_r+0x5e>
 8018906:	6815      	ldr	r5, [r2, #0]
 8018908:	3508      	adds	r5, #8
 801890a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801890e:	f04f 0900 	mov.w	r9, #0
 8018912:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8018916:	45ca      	cmp	sl, r9
 8018918:	dc0b      	bgt.n	8018932 <__sprint_r+0x48>
 801891a:	68a3      	ldr	r3, [r4, #8]
 801891c:	f026 0003 	bic.w	r0, r6, #3
 8018920:	1a18      	subs	r0, r3, r0
 8018922:	60a0      	str	r0, [r4, #8]
 8018924:	3508      	adds	r5, #8
 8018926:	2800      	cmp	r0, #0
 8018928:	d1ef      	bne.n	801890a <__sprint_r+0x20>
 801892a:	2300      	movs	r3, #0
 801892c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8018930:	e7e4      	b.n	80188fc <__sprint_r+0x12>
 8018932:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8018936:	463a      	mov	r2, r7
 8018938:	4640      	mov	r0, r8
 801893a:	f000 fe38 	bl	80195ae <_fputwc_r>
 801893e:	1c43      	adds	r3, r0, #1
 8018940:	d0f3      	beq.n	801892a <__sprint_r+0x40>
 8018942:	f109 0901 	add.w	r9, r9, #1
 8018946:	e7e6      	b.n	8018916 <__sprint_r+0x2c>
 8018948:	f000 fe6e 	bl	8019628 <__sfvwrite_r>
 801894c:	e7ed      	b.n	801892a <__sprint_r+0x40>
	...

08018950 <_vfiprintf_r>:
 8018950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018954:	ed2d 8b02 	vpush	{d8}
 8018958:	b0b9      	sub	sp, #228	; 0xe4
 801895a:	460f      	mov	r7, r1
 801895c:	9201      	str	r2, [sp, #4]
 801895e:	461d      	mov	r5, r3
 8018960:	461c      	mov	r4, r3
 8018962:	4681      	mov	r9, r0
 8018964:	b118      	cbz	r0, 801896e <_vfiprintf_r+0x1e>
 8018966:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018968:	b90b      	cbnz	r3, 801896e <_vfiprintf_r+0x1e>
 801896a:	f7fe fcd5 	bl	8017318 <__sinit>
 801896e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018970:	07d8      	lsls	r0, r3, #31
 8018972:	d405      	bmi.n	8018980 <_vfiprintf_r+0x30>
 8018974:	89bb      	ldrh	r3, [r7, #12]
 8018976:	0599      	lsls	r1, r3, #22
 8018978:	d402      	bmi.n	8018980 <_vfiprintf_r+0x30>
 801897a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801897c:	f7ff f9b6 	bl	8017cec <__retarget_lock_acquire_recursive>
 8018980:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018984:	049a      	lsls	r2, r3, #18
 8018986:	d406      	bmi.n	8018996 <_vfiprintf_r+0x46>
 8018988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801898c:	81bb      	strh	r3, [r7, #12]
 801898e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018994:	667b      	str	r3, [r7, #100]	; 0x64
 8018996:	89bb      	ldrh	r3, [r7, #12]
 8018998:	071e      	lsls	r6, r3, #28
 801899a:	d501      	bpl.n	80189a0 <_vfiprintf_r+0x50>
 801899c:	693b      	ldr	r3, [r7, #16]
 801899e:	b9bb      	cbnz	r3, 80189d0 <_vfiprintf_r+0x80>
 80189a0:	4639      	mov	r1, r7
 80189a2:	4648      	mov	r0, r9
 80189a4:	f7fd fcee 	bl	8016384 <__swsetup_r>
 80189a8:	b190      	cbz	r0, 80189d0 <_vfiprintf_r+0x80>
 80189aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80189ac:	07d8      	lsls	r0, r3, #31
 80189ae:	d508      	bpl.n	80189c2 <_vfiprintf_r+0x72>
 80189b0:	f04f 33ff 	mov.w	r3, #4294967295
 80189b4:	9302      	str	r3, [sp, #8]
 80189b6:	9802      	ldr	r0, [sp, #8]
 80189b8:	b039      	add	sp, #228	; 0xe4
 80189ba:	ecbd 8b02 	vpop	{d8}
 80189be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c2:	89bb      	ldrh	r3, [r7, #12]
 80189c4:	0599      	lsls	r1, r3, #22
 80189c6:	d4f3      	bmi.n	80189b0 <_vfiprintf_r+0x60>
 80189c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80189ca:	f7ff f990 	bl	8017cee <__retarget_lock_release_recursive>
 80189ce:	e7ef      	b.n	80189b0 <_vfiprintf_r+0x60>
 80189d0:	89bb      	ldrh	r3, [r7, #12]
 80189d2:	f003 021a 	and.w	r2, r3, #26
 80189d6:	2a0a      	cmp	r2, #10
 80189d8:	d113      	bne.n	8018a02 <_vfiprintf_r+0xb2>
 80189da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80189de:	2a00      	cmp	r2, #0
 80189e0:	db0f      	blt.n	8018a02 <_vfiprintf_r+0xb2>
 80189e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80189e4:	07d2      	lsls	r2, r2, #31
 80189e6:	d404      	bmi.n	80189f2 <_vfiprintf_r+0xa2>
 80189e8:	059e      	lsls	r6, r3, #22
 80189ea:	d402      	bmi.n	80189f2 <_vfiprintf_r+0xa2>
 80189ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80189ee:	f7ff f97e 	bl	8017cee <__retarget_lock_release_recursive>
 80189f2:	9a01      	ldr	r2, [sp, #4]
 80189f4:	462b      	mov	r3, r5
 80189f6:	4639      	mov	r1, r7
 80189f8:	4648      	mov	r0, r9
 80189fa:	f000 fc31 	bl	8019260 <__sbprintf>
 80189fe:	9002      	str	r0, [sp, #8]
 8018a00:	e7d9      	b.n	80189b6 <_vfiprintf_r+0x66>
 8018a02:	2300      	movs	r3, #0
 8018a04:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8018a08:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018a0c:	ae0f      	add	r6, sp, #60	; 0x3c
 8018a0e:	ee08 3a10 	vmov	s16, r3
 8018a12:	960c      	str	r6, [sp, #48]	; 0x30
 8018a14:	9307      	str	r3, [sp, #28]
 8018a16:	9302      	str	r3, [sp, #8]
 8018a18:	9b01      	ldr	r3, [sp, #4]
 8018a1a:	461d      	mov	r5, r3
 8018a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a20:	b10a      	cbz	r2, 8018a26 <_vfiprintf_r+0xd6>
 8018a22:	2a25      	cmp	r2, #37	; 0x25
 8018a24:	d1f9      	bne.n	8018a1a <_vfiprintf_r+0xca>
 8018a26:	9b01      	ldr	r3, [sp, #4]
 8018a28:	ebb5 0803 	subs.w	r8, r5, r3
 8018a2c:	d00d      	beq.n	8018a4a <_vfiprintf_r+0xfa>
 8018a2e:	e9c6 3800 	strd	r3, r8, [r6]
 8018a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a34:	4443      	add	r3, r8
 8018a36:	930e      	str	r3, [sp, #56]	; 0x38
 8018a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a3a:	3301      	adds	r3, #1
 8018a3c:	2b07      	cmp	r3, #7
 8018a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8018a40:	dc75      	bgt.n	8018b2e <_vfiprintf_r+0x1de>
 8018a42:	3608      	adds	r6, #8
 8018a44:	9b02      	ldr	r3, [sp, #8]
 8018a46:	4443      	add	r3, r8
 8018a48:	9302      	str	r3, [sp, #8]
 8018a4a:	782b      	ldrb	r3, [r5, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	f000 83c8 	beq.w	80191e2 <_vfiprintf_r+0x892>
 8018a52:	2300      	movs	r3, #0
 8018a54:	f04f 31ff 	mov.w	r1, #4294967295
 8018a58:	1c6a      	adds	r2, r5, #1
 8018a5a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018a5e:	9100      	str	r1, [sp, #0]
 8018a60:	9303      	str	r3, [sp, #12]
 8018a62:	469a      	mov	sl, r3
 8018a64:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018a68:	9201      	str	r2, [sp, #4]
 8018a6a:	f1a3 0220 	sub.w	r2, r3, #32
 8018a6e:	2a5a      	cmp	r2, #90	; 0x5a
 8018a70:	f200 8310 	bhi.w	8019094 <_vfiprintf_r+0x744>
 8018a74:	e8df f012 	tbh	[pc, r2, lsl #1]
 8018a78:	030e0099 	.word	0x030e0099
 8018a7c:	00a1030e 	.word	0x00a1030e
 8018a80:	030e030e 	.word	0x030e030e
 8018a84:	0080030e 	.word	0x0080030e
 8018a88:	030e030e 	.word	0x030e030e
 8018a8c:	00ae00a4 	.word	0x00ae00a4
 8018a90:	00ab030e 	.word	0x00ab030e
 8018a94:	030e00b0 	.word	0x030e00b0
 8018a98:	00ce00cb 	.word	0x00ce00cb
 8018a9c:	00ce00ce 	.word	0x00ce00ce
 8018aa0:	00ce00ce 	.word	0x00ce00ce
 8018aa4:	00ce00ce 	.word	0x00ce00ce
 8018aa8:	00ce00ce 	.word	0x00ce00ce
 8018aac:	030e030e 	.word	0x030e030e
 8018ab0:	030e030e 	.word	0x030e030e
 8018ab4:	030e030e 	.word	0x030e030e
 8018ab8:	030e030e 	.word	0x030e030e
 8018abc:	00f8030e 	.word	0x00f8030e
 8018ac0:	030e0106 	.word	0x030e0106
 8018ac4:	030e030e 	.word	0x030e030e
 8018ac8:	030e030e 	.word	0x030e030e
 8018acc:	030e030e 	.word	0x030e030e
 8018ad0:	030e030e 	.word	0x030e030e
 8018ad4:	014d030e 	.word	0x014d030e
 8018ad8:	030e030e 	.word	0x030e030e
 8018adc:	0192030e 	.word	0x0192030e
 8018ae0:	0270030e 	.word	0x0270030e
 8018ae4:	030e030e 	.word	0x030e030e
 8018ae8:	030e028e 	.word	0x030e028e
 8018aec:	030e030e 	.word	0x030e030e
 8018af0:	030e030e 	.word	0x030e030e
 8018af4:	030e030e 	.word	0x030e030e
 8018af8:	030e030e 	.word	0x030e030e
 8018afc:	00f8030e 	.word	0x00f8030e
 8018b00:	030e0108 	.word	0x030e0108
 8018b04:	030e030e 	.word	0x030e030e
 8018b08:	010800de 	.word	0x010800de
 8018b0c:	030e00f2 	.word	0x030e00f2
 8018b10:	030e00eb 	.word	0x030e00eb
 8018b14:	014f0130 	.word	0x014f0130
 8018b18:	00f20182 	.word	0x00f20182
 8018b1c:	0192030e 	.word	0x0192030e
 8018b20:	02720097 	.word	0x02720097
 8018b24:	030e030e 	.word	0x030e030e
 8018b28:	030e0065 	.word	0x030e0065
 8018b2c:	0097      	.short	0x0097
 8018b2e:	aa0c      	add	r2, sp, #48	; 0x30
 8018b30:	4639      	mov	r1, r7
 8018b32:	4648      	mov	r0, r9
 8018b34:	f7ff fed9 	bl	80188ea <__sprint_r>
 8018b38:	2800      	cmp	r0, #0
 8018b3a:	f040 8331 	bne.w	80191a0 <_vfiprintf_r+0x850>
 8018b3e:	ae0f      	add	r6, sp, #60	; 0x3c
 8018b40:	e780      	b.n	8018a44 <_vfiprintf_r+0xf4>
 8018b42:	4a95      	ldr	r2, [pc, #596]	; (8018d98 <_vfiprintf_r+0x448>)
 8018b44:	9205      	str	r2, [sp, #20]
 8018b46:	f01a 0f20 	tst.w	sl, #32
 8018b4a:	f000 8225 	beq.w	8018f98 <_vfiprintf_r+0x648>
 8018b4e:	3407      	adds	r4, #7
 8018b50:	f024 0b07 	bic.w	fp, r4, #7
 8018b54:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8018b58:	f01a 0f01 	tst.w	sl, #1
 8018b5c:	d009      	beq.n	8018b72 <_vfiprintf_r+0x222>
 8018b5e:	ea54 0205 	orrs.w	r2, r4, r5
 8018b62:	bf1f      	itttt	ne
 8018b64:	2230      	movne	r2, #48	; 0x30
 8018b66:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8018b6a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8018b6e:	f04a 0a02 	orrne.w	sl, sl, #2
 8018b72:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8018b76:	e10d      	b.n	8018d94 <_vfiprintf_r+0x444>
 8018b78:	4648      	mov	r0, r9
 8018b7a:	f7ff f8b1 	bl	8017ce0 <_localeconv_r>
 8018b7e:	6843      	ldr	r3, [r0, #4]
 8018b80:	4618      	mov	r0, r3
 8018b82:	ee08 3a10 	vmov	s16, r3
 8018b86:	f7e7 fb3d 	bl	8000204 <strlen>
 8018b8a:	9007      	str	r0, [sp, #28]
 8018b8c:	4648      	mov	r0, r9
 8018b8e:	f7ff f8a7 	bl	8017ce0 <_localeconv_r>
 8018b92:	6883      	ldr	r3, [r0, #8]
 8018b94:	9306      	str	r3, [sp, #24]
 8018b96:	9b07      	ldr	r3, [sp, #28]
 8018b98:	b12b      	cbz	r3, 8018ba6 <_vfiprintf_r+0x256>
 8018b9a:	9b06      	ldr	r3, [sp, #24]
 8018b9c:	b11b      	cbz	r3, 8018ba6 <_vfiprintf_r+0x256>
 8018b9e:	781b      	ldrb	r3, [r3, #0]
 8018ba0:	b10b      	cbz	r3, 8018ba6 <_vfiprintf_r+0x256>
 8018ba2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8018ba6:	9a01      	ldr	r2, [sp, #4]
 8018ba8:	e75c      	b.n	8018a64 <_vfiprintf_r+0x114>
 8018baa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d1f9      	bne.n	8018ba6 <_vfiprintf_r+0x256>
 8018bb2:	2320      	movs	r3, #32
 8018bb4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018bb8:	e7f5      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018bba:	f04a 0a01 	orr.w	sl, sl, #1
 8018bbe:	e7f2      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018bc0:	f854 3b04 	ldr.w	r3, [r4], #4
 8018bc4:	9303      	str	r3, [sp, #12]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	daed      	bge.n	8018ba6 <_vfiprintf_r+0x256>
 8018bca:	425b      	negs	r3, r3
 8018bcc:	9303      	str	r3, [sp, #12]
 8018bce:	f04a 0a04 	orr.w	sl, sl, #4
 8018bd2:	e7e8      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018bd4:	232b      	movs	r3, #43	; 0x2b
 8018bd6:	e7ed      	b.n	8018bb4 <_vfiprintf_r+0x264>
 8018bd8:	9a01      	ldr	r2, [sp, #4]
 8018bda:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018bde:	2b2a      	cmp	r3, #42	; 0x2a
 8018be0:	d112      	bne.n	8018c08 <_vfiprintf_r+0x2b8>
 8018be2:	f854 0b04 	ldr.w	r0, [r4], #4
 8018be6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8018bea:	e9cd 3200 	strd	r3, r2, [sp]
 8018bee:	e7da      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018bf0:	9b00      	ldr	r3, [sp, #0]
 8018bf2:	200a      	movs	r0, #10
 8018bf4:	fb00 1303 	mla	r3, r0, r3, r1
 8018bf8:	9300      	str	r3, [sp, #0]
 8018bfa:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018bfe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018c02:	2909      	cmp	r1, #9
 8018c04:	d9f4      	bls.n	8018bf0 <_vfiprintf_r+0x2a0>
 8018c06:	e72f      	b.n	8018a68 <_vfiprintf_r+0x118>
 8018c08:	2100      	movs	r1, #0
 8018c0a:	9100      	str	r1, [sp, #0]
 8018c0c:	e7f7      	b.n	8018bfe <_vfiprintf_r+0x2ae>
 8018c0e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8018c12:	e7c8      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018c14:	2100      	movs	r1, #0
 8018c16:	9a01      	ldr	r2, [sp, #4]
 8018c18:	9103      	str	r1, [sp, #12]
 8018c1a:	9903      	ldr	r1, [sp, #12]
 8018c1c:	3b30      	subs	r3, #48	; 0x30
 8018c1e:	200a      	movs	r0, #10
 8018c20:	fb00 3301 	mla	r3, r0, r1, r3
 8018c24:	9303      	str	r3, [sp, #12]
 8018c26:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018c2a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018c2e:	2909      	cmp	r1, #9
 8018c30:	d9f3      	bls.n	8018c1a <_vfiprintf_r+0x2ca>
 8018c32:	e719      	b.n	8018a68 <_vfiprintf_r+0x118>
 8018c34:	9b01      	ldr	r3, [sp, #4]
 8018c36:	781b      	ldrb	r3, [r3, #0]
 8018c38:	2b68      	cmp	r3, #104	; 0x68
 8018c3a:	bf01      	itttt	eq
 8018c3c:	9b01      	ldreq	r3, [sp, #4]
 8018c3e:	3301      	addeq	r3, #1
 8018c40:	9301      	streq	r3, [sp, #4]
 8018c42:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8018c46:	bf18      	it	ne
 8018c48:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8018c4c:	e7ab      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018c4e:	9b01      	ldr	r3, [sp, #4]
 8018c50:	781b      	ldrb	r3, [r3, #0]
 8018c52:	2b6c      	cmp	r3, #108	; 0x6c
 8018c54:	d105      	bne.n	8018c62 <_vfiprintf_r+0x312>
 8018c56:	9b01      	ldr	r3, [sp, #4]
 8018c58:	3301      	adds	r3, #1
 8018c5a:	9301      	str	r3, [sp, #4]
 8018c5c:	f04a 0a20 	orr.w	sl, sl, #32
 8018c60:	e7a1      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018c62:	f04a 0a10 	orr.w	sl, sl, #16
 8018c66:	e79e      	b.n	8018ba6 <_vfiprintf_r+0x256>
 8018c68:	46a3      	mov	fp, r4
 8018c6a:	2100      	movs	r1, #0
 8018c6c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8018c70:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8018c74:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018c78:	2301      	movs	r3, #1
 8018c7a:	9300      	str	r3, [sp, #0]
 8018c7c:	460d      	mov	r5, r1
 8018c7e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8018c82:	e0a0      	b.n	8018dc6 <_vfiprintf_r+0x476>
 8018c84:	f04a 0a10 	orr.w	sl, sl, #16
 8018c88:	f01a 0f20 	tst.w	sl, #32
 8018c8c:	d011      	beq.n	8018cb2 <_vfiprintf_r+0x362>
 8018c8e:	3407      	adds	r4, #7
 8018c90:	f024 0b07 	bic.w	fp, r4, #7
 8018c94:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8018c98:	2c00      	cmp	r4, #0
 8018c9a:	f175 0300 	sbcs.w	r3, r5, #0
 8018c9e:	da06      	bge.n	8018cae <_vfiprintf_r+0x35e>
 8018ca0:	4264      	negs	r4, r4
 8018ca2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8018ca6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8018caa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018cae:	2301      	movs	r3, #1
 8018cb0:	e03f      	b.n	8018d32 <_vfiprintf_r+0x3e2>
 8018cb2:	f01a 0f10 	tst.w	sl, #16
 8018cb6:	f104 0b04 	add.w	fp, r4, #4
 8018cba:	d002      	beq.n	8018cc2 <_vfiprintf_r+0x372>
 8018cbc:	6824      	ldr	r4, [r4, #0]
 8018cbe:	17e5      	asrs	r5, r4, #31
 8018cc0:	e7ea      	b.n	8018c98 <_vfiprintf_r+0x348>
 8018cc2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8018cc6:	6824      	ldr	r4, [r4, #0]
 8018cc8:	d001      	beq.n	8018cce <_vfiprintf_r+0x37e>
 8018cca:	b224      	sxth	r4, r4
 8018ccc:	e7f7      	b.n	8018cbe <_vfiprintf_r+0x36e>
 8018cce:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018cd2:	bf18      	it	ne
 8018cd4:	b264      	sxtbne	r4, r4
 8018cd6:	e7f2      	b.n	8018cbe <_vfiprintf_r+0x36e>
 8018cd8:	f01a 0f20 	tst.w	sl, #32
 8018cdc:	f854 3b04 	ldr.w	r3, [r4], #4
 8018ce0:	d005      	beq.n	8018cee <_vfiprintf_r+0x39e>
 8018ce2:	9a02      	ldr	r2, [sp, #8]
 8018ce4:	4610      	mov	r0, r2
 8018ce6:	17d1      	asrs	r1, r2, #31
 8018ce8:	e9c3 0100 	strd	r0, r1, [r3]
 8018cec:	e694      	b.n	8018a18 <_vfiprintf_r+0xc8>
 8018cee:	f01a 0f10 	tst.w	sl, #16
 8018cf2:	d002      	beq.n	8018cfa <_vfiprintf_r+0x3aa>
 8018cf4:	9a02      	ldr	r2, [sp, #8]
 8018cf6:	601a      	str	r2, [r3, #0]
 8018cf8:	e68e      	b.n	8018a18 <_vfiprintf_r+0xc8>
 8018cfa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8018cfe:	d002      	beq.n	8018d06 <_vfiprintf_r+0x3b6>
 8018d00:	9a02      	ldr	r2, [sp, #8]
 8018d02:	801a      	strh	r2, [r3, #0]
 8018d04:	e688      	b.n	8018a18 <_vfiprintf_r+0xc8>
 8018d06:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018d0a:	d0f3      	beq.n	8018cf4 <_vfiprintf_r+0x3a4>
 8018d0c:	9a02      	ldr	r2, [sp, #8]
 8018d0e:	701a      	strb	r2, [r3, #0]
 8018d10:	e682      	b.n	8018a18 <_vfiprintf_r+0xc8>
 8018d12:	f04a 0a10 	orr.w	sl, sl, #16
 8018d16:	f01a 0f20 	tst.w	sl, #32
 8018d1a:	d01d      	beq.n	8018d58 <_vfiprintf_r+0x408>
 8018d1c:	3407      	adds	r4, #7
 8018d1e:	f024 0b07 	bic.w	fp, r4, #7
 8018d22:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8018d26:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8018d32:	9a00      	ldr	r2, [sp, #0]
 8018d34:	3201      	adds	r2, #1
 8018d36:	f000 8261 	beq.w	80191fc <_vfiprintf_r+0x8ac>
 8018d3a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8018d3e:	9204      	str	r2, [sp, #16]
 8018d40:	ea54 0205 	orrs.w	r2, r4, r5
 8018d44:	f040 8260 	bne.w	8019208 <_vfiprintf_r+0x8b8>
 8018d48:	9a00      	ldr	r2, [sp, #0]
 8018d4a:	2a00      	cmp	r2, #0
 8018d4c:	f000 8197 	beq.w	801907e <_vfiprintf_r+0x72e>
 8018d50:	2b01      	cmp	r3, #1
 8018d52:	f040 825c 	bne.w	801920e <_vfiprintf_r+0x8be>
 8018d56:	e135      	b.n	8018fc4 <_vfiprintf_r+0x674>
 8018d58:	f01a 0f10 	tst.w	sl, #16
 8018d5c:	f104 0b04 	add.w	fp, r4, #4
 8018d60:	d001      	beq.n	8018d66 <_vfiprintf_r+0x416>
 8018d62:	6824      	ldr	r4, [r4, #0]
 8018d64:	e003      	b.n	8018d6e <_vfiprintf_r+0x41e>
 8018d66:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8018d6a:	d002      	beq.n	8018d72 <_vfiprintf_r+0x422>
 8018d6c:	8824      	ldrh	r4, [r4, #0]
 8018d6e:	2500      	movs	r5, #0
 8018d70:	e7d9      	b.n	8018d26 <_vfiprintf_r+0x3d6>
 8018d72:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018d76:	d0f4      	beq.n	8018d62 <_vfiprintf_r+0x412>
 8018d78:	7824      	ldrb	r4, [r4, #0]
 8018d7a:	e7f8      	b.n	8018d6e <_vfiprintf_r+0x41e>
 8018d7c:	46a3      	mov	fp, r4
 8018d7e:	f647 0330 	movw	r3, #30768	; 0x7830
 8018d82:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8018d86:	f85b 4b04 	ldr.w	r4, [fp], #4
 8018d8a:	4b03      	ldr	r3, [pc, #12]	; (8018d98 <_vfiprintf_r+0x448>)
 8018d8c:	9305      	str	r3, [sp, #20]
 8018d8e:	2500      	movs	r5, #0
 8018d90:	f04a 0a02 	orr.w	sl, sl, #2
 8018d94:	2302      	movs	r3, #2
 8018d96:	e7c9      	b.n	8018d2c <_vfiprintf_r+0x3dc>
 8018d98:	0801ca50 	.word	0x0801ca50
 8018d9c:	9b00      	ldr	r3, [sp, #0]
 8018d9e:	46a3      	mov	fp, r4
 8018da0:	2500      	movs	r5, #0
 8018da2:	1c5c      	adds	r4, r3, #1
 8018da4:	f85b 8b04 	ldr.w	r8, [fp], #4
 8018da8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018dac:	f000 80cf 	beq.w	8018f4e <_vfiprintf_r+0x5fe>
 8018db0:	461a      	mov	r2, r3
 8018db2:	4629      	mov	r1, r5
 8018db4:	4640      	mov	r0, r8
 8018db6:	f7e7 fa33 	bl	8000220 <memchr>
 8018dba:	2800      	cmp	r0, #0
 8018dbc:	f000 8174 	beq.w	80190a8 <_vfiprintf_r+0x758>
 8018dc0:	eba0 0308 	sub.w	r3, r0, r8
 8018dc4:	9300      	str	r3, [sp, #0]
 8018dc6:	9b00      	ldr	r3, [sp, #0]
 8018dc8:	42ab      	cmp	r3, r5
 8018dca:	bfb8      	it	lt
 8018dcc:	462b      	movlt	r3, r5
 8018dce:	9304      	str	r3, [sp, #16]
 8018dd0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8018dd4:	b113      	cbz	r3, 8018ddc <_vfiprintf_r+0x48c>
 8018dd6:	9b04      	ldr	r3, [sp, #16]
 8018dd8:	3301      	adds	r3, #1
 8018dda:	9304      	str	r3, [sp, #16]
 8018ddc:	f01a 0302 	ands.w	r3, sl, #2
 8018de0:	9308      	str	r3, [sp, #32]
 8018de2:	bf1e      	ittt	ne
 8018de4:	9b04      	ldrne	r3, [sp, #16]
 8018de6:	3302      	addne	r3, #2
 8018de8:	9304      	strne	r3, [sp, #16]
 8018dea:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8018dee:	9309      	str	r3, [sp, #36]	; 0x24
 8018df0:	d11f      	bne.n	8018e32 <_vfiprintf_r+0x4e2>
 8018df2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018df6:	1a9c      	subs	r4, r3, r2
 8018df8:	2c00      	cmp	r4, #0
 8018dfa:	dd1a      	ble.n	8018e32 <_vfiprintf_r+0x4e2>
 8018dfc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8018e00:	48b9      	ldr	r0, [pc, #740]	; (80190e8 <_vfiprintf_r+0x798>)
 8018e02:	6030      	str	r0, [r6, #0]
 8018e04:	2c10      	cmp	r4, #16
 8018e06:	f103 0301 	add.w	r3, r3, #1
 8018e0a:	f106 0108 	add.w	r1, r6, #8
 8018e0e:	f300 814d 	bgt.w	80190ac <_vfiprintf_r+0x75c>
 8018e12:	6074      	str	r4, [r6, #4]
 8018e14:	2b07      	cmp	r3, #7
 8018e16:	4414      	add	r4, r2
 8018e18:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8018e1c:	f340 8158 	ble.w	80190d0 <_vfiprintf_r+0x780>
 8018e20:	aa0c      	add	r2, sp, #48	; 0x30
 8018e22:	4639      	mov	r1, r7
 8018e24:	4648      	mov	r0, r9
 8018e26:	f7ff fd60 	bl	80188ea <__sprint_r>
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	f040 81b8 	bne.w	80191a0 <_vfiprintf_r+0x850>
 8018e30:	ae0f      	add	r6, sp, #60	; 0x3c
 8018e32:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8018e36:	b173      	cbz	r3, 8018e56 <_vfiprintf_r+0x506>
 8018e38:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8018e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e3e:	6032      	str	r2, [r6, #0]
 8018e40:	2201      	movs	r2, #1
 8018e42:	6072      	str	r2, [r6, #4]
 8018e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e46:	3301      	adds	r3, #1
 8018e48:	3201      	adds	r2, #1
 8018e4a:	2b07      	cmp	r3, #7
 8018e4c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018e50:	f300 8140 	bgt.w	80190d4 <_vfiprintf_r+0x784>
 8018e54:	3608      	adds	r6, #8
 8018e56:	9b08      	ldr	r3, [sp, #32]
 8018e58:	b16b      	cbz	r3, 8018e76 <_vfiprintf_r+0x526>
 8018e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8018e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e5e:	6032      	str	r2, [r6, #0]
 8018e60:	2202      	movs	r2, #2
 8018e62:	6072      	str	r2, [r6, #4]
 8018e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e66:	3301      	adds	r3, #1
 8018e68:	3202      	adds	r2, #2
 8018e6a:	2b07      	cmp	r3, #7
 8018e6c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8018e70:	f300 8140 	bgt.w	80190f4 <_vfiprintf_r+0x7a4>
 8018e74:	3608      	adds	r6, #8
 8018e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e78:	2b80      	cmp	r3, #128	; 0x80
 8018e7a:	d11f      	bne.n	8018ebc <_vfiprintf_r+0x56c>
 8018e7c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018e80:	1a9c      	subs	r4, r3, r2
 8018e82:	2c00      	cmp	r4, #0
 8018e84:	dd1a      	ble.n	8018ebc <_vfiprintf_r+0x56c>
 8018e86:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8018e8a:	4898      	ldr	r0, [pc, #608]	; (80190ec <_vfiprintf_r+0x79c>)
 8018e8c:	6030      	str	r0, [r6, #0]
 8018e8e:	2c10      	cmp	r4, #16
 8018e90:	f103 0301 	add.w	r3, r3, #1
 8018e94:	f106 0108 	add.w	r1, r6, #8
 8018e98:	f300 8135 	bgt.w	8019106 <_vfiprintf_r+0x7b6>
 8018e9c:	6074      	str	r4, [r6, #4]
 8018e9e:	2b07      	cmp	r3, #7
 8018ea0:	4414      	add	r4, r2
 8018ea2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8018ea6:	f340 8140 	ble.w	801912a <_vfiprintf_r+0x7da>
 8018eaa:	aa0c      	add	r2, sp, #48	; 0x30
 8018eac:	4639      	mov	r1, r7
 8018eae:	4648      	mov	r0, r9
 8018eb0:	f7ff fd1b 	bl	80188ea <__sprint_r>
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	f040 8173 	bne.w	80191a0 <_vfiprintf_r+0x850>
 8018eba:	ae0f      	add	r6, sp, #60	; 0x3c
 8018ebc:	9b00      	ldr	r3, [sp, #0]
 8018ebe:	1aec      	subs	r4, r5, r3
 8018ec0:	2c00      	cmp	r4, #0
 8018ec2:	dd1a      	ble.n	8018efa <_vfiprintf_r+0x5aa>
 8018ec4:	4d89      	ldr	r5, [pc, #548]	; (80190ec <_vfiprintf_r+0x79c>)
 8018ec6:	6035      	str	r5, [r6, #0]
 8018ec8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8018ecc:	2c10      	cmp	r4, #16
 8018ece:	f103 0301 	add.w	r3, r3, #1
 8018ed2:	f106 0208 	add.w	r2, r6, #8
 8018ed6:	f300 812a 	bgt.w	801912e <_vfiprintf_r+0x7de>
 8018eda:	6074      	str	r4, [r6, #4]
 8018edc:	2b07      	cmp	r3, #7
 8018ede:	440c      	add	r4, r1
 8018ee0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8018ee4:	f340 8134 	ble.w	8019150 <_vfiprintf_r+0x800>
 8018ee8:	aa0c      	add	r2, sp, #48	; 0x30
 8018eea:	4639      	mov	r1, r7
 8018eec:	4648      	mov	r0, r9
 8018eee:	f7ff fcfc 	bl	80188ea <__sprint_r>
 8018ef2:	2800      	cmp	r0, #0
 8018ef4:	f040 8154 	bne.w	80191a0 <_vfiprintf_r+0x850>
 8018ef8:	ae0f      	add	r6, sp, #60	; 0x3c
 8018efa:	9b00      	ldr	r3, [sp, #0]
 8018efc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018efe:	6073      	str	r3, [r6, #4]
 8018f00:	4418      	add	r0, r3
 8018f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f04:	f8c6 8000 	str.w	r8, [r6]
 8018f08:	3301      	adds	r3, #1
 8018f0a:	2b07      	cmp	r3, #7
 8018f0c:	900e      	str	r0, [sp, #56]	; 0x38
 8018f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8018f10:	f300 8120 	bgt.w	8019154 <_vfiprintf_r+0x804>
 8018f14:	f106 0308 	add.w	r3, r6, #8
 8018f18:	f01a 0f04 	tst.w	sl, #4
 8018f1c:	f040 8122 	bne.w	8019164 <_vfiprintf_r+0x814>
 8018f20:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8018f24:	9904      	ldr	r1, [sp, #16]
 8018f26:	428a      	cmp	r2, r1
 8018f28:	bfac      	ite	ge
 8018f2a:	189b      	addge	r3, r3, r2
 8018f2c:	185b      	addlt	r3, r3, r1
 8018f2e:	9302      	str	r3, [sp, #8]
 8018f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f32:	b13b      	cbz	r3, 8018f44 <_vfiprintf_r+0x5f4>
 8018f34:	aa0c      	add	r2, sp, #48	; 0x30
 8018f36:	4639      	mov	r1, r7
 8018f38:	4648      	mov	r0, r9
 8018f3a:	f7ff fcd6 	bl	80188ea <__sprint_r>
 8018f3e:	2800      	cmp	r0, #0
 8018f40:	f040 812e 	bne.w	80191a0 <_vfiprintf_r+0x850>
 8018f44:	2300      	movs	r3, #0
 8018f46:	930d      	str	r3, [sp, #52]	; 0x34
 8018f48:	465c      	mov	r4, fp
 8018f4a:	ae0f      	add	r6, sp, #60	; 0x3c
 8018f4c:	e564      	b.n	8018a18 <_vfiprintf_r+0xc8>
 8018f4e:	4640      	mov	r0, r8
 8018f50:	f7e7 f958 	bl	8000204 <strlen>
 8018f54:	9000      	str	r0, [sp, #0]
 8018f56:	e736      	b.n	8018dc6 <_vfiprintf_r+0x476>
 8018f58:	f04a 0a10 	orr.w	sl, sl, #16
 8018f5c:	f01a 0f20 	tst.w	sl, #32
 8018f60:	d006      	beq.n	8018f70 <_vfiprintf_r+0x620>
 8018f62:	3407      	adds	r4, #7
 8018f64:	f024 0b07 	bic.w	fp, r4, #7
 8018f68:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	e6dd      	b.n	8018d2c <_vfiprintf_r+0x3dc>
 8018f70:	f01a 0f10 	tst.w	sl, #16
 8018f74:	f104 0b04 	add.w	fp, r4, #4
 8018f78:	d001      	beq.n	8018f7e <_vfiprintf_r+0x62e>
 8018f7a:	6824      	ldr	r4, [r4, #0]
 8018f7c:	e003      	b.n	8018f86 <_vfiprintf_r+0x636>
 8018f7e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8018f82:	d002      	beq.n	8018f8a <_vfiprintf_r+0x63a>
 8018f84:	8824      	ldrh	r4, [r4, #0]
 8018f86:	2500      	movs	r5, #0
 8018f88:	e7f0      	b.n	8018f6c <_vfiprintf_r+0x61c>
 8018f8a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018f8e:	d0f4      	beq.n	8018f7a <_vfiprintf_r+0x62a>
 8018f90:	7824      	ldrb	r4, [r4, #0]
 8018f92:	e7f8      	b.n	8018f86 <_vfiprintf_r+0x636>
 8018f94:	4a56      	ldr	r2, [pc, #344]	; (80190f0 <_vfiprintf_r+0x7a0>)
 8018f96:	e5d5      	b.n	8018b44 <_vfiprintf_r+0x1f4>
 8018f98:	f01a 0f10 	tst.w	sl, #16
 8018f9c:	f104 0b04 	add.w	fp, r4, #4
 8018fa0:	d001      	beq.n	8018fa6 <_vfiprintf_r+0x656>
 8018fa2:	6824      	ldr	r4, [r4, #0]
 8018fa4:	e003      	b.n	8018fae <_vfiprintf_r+0x65e>
 8018fa6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8018faa:	d002      	beq.n	8018fb2 <_vfiprintf_r+0x662>
 8018fac:	8824      	ldrh	r4, [r4, #0]
 8018fae:	2500      	movs	r5, #0
 8018fb0:	e5d2      	b.n	8018b58 <_vfiprintf_r+0x208>
 8018fb2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018fb6:	d0f4      	beq.n	8018fa2 <_vfiprintf_r+0x652>
 8018fb8:	7824      	ldrb	r4, [r4, #0]
 8018fba:	e7f8      	b.n	8018fae <_vfiprintf_r+0x65e>
 8018fbc:	2d00      	cmp	r5, #0
 8018fbe:	bf08      	it	eq
 8018fc0:	2c0a      	cmpeq	r4, #10
 8018fc2:	d205      	bcs.n	8018fd0 <_vfiprintf_r+0x680>
 8018fc4:	3430      	adds	r4, #48	; 0x30
 8018fc6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8018fca:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8018fce:	e13c      	b.n	801924a <_vfiprintf_r+0x8fa>
 8018fd0:	ab38      	add	r3, sp, #224	; 0xe0
 8018fd2:	9308      	str	r3, [sp, #32]
 8018fd4:	9b04      	ldr	r3, [sp, #16]
 8018fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018fda:	f04f 0a00 	mov.w	sl, #0
 8018fde:	9309      	str	r3, [sp, #36]	; 0x24
 8018fe0:	9b08      	ldr	r3, [sp, #32]
 8018fe2:	220a      	movs	r2, #10
 8018fe4:	f103 38ff 	add.w	r8, r3, #4294967295
 8018fe8:	4620      	mov	r0, r4
 8018fea:	2300      	movs	r3, #0
 8018fec:	4629      	mov	r1, r5
 8018fee:	f7e7 fe6b 	bl	8000cc8 <__aeabi_uldivmod>
 8018ff2:	9b08      	ldr	r3, [sp, #32]
 8018ff4:	3230      	adds	r2, #48	; 0x30
 8018ff6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ffc:	f10a 0a01 	add.w	sl, sl, #1
 8019000:	b1db      	cbz	r3, 801903a <_vfiprintf_r+0x6ea>
 8019002:	9b06      	ldr	r3, [sp, #24]
 8019004:	781b      	ldrb	r3, [r3, #0]
 8019006:	4553      	cmp	r3, sl
 8019008:	d117      	bne.n	801903a <_vfiprintf_r+0x6ea>
 801900a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801900e:	d014      	beq.n	801903a <_vfiprintf_r+0x6ea>
 8019010:	2d00      	cmp	r5, #0
 8019012:	bf08      	it	eq
 8019014:	2c0a      	cmpeq	r4, #10
 8019016:	d310      	bcc.n	801903a <_vfiprintf_r+0x6ea>
 8019018:	9b07      	ldr	r3, [sp, #28]
 801901a:	eba8 0803 	sub.w	r8, r8, r3
 801901e:	461a      	mov	r2, r3
 8019020:	ee18 1a10 	vmov	r1, s16
 8019024:	4640      	mov	r0, r8
 8019026:	f7ff fbd2 	bl	80187ce <strncpy>
 801902a:	9b06      	ldr	r3, [sp, #24]
 801902c:	785b      	ldrb	r3, [r3, #1]
 801902e:	b1a3      	cbz	r3, 801905a <_vfiprintf_r+0x70a>
 8019030:	9b06      	ldr	r3, [sp, #24]
 8019032:	3301      	adds	r3, #1
 8019034:	9306      	str	r3, [sp, #24]
 8019036:	f04f 0a00 	mov.w	sl, #0
 801903a:	220a      	movs	r2, #10
 801903c:	2300      	movs	r3, #0
 801903e:	4620      	mov	r0, r4
 8019040:	4629      	mov	r1, r5
 8019042:	f7e7 fe41 	bl	8000cc8 <__aeabi_uldivmod>
 8019046:	2d00      	cmp	r5, #0
 8019048:	bf08      	it	eq
 801904a:	2c0a      	cmpeq	r4, #10
 801904c:	f0c0 80fd 	bcc.w	801924a <_vfiprintf_r+0x8fa>
 8019050:	4604      	mov	r4, r0
 8019052:	460d      	mov	r5, r1
 8019054:	f8cd 8020 	str.w	r8, [sp, #32]
 8019058:	e7c2      	b.n	8018fe0 <_vfiprintf_r+0x690>
 801905a:	469a      	mov	sl, r3
 801905c:	e7ed      	b.n	801903a <_vfiprintf_r+0x6ea>
 801905e:	9a05      	ldr	r2, [sp, #20]
 8019060:	f004 030f 	and.w	r3, r4, #15
 8019064:	5cd3      	ldrb	r3, [r2, r3]
 8019066:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801906a:	0923      	lsrs	r3, r4, #4
 801906c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8019070:	092a      	lsrs	r2, r5, #4
 8019072:	461c      	mov	r4, r3
 8019074:	4615      	mov	r5, r2
 8019076:	ea54 0305 	orrs.w	r3, r4, r5
 801907a:	d1f0      	bne.n	801905e <_vfiprintf_r+0x70e>
 801907c:	e0e5      	b.n	801924a <_vfiprintf_r+0x8fa>
 801907e:	b933      	cbnz	r3, 801908e <_vfiprintf_r+0x73e>
 8019080:	f01a 0f01 	tst.w	sl, #1
 8019084:	d003      	beq.n	801908e <_vfiprintf_r+0x73e>
 8019086:	2330      	movs	r3, #48	; 0x30
 8019088:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 801908c:	e79d      	b.n	8018fca <_vfiprintf_r+0x67a>
 801908e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8019092:	e0da      	b.n	801924a <_vfiprintf_r+0x8fa>
 8019094:	2b00      	cmp	r3, #0
 8019096:	f000 80a4 	beq.w	80191e2 <_vfiprintf_r+0x892>
 801909a:	2100      	movs	r1, #0
 801909c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80190a0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80190a4:	46a3      	mov	fp, r4
 80190a6:	e5e7      	b.n	8018c78 <_vfiprintf_r+0x328>
 80190a8:	4605      	mov	r5, r0
 80190aa:	e68c      	b.n	8018dc6 <_vfiprintf_r+0x476>
 80190ac:	2010      	movs	r0, #16
 80190ae:	4402      	add	r2, r0
 80190b0:	2b07      	cmp	r3, #7
 80190b2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80190b6:	6070      	str	r0, [r6, #4]
 80190b8:	dd07      	ble.n	80190ca <_vfiprintf_r+0x77a>
 80190ba:	aa0c      	add	r2, sp, #48	; 0x30
 80190bc:	4639      	mov	r1, r7
 80190be:	4648      	mov	r0, r9
 80190c0:	f7ff fc13 	bl	80188ea <__sprint_r>
 80190c4:	2800      	cmp	r0, #0
 80190c6:	d16b      	bne.n	80191a0 <_vfiprintf_r+0x850>
 80190c8:	a90f      	add	r1, sp, #60	; 0x3c
 80190ca:	3c10      	subs	r4, #16
 80190cc:	460e      	mov	r6, r1
 80190ce:	e695      	b.n	8018dfc <_vfiprintf_r+0x4ac>
 80190d0:	460e      	mov	r6, r1
 80190d2:	e6ae      	b.n	8018e32 <_vfiprintf_r+0x4e2>
 80190d4:	aa0c      	add	r2, sp, #48	; 0x30
 80190d6:	4639      	mov	r1, r7
 80190d8:	4648      	mov	r0, r9
 80190da:	f7ff fc06 	bl	80188ea <__sprint_r>
 80190de:	2800      	cmp	r0, #0
 80190e0:	d15e      	bne.n	80191a0 <_vfiprintf_r+0x850>
 80190e2:	ae0f      	add	r6, sp, #60	; 0x3c
 80190e4:	e6b7      	b.n	8018e56 <_vfiprintf_r+0x506>
 80190e6:	bf00      	nop
 80190e8:	0801cd34 	.word	0x0801cd34
 80190ec:	0801cd44 	.word	0x0801cd44
 80190f0:	0801ca61 	.word	0x0801ca61
 80190f4:	aa0c      	add	r2, sp, #48	; 0x30
 80190f6:	4639      	mov	r1, r7
 80190f8:	4648      	mov	r0, r9
 80190fa:	f7ff fbf6 	bl	80188ea <__sprint_r>
 80190fe:	2800      	cmp	r0, #0
 8019100:	d14e      	bne.n	80191a0 <_vfiprintf_r+0x850>
 8019102:	ae0f      	add	r6, sp, #60	; 0x3c
 8019104:	e6b7      	b.n	8018e76 <_vfiprintf_r+0x526>
 8019106:	2010      	movs	r0, #16
 8019108:	4402      	add	r2, r0
 801910a:	2b07      	cmp	r3, #7
 801910c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8019110:	6070      	str	r0, [r6, #4]
 8019112:	dd07      	ble.n	8019124 <_vfiprintf_r+0x7d4>
 8019114:	aa0c      	add	r2, sp, #48	; 0x30
 8019116:	4639      	mov	r1, r7
 8019118:	4648      	mov	r0, r9
 801911a:	f7ff fbe6 	bl	80188ea <__sprint_r>
 801911e:	2800      	cmp	r0, #0
 8019120:	d13e      	bne.n	80191a0 <_vfiprintf_r+0x850>
 8019122:	a90f      	add	r1, sp, #60	; 0x3c
 8019124:	3c10      	subs	r4, #16
 8019126:	460e      	mov	r6, r1
 8019128:	e6ad      	b.n	8018e86 <_vfiprintf_r+0x536>
 801912a:	460e      	mov	r6, r1
 801912c:	e6c6      	b.n	8018ebc <_vfiprintf_r+0x56c>
 801912e:	2010      	movs	r0, #16
 8019130:	4401      	add	r1, r0
 8019132:	2b07      	cmp	r3, #7
 8019134:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019138:	6070      	str	r0, [r6, #4]
 801913a:	dd06      	ble.n	801914a <_vfiprintf_r+0x7fa>
 801913c:	aa0c      	add	r2, sp, #48	; 0x30
 801913e:	4639      	mov	r1, r7
 8019140:	4648      	mov	r0, r9
 8019142:	f7ff fbd2 	bl	80188ea <__sprint_r>
 8019146:	bb58      	cbnz	r0, 80191a0 <_vfiprintf_r+0x850>
 8019148:	aa0f      	add	r2, sp, #60	; 0x3c
 801914a:	3c10      	subs	r4, #16
 801914c:	4616      	mov	r6, r2
 801914e:	e6ba      	b.n	8018ec6 <_vfiprintf_r+0x576>
 8019150:	4616      	mov	r6, r2
 8019152:	e6d2      	b.n	8018efa <_vfiprintf_r+0x5aa>
 8019154:	aa0c      	add	r2, sp, #48	; 0x30
 8019156:	4639      	mov	r1, r7
 8019158:	4648      	mov	r0, r9
 801915a:	f7ff fbc6 	bl	80188ea <__sprint_r>
 801915e:	b9f8      	cbnz	r0, 80191a0 <_vfiprintf_r+0x850>
 8019160:	ab0f      	add	r3, sp, #60	; 0x3c
 8019162:	e6d9      	b.n	8018f18 <_vfiprintf_r+0x5c8>
 8019164:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8019168:	1a54      	subs	r4, r2, r1
 801916a:	2c00      	cmp	r4, #0
 801916c:	f77f aed8 	ble.w	8018f20 <_vfiprintf_r+0x5d0>
 8019170:	4d3a      	ldr	r5, [pc, #232]	; (801925c <_vfiprintf_r+0x90c>)
 8019172:	2610      	movs	r6, #16
 8019174:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019178:	2c10      	cmp	r4, #16
 801917a:	f102 0201 	add.w	r2, r2, #1
 801917e:	601d      	str	r5, [r3, #0]
 8019180:	dc1d      	bgt.n	80191be <_vfiprintf_r+0x86e>
 8019182:	605c      	str	r4, [r3, #4]
 8019184:	2a07      	cmp	r2, #7
 8019186:	440c      	add	r4, r1
 8019188:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801918c:	f77f aec8 	ble.w	8018f20 <_vfiprintf_r+0x5d0>
 8019190:	aa0c      	add	r2, sp, #48	; 0x30
 8019192:	4639      	mov	r1, r7
 8019194:	4648      	mov	r0, r9
 8019196:	f7ff fba8 	bl	80188ea <__sprint_r>
 801919a:	2800      	cmp	r0, #0
 801919c:	f43f aec0 	beq.w	8018f20 <_vfiprintf_r+0x5d0>
 80191a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191a2:	07d9      	lsls	r1, r3, #31
 80191a4:	d405      	bmi.n	80191b2 <_vfiprintf_r+0x862>
 80191a6:	89bb      	ldrh	r3, [r7, #12]
 80191a8:	059a      	lsls	r2, r3, #22
 80191aa:	d402      	bmi.n	80191b2 <_vfiprintf_r+0x862>
 80191ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80191ae:	f7fe fd9e 	bl	8017cee <__retarget_lock_release_recursive>
 80191b2:	89bb      	ldrh	r3, [r7, #12]
 80191b4:	065b      	lsls	r3, r3, #25
 80191b6:	f57f abfe 	bpl.w	80189b6 <_vfiprintf_r+0x66>
 80191ba:	f7ff bbf9 	b.w	80189b0 <_vfiprintf_r+0x60>
 80191be:	3110      	adds	r1, #16
 80191c0:	2a07      	cmp	r2, #7
 80191c2:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80191c6:	605e      	str	r6, [r3, #4]
 80191c8:	dc02      	bgt.n	80191d0 <_vfiprintf_r+0x880>
 80191ca:	3308      	adds	r3, #8
 80191cc:	3c10      	subs	r4, #16
 80191ce:	e7d1      	b.n	8019174 <_vfiprintf_r+0x824>
 80191d0:	aa0c      	add	r2, sp, #48	; 0x30
 80191d2:	4639      	mov	r1, r7
 80191d4:	4648      	mov	r0, r9
 80191d6:	f7ff fb88 	bl	80188ea <__sprint_r>
 80191da:	2800      	cmp	r0, #0
 80191dc:	d1e0      	bne.n	80191a0 <_vfiprintf_r+0x850>
 80191de:	ab0f      	add	r3, sp, #60	; 0x3c
 80191e0:	e7f4      	b.n	80191cc <_vfiprintf_r+0x87c>
 80191e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191e4:	b913      	cbnz	r3, 80191ec <_vfiprintf_r+0x89c>
 80191e6:	2300      	movs	r3, #0
 80191e8:	930d      	str	r3, [sp, #52]	; 0x34
 80191ea:	e7d9      	b.n	80191a0 <_vfiprintf_r+0x850>
 80191ec:	aa0c      	add	r2, sp, #48	; 0x30
 80191ee:	4639      	mov	r1, r7
 80191f0:	4648      	mov	r0, r9
 80191f2:	f7ff fb7a 	bl	80188ea <__sprint_r>
 80191f6:	2800      	cmp	r0, #0
 80191f8:	d0f5      	beq.n	80191e6 <_vfiprintf_r+0x896>
 80191fa:	e7d1      	b.n	80191a0 <_vfiprintf_r+0x850>
 80191fc:	ea54 0205 	orrs.w	r2, r4, r5
 8019200:	f8cd a010 	str.w	sl, [sp, #16]
 8019204:	f43f ada4 	beq.w	8018d50 <_vfiprintf_r+0x400>
 8019208:	2b01      	cmp	r3, #1
 801920a:	f43f aed7 	beq.w	8018fbc <_vfiprintf_r+0x66c>
 801920e:	2b02      	cmp	r3, #2
 8019210:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8019214:	f43f af23 	beq.w	801905e <_vfiprintf_r+0x70e>
 8019218:	08e2      	lsrs	r2, r4, #3
 801921a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 801921e:	08e8      	lsrs	r0, r5, #3
 8019220:	f004 0307 	and.w	r3, r4, #7
 8019224:	4605      	mov	r5, r0
 8019226:	4614      	mov	r4, r2
 8019228:	3330      	adds	r3, #48	; 0x30
 801922a:	ea54 0205 	orrs.w	r2, r4, r5
 801922e:	4641      	mov	r1, r8
 8019230:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8019234:	d1f0      	bne.n	8019218 <_vfiprintf_r+0x8c8>
 8019236:	9a04      	ldr	r2, [sp, #16]
 8019238:	07d0      	lsls	r0, r2, #31
 801923a:	d506      	bpl.n	801924a <_vfiprintf_r+0x8fa>
 801923c:	2b30      	cmp	r3, #48	; 0x30
 801923e:	d004      	beq.n	801924a <_vfiprintf_r+0x8fa>
 8019240:	2330      	movs	r3, #48	; 0x30
 8019242:	f808 3c01 	strb.w	r3, [r8, #-1]
 8019246:	f1a1 0802 	sub.w	r8, r1, #2
 801924a:	ab38      	add	r3, sp, #224	; 0xe0
 801924c:	eba3 0308 	sub.w	r3, r3, r8
 8019250:	9d00      	ldr	r5, [sp, #0]
 8019252:	f8dd a010 	ldr.w	sl, [sp, #16]
 8019256:	9300      	str	r3, [sp, #0]
 8019258:	e5b5      	b.n	8018dc6 <_vfiprintf_r+0x476>
 801925a:	bf00      	nop
 801925c:	0801cd34 	.word	0x0801cd34

08019260 <__sbprintf>:
 8019260:	b570      	push	{r4, r5, r6, lr}
 8019262:	460c      	mov	r4, r1
 8019264:	8989      	ldrh	r1, [r1, #12]
 8019266:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801926a:	f021 0102 	bic.w	r1, r1, #2
 801926e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019272:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8019274:	911b      	str	r1, [sp, #108]	; 0x6c
 8019276:	89e1      	ldrh	r1, [r4, #14]
 8019278:	f8ad 1016 	strh.w	r1, [sp, #22]
 801927c:	69e1      	ldr	r1, [r4, #28]
 801927e:	9109      	str	r1, [sp, #36]	; 0x24
 8019280:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019282:	910b      	str	r1, [sp, #44]	; 0x2c
 8019284:	a91c      	add	r1, sp, #112	; 0x70
 8019286:	9102      	str	r1, [sp, #8]
 8019288:	9106      	str	r1, [sp, #24]
 801928a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801928e:	4606      	mov	r6, r0
 8019290:	9104      	str	r1, [sp, #16]
 8019292:	9107      	str	r1, [sp, #28]
 8019294:	a818      	add	r0, sp, #96	; 0x60
 8019296:	2100      	movs	r1, #0
 8019298:	e9cd 3200 	strd	r3, r2, [sp]
 801929c:	9108      	str	r1, [sp, #32]
 801929e:	f7fe fd23 	bl	8017ce8 <__retarget_lock_init_recursive>
 80192a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80192a6:	a902      	add	r1, sp, #8
 80192a8:	4630      	mov	r0, r6
 80192aa:	f7ff fb51 	bl	8018950 <_vfiprintf_r>
 80192ae:	1e05      	subs	r5, r0, #0
 80192b0:	db07      	blt.n	80192c2 <__sbprintf+0x62>
 80192b2:	a902      	add	r1, sp, #8
 80192b4:	4630      	mov	r0, r6
 80192b6:	f7fd ffc3 	bl	8017240 <_fflush_r>
 80192ba:	2800      	cmp	r0, #0
 80192bc:	bf18      	it	ne
 80192be:	f04f 35ff 	movne.w	r5, #4294967295
 80192c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80192c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80192c8:	065b      	lsls	r3, r3, #25
 80192ca:	bf42      	ittt	mi
 80192cc:	89a3      	ldrhmi	r3, [r4, #12]
 80192ce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80192d2:	81a3      	strhmi	r3, [r4, #12]
 80192d4:	f7fe fd09 	bl	8017cea <__retarget_lock_close_recursive>
 80192d8:	4628      	mov	r0, r5
 80192da:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80192de:	bd70      	pop	{r4, r5, r6, pc}

080192e0 <__ascii_wctomb>:
 80192e0:	b149      	cbz	r1, 80192f6 <__ascii_wctomb+0x16>
 80192e2:	2aff      	cmp	r2, #255	; 0xff
 80192e4:	bf85      	ittet	hi
 80192e6:	238a      	movhi	r3, #138	; 0x8a
 80192e8:	6003      	strhi	r3, [r0, #0]
 80192ea:	700a      	strbls	r2, [r1, #0]
 80192ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80192f0:	bf98      	it	ls
 80192f2:	2001      	movls	r0, #1
 80192f4:	4770      	bx	lr
 80192f6:	4608      	mov	r0, r1
 80192f8:	4770      	bx	lr
	...

080192fc <_write_r>:
 80192fc:	b538      	push	{r3, r4, r5, lr}
 80192fe:	4d07      	ldr	r5, [pc, #28]	; (801931c <_write_r+0x20>)
 8019300:	4604      	mov	r4, r0
 8019302:	4608      	mov	r0, r1
 8019304:	4611      	mov	r1, r2
 8019306:	2200      	movs	r2, #0
 8019308:	602a      	str	r2, [r5, #0]
 801930a:	461a      	mov	r2, r3
 801930c:	f7f8 fa7e 	bl	801180c <_write>
 8019310:	1c43      	adds	r3, r0, #1
 8019312:	d102      	bne.n	801931a <_write_r+0x1e>
 8019314:	682b      	ldr	r3, [r5, #0]
 8019316:	b103      	cbz	r3, 801931a <_write_r+0x1e>
 8019318:	6023      	str	r3, [r4, #0]
 801931a:	bd38      	pop	{r3, r4, r5, pc}
 801931c:	2001281c 	.word	0x2001281c

08019320 <__register_exitproc>:
 8019320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019324:	4d1c      	ldr	r5, [pc, #112]	; (8019398 <__register_exitproc+0x78>)
 8019326:	4606      	mov	r6, r0
 8019328:	6828      	ldr	r0, [r5, #0]
 801932a:	4698      	mov	r8, r3
 801932c:	460f      	mov	r7, r1
 801932e:	4691      	mov	r9, r2
 8019330:	f7fe fcdc 	bl	8017cec <__retarget_lock_acquire_recursive>
 8019334:	4b19      	ldr	r3, [pc, #100]	; (801939c <__register_exitproc+0x7c>)
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801933c:	4628      	mov	r0, r5
 801933e:	b91c      	cbnz	r4, 8019348 <__register_exitproc+0x28>
 8019340:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8019344:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8019348:	6865      	ldr	r5, [r4, #4]
 801934a:	6800      	ldr	r0, [r0, #0]
 801934c:	2d1f      	cmp	r5, #31
 801934e:	dd05      	ble.n	801935c <__register_exitproc+0x3c>
 8019350:	f7fe fccd 	bl	8017cee <__retarget_lock_release_recursive>
 8019354:	f04f 30ff 	mov.w	r0, #4294967295
 8019358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801935c:	b19e      	cbz	r6, 8019386 <__register_exitproc+0x66>
 801935e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8019362:	2201      	movs	r2, #1
 8019364:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8019368:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801936c:	40aa      	lsls	r2, r5
 801936e:	4313      	orrs	r3, r2
 8019370:	2e02      	cmp	r6, #2
 8019372:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8019376:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801937a:	bf02      	ittt	eq
 801937c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8019380:	431a      	orreq	r2, r3
 8019382:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8019386:	1c6b      	adds	r3, r5, #1
 8019388:	3502      	adds	r5, #2
 801938a:	6063      	str	r3, [r4, #4]
 801938c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8019390:	f7fe fcad 	bl	8017cee <__retarget_lock_release_recursive>
 8019394:	2000      	movs	r0, #0
 8019396:	e7df      	b.n	8019358 <__register_exitproc+0x38>
 8019398:	200031f8 	.word	0x200031f8
 801939c:	0801c9e8 	.word	0x0801c9e8

080193a0 <__assert_func>:
 80193a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80193a2:	4614      	mov	r4, r2
 80193a4:	461a      	mov	r2, r3
 80193a6:	4b09      	ldr	r3, [pc, #36]	; (80193cc <__assert_func+0x2c>)
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	4605      	mov	r5, r0
 80193ac:	68d8      	ldr	r0, [r3, #12]
 80193ae:	b14c      	cbz	r4, 80193c4 <__assert_func+0x24>
 80193b0:	4b07      	ldr	r3, [pc, #28]	; (80193d0 <__assert_func+0x30>)
 80193b2:	9100      	str	r1, [sp, #0]
 80193b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80193b8:	4906      	ldr	r1, [pc, #24]	; (80193d4 <__assert_func+0x34>)
 80193ba:	462b      	mov	r3, r5
 80193bc:	f000 f8a4 	bl	8019508 <fiprintf>
 80193c0:	f000 fcb6 	bl	8019d30 <abort>
 80193c4:	4b04      	ldr	r3, [pc, #16]	; (80193d8 <__assert_func+0x38>)
 80193c6:	461c      	mov	r4, r3
 80193c8:	e7f3      	b.n	80193b2 <__assert_func+0x12>
 80193ca:	bf00      	nop
 80193cc:	200029bc 	.word	0x200029bc
 80193d0:	0801cd54 	.word	0x0801cd54
 80193d4:	0801cd61 	.word	0x0801cd61
 80193d8:	0801cd8f 	.word	0x0801cd8f

080193dc <_calloc_r>:
 80193dc:	b510      	push	{r4, lr}
 80193de:	4351      	muls	r1, r2
 80193e0:	f7f9 f8ec 	bl	80125bc <_malloc_r>
 80193e4:	4604      	mov	r4, r0
 80193e6:	b198      	cbz	r0, 8019410 <_calloc_r+0x34>
 80193e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80193ec:	f022 0203 	bic.w	r2, r2, #3
 80193f0:	3a04      	subs	r2, #4
 80193f2:	2a24      	cmp	r2, #36	; 0x24
 80193f4:	d81b      	bhi.n	801942e <_calloc_r+0x52>
 80193f6:	2a13      	cmp	r2, #19
 80193f8:	d917      	bls.n	801942a <_calloc_r+0x4e>
 80193fa:	2100      	movs	r1, #0
 80193fc:	2a1b      	cmp	r2, #27
 80193fe:	e9c0 1100 	strd	r1, r1, [r0]
 8019402:	d807      	bhi.n	8019414 <_calloc_r+0x38>
 8019404:	f100 0308 	add.w	r3, r0, #8
 8019408:	2200      	movs	r2, #0
 801940a:	e9c3 2200 	strd	r2, r2, [r3]
 801940e:	609a      	str	r2, [r3, #8]
 8019410:	4620      	mov	r0, r4
 8019412:	bd10      	pop	{r4, pc}
 8019414:	2a24      	cmp	r2, #36	; 0x24
 8019416:	e9c0 1102 	strd	r1, r1, [r0, #8]
 801941a:	bf11      	iteee	ne
 801941c:	f100 0310 	addne.w	r3, r0, #16
 8019420:	6101      	streq	r1, [r0, #16]
 8019422:	f100 0318 	addeq.w	r3, r0, #24
 8019426:	6141      	streq	r1, [r0, #20]
 8019428:	e7ee      	b.n	8019408 <_calloc_r+0x2c>
 801942a:	4603      	mov	r3, r0
 801942c:	e7ec      	b.n	8019408 <_calloc_r+0x2c>
 801942e:	2100      	movs	r1, #0
 8019430:	f7f9 fb3c 	bl	8012aac <memset>
 8019434:	e7ec      	b.n	8019410 <_calloc_r+0x34>
	...

08019438 <_close_r>:
 8019438:	b538      	push	{r3, r4, r5, lr}
 801943a:	4d06      	ldr	r5, [pc, #24]	; (8019454 <_close_r+0x1c>)
 801943c:	2300      	movs	r3, #0
 801943e:	4604      	mov	r4, r0
 8019440:	4608      	mov	r0, r1
 8019442:	602b      	str	r3, [r5, #0]
 8019444:	f7f8 fa0e 	bl	8011864 <_close>
 8019448:	1c43      	adds	r3, r0, #1
 801944a:	d102      	bne.n	8019452 <_close_r+0x1a>
 801944c:	682b      	ldr	r3, [r5, #0]
 801944e:	b103      	cbz	r3, 8019452 <_close_r+0x1a>
 8019450:	6023      	str	r3, [r4, #0]
 8019452:	bd38      	pop	{r3, r4, r5, pc}
 8019454:	2001281c 	.word	0x2001281c

08019458 <_fclose_r>:
 8019458:	b570      	push	{r4, r5, r6, lr}
 801945a:	4606      	mov	r6, r0
 801945c:	460c      	mov	r4, r1
 801945e:	b911      	cbnz	r1, 8019466 <_fclose_r+0xe>
 8019460:	2500      	movs	r5, #0
 8019462:	4628      	mov	r0, r5
 8019464:	bd70      	pop	{r4, r5, r6, pc}
 8019466:	b118      	cbz	r0, 8019470 <_fclose_r+0x18>
 8019468:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801946a:	b90b      	cbnz	r3, 8019470 <_fclose_r+0x18>
 801946c:	f7fd ff54 	bl	8017318 <__sinit>
 8019470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019472:	07d8      	lsls	r0, r3, #31
 8019474:	d405      	bmi.n	8019482 <_fclose_r+0x2a>
 8019476:	89a3      	ldrh	r3, [r4, #12]
 8019478:	0599      	lsls	r1, r3, #22
 801947a:	d402      	bmi.n	8019482 <_fclose_r+0x2a>
 801947c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801947e:	f7fe fc35 	bl	8017cec <__retarget_lock_acquire_recursive>
 8019482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019486:	b93b      	cbnz	r3, 8019498 <_fclose_r+0x40>
 8019488:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801948a:	f015 0501 	ands.w	r5, r5, #1
 801948e:	d1e7      	bne.n	8019460 <_fclose_r+0x8>
 8019490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019492:	f7fe fc2c 	bl	8017cee <__retarget_lock_release_recursive>
 8019496:	e7e4      	b.n	8019462 <_fclose_r+0xa>
 8019498:	4621      	mov	r1, r4
 801949a:	4630      	mov	r0, r6
 801949c:	f7fd fe42 	bl	8017124 <__sflush_r>
 80194a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80194a2:	4605      	mov	r5, r0
 80194a4:	b133      	cbz	r3, 80194b4 <_fclose_r+0x5c>
 80194a6:	69e1      	ldr	r1, [r4, #28]
 80194a8:	4630      	mov	r0, r6
 80194aa:	4798      	blx	r3
 80194ac:	2800      	cmp	r0, #0
 80194ae:	bfb8      	it	lt
 80194b0:	f04f 35ff 	movlt.w	r5, #4294967295
 80194b4:	89a3      	ldrh	r3, [r4, #12]
 80194b6:	061a      	lsls	r2, r3, #24
 80194b8:	d503      	bpl.n	80194c2 <_fclose_r+0x6a>
 80194ba:	6921      	ldr	r1, [r4, #16]
 80194bc:	4630      	mov	r0, r6
 80194be:	f7fd ffbb 	bl	8017438 <_free_r>
 80194c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80194c4:	b141      	cbz	r1, 80194d8 <_fclose_r+0x80>
 80194c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80194ca:	4299      	cmp	r1, r3
 80194cc:	d002      	beq.n	80194d4 <_fclose_r+0x7c>
 80194ce:	4630      	mov	r0, r6
 80194d0:	f7fd ffb2 	bl	8017438 <_free_r>
 80194d4:	2300      	movs	r3, #0
 80194d6:	6323      	str	r3, [r4, #48]	; 0x30
 80194d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80194da:	b121      	cbz	r1, 80194e6 <_fclose_r+0x8e>
 80194dc:	4630      	mov	r0, r6
 80194de:	f7fd ffab 	bl	8017438 <_free_r>
 80194e2:	2300      	movs	r3, #0
 80194e4:	6463      	str	r3, [r4, #68]	; 0x44
 80194e6:	f7fd feff 	bl	80172e8 <__sfp_lock_acquire>
 80194ea:	2300      	movs	r3, #0
 80194ec:	81a3      	strh	r3, [r4, #12]
 80194ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194f0:	07db      	lsls	r3, r3, #31
 80194f2:	d402      	bmi.n	80194fa <_fclose_r+0xa2>
 80194f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194f6:	f7fe fbfa 	bl	8017cee <__retarget_lock_release_recursive>
 80194fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194fc:	f7fe fbf5 	bl	8017cea <__retarget_lock_close_recursive>
 8019500:	f7fd fef8 	bl	80172f4 <__sfp_lock_release>
 8019504:	e7ad      	b.n	8019462 <_fclose_r+0xa>
	...

08019508 <fiprintf>:
 8019508:	b40e      	push	{r1, r2, r3}
 801950a:	b503      	push	{r0, r1, lr}
 801950c:	4601      	mov	r1, r0
 801950e:	ab03      	add	r3, sp, #12
 8019510:	4805      	ldr	r0, [pc, #20]	; (8019528 <fiprintf+0x20>)
 8019512:	f853 2b04 	ldr.w	r2, [r3], #4
 8019516:	6800      	ldr	r0, [r0, #0]
 8019518:	9301      	str	r3, [sp, #4]
 801951a:	f7ff fa19 	bl	8018950 <_vfiprintf_r>
 801951e:	b002      	add	sp, #8
 8019520:	f85d eb04 	ldr.w	lr, [sp], #4
 8019524:	b003      	add	sp, #12
 8019526:	4770      	bx	lr
 8019528:	200029bc 	.word	0x200029bc

0801952c <__fputwc>:
 801952c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019530:	4680      	mov	r8, r0
 8019532:	460e      	mov	r6, r1
 8019534:	4615      	mov	r5, r2
 8019536:	f7fe fbcd 	bl	8017cd4 <__locale_mb_cur_max>
 801953a:	2801      	cmp	r0, #1
 801953c:	d11c      	bne.n	8019578 <__fputwc+0x4c>
 801953e:	1e73      	subs	r3, r6, #1
 8019540:	2bfe      	cmp	r3, #254	; 0xfe
 8019542:	d819      	bhi.n	8019578 <__fputwc+0x4c>
 8019544:	f88d 6004 	strb.w	r6, [sp, #4]
 8019548:	4604      	mov	r4, r0
 801954a:	2700      	movs	r7, #0
 801954c:	f10d 0904 	add.w	r9, sp, #4
 8019550:	42a7      	cmp	r7, r4
 8019552:	d020      	beq.n	8019596 <__fputwc+0x6a>
 8019554:	68ab      	ldr	r3, [r5, #8]
 8019556:	f817 1009 	ldrb.w	r1, [r7, r9]
 801955a:	3b01      	subs	r3, #1
 801955c:	2b00      	cmp	r3, #0
 801955e:	60ab      	str	r3, [r5, #8]
 8019560:	da04      	bge.n	801956c <__fputwc+0x40>
 8019562:	69aa      	ldr	r2, [r5, #24]
 8019564:	4293      	cmp	r3, r2
 8019566:	db1a      	blt.n	801959e <__fputwc+0x72>
 8019568:	290a      	cmp	r1, #10
 801956a:	d018      	beq.n	801959e <__fputwc+0x72>
 801956c:	682b      	ldr	r3, [r5, #0]
 801956e:	1c5a      	adds	r2, r3, #1
 8019570:	602a      	str	r2, [r5, #0]
 8019572:	7019      	strb	r1, [r3, #0]
 8019574:	3701      	adds	r7, #1
 8019576:	e7eb      	b.n	8019550 <__fputwc+0x24>
 8019578:	4632      	mov	r2, r6
 801957a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801957e:	a901      	add	r1, sp, #4
 8019580:	4640      	mov	r0, r8
 8019582:	f000 fbbf 	bl	8019d04 <_wcrtomb_r>
 8019586:	1c42      	adds	r2, r0, #1
 8019588:	4604      	mov	r4, r0
 801958a:	d1de      	bne.n	801954a <__fputwc+0x1e>
 801958c:	89ab      	ldrh	r3, [r5, #12]
 801958e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019592:	81ab      	strh	r3, [r5, #12]
 8019594:	4606      	mov	r6, r0
 8019596:	4630      	mov	r0, r6
 8019598:	b003      	add	sp, #12
 801959a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801959e:	462a      	mov	r2, r5
 80195a0:	4640      	mov	r0, r8
 80195a2:	f000 fb65 	bl	8019c70 <__swbuf_r>
 80195a6:	1c43      	adds	r3, r0, #1
 80195a8:	d1e4      	bne.n	8019574 <__fputwc+0x48>
 80195aa:	4606      	mov	r6, r0
 80195ac:	e7f3      	b.n	8019596 <__fputwc+0x6a>

080195ae <_fputwc_r>:
 80195ae:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80195b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80195b2:	4614      	mov	r4, r2
 80195b4:	07da      	lsls	r2, r3, #31
 80195b6:	4605      	mov	r5, r0
 80195b8:	d407      	bmi.n	80195ca <_fputwc_r+0x1c>
 80195ba:	89a3      	ldrh	r3, [r4, #12]
 80195bc:	059b      	lsls	r3, r3, #22
 80195be:	d404      	bmi.n	80195ca <_fputwc_r+0x1c>
 80195c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195c2:	9101      	str	r1, [sp, #4]
 80195c4:	f7fe fb92 	bl	8017cec <__retarget_lock_acquire_recursive>
 80195c8:	9901      	ldr	r1, [sp, #4]
 80195ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195ce:	0498      	lsls	r0, r3, #18
 80195d0:	d406      	bmi.n	80195e0 <_fputwc_r+0x32>
 80195d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80195d6:	81a3      	strh	r3, [r4, #12]
 80195d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80195de:	6663      	str	r3, [r4, #100]	; 0x64
 80195e0:	4622      	mov	r2, r4
 80195e2:	4628      	mov	r0, r5
 80195e4:	f7ff ffa2 	bl	801952c <__fputwc>
 80195e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195ea:	07da      	lsls	r2, r3, #31
 80195ec:	4605      	mov	r5, r0
 80195ee:	d405      	bmi.n	80195fc <_fputwc_r+0x4e>
 80195f0:	89a3      	ldrh	r3, [r4, #12]
 80195f2:	059b      	lsls	r3, r3, #22
 80195f4:	d402      	bmi.n	80195fc <_fputwc_r+0x4e>
 80195f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195f8:	f7fe fb79 	bl	8017cee <__retarget_lock_release_recursive>
 80195fc:	4628      	mov	r0, r5
 80195fe:	b003      	add	sp, #12
 8019600:	bd30      	pop	{r4, r5, pc}
	...

08019604 <_fstat_r>:
 8019604:	b538      	push	{r3, r4, r5, lr}
 8019606:	4d07      	ldr	r5, [pc, #28]	; (8019624 <_fstat_r+0x20>)
 8019608:	2300      	movs	r3, #0
 801960a:	4604      	mov	r4, r0
 801960c:	4608      	mov	r0, r1
 801960e:	4611      	mov	r1, r2
 8019610:	602b      	str	r3, [r5, #0]
 8019612:	f7f8 f92a 	bl	801186a <_fstat>
 8019616:	1c43      	adds	r3, r0, #1
 8019618:	d102      	bne.n	8019620 <_fstat_r+0x1c>
 801961a:	682b      	ldr	r3, [r5, #0]
 801961c:	b103      	cbz	r3, 8019620 <_fstat_r+0x1c>
 801961e:	6023      	str	r3, [r4, #0]
 8019620:	bd38      	pop	{r3, r4, r5, pc}
 8019622:	bf00      	nop
 8019624:	2001281c 	.word	0x2001281c

08019628 <__sfvwrite_r>:
 8019628:	6893      	ldr	r3, [r2, #8]
 801962a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801962e:	4606      	mov	r6, r0
 8019630:	460c      	mov	r4, r1
 8019632:	4690      	mov	r8, r2
 8019634:	b91b      	cbnz	r3, 801963e <__sfvwrite_r+0x16>
 8019636:	2000      	movs	r0, #0
 8019638:	b003      	add	sp, #12
 801963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801963e:	898b      	ldrh	r3, [r1, #12]
 8019640:	0718      	lsls	r0, r3, #28
 8019642:	d550      	bpl.n	80196e6 <__sfvwrite_r+0xbe>
 8019644:	690b      	ldr	r3, [r1, #16]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d04d      	beq.n	80196e6 <__sfvwrite_r+0xbe>
 801964a:	89a3      	ldrh	r3, [r4, #12]
 801964c:	f8d8 7000 	ldr.w	r7, [r8]
 8019650:	f013 0902 	ands.w	r9, r3, #2
 8019654:	d16c      	bne.n	8019730 <__sfvwrite_r+0x108>
 8019656:	f013 0301 	ands.w	r3, r3, #1
 801965a:	f000 809c 	beq.w	8019796 <__sfvwrite_r+0x16e>
 801965e:	4648      	mov	r0, r9
 8019660:	46ca      	mov	sl, r9
 8019662:	46cb      	mov	fp, r9
 8019664:	f1bb 0f00 	cmp.w	fp, #0
 8019668:	f000 8103 	beq.w	8019872 <__sfvwrite_r+0x24a>
 801966c:	b950      	cbnz	r0, 8019684 <__sfvwrite_r+0x5c>
 801966e:	465a      	mov	r2, fp
 8019670:	210a      	movs	r1, #10
 8019672:	4650      	mov	r0, sl
 8019674:	f7e6 fdd4 	bl	8000220 <memchr>
 8019678:	2800      	cmp	r0, #0
 801967a:	f000 80ff 	beq.w	801987c <__sfvwrite_r+0x254>
 801967e:	3001      	adds	r0, #1
 8019680:	eba0 090a 	sub.w	r9, r0, sl
 8019684:	6820      	ldr	r0, [r4, #0]
 8019686:	6921      	ldr	r1, [r4, #16]
 8019688:	6963      	ldr	r3, [r4, #20]
 801968a:	45d9      	cmp	r9, fp
 801968c:	464a      	mov	r2, r9
 801968e:	bf28      	it	cs
 8019690:	465a      	movcs	r2, fp
 8019692:	4288      	cmp	r0, r1
 8019694:	f240 80f5 	bls.w	8019882 <__sfvwrite_r+0x25a>
 8019698:	68a5      	ldr	r5, [r4, #8]
 801969a:	441d      	add	r5, r3
 801969c:	42aa      	cmp	r2, r5
 801969e:	f340 80f0 	ble.w	8019882 <__sfvwrite_r+0x25a>
 80196a2:	4651      	mov	r1, sl
 80196a4:	462a      	mov	r2, r5
 80196a6:	f7f9 f9e7 	bl	8012a78 <memmove>
 80196aa:	6823      	ldr	r3, [r4, #0]
 80196ac:	442b      	add	r3, r5
 80196ae:	6023      	str	r3, [r4, #0]
 80196b0:	4621      	mov	r1, r4
 80196b2:	4630      	mov	r0, r6
 80196b4:	f7fd fdc4 	bl	8017240 <_fflush_r>
 80196b8:	2800      	cmp	r0, #0
 80196ba:	d167      	bne.n	801978c <__sfvwrite_r+0x164>
 80196bc:	ebb9 0905 	subs.w	r9, r9, r5
 80196c0:	f040 80f7 	bne.w	80198b2 <__sfvwrite_r+0x28a>
 80196c4:	4621      	mov	r1, r4
 80196c6:	4630      	mov	r0, r6
 80196c8:	f7fd fdba 	bl	8017240 <_fflush_r>
 80196cc:	2800      	cmp	r0, #0
 80196ce:	d15d      	bne.n	801978c <__sfvwrite_r+0x164>
 80196d0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80196d4:	44aa      	add	sl, r5
 80196d6:	ebab 0b05 	sub.w	fp, fp, r5
 80196da:	1b55      	subs	r5, r2, r5
 80196dc:	f8c8 5008 	str.w	r5, [r8, #8]
 80196e0:	2d00      	cmp	r5, #0
 80196e2:	d1bf      	bne.n	8019664 <__sfvwrite_r+0x3c>
 80196e4:	e7a7      	b.n	8019636 <__sfvwrite_r+0xe>
 80196e6:	4621      	mov	r1, r4
 80196e8:	4630      	mov	r0, r6
 80196ea:	f7fc fe4b 	bl	8016384 <__swsetup_r>
 80196ee:	2800      	cmp	r0, #0
 80196f0:	d0ab      	beq.n	801964a <__sfvwrite_r+0x22>
 80196f2:	f04f 30ff 	mov.w	r0, #4294967295
 80196f6:	e79f      	b.n	8019638 <__sfvwrite_r+0x10>
 80196f8:	e9d7 b900 	ldrd	fp, r9, [r7]
 80196fc:	3708      	adds	r7, #8
 80196fe:	f1b9 0f00 	cmp.w	r9, #0
 8019702:	d0f9      	beq.n	80196f8 <__sfvwrite_r+0xd0>
 8019704:	45d1      	cmp	r9, sl
 8019706:	464b      	mov	r3, r9
 8019708:	69e1      	ldr	r1, [r4, #28]
 801970a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801970c:	bf28      	it	cs
 801970e:	4653      	movcs	r3, sl
 8019710:	465a      	mov	r2, fp
 8019712:	4630      	mov	r0, r6
 8019714:	47a8      	blx	r5
 8019716:	2800      	cmp	r0, #0
 8019718:	dd38      	ble.n	801978c <__sfvwrite_r+0x164>
 801971a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801971e:	4483      	add	fp, r0
 8019720:	eba9 0900 	sub.w	r9, r9, r0
 8019724:	1a18      	subs	r0, r3, r0
 8019726:	f8c8 0008 	str.w	r0, [r8, #8]
 801972a:	2800      	cmp	r0, #0
 801972c:	d1e7      	bne.n	80196fe <__sfvwrite_r+0xd6>
 801972e:	e782      	b.n	8019636 <__sfvwrite_r+0xe>
 8019730:	f04f 0b00 	mov.w	fp, #0
 8019734:	f8df a180 	ldr.w	sl, [pc, #384]	; 80198b8 <__sfvwrite_r+0x290>
 8019738:	46d9      	mov	r9, fp
 801973a:	e7e0      	b.n	80196fe <__sfvwrite_r+0xd6>
 801973c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8019740:	3708      	adds	r7, #8
 8019742:	f1ba 0f00 	cmp.w	sl, #0
 8019746:	d0f9      	beq.n	801973c <__sfvwrite_r+0x114>
 8019748:	89a3      	ldrh	r3, [r4, #12]
 801974a:	68a2      	ldr	r2, [r4, #8]
 801974c:	6820      	ldr	r0, [r4, #0]
 801974e:	0599      	lsls	r1, r3, #22
 8019750:	d563      	bpl.n	801981a <__sfvwrite_r+0x1f2>
 8019752:	4552      	cmp	r2, sl
 8019754:	d836      	bhi.n	80197c4 <__sfvwrite_r+0x19c>
 8019756:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801975a:	d033      	beq.n	80197c4 <__sfvwrite_r+0x19c>
 801975c:	6921      	ldr	r1, [r4, #16]
 801975e:	6965      	ldr	r5, [r4, #20]
 8019760:	eba0 0b01 	sub.w	fp, r0, r1
 8019764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801976c:	f10b 0201 	add.w	r2, fp, #1
 8019770:	106d      	asrs	r5, r5, #1
 8019772:	4452      	add	r2, sl
 8019774:	4295      	cmp	r5, r2
 8019776:	bf38      	it	cc
 8019778:	4615      	movcc	r5, r2
 801977a:	055b      	lsls	r3, r3, #21
 801977c:	d53d      	bpl.n	80197fa <__sfvwrite_r+0x1d2>
 801977e:	4629      	mov	r1, r5
 8019780:	4630      	mov	r0, r6
 8019782:	f7f8 ff1b 	bl	80125bc <_malloc_r>
 8019786:	b948      	cbnz	r0, 801979c <__sfvwrite_r+0x174>
 8019788:	230c      	movs	r3, #12
 801978a:	6033      	str	r3, [r6, #0]
 801978c:	89a3      	ldrh	r3, [r4, #12]
 801978e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019792:	81a3      	strh	r3, [r4, #12]
 8019794:	e7ad      	b.n	80196f2 <__sfvwrite_r+0xca>
 8019796:	4699      	mov	r9, r3
 8019798:	469a      	mov	sl, r3
 801979a:	e7d2      	b.n	8019742 <__sfvwrite_r+0x11a>
 801979c:	465a      	mov	r2, fp
 801979e:	6921      	ldr	r1, [r4, #16]
 80197a0:	9001      	str	r0, [sp, #4]
 80197a2:	f7f9 f95b 	bl	8012a5c <memcpy>
 80197a6:	89a2      	ldrh	r2, [r4, #12]
 80197a8:	9b01      	ldr	r3, [sp, #4]
 80197aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80197ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80197b2:	81a2      	strh	r2, [r4, #12]
 80197b4:	6123      	str	r3, [r4, #16]
 80197b6:	6165      	str	r5, [r4, #20]
 80197b8:	445b      	add	r3, fp
 80197ba:	eba5 050b 	sub.w	r5, r5, fp
 80197be:	6023      	str	r3, [r4, #0]
 80197c0:	4652      	mov	r2, sl
 80197c2:	60a5      	str	r5, [r4, #8]
 80197c4:	4552      	cmp	r2, sl
 80197c6:	bf28      	it	cs
 80197c8:	4652      	movcs	r2, sl
 80197ca:	6820      	ldr	r0, [r4, #0]
 80197cc:	9201      	str	r2, [sp, #4]
 80197ce:	4649      	mov	r1, r9
 80197d0:	f7f9 f952 	bl	8012a78 <memmove>
 80197d4:	68a3      	ldr	r3, [r4, #8]
 80197d6:	9a01      	ldr	r2, [sp, #4]
 80197d8:	1a9b      	subs	r3, r3, r2
 80197da:	60a3      	str	r3, [r4, #8]
 80197dc:	6823      	ldr	r3, [r4, #0]
 80197de:	441a      	add	r2, r3
 80197e0:	4655      	mov	r5, sl
 80197e2:	6022      	str	r2, [r4, #0]
 80197e4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80197e8:	44a9      	add	r9, r5
 80197ea:	ebaa 0a05 	sub.w	sl, sl, r5
 80197ee:	1b45      	subs	r5, r0, r5
 80197f0:	f8c8 5008 	str.w	r5, [r8, #8]
 80197f4:	2d00      	cmp	r5, #0
 80197f6:	d1a4      	bne.n	8019742 <__sfvwrite_r+0x11a>
 80197f8:	e71d      	b.n	8019636 <__sfvwrite_r+0xe>
 80197fa:	462a      	mov	r2, r5
 80197fc:	4630      	mov	r0, r6
 80197fe:	f000 f891 	bl	8019924 <_realloc_r>
 8019802:	4603      	mov	r3, r0
 8019804:	2800      	cmp	r0, #0
 8019806:	d1d5      	bne.n	80197b4 <__sfvwrite_r+0x18c>
 8019808:	6921      	ldr	r1, [r4, #16]
 801980a:	4630      	mov	r0, r6
 801980c:	f7fd fe14 	bl	8017438 <_free_r>
 8019810:	89a3      	ldrh	r3, [r4, #12]
 8019812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019816:	81a3      	strh	r3, [r4, #12]
 8019818:	e7b6      	b.n	8019788 <__sfvwrite_r+0x160>
 801981a:	6923      	ldr	r3, [r4, #16]
 801981c:	4283      	cmp	r3, r0
 801981e:	d302      	bcc.n	8019826 <__sfvwrite_r+0x1fe>
 8019820:	6961      	ldr	r1, [r4, #20]
 8019822:	4551      	cmp	r1, sl
 8019824:	d915      	bls.n	8019852 <__sfvwrite_r+0x22a>
 8019826:	4552      	cmp	r2, sl
 8019828:	bf28      	it	cs
 801982a:	4652      	movcs	r2, sl
 801982c:	4649      	mov	r1, r9
 801982e:	4615      	mov	r5, r2
 8019830:	f7f9 f922 	bl	8012a78 <memmove>
 8019834:	68a3      	ldr	r3, [r4, #8]
 8019836:	6822      	ldr	r2, [r4, #0]
 8019838:	1b5b      	subs	r3, r3, r5
 801983a:	442a      	add	r2, r5
 801983c:	60a3      	str	r3, [r4, #8]
 801983e:	6022      	str	r2, [r4, #0]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d1cf      	bne.n	80197e4 <__sfvwrite_r+0x1bc>
 8019844:	4621      	mov	r1, r4
 8019846:	4630      	mov	r0, r6
 8019848:	f7fd fcfa 	bl	8017240 <_fflush_r>
 801984c:	2800      	cmp	r0, #0
 801984e:	d0c9      	beq.n	80197e4 <__sfvwrite_r+0x1bc>
 8019850:	e79c      	b.n	801978c <__sfvwrite_r+0x164>
 8019852:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019856:	459a      	cmp	sl, r3
 8019858:	bf38      	it	cc
 801985a:	4653      	movcc	r3, sl
 801985c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801985e:	fb93 f3f1 	sdiv	r3, r3, r1
 8019862:	464a      	mov	r2, r9
 8019864:	434b      	muls	r3, r1
 8019866:	4630      	mov	r0, r6
 8019868:	69e1      	ldr	r1, [r4, #28]
 801986a:	47a8      	blx	r5
 801986c:	1e05      	subs	r5, r0, #0
 801986e:	dcb9      	bgt.n	80197e4 <__sfvwrite_r+0x1bc>
 8019870:	e78c      	b.n	801978c <__sfvwrite_r+0x164>
 8019872:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8019876:	2000      	movs	r0, #0
 8019878:	3708      	adds	r7, #8
 801987a:	e6f3      	b.n	8019664 <__sfvwrite_r+0x3c>
 801987c:	f10b 0901 	add.w	r9, fp, #1
 8019880:	e700      	b.n	8019684 <__sfvwrite_r+0x5c>
 8019882:	4293      	cmp	r3, r2
 8019884:	dc08      	bgt.n	8019898 <__sfvwrite_r+0x270>
 8019886:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019888:	69e1      	ldr	r1, [r4, #28]
 801988a:	4652      	mov	r2, sl
 801988c:	4630      	mov	r0, r6
 801988e:	47a8      	blx	r5
 8019890:	1e05      	subs	r5, r0, #0
 8019892:	f73f af13 	bgt.w	80196bc <__sfvwrite_r+0x94>
 8019896:	e779      	b.n	801978c <__sfvwrite_r+0x164>
 8019898:	4651      	mov	r1, sl
 801989a:	9201      	str	r2, [sp, #4]
 801989c:	f7f9 f8ec 	bl	8012a78 <memmove>
 80198a0:	9a01      	ldr	r2, [sp, #4]
 80198a2:	68a3      	ldr	r3, [r4, #8]
 80198a4:	1a9b      	subs	r3, r3, r2
 80198a6:	60a3      	str	r3, [r4, #8]
 80198a8:	6823      	ldr	r3, [r4, #0]
 80198aa:	4413      	add	r3, r2
 80198ac:	6023      	str	r3, [r4, #0]
 80198ae:	4615      	mov	r5, r2
 80198b0:	e704      	b.n	80196bc <__sfvwrite_r+0x94>
 80198b2:	2001      	movs	r0, #1
 80198b4:	e70c      	b.n	80196d0 <__sfvwrite_r+0xa8>
 80198b6:	bf00      	nop
 80198b8:	7ffffc00 	.word	0x7ffffc00

080198bc <_isatty_r>:
 80198bc:	b538      	push	{r3, r4, r5, lr}
 80198be:	4d06      	ldr	r5, [pc, #24]	; (80198d8 <_isatty_r+0x1c>)
 80198c0:	2300      	movs	r3, #0
 80198c2:	4604      	mov	r4, r0
 80198c4:	4608      	mov	r0, r1
 80198c6:	602b      	str	r3, [r5, #0]
 80198c8:	f7f7 ffd4 	bl	8011874 <_isatty>
 80198cc:	1c43      	adds	r3, r0, #1
 80198ce:	d102      	bne.n	80198d6 <_isatty_r+0x1a>
 80198d0:	682b      	ldr	r3, [r5, #0]
 80198d2:	b103      	cbz	r3, 80198d6 <_isatty_r+0x1a>
 80198d4:	6023      	str	r3, [r4, #0]
 80198d6:	bd38      	pop	{r3, r4, r5, pc}
 80198d8:	2001281c 	.word	0x2001281c

080198dc <_lseek_r>:
 80198dc:	b538      	push	{r3, r4, r5, lr}
 80198de:	4d07      	ldr	r5, [pc, #28]	; (80198fc <_lseek_r+0x20>)
 80198e0:	4604      	mov	r4, r0
 80198e2:	4608      	mov	r0, r1
 80198e4:	4611      	mov	r1, r2
 80198e6:	2200      	movs	r2, #0
 80198e8:	602a      	str	r2, [r5, #0]
 80198ea:	461a      	mov	r2, r3
 80198ec:	f7f7 ffc4 	bl	8011878 <_lseek>
 80198f0:	1c43      	adds	r3, r0, #1
 80198f2:	d102      	bne.n	80198fa <_lseek_r+0x1e>
 80198f4:	682b      	ldr	r3, [r5, #0]
 80198f6:	b103      	cbz	r3, 80198fa <_lseek_r+0x1e>
 80198f8:	6023      	str	r3, [r4, #0]
 80198fa:	bd38      	pop	{r3, r4, r5, pc}
 80198fc:	2001281c 	.word	0x2001281c

08019900 <_read_r>:
 8019900:	b538      	push	{r3, r4, r5, lr}
 8019902:	4d07      	ldr	r5, [pc, #28]	; (8019920 <_read_r+0x20>)
 8019904:	4604      	mov	r4, r0
 8019906:	4608      	mov	r0, r1
 8019908:	4611      	mov	r1, r2
 801990a:	2200      	movs	r2, #0
 801990c:	602a      	str	r2, [r5, #0]
 801990e:	461a      	mov	r2, r3
 8019910:	f7f7 ff6c 	bl	80117ec <_read>
 8019914:	1c43      	adds	r3, r0, #1
 8019916:	d102      	bne.n	801991e <_read_r+0x1e>
 8019918:	682b      	ldr	r3, [r5, #0]
 801991a:	b103      	cbz	r3, 801991e <_read_r+0x1e>
 801991c:	6023      	str	r3, [r4, #0]
 801991e:	bd38      	pop	{r3, r4, r5, pc}
 8019920:	2001281c 	.word	0x2001281c

08019924 <_realloc_r>:
 8019924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019928:	4681      	mov	r9, r0
 801992a:	460c      	mov	r4, r1
 801992c:	b929      	cbnz	r1, 801993a <_realloc_r+0x16>
 801992e:	4611      	mov	r1, r2
 8019930:	b003      	add	sp, #12
 8019932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019936:	f7f8 be41 	b.w	80125bc <_malloc_r>
 801993a:	9201      	str	r2, [sp, #4]
 801993c:	f7f9 f8be 	bl	8012abc <__malloc_lock>
 8019940:	9a01      	ldr	r2, [sp, #4]
 8019942:	f102 080b 	add.w	r8, r2, #11
 8019946:	f1b8 0f16 	cmp.w	r8, #22
 801994a:	d90b      	bls.n	8019964 <_realloc_r+0x40>
 801994c:	f038 0807 	bics.w	r8, r8, #7
 8019950:	d50a      	bpl.n	8019968 <_realloc_r+0x44>
 8019952:	230c      	movs	r3, #12
 8019954:	f8c9 3000 	str.w	r3, [r9]
 8019958:	f04f 0b00 	mov.w	fp, #0
 801995c:	4658      	mov	r0, fp
 801995e:	b003      	add	sp, #12
 8019960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019964:	f04f 0810 	mov.w	r8, #16
 8019968:	4590      	cmp	r8, r2
 801996a:	d3f2      	bcc.n	8019952 <_realloc_r+0x2e>
 801996c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8019970:	f025 0603 	bic.w	r6, r5, #3
 8019974:	45b0      	cmp	r8, r6
 8019976:	f1a4 0a08 	sub.w	sl, r4, #8
 801997a:	f340 8170 	ble.w	8019c5e <_realloc_r+0x33a>
 801997e:	48a9      	ldr	r0, [pc, #676]	; (8019c24 <_realloc_r+0x300>)
 8019980:	9001      	str	r0, [sp, #4]
 8019982:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8019986:	eb0a 0306 	add.w	r3, sl, r6
 801998a:	459c      	cmp	ip, r3
 801998c:	6859      	ldr	r1, [r3, #4]
 801998e:	d005      	beq.n	801999c <_realloc_r+0x78>
 8019990:	f021 0001 	bic.w	r0, r1, #1
 8019994:	4418      	add	r0, r3
 8019996:	6840      	ldr	r0, [r0, #4]
 8019998:	07c7      	lsls	r7, r0, #31
 801999a:	d427      	bmi.n	80199ec <_realloc_r+0xc8>
 801999c:	f021 0103 	bic.w	r1, r1, #3
 80199a0:	459c      	cmp	ip, r3
 80199a2:	eb06 0701 	add.w	r7, r6, r1
 80199a6:	d119      	bne.n	80199dc <_realloc_r+0xb8>
 80199a8:	f108 0010 	add.w	r0, r8, #16
 80199ac:	42b8      	cmp	r0, r7
 80199ae:	dc1f      	bgt.n	80199f0 <_realloc_r+0xcc>
 80199b0:	eb0a 0308 	add.w	r3, sl, r8
 80199b4:	9a01      	ldr	r2, [sp, #4]
 80199b6:	eba7 0708 	sub.w	r7, r7, r8
 80199ba:	f047 0701 	orr.w	r7, r7, #1
 80199be:	6093      	str	r3, [r2, #8]
 80199c0:	605f      	str	r7, [r3, #4]
 80199c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80199c6:	f003 0301 	and.w	r3, r3, #1
 80199ca:	ea43 0308 	orr.w	r3, r3, r8
 80199ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80199d2:	4648      	mov	r0, r9
 80199d4:	f7f9 f878 	bl	8012ac8 <__malloc_unlock>
 80199d8:	46a3      	mov	fp, r4
 80199da:	e7bf      	b.n	801995c <_realloc_r+0x38>
 80199dc:	45b8      	cmp	r8, r7
 80199de:	dc07      	bgt.n	80199f0 <_realloc_r+0xcc>
 80199e0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80199e4:	60da      	str	r2, [r3, #12]
 80199e6:	6093      	str	r3, [r2, #8]
 80199e8:	4655      	mov	r5, sl
 80199ea:	e07f      	b.n	8019aec <_realloc_r+0x1c8>
 80199ec:	2100      	movs	r1, #0
 80199ee:	460b      	mov	r3, r1
 80199f0:	07e8      	lsls	r0, r5, #31
 80199f2:	f100 80e5 	bmi.w	8019bc0 <_realloc_r+0x29c>
 80199f6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80199fa:	ebaa 0505 	sub.w	r5, sl, r5
 80199fe:	6868      	ldr	r0, [r5, #4]
 8019a00:	f020 0003 	bic.w	r0, r0, #3
 8019a04:	eb00 0b06 	add.w	fp, r0, r6
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	f000 80a5 	beq.w	8019b58 <_realloc_r+0x234>
 8019a0e:	459c      	cmp	ip, r3
 8019a10:	eb01 070b 	add.w	r7, r1, fp
 8019a14:	d14a      	bne.n	8019aac <_realloc_r+0x188>
 8019a16:	f108 0310 	add.w	r3, r8, #16
 8019a1a:	42bb      	cmp	r3, r7
 8019a1c:	f300 809c 	bgt.w	8019b58 <_realloc_r+0x234>
 8019a20:	46ab      	mov	fp, r5
 8019a22:	68eb      	ldr	r3, [r5, #12]
 8019a24:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8019a28:	60d3      	str	r3, [r2, #12]
 8019a2a:	609a      	str	r2, [r3, #8]
 8019a2c:	1f32      	subs	r2, r6, #4
 8019a2e:	2a24      	cmp	r2, #36	; 0x24
 8019a30:	d837      	bhi.n	8019aa2 <_realloc_r+0x17e>
 8019a32:	2a13      	cmp	r2, #19
 8019a34:	d933      	bls.n	8019a9e <_realloc_r+0x17a>
 8019a36:	6823      	ldr	r3, [r4, #0]
 8019a38:	60ab      	str	r3, [r5, #8]
 8019a3a:	6863      	ldr	r3, [r4, #4]
 8019a3c:	60eb      	str	r3, [r5, #12]
 8019a3e:	2a1b      	cmp	r2, #27
 8019a40:	d81b      	bhi.n	8019a7a <_realloc_r+0x156>
 8019a42:	3408      	adds	r4, #8
 8019a44:	f105 0310 	add.w	r3, r5, #16
 8019a48:	6822      	ldr	r2, [r4, #0]
 8019a4a:	601a      	str	r2, [r3, #0]
 8019a4c:	6862      	ldr	r2, [r4, #4]
 8019a4e:	605a      	str	r2, [r3, #4]
 8019a50:	68a2      	ldr	r2, [r4, #8]
 8019a52:	609a      	str	r2, [r3, #8]
 8019a54:	eb05 0308 	add.w	r3, r5, r8
 8019a58:	9a01      	ldr	r2, [sp, #4]
 8019a5a:	eba7 0708 	sub.w	r7, r7, r8
 8019a5e:	f047 0701 	orr.w	r7, r7, #1
 8019a62:	6093      	str	r3, [r2, #8]
 8019a64:	605f      	str	r7, [r3, #4]
 8019a66:	686b      	ldr	r3, [r5, #4]
 8019a68:	f003 0301 	and.w	r3, r3, #1
 8019a6c:	ea43 0308 	orr.w	r3, r3, r8
 8019a70:	606b      	str	r3, [r5, #4]
 8019a72:	4648      	mov	r0, r9
 8019a74:	f7f9 f828 	bl	8012ac8 <__malloc_unlock>
 8019a78:	e770      	b.n	801995c <_realloc_r+0x38>
 8019a7a:	68a3      	ldr	r3, [r4, #8]
 8019a7c:	612b      	str	r3, [r5, #16]
 8019a7e:	68e3      	ldr	r3, [r4, #12]
 8019a80:	616b      	str	r3, [r5, #20]
 8019a82:	2a24      	cmp	r2, #36	; 0x24
 8019a84:	bf01      	itttt	eq
 8019a86:	6923      	ldreq	r3, [r4, #16]
 8019a88:	61ab      	streq	r3, [r5, #24]
 8019a8a:	6962      	ldreq	r2, [r4, #20]
 8019a8c:	61ea      	streq	r2, [r5, #28]
 8019a8e:	bf19      	ittee	ne
 8019a90:	3410      	addne	r4, #16
 8019a92:	f105 0318 	addne.w	r3, r5, #24
 8019a96:	f105 0320 	addeq.w	r3, r5, #32
 8019a9a:	3418      	addeq	r4, #24
 8019a9c:	e7d4      	b.n	8019a48 <_realloc_r+0x124>
 8019a9e:	465b      	mov	r3, fp
 8019aa0:	e7d2      	b.n	8019a48 <_realloc_r+0x124>
 8019aa2:	4621      	mov	r1, r4
 8019aa4:	4658      	mov	r0, fp
 8019aa6:	f7f8 ffe7 	bl	8012a78 <memmove>
 8019aaa:	e7d3      	b.n	8019a54 <_realloc_r+0x130>
 8019aac:	45b8      	cmp	r8, r7
 8019aae:	dc53      	bgt.n	8019b58 <_realloc_r+0x234>
 8019ab0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8019ab4:	4628      	mov	r0, r5
 8019ab6:	60da      	str	r2, [r3, #12]
 8019ab8:	6093      	str	r3, [r2, #8]
 8019aba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8019abe:	68eb      	ldr	r3, [r5, #12]
 8019ac0:	60d3      	str	r3, [r2, #12]
 8019ac2:	609a      	str	r2, [r3, #8]
 8019ac4:	1f32      	subs	r2, r6, #4
 8019ac6:	2a24      	cmp	r2, #36	; 0x24
 8019ac8:	d842      	bhi.n	8019b50 <_realloc_r+0x22c>
 8019aca:	2a13      	cmp	r2, #19
 8019acc:	d908      	bls.n	8019ae0 <_realloc_r+0x1bc>
 8019ace:	6823      	ldr	r3, [r4, #0]
 8019ad0:	60ab      	str	r3, [r5, #8]
 8019ad2:	6863      	ldr	r3, [r4, #4]
 8019ad4:	60eb      	str	r3, [r5, #12]
 8019ad6:	2a1b      	cmp	r2, #27
 8019ad8:	d828      	bhi.n	8019b2c <_realloc_r+0x208>
 8019ada:	3408      	adds	r4, #8
 8019adc:	f105 0010 	add.w	r0, r5, #16
 8019ae0:	6823      	ldr	r3, [r4, #0]
 8019ae2:	6003      	str	r3, [r0, #0]
 8019ae4:	6863      	ldr	r3, [r4, #4]
 8019ae6:	6043      	str	r3, [r0, #4]
 8019ae8:	68a3      	ldr	r3, [r4, #8]
 8019aea:	6083      	str	r3, [r0, #8]
 8019aec:	686a      	ldr	r2, [r5, #4]
 8019aee:	eba7 0008 	sub.w	r0, r7, r8
 8019af2:	280f      	cmp	r0, #15
 8019af4:	f002 0201 	and.w	r2, r2, #1
 8019af8:	eb05 0307 	add.w	r3, r5, r7
 8019afc:	f240 80b1 	bls.w	8019c62 <_realloc_r+0x33e>
 8019b00:	eb05 0108 	add.w	r1, r5, r8
 8019b04:	ea48 0202 	orr.w	r2, r8, r2
 8019b08:	f040 0001 	orr.w	r0, r0, #1
 8019b0c:	606a      	str	r2, [r5, #4]
 8019b0e:	6048      	str	r0, [r1, #4]
 8019b10:	685a      	ldr	r2, [r3, #4]
 8019b12:	f042 0201 	orr.w	r2, r2, #1
 8019b16:	605a      	str	r2, [r3, #4]
 8019b18:	3108      	adds	r1, #8
 8019b1a:	4648      	mov	r0, r9
 8019b1c:	f7fd fc8c 	bl	8017438 <_free_r>
 8019b20:	4648      	mov	r0, r9
 8019b22:	f7f8 ffd1 	bl	8012ac8 <__malloc_unlock>
 8019b26:	f105 0b08 	add.w	fp, r5, #8
 8019b2a:	e717      	b.n	801995c <_realloc_r+0x38>
 8019b2c:	68a3      	ldr	r3, [r4, #8]
 8019b2e:	612b      	str	r3, [r5, #16]
 8019b30:	68e3      	ldr	r3, [r4, #12]
 8019b32:	616b      	str	r3, [r5, #20]
 8019b34:	2a24      	cmp	r2, #36	; 0x24
 8019b36:	bf01      	itttt	eq
 8019b38:	6923      	ldreq	r3, [r4, #16]
 8019b3a:	61ab      	streq	r3, [r5, #24]
 8019b3c:	6963      	ldreq	r3, [r4, #20]
 8019b3e:	61eb      	streq	r3, [r5, #28]
 8019b40:	bf19      	ittee	ne
 8019b42:	3410      	addne	r4, #16
 8019b44:	f105 0018 	addne.w	r0, r5, #24
 8019b48:	f105 0020 	addeq.w	r0, r5, #32
 8019b4c:	3418      	addeq	r4, #24
 8019b4e:	e7c7      	b.n	8019ae0 <_realloc_r+0x1bc>
 8019b50:	4621      	mov	r1, r4
 8019b52:	f7f8 ff91 	bl	8012a78 <memmove>
 8019b56:	e7c9      	b.n	8019aec <_realloc_r+0x1c8>
 8019b58:	45d8      	cmp	r8, fp
 8019b5a:	dc31      	bgt.n	8019bc0 <_realloc_r+0x29c>
 8019b5c:	4628      	mov	r0, r5
 8019b5e:	68eb      	ldr	r3, [r5, #12]
 8019b60:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8019b64:	60d3      	str	r3, [r2, #12]
 8019b66:	609a      	str	r2, [r3, #8]
 8019b68:	1f32      	subs	r2, r6, #4
 8019b6a:	2a24      	cmp	r2, #36	; 0x24
 8019b6c:	d824      	bhi.n	8019bb8 <_realloc_r+0x294>
 8019b6e:	2a13      	cmp	r2, #19
 8019b70:	d908      	bls.n	8019b84 <_realloc_r+0x260>
 8019b72:	6823      	ldr	r3, [r4, #0]
 8019b74:	60ab      	str	r3, [r5, #8]
 8019b76:	6863      	ldr	r3, [r4, #4]
 8019b78:	60eb      	str	r3, [r5, #12]
 8019b7a:	2a1b      	cmp	r2, #27
 8019b7c:	d80a      	bhi.n	8019b94 <_realloc_r+0x270>
 8019b7e:	3408      	adds	r4, #8
 8019b80:	f105 0010 	add.w	r0, r5, #16
 8019b84:	6823      	ldr	r3, [r4, #0]
 8019b86:	6003      	str	r3, [r0, #0]
 8019b88:	6863      	ldr	r3, [r4, #4]
 8019b8a:	6043      	str	r3, [r0, #4]
 8019b8c:	68a3      	ldr	r3, [r4, #8]
 8019b8e:	6083      	str	r3, [r0, #8]
 8019b90:	465f      	mov	r7, fp
 8019b92:	e7ab      	b.n	8019aec <_realloc_r+0x1c8>
 8019b94:	68a3      	ldr	r3, [r4, #8]
 8019b96:	612b      	str	r3, [r5, #16]
 8019b98:	68e3      	ldr	r3, [r4, #12]
 8019b9a:	616b      	str	r3, [r5, #20]
 8019b9c:	2a24      	cmp	r2, #36	; 0x24
 8019b9e:	bf01      	itttt	eq
 8019ba0:	6923      	ldreq	r3, [r4, #16]
 8019ba2:	61ab      	streq	r3, [r5, #24]
 8019ba4:	6963      	ldreq	r3, [r4, #20]
 8019ba6:	61eb      	streq	r3, [r5, #28]
 8019ba8:	bf19      	ittee	ne
 8019baa:	3410      	addne	r4, #16
 8019bac:	f105 0018 	addne.w	r0, r5, #24
 8019bb0:	f105 0020 	addeq.w	r0, r5, #32
 8019bb4:	3418      	addeq	r4, #24
 8019bb6:	e7e5      	b.n	8019b84 <_realloc_r+0x260>
 8019bb8:	4621      	mov	r1, r4
 8019bba:	f7f8 ff5d 	bl	8012a78 <memmove>
 8019bbe:	e7e7      	b.n	8019b90 <_realloc_r+0x26c>
 8019bc0:	4611      	mov	r1, r2
 8019bc2:	4648      	mov	r0, r9
 8019bc4:	f7f8 fcfa 	bl	80125bc <_malloc_r>
 8019bc8:	4683      	mov	fp, r0
 8019bca:	2800      	cmp	r0, #0
 8019bcc:	f43f af51 	beq.w	8019a72 <_realloc_r+0x14e>
 8019bd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019bd4:	f023 0301 	bic.w	r3, r3, #1
 8019bd8:	4453      	add	r3, sl
 8019bda:	f1a0 0208 	sub.w	r2, r0, #8
 8019bde:	4293      	cmp	r3, r2
 8019be0:	d105      	bne.n	8019bee <_realloc_r+0x2ca>
 8019be2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8019be6:	f027 0703 	bic.w	r7, r7, #3
 8019bea:	4437      	add	r7, r6
 8019bec:	e6fc      	b.n	80199e8 <_realloc_r+0xc4>
 8019bee:	1f32      	subs	r2, r6, #4
 8019bf0:	2a24      	cmp	r2, #36	; 0x24
 8019bf2:	d830      	bhi.n	8019c56 <_realloc_r+0x332>
 8019bf4:	2a13      	cmp	r2, #19
 8019bf6:	d92b      	bls.n	8019c50 <_realloc_r+0x32c>
 8019bf8:	6823      	ldr	r3, [r4, #0]
 8019bfa:	6003      	str	r3, [r0, #0]
 8019bfc:	6863      	ldr	r3, [r4, #4]
 8019bfe:	6043      	str	r3, [r0, #4]
 8019c00:	2a1b      	cmp	r2, #27
 8019c02:	d811      	bhi.n	8019c28 <_realloc_r+0x304>
 8019c04:	f104 0208 	add.w	r2, r4, #8
 8019c08:	f100 0308 	add.w	r3, r0, #8
 8019c0c:	6811      	ldr	r1, [r2, #0]
 8019c0e:	6019      	str	r1, [r3, #0]
 8019c10:	6851      	ldr	r1, [r2, #4]
 8019c12:	6059      	str	r1, [r3, #4]
 8019c14:	6892      	ldr	r2, [r2, #8]
 8019c16:	609a      	str	r2, [r3, #8]
 8019c18:	4621      	mov	r1, r4
 8019c1a:	4648      	mov	r0, r9
 8019c1c:	f7fd fc0c 	bl	8017438 <_free_r>
 8019c20:	e727      	b.n	8019a72 <_realloc_r+0x14e>
 8019c22:	bf00      	nop
 8019c24:	20002de8 	.word	0x20002de8
 8019c28:	68a3      	ldr	r3, [r4, #8]
 8019c2a:	6083      	str	r3, [r0, #8]
 8019c2c:	68e3      	ldr	r3, [r4, #12]
 8019c2e:	60c3      	str	r3, [r0, #12]
 8019c30:	2a24      	cmp	r2, #36	; 0x24
 8019c32:	bf01      	itttt	eq
 8019c34:	6923      	ldreq	r3, [r4, #16]
 8019c36:	6103      	streq	r3, [r0, #16]
 8019c38:	6961      	ldreq	r1, [r4, #20]
 8019c3a:	6141      	streq	r1, [r0, #20]
 8019c3c:	bf19      	ittee	ne
 8019c3e:	f104 0210 	addne.w	r2, r4, #16
 8019c42:	f100 0310 	addne.w	r3, r0, #16
 8019c46:	f104 0218 	addeq.w	r2, r4, #24
 8019c4a:	f100 0318 	addeq.w	r3, r0, #24
 8019c4e:	e7dd      	b.n	8019c0c <_realloc_r+0x2e8>
 8019c50:	4603      	mov	r3, r0
 8019c52:	4622      	mov	r2, r4
 8019c54:	e7da      	b.n	8019c0c <_realloc_r+0x2e8>
 8019c56:	4621      	mov	r1, r4
 8019c58:	f7f8 ff0e 	bl	8012a78 <memmove>
 8019c5c:	e7dc      	b.n	8019c18 <_realloc_r+0x2f4>
 8019c5e:	4637      	mov	r7, r6
 8019c60:	e6c2      	b.n	80199e8 <_realloc_r+0xc4>
 8019c62:	4317      	orrs	r7, r2
 8019c64:	606f      	str	r7, [r5, #4]
 8019c66:	685a      	ldr	r2, [r3, #4]
 8019c68:	f042 0201 	orr.w	r2, r2, #1
 8019c6c:	605a      	str	r2, [r3, #4]
 8019c6e:	e757      	b.n	8019b20 <_realloc_r+0x1fc>

08019c70 <__swbuf_r>:
 8019c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c72:	460e      	mov	r6, r1
 8019c74:	4614      	mov	r4, r2
 8019c76:	4605      	mov	r5, r0
 8019c78:	b118      	cbz	r0, 8019c82 <__swbuf_r+0x12>
 8019c7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019c7c:	b90b      	cbnz	r3, 8019c82 <__swbuf_r+0x12>
 8019c7e:	f7fd fb4b 	bl	8017318 <__sinit>
 8019c82:	69a3      	ldr	r3, [r4, #24]
 8019c84:	60a3      	str	r3, [r4, #8]
 8019c86:	89a3      	ldrh	r3, [r4, #12]
 8019c88:	0719      	lsls	r1, r3, #28
 8019c8a:	d529      	bpl.n	8019ce0 <__swbuf_r+0x70>
 8019c8c:	6923      	ldr	r3, [r4, #16]
 8019c8e:	b33b      	cbz	r3, 8019ce0 <__swbuf_r+0x70>
 8019c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c94:	b2f6      	uxtb	r6, r6
 8019c96:	049a      	lsls	r2, r3, #18
 8019c98:	4637      	mov	r7, r6
 8019c9a:	d52a      	bpl.n	8019cf2 <__swbuf_r+0x82>
 8019c9c:	6823      	ldr	r3, [r4, #0]
 8019c9e:	6920      	ldr	r0, [r4, #16]
 8019ca0:	1a18      	subs	r0, r3, r0
 8019ca2:	6963      	ldr	r3, [r4, #20]
 8019ca4:	4283      	cmp	r3, r0
 8019ca6:	dc04      	bgt.n	8019cb2 <__swbuf_r+0x42>
 8019ca8:	4621      	mov	r1, r4
 8019caa:	4628      	mov	r0, r5
 8019cac:	f7fd fac8 	bl	8017240 <_fflush_r>
 8019cb0:	b9e0      	cbnz	r0, 8019cec <__swbuf_r+0x7c>
 8019cb2:	68a3      	ldr	r3, [r4, #8]
 8019cb4:	3b01      	subs	r3, #1
 8019cb6:	60a3      	str	r3, [r4, #8]
 8019cb8:	6823      	ldr	r3, [r4, #0]
 8019cba:	1c5a      	adds	r2, r3, #1
 8019cbc:	6022      	str	r2, [r4, #0]
 8019cbe:	701e      	strb	r6, [r3, #0]
 8019cc0:	6962      	ldr	r2, [r4, #20]
 8019cc2:	1c43      	adds	r3, r0, #1
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	d004      	beq.n	8019cd2 <__swbuf_r+0x62>
 8019cc8:	89a3      	ldrh	r3, [r4, #12]
 8019cca:	07db      	lsls	r3, r3, #31
 8019ccc:	d506      	bpl.n	8019cdc <__swbuf_r+0x6c>
 8019cce:	2e0a      	cmp	r6, #10
 8019cd0:	d104      	bne.n	8019cdc <__swbuf_r+0x6c>
 8019cd2:	4621      	mov	r1, r4
 8019cd4:	4628      	mov	r0, r5
 8019cd6:	f7fd fab3 	bl	8017240 <_fflush_r>
 8019cda:	b938      	cbnz	r0, 8019cec <__swbuf_r+0x7c>
 8019cdc:	4638      	mov	r0, r7
 8019cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ce0:	4621      	mov	r1, r4
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	f7fc fb4e 	bl	8016384 <__swsetup_r>
 8019ce8:	2800      	cmp	r0, #0
 8019cea:	d0d1      	beq.n	8019c90 <__swbuf_r+0x20>
 8019cec:	f04f 37ff 	mov.w	r7, #4294967295
 8019cf0:	e7f4      	b.n	8019cdc <__swbuf_r+0x6c>
 8019cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019cf6:	81a3      	strh	r3, [r4, #12]
 8019cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019cfe:	6663      	str	r3, [r4, #100]	; 0x64
 8019d00:	e7cc      	b.n	8019c9c <__swbuf_r+0x2c>
	...

08019d04 <_wcrtomb_r>:
 8019d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d06:	4c09      	ldr	r4, [pc, #36]	; (8019d2c <_wcrtomb_r+0x28>)
 8019d08:	b085      	sub	sp, #20
 8019d0a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8019d0e:	4605      	mov	r5, r0
 8019d10:	461e      	mov	r6, r3
 8019d12:	b909      	cbnz	r1, 8019d18 <_wcrtomb_r+0x14>
 8019d14:	460a      	mov	r2, r1
 8019d16:	a901      	add	r1, sp, #4
 8019d18:	47b8      	blx	r7
 8019d1a:	1c43      	adds	r3, r0, #1
 8019d1c:	bf01      	itttt	eq
 8019d1e:	2300      	moveq	r3, #0
 8019d20:	6033      	streq	r3, [r6, #0]
 8019d22:	238a      	moveq	r3, #138	; 0x8a
 8019d24:	602b      	streq	r3, [r5, #0]
 8019d26:	b005      	add	sp, #20
 8019d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	20003200 	.word	0x20003200

08019d30 <abort>:
 8019d30:	b508      	push	{r3, lr}
 8019d32:	2006      	movs	r0, #6
 8019d34:	f000 f82c 	bl	8019d90 <raise>
 8019d38:	2001      	movs	r0, #1
 8019d3a:	f7f7 fd51 	bl	80117e0 <_exit>

08019d3e <_raise_r>:
 8019d3e:	291f      	cmp	r1, #31
 8019d40:	b538      	push	{r3, r4, r5, lr}
 8019d42:	4604      	mov	r4, r0
 8019d44:	460d      	mov	r5, r1
 8019d46:	d904      	bls.n	8019d52 <_raise_r+0x14>
 8019d48:	2316      	movs	r3, #22
 8019d4a:	6003      	str	r3, [r0, #0]
 8019d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d50:	bd38      	pop	{r3, r4, r5, pc}
 8019d52:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8019d56:	b112      	cbz	r2, 8019d5e <_raise_r+0x20>
 8019d58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019d5c:	b94b      	cbnz	r3, 8019d72 <_raise_r+0x34>
 8019d5e:	4620      	mov	r0, r4
 8019d60:	f000 f830 	bl	8019dc4 <_getpid_r>
 8019d64:	462a      	mov	r2, r5
 8019d66:	4601      	mov	r1, r0
 8019d68:	4620      	mov	r0, r4
 8019d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d6e:	f000 b817 	b.w	8019da0 <_kill_r>
 8019d72:	2b01      	cmp	r3, #1
 8019d74:	d00a      	beq.n	8019d8c <_raise_r+0x4e>
 8019d76:	1c59      	adds	r1, r3, #1
 8019d78:	d103      	bne.n	8019d82 <_raise_r+0x44>
 8019d7a:	2316      	movs	r3, #22
 8019d7c:	6003      	str	r3, [r0, #0]
 8019d7e:	2001      	movs	r0, #1
 8019d80:	e7e6      	b.n	8019d50 <_raise_r+0x12>
 8019d82:	2400      	movs	r4, #0
 8019d84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019d88:	4628      	mov	r0, r5
 8019d8a:	4798      	blx	r3
 8019d8c:	2000      	movs	r0, #0
 8019d8e:	e7df      	b.n	8019d50 <_raise_r+0x12>

08019d90 <raise>:
 8019d90:	4b02      	ldr	r3, [pc, #8]	; (8019d9c <raise+0xc>)
 8019d92:	4601      	mov	r1, r0
 8019d94:	6818      	ldr	r0, [r3, #0]
 8019d96:	f7ff bfd2 	b.w	8019d3e <_raise_r>
 8019d9a:	bf00      	nop
 8019d9c:	200029bc 	.word	0x200029bc

08019da0 <_kill_r>:
 8019da0:	b538      	push	{r3, r4, r5, lr}
 8019da2:	4d07      	ldr	r5, [pc, #28]	; (8019dc0 <_kill_r+0x20>)
 8019da4:	2300      	movs	r3, #0
 8019da6:	4604      	mov	r4, r0
 8019da8:	4608      	mov	r0, r1
 8019daa:	4611      	mov	r1, r2
 8019dac:	602b      	str	r3, [r5, #0]
 8019dae:	f7f7 fd0f 	bl	80117d0 <_kill>
 8019db2:	1c43      	adds	r3, r0, #1
 8019db4:	d102      	bne.n	8019dbc <_kill_r+0x1c>
 8019db6:	682b      	ldr	r3, [r5, #0]
 8019db8:	b103      	cbz	r3, 8019dbc <_kill_r+0x1c>
 8019dba:	6023      	str	r3, [r4, #0]
 8019dbc:	bd38      	pop	{r3, r4, r5, pc}
 8019dbe:	bf00      	nop
 8019dc0:	2001281c 	.word	0x2001281c

08019dc4 <_getpid_r>:
 8019dc4:	f7f7 bd02 	b.w	80117cc <_getpid>

08019dc8 <_init>:
 8019dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dca:	bf00      	nop
 8019dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dce:	bc08      	pop	{r3}
 8019dd0:	469e      	mov	lr, r3
 8019dd2:	4770      	bx	lr

08019dd4 <_fini>:
 8019dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dd6:	bf00      	nop
 8019dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dda:	bc08      	pop	{r3}
 8019ddc:	469e      	mov	lr, r3
 8019dde:	4770      	bx	lr
